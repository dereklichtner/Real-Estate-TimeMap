// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"euTuy":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "138b6a135baa4167";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id1][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"igcvL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
// jshint esversion: 10
// OpenLayers
var _proj = require("ol/proj");
var _control = require("ol/control");
var _geoJSON = require("ol/format/GeoJSON");
var _geoJSONDefault = parcelHelpers.interopDefault(_geoJSON);
var _map = require("ol/Map");
var _mapDefault = parcelHelpers.interopDefault(_map);
var _osm = require("ol/source/OSM");
var _osmDefault = parcelHelpers.interopDefault(_osm);
var _tile = require("ol/layer/Tile");
var _tileDefault = parcelHelpers.interopDefault(_tile);
var _vector = require("ol/source/Vector");
var _vectorDefault = parcelHelpers.interopDefault(_vector);
var _view = require("ol/View");
var _viewDefault = parcelHelpers.interopDefault(_view);
// Custom OpenLayers extensions
var _animateControls = require("./src/animate/animateControls");
var _animatedLayer = require("./src/animate/animatedLayer");
var _animatedLayerDefault = parcelHelpers.interopDefault(_animatedLayer);
var _popup = require("./src/overlay/popup");
var _popupDefault = parcelHelpers.interopDefault(_popup);
//ApexCharts
var _apexcharts = require("apexcharts");
var _apexchartsDefault = parcelHelpers.interopDefault(_apexcharts);
var _chartConfigJs = require("./src/chart/chartConfig.js");
var _chartConfigJsDefault = parcelHelpers.interopDefault(_chartConfigJs);
// MicroModal dialog
var _micromodal = require("micromodal");
var _micromodalDefault = parcelHelpers.interopDefault(_micromodal);
// Import data
var _dateRangeJson = require("./data/dateRange.json");
var _dateRangeJsonDefault = parcelHelpers.interopDefault(_dateRangeJson);
const dataURL = "./data/Metro_zhvi_uc_sfrcondo_tier_0.33_0.67_month_cleaned.json";
// TODO: use brokJSON or other compression method to speed up init json loading
// TODO: list:
// - Misc code cleanup
// - Increase performance -- brokJSon or other compression?
// IDEAS for future versions:
// - color data points on chart same as on map
// - label points with price at high zoom?
// - allow adding multiple data series to chart
// - Search bar: to find and zoom to county or zip code (geocode?)
// - legend for point size and color?
// - chart panel resizable, not static ~33% height
// - Layers panel, w/ median wage, median rent?
// - Refactor: manage app state w/ redux?
// - Periodically get data from Zillow API, process in python backend
// - "Take a tour" mode that flies to a series of locations, sharing interesting facts, e.g. "in 1990, this city jumped like crazy bc monkey pox"
// - Vector tiles, from state to county to zip, both homes and rent -- would animate vector tiles even work(?)
// Initiate MicroModal dialog popup
(0, _micromodalDefault.default).init();
(0, _micromodalDefault.default).show("modal-startup"); // [1]
// Map view parameters:
const mapProj = "EPSG:3857";
const viewParam = {
    center: (0, _proj.fromLonLat)([
        -96,
        36
    ], mapProj),
    zoom: 4.5,
    maxZoom: 7,
    minZoom: 4,
    extent: [
        ...(0, _proj.fromLonLat)([
            -170,
            -45
        ], mapProj),
        ...(0, _proj.fromLonLat)([
            -38,
            83
        ], mapProj), 
    ],
    showFullExtent: true
};
const mapDefaultView = new (0, _viewDefault.default)({
    projection: mapProj,
    ...viewParam
});
const defaultAnimationRate = 4;
const animatedFieldName = "year";
// Housing prices vector layer symbology parameters:
const minPriceRange = 35000;
const midPriceRange = 500000;
const maxPriceRange = 1750000;
const minMarkerSize = 8;
const maxMarkerSize = 55;
// Set housing prices vector layer source
const source = new (0, _vectorDefault.default)({
    attributions: 'Real estate data \xa9 <a href="https://www.zillow.com/research/data/" target="_blank">Zillow</a>. Map design and development by <a href="https://github.com/dereklichtner" target="_blank">Derek T. Lichtner</a>.',
    url: dataURL,
    format: new (0, _geoJSONDefault.default)()
});
// Define housing prices vector layer style
const housePricesStyle = {
    symbol: {
        symbolType: "circle",
        size: [
            "interpolate",
            [
                "linear"
            ],
            [
                "get",
                "value"
            ],
            minPriceRange,
            minMarkerSize,
            maxPriceRange,
            maxMarkerSize, 
        ],
        color: [
            "interpolate",
            [
                "linear"
            ],
            [
                "get",
                "value"
            ],
            minPriceRange,
            "#0f9b50",
            midPriceRange,
            "#9b9b0f",
            maxPriceRange,
            "#9b0f0f", 
        ],
        opacity: 0.5
    }
};
// Create housing prices vector layer
let housePricesLayer = new (0, _animatedLayerDefault.default)({
    source: source,
    style: housePricesStyle,
    animatedField: animatedFieldName
});
// Create basemap tile layer
let basemap = new (0, _tileDefault.default)({
    source: new (0, _osmDefault.default)()
});
// Create popup component for map overlay
popupOverlay = new (0, _popupDefault.default)(housePricesLayer);
// Make attribution control [i] collapsed by default
const attributions = new (0, _control.Attribution)({
    collapsible: true
});
// Init the map container:
const map = new (0, _mapDefault.default)({
    target: "map-container",
    layers: [
        basemap,
        housePricesLayer
    ],
    controls: (0, _control.defaults)({
        attribution: false
    }).extend([
        new (0, _animateControls.PlayControl)(housePricesLayer),
        new (0, _animateControls.NextFrameControl)(housePricesLayer),
        new (0, _animateControls.PrevFrameControl)(housePricesLayer),
        new (0, _animateControls.SliderControl)(housePricesLayer, (0, _dateRangeJsonDefault.default)),
        attributions, 
    ]),
    overlays: [
        popupOverlay
    ],
    view: mapDefaultView
});
// Spinner animation during inital map loading
map.getTargetElement().classList.add("spinner");
// Add event listener to map for showing popup upon clicking a feature
map.on("singleclick", popupOverlay.showPopup.bind(popupOverlay));
// Get array of unique values from field to animate on
// TODO: calculate filterUniqueArray in backend if not already declared
housePricesLayer.animation = {
    ...housePricesLayer.animation,
    animatedFieldUnique: (0, _dateRangeJsonDefault.default)
};
// Create chart for displaying time series of typical house price
popupOverlay.chart = new (0, _apexchartsDefault.default)(document.querySelector("#chart"), (0, _chartConfigJsDefault.default));
// Button for showing/hiding chart
document.querySelector(".toggle-button").addEventListener("click", ()=>{
    document.getElementById("map-canvas").classList.toggle("panel-top-toggle");
    document.getElementById("chart-container").classList.toggle("panel-bottom-toggle");
    document.getElementById("toggle-button").classList.toggle("toggle-button-expanded");
    map.updateSize();
});
// Initialize animation capabilities of layer
housePricesLayer.initAnimation({
    rate: defaultAnimationRate,
    startFrame: 26
});
housePricesLayer.animation.slider.updateSliderValue(housePricesLayer.animation.frame);
// Once map inital load is complete...
map.once("rendercomplete", ()=>{
    // Remove loading spinner
    map.getTargetElement().classList.remove("spinner");
    // Start layer animation
    // housePricesLayer.playAnimation({ rate: defaultAnimationRate });
    // Create popout chart
    popupOverlay.chart.render();
});

},{"ol/proj":"SznqC","ol/control":"6Pehg","ol/format/GeoJSON":"1bsdX","ol/Map":"14YFC","ol/source/OSM":"dmxOv","ol/layer/Tile":"3ytzs","ol/source/Vector":"9w7Fr","ol/View":"8xbkS","./src/animate/animateControls":"5p5Jx","./src/animate/animatedLayer":"h17MZ","./src/overlay/popup":"ljSWI","apexcharts":"cty2q","./src/chart/chartConfig.js":"2LSE6","micromodal":"cjhRo","./data/dateRange.json":"eE3bL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"SznqC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier
 * string or undefined.
 * @typedef {Projection|string|undefined} ProjectionLike
 * @api
 */ /**
 * A transform function accepts an array of input coordinate values, an optional
 * output array, and an optional dimension (default should be 2).  The function
 * transforms the input coordinate values, populates the output array, and
 * returns the output array.
 *
 * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction
 * @api
 */ parcelHelpers.export(exports, "METERS_PER_UNIT", ()=>(0, _unitsJs.METERS_PER_UNIT));
parcelHelpers.export(exports, "Projection", ()=>(0, _projectionJsDefault.default));
/**
 * @param {boolean} [opt_disable = true] Disable console info about `useGeographic()`
 */ parcelHelpers.export(exports, "disableCoordinateWarning", ()=>disableCoordinateWarning);
/**
 * @param {Array<number>} input Input coordinate array.
 * @param {Array<number>} [opt_output] Output array of coordinate values.
 * @param {number} [opt_dimension] Dimension.
 * @return {Array<number>} Output coordinate array (new array, same coordinate
 *     values).
 */ parcelHelpers.export(exports, "cloneTransform", ()=>cloneTransform);
/**
 * @param {Array<number>} input Input coordinate array.
 * @param {Array<number>} [opt_output] Output array of coordinate values.
 * @param {number} [opt_dimension] Dimension.
 * @return {Array<number>} Input coordinate array (same array as input).
 */ parcelHelpers.export(exports, "identityTransform", ()=>identityTransform);
/**
 * Add a Projection object to the list of supported projections that can be
 * looked up by their code.
 *
 * @param {Projection} projection Projection instance.
 * @api
 */ parcelHelpers.export(exports, "addProjection", ()=>addProjection);
/**
 * @param {Array<Projection>} projections Projections.
 */ parcelHelpers.export(exports, "addProjections", ()=>addProjections);
/**
 * Fetches a Projection object for the code specified.
 *
 * @param {ProjectionLike} projectionLike Either a code string which is
 *     a combination of authority and identifier such as "EPSG:4326", or an
 *     existing projection object, or undefined.
 * @return {Projection|null} Projection object, or null if not in list.
 * @api
 */ parcelHelpers.export(exports, "get", ()=>get);
/**
 * Get the resolution of the point in degrees or distance units.
 * For projections with degrees as the unit this will simply return the
 * provided resolution. For other projections the point resolution is
 * by default estimated by transforming the `point` pixel to EPSG:4326,
 * measuring its width and height on the normal sphere,
 * and taking the average of the width and height.
 * A custom function can be provided for a specific projection, either
 * by setting the `getPointResolution` option in the
 * {@link module:ol/proj/Projection~Projection} constructor or by using
 * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing
 * projection object.
 * @param {ProjectionLike} projection The projection.
 * @param {number} resolution Nominal resolution in projection units.
 * @param {import("./coordinate.js").Coordinate} point Point to find adjusted resolution at.
 * @param {import("./proj/Units.js").default} [opt_units] Units to get the point resolution in.
 * Default is the projection's units.
 * @return {number} Point resolution.
 * @api
 */ parcelHelpers.export(exports, "getPointResolution", ()=>getPointResolution);
/**
 * Registers transformation functions that don't alter coordinates. Those allow
 * to transform between projections with equal meaning.
 *
 * @param {Array<Projection>} projections Projections.
 * @api
 */ parcelHelpers.export(exports, "addEquivalentProjections", ()=>addEquivalentProjections);
/**
 * Registers transformation functions to convert coordinates in any projection
 * in projection1 to any projection in projection2.
 *
 * @param {Array<Projection>} projections1 Projections with equal
 *     meaning.
 * @param {Array<Projection>} projections2 Projections with equal
 *     meaning.
 * @param {TransformFunction} forwardTransform Transformation from any
 *   projection in projection1 to any projection in projection2.
 * @param {TransformFunction} inverseTransform Transform from any projection
 *   in projection2 to any projection in projection1..
 */ parcelHelpers.export(exports, "addEquivalentTransforms", ()=>addEquivalentTransforms);
/**
 * Clear all cached projections and transforms.
 */ parcelHelpers.export(exports, "clearAllProjections", ()=>clearAllProjections);
/**
 * @param {Projection|string|undefined} projection Projection.
 * @param {string} defaultCode Default code.
 * @return {Projection} Projection.
 */ parcelHelpers.export(exports, "createProjection", ()=>createProjection);
/**
 * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform
 * function.
 * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} coordTransform Coordinate
 *     transform.
 * @return {TransformFunction} Transform function.
 */ parcelHelpers.export(exports, "createTransformFromCoordinateTransform", ()=>createTransformFromCoordinateTransform);
/**
 * Registers coordinate transform functions to convert coordinates between the
 * source projection and the destination projection.
 * The forward and inverse functions convert coordinate pairs; this function
 * converts these into the functions used internally which also handle
 * extents and coordinate arrays.
 *
 * @param {ProjectionLike} source Source projection.
 * @param {ProjectionLike} destination Destination projection.
 * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} forward The forward transform
 *     function (that is, from the source projection to the destination
 *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
 *     the transformed {@link module:ol/coordinate~Coordinate}.
 * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} inverse The inverse transform
 *     function (that is, from the destination projection to the source
 *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
 *     the transformed {@link module:ol/coordinate~Coordinate}.
 * @api
 */ parcelHelpers.export(exports, "addCoordinateTransforms", ()=>addCoordinateTransforms);
/**
 * Transforms a coordinate from longitude/latitude to a different projection.
 * @param {import("./coordinate.js").Coordinate} coordinate Coordinate as longitude and latitude, i.e.
 *     an array with longitude as 1st and latitude as 2nd element.
 * @param {ProjectionLike} [opt_projection] Target projection. The
 *     default is Web Mercator, i.e. 'EPSG:3857'.
 * @return {import("./coordinate.js").Coordinate} Coordinate projected to the target projection.
 * @api
 */ parcelHelpers.export(exports, "fromLonLat", ()=>fromLonLat);
/**
 * Transforms a coordinate to longitude/latitude.
 * @param {import("./coordinate.js").Coordinate} coordinate Projected coordinate.
 * @param {ProjectionLike} [opt_projection] Projection of the coordinate.
 *     The default is Web Mercator, i.e. 'EPSG:3857'.
 * @return {import("./coordinate.js").Coordinate} Coordinate as longitude and latitude, i.e. an array
 *     with longitude as 1st and latitude as 2nd element.
 * @api
 */ parcelHelpers.export(exports, "toLonLat", ()=>toLonLat);
/**
 * Checks if two projections are the same, that is every coordinate in one
 * projection does represent the same geographic point as the same coordinate in
 * the other projection.
 *
 * @param {Projection} projection1 Projection 1.
 * @param {Projection} projection2 Projection 2.
 * @return {boolean} Equivalent.
 * @api
 */ parcelHelpers.export(exports, "equivalent", ()=>equivalent);
/**
 * Searches in the list of transform functions for the function for converting
 * coordinates from the source projection to the destination projection.
 *
 * @param {Projection} sourceProjection Source Projection object.
 * @param {Projection} destinationProjection Destination Projection
 *     object.
 * @return {TransformFunction} Transform function.
 */ parcelHelpers.export(exports, "getTransformFromProjections", ()=>getTransformFromProjections);
/**
 * Given the projection-like objects, searches for a transformation
 * function to convert a coordinates array from the source projection to the
 * destination projection.
 *
 * @param {ProjectionLike} source Source.
 * @param {ProjectionLike} destination Destination.
 * @return {TransformFunction} Transform function.
 * @api
 */ parcelHelpers.export(exports, "getTransform", ()=>getTransform);
/**
 * Transforms a coordinate from source projection to destination projection.
 * This returns a new coordinate (and does not modify the original).
 *
 * See {@link module:ol/proj.transformExtent} for extent transformation.
 * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its
 * subclasses for geometry transforms.
 *
 * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
 * @param {ProjectionLike} source Source projection-like.
 * @param {ProjectionLike} destination Destination projection-like.
 * @return {import("./coordinate.js").Coordinate} Coordinate.
 * @api
 */ parcelHelpers.export(exports, "transform", ()=>transform);
/**
 * Transforms an extent from source projection to destination projection.  This
 * returns a new extent (and does not modify the original).
 *
 * @param {import("./extent.js").Extent} extent The extent to transform.
 * @param {ProjectionLike} source Source projection-like.
 * @param {ProjectionLike} destination Destination projection-like.
 * @param {number} [opt_stops] Number of stops per side used for the transform.
 * By default only the corners are used.
 * @return {import("./extent.js").Extent} The transformed extent.
 * @api
 */ parcelHelpers.export(exports, "transformExtent", ()=>transformExtent);
/**
 * Transforms the given point to the destination projection.
 *
 * @param {import("./coordinate.js").Coordinate} point Point.
 * @param {Projection} sourceProjection Source projection.
 * @param {Projection} destinationProjection Destination projection.
 * @return {import("./coordinate.js").Coordinate} Point.
 */ parcelHelpers.export(exports, "transformWithProjections", ()=>transformWithProjections);
/**
 * Set the projection for coordinates supplied from and returned by API methods.
 * This includes all API methods except for those interacting with tile grids.
 * @param {ProjectionLike} projection The user projection.
 * @api
 */ parcelHelpers.export(exports, "setUserProjection", ()=>setUserProjection);
/**
 * Clear the user projection if set.
 * @api
 */ parcelHelpers.export(exports, "clearUserProjection", ()=>clearUserProjection);
/**
 * Get the projection for coordinates supplied from and returned by API methods.
 * Note that this method is not yet a part of the stable API.  Support for user
 * projections is not yet complete and should be considered experimental.
 * @return {Projection|null} The user projection (or null if not set).
 * @api
 */ parcelHelpers.export(exports, "getUserProjection", ()=>getUserProjection);
/**
 * Use geographic coordinates (WGS-84 datum) in API methods.  This includes all API
 * methods except for those interacting with tile grids.
 * @api
 */ parcelHelpers.export(exports, "useGeographic", ()=>useGeographic);
/**
 * Return a coordinate transformed into the user projection.  If no user projection
 * is set, the original coordinate is returned.
 * @param {Array<number>} coordinate Input coordinate.
 * @param {ProjectionLike} sourceProjection The input coordinate projection.
 * @return {Array<number>} The input coordinate in the user projection.
 */ parcelHelpers.export(exports, "toUserCoordinate", ()=>toUserCoordinate);
/**
 * Return a coordinate transformed from the user projection.  If no user projection
 * is set, the original coordinate is returned.
 * @param {Array<number>} coordinate Input coordinate.
 * @param {ProjectionLike} destProjection The destination projection.
 * @return {Array<number>} The input coordinate transformed.
 */ parcelHelpers.export(exports, "fromUserCoordinate", ()=>fromUserCoordinate);
/**
 * Return an extent transformed into the user projection.  If no user projection
 * is set, the original extent is returned.
 * @param {import("./extent.js").Extent} extent Input extent.
 * @param {ProjectionLike} sourceProjection The input extent projection.
 * @return {import("./extent.js").Extent} The input extent in the user projection.
 */ parcelHelpers.export(exports, "toUserExtent", ()=>toUserExtent);
/**
 * Return an extent transformed from the user projection.  If no user projection
 * is set, the original extent is returned.
 * @param {import("./extent.js").Extent} extent Input extent.
 * @param {ProjectionLike} destProjection The destination projection.
 * @return {import("./extent.js").Extent} The input extent transformed.
 */ parcelHelpers.export(exports, "fromUserExtent", ()=>fromUserExtent);
/**
 * Return the resolution in user projection units per pixel. If no user projection
 * is set, or source or user projection are missing units, the original resolution
 * is returned.
 * @param {number} resolution Resolution in input projection units per pixel.
 * @param {ProjectionLike} sourceProjection The input projection.
 * @return {number} Resolution in user projection units per pixel.
 */ parcelHelpers.export(exports, "toUserResolution", ()=>toUserResolution);
/**
 * Return the resolution in user projection units per pixel. If no user projection
 * is set, or source or user projection are missing units, the original resolution
 * is returned.
 * @param {number} resolution Resolution in user projection units per pixel.
 * @param {ProjectionLike} destProjection The destination projection.
 * @return {number} Resolution in destination projection units per pixel.
 */ parcelHelpers.export(exports, "fromUserResolution", ()=>fromUserResolution);
/**
 * Creates a safe coordinate transform function from a coordinate transform function.
 * "Safe" means that it can handle wrapping of x-coordinates for global projections,
 * and that coordinates exceeding the source projection validity extent's range will be
 * clamped to the validity range.
 * @param {Projection} sourceProj Source projection.
 * @param {Projection} destProj Destination projection.
 * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} transform Transform function (source to destiation).
 * @return {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} Safe transform function (source to destiation).
 */ parcelHelpers.export(exports, "createSafeCoordinateTransform", ()=>createSafeCoordinateTransform);
/**
 * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called
 * by when this module is executed and should only need to be called again after
 * `clearAllProjections()` is called (e.g. in tests).
 */ parcelHelpers.export(exports, "addCommon", ()=>addCommon);
/**
 * @module ol/proj
 */ /**
 * The ol/proj module stores:
 * * a list of {@link module:ol/proj/Projection~Projection}
 * objects, one for each projection supported by the application
 * * a list of transform functions needed to convert coordinates in one projection
 * into another.
 *
 * The static functions are the methods used to maintain these.
 * Each transform function can handle not only simple coordinate pairs, but also
 * large arrays of coordinates such as vector geometries.
 *
 * When loaded, the library adds projection objects for EPSG:4326 (WGS84
 * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used
 * for example by Bing Maps or OpenStreetMap), together with the relevant
 * transform functions.
 *
 * Additional transforms may be added by using the http://proj4js.org/
 * library (version 2.2 or later). You can use the full build supplied by
 * Proj4js, or create a custom build to support those projections you need; see
 * the Proj4js website for how to do this. You also need the Proj4js definitions
 * for the required projections. These definitions can be obtained from
 * https://epsg.io/, and are a JS function, so can be loaded in a script
 * tag (as in the examples) or pasted into your application.
 *
 * After all required projection definitions are added to proj4's registry (by
 * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`
 * package. Existing transforms are not changed by this function. See
 * examples/wms-image-custom-proj for an example of this.
 *
 * Additional projection definitions can be registered with `proj4.defs()` any
 * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't
 * know in advance what projections are needed, you can initially load minimal
 * support and then load whichever are requested.
 *
 * Note that Proj4js does not support projection extents. If you want to add
 * one for creating default tile grids, you can add it after the Projection
 * object has been created with `setExtent`, for example,
 * `get('EPSG:1234').setExtent(extent)`.
 *
 * In addition to Proj4js support, any transform functions can be added with
 * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create
 * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with
 * {@link module:ol/proj.addProjection}. You can then add the forward and inverse
 * functions with {@link module:ol/proj.addCoordinateTransforms}. See
 * examples/wms-custom-proj for an example of this.
 *
 * Note that if no transforms are needed and you only need to define the
 * projection, just add a {@link module:ol/proj/Projection~Projection} with
 * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of
 * this.
 */ var _projectionJs = require("./proj/Projection.js");
var _projectionJsDefault = parcelHelpers.interopDefault(_projectionJs);
var _unitsJs = require("./proj/Units.js");
var _unitsJsDefault = parcelHelpers.interopDefault(_unitsJs);
var _epsg3857Js = require("./proj/epsg3857.js");
var _epsg4326Js = require("./proj/epsg4326.js");
var _projectionsJs = require("./proj/projections.js");
var _transformsJs = require("./proj/transforms.js");
var _extentJs = require("./extent.js");
var _mathJs = require("./math.js");
var _coordinateJs = require("./coordinate.js");
var _sphereJs = require("./sphere.js");
var showCoordinateWarning = true;
function disableCoordinateWarning(opt_disable) {
    var hide = opt_disable === undefined ? true : opt_disable;
    showCoordinateWarning = !hide;
}
function cloneTransform(input, opt_output, opt_dimension) {
    var output;
    if (opt_output !== undefined) {
        for(var i = 0, ii = input.length; i < ii; ++i)opt_output[i] = input[i];
        output = opt_output;
    } else output = input.slice();
    return output;
}
function identityTransform(input, opt_output, opt_dimension) {
    if (opt_output !== undefined && input !== opt_output) {
        for(var i = 0, ii = input.length; i < ii; ++i)opt_output[i] = input[i];
        input = opt_output;
    }
    return input;
}
function addProjection(projection) {
    (0, _projectionsJs.add)(projection.getCode(), projection);
    (0, _transformsJs.add)(projection, projection, cloneTransform);
}
function addProjections(projections) {
    projections.forEach(addProjection);
}
function get(projectionLike) {
    return typeof projectionLike === "string" ? (0, _projectionsJs.get)(projectionLike) : /** @type {Projection} */ projectionLike || null;
}
function getPointResolution(projection, resolution, point, opt_units) {
    projection = get(projection);
    var pointResolution;
    var getter = projection.getPointResolutionFunc();
    if (getter) {
        pointResolution = getter(resolution, point);
        if (opt_units && opt_units !== projection.getUnits()) {
            var metersPerUnit = projection.getMetersPerUnit();
            if (metersPerUnit) pointResolution = pointResolution * metersPerUnit / (0, _unitsJs.METERS_PER_UNIT)[opt_units];
        }
    } else {
        var units = projection.getUnits();
        if (units == (0, _unitsJsDefault.default).DEGREES && !opt_units || opt_units == (0, _unitsJsDefault.default).DEGREES) pointResolution = resolution;
        else {
            // Estimate point resolution by transforming the center pixel to EPSG:4326,
            // measuring its width and height on the normal sphere, and taking the
            // average of the width and height.
            var toEPSG4326_1 = getTransformFromProjections(projection, get("EPSG:4326"));
            if (toEPSG4326_1 === identityTransform && units !== (0, _unitsJsDefault.default).DEGREES) // no transform is available
            pointResolution = resolution * projection.getMetersPerUnit();
            else {
                var vertices = [
                    point[0] - resolution / 2,
                    point[1],
                    point[0] + resolution / 2,
                    point[1],
                    point[0],
                    point[1] - resolution / 2,
                    point[0],
                    point[1] + resolution / 2, 
                ];
                vertices = toEPSG4326_1(vertices, vertices, 2);
                var width = (0, _sphereJs.getDistance)(vertices.slice(0, 2), vertices.slice(2, 4));
                var height = (0, _sphereJs.getDistance)(vertices.slice(4, 6), vertices.slice(6, 8));
                pointResolution = (width + height) / 2;
            }
            var metersPerUnit = opt_units ? (0, _unitsJs.METERS_PER_UNIT)[opt_units] : projection.getMetersPerUnit();
            if (metersPerUnit !== undefined) pointResolution /= metersPerUnit;
        }
    }
    return pointResolution;
}
function addEquivalentProjections(projections) {
    addProjections(projections);
    projections.forEach(function(source) {
        projections.forEach(function(destination) {
            if (source !== destination) (0, _transformsJs.add)(source, destination, cloneTransform);
        });
    });
}
function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {
    projections1.forEach(function(projection1) {
        projections2.forEach(function(projection2) {
            (0, _transformsJs.add)(projection1, projection2, forwardTransform);
            (0, _transformsJs.add)(projection2, projection1, inverseTransform);
        });
    });
}
function clearAllProjections() {
    (0, _projectionsJs.clear)();
    (0, _transformsJs.clear)();
}
function createProjection(projection, defaultCode) {
    if (!projection) return get(defaultCode);
    else if (typeof projection === "string") return get(projection);
    else return projection;
}
function createTransformFromCoordinateTransform(coordTransform) {
    return(/**
     * @param {Array<number>} input Input.
     * @param {Array<number>} [opt_output] Output.
     * @param {number} [opt_dimension] Dimension.
     * @return {Array<number>} Output.
     */ function(input, opt_output, opt_dimension) {
        var length = input.length;
        var dimension = opt_dimension !== undefined ? opt_dimension : 2;
        var output = opt_output !== undefined ? opt_output : new Array(length);
        for(var i = 0; i < length; i += dimension){
            var point = coordTransform([
                input[i],
                input[i + 1]
            ]);
            output[i] = point[0];
            output[i + 1] = point[1];
            for(var j = dimension - 1; j >= 2; --j)output[i + j] = input[i + j];
        }
        return output;
    });
}
function addCoordinateTransforms(source, destination, forward, inverse) {
    var sourceProj = get(source);
    var destProj = get(destination);
    (0, _transformsJs.add)(sourceProj, destProj, createTransformFromCoordinateTransform(forward));
    (0, _transformsJs.add)(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));
}
function fromLonLat(coordinate, opt_projection) {
    disableCoordinateWarning();
    return transform(coordinate, "EPSG:4326", opt_projection !== undefined ? opt_projection : "EPSG:3857");
}
function toLonLat(coordinate, opt_projection) {
    var lonLat = transform(coordinate, opt_projection !== undefined ? opt_projection : "EPSG:3857", "EPSG:4326");
    var lon = lonLat[0];
    if (lon < -180 || lon > 180) lonLat[0] = (0, _mathJs.modulo)(lon + 180, 360) - 180;
    return lonLat;
}
function equivalent(projection1, projection2) {
    if (projection1 === projection2) return true;
    var equalUnits = projection1.getUnits() === projection2.getUnits();
    if (projection1.getCode() === projection2.getCode()) return equalUnits;
    else {
        var transformFunc = getTransformFromProjections(projection1, projection2);
        return transformFunc === cloneTransform && equalUnits;
    }
}
function getTransformFromProjections(sourceProjection, destinationProjection) {
    var sourceCode = sourceProjection.getCode();
    var destinationCode = destinationProjection.getCode();
    var transformFunc = (0, _transformsJs.get)(sourceCode, destinationCode);
    if (!transformFunc) transformFunc = identityTransform;
    return transformFunc;
}
function getTransform(source, destination) {
    var sourceProjection = get(source);
    var destinationProjection = get(destination);
    return getTransformFromProjections(sourceProjection, destinationProjection);
}
function transform(coordinate, source, destination) {
    var transformFunc = getTransform(source, destination);
    return transformFunc(coordinate, undefined, coordinate.length);
}
function transformExtent(extent, source, destination, opt_stops) {
    var transformFunc = getTransform(source, destination);
    return (0, _extentJs.applyTransform)(extent, transformFunc, undefined, opt_stops);
}
function transformWithProjections(point, sourceProjection, destinationProjection) {
    var transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);
    return transformFunc(point);
}
/**
 * @type {Projection|null}
 */ var userProjection = null;
function setUserProjection(projection) {
    userProjection = get(projection);
}
function clearUserProjection() {
    userProjection = null;
}
function getUserProjection() {
    return userProjection;
}
function useGeographic() {
    setUserProjection("EPSG:4326");
}
function toUserCoordinate(coordinate, sourceProjection) {
    if (!userProjection) return coordinate;
    return transform(coordinate, sourceProjection, userProjection);
}
function fromUserCoordinate(coordinate, destProjection) {
    if (!userProjection) {
        if (showCoordinateWarning && !(0, _coordinateJs.equals)(coordinate, [
            0,
            0
        ]) && coordinate[0] >= -180 && coordinate[0] <= 180 && coordinate[1] >= -90 && coordinate[1] <= 90) {
            showCoordinateWarning = false;
            // eslint-disable-next-line no-console
            console.warn("Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.");
        }
        return coordinate;
    }
    return transform(coordinate, userProjection, destProjection);
}
function toUserExtent(extent, sourceProjection) {
    if (!userProjection) return extent;
    return transformExtent(extent, sourceProjection, userProjection);
}
function fromUserExtent(extent, destProjection) {
    if (!userProjection) return extent;
    return transformExtent(extent, userProjection, destProjection);
}
function toUserResolution(resolution, sourceProjection) {
    if (!userProjection) return resolution;
    var sourceUnits = get(sourceProjection).getUnits();
    var userUnits = userProjection.getUnits();
    return sourceUnits && userUnits ? resolution * (0, _unitsJs.METERS_PER_UNIT)[sourceUnits] / (0, _unitsJs.METERS_PER_UNIT)[userUnits] : resolution;
}
function fromUserResolution(resolution, destProjection) {
    if (!userProjection) return resolution;
    var sourceUnits = get(destProjection).getUnits();
    var userUnits = userProjection.getUnits();
    return sourceUnits && userUnits ? resolution * (0, _unitsJs.METERS_PER_UNIT)[userUnits] / (0, _unitsJs.METERS_PER_UNIT)[sourceUnits] : resolution;
}
function createSafeCoordinateTransform(sourceProj, destProj, transform1) {
    return function(coord) {
        var sourceX = coord[0];
        var sourceY = coord[1];
        var transformed, worldsAway;
        if (sourceProj.canWrapX()) {
            var sourceExtent = sourceProj.getExtent();
            var sourceExtentWidth = (0, _extentJs.getWidth)(sourceExtent);
            worldsAway = (0, _coordinateJs.getWorldsAway)(coord, sourceProj, sourceExtentWidth);
            if (worldsAway) // Move x to the real world
            sourceX = sourceX - worldsAway * sourceExtentWidth;
            sourceX = (0, _mathJs.clamp)(sourceX, sourceExtent[0], sourceExtent[2]);
            sourceY = (0, _mathJs.clamp)(sourceY, sourceExtent[1], sourceExtent[3]);
            transformed = transform1([
                sourceX,
                sourceY
            ]);
        } else transformed = transform1(coord);
        if (worldsAway && destProj.canWrapX()) // Move transformed coordinate back to the offset world
        transformed[0] += worldsAway * (0, _extentJs.getWidth)(destProj.getExtent());
        return transformed;
    };
}
function addCommon() {
    // Add transformations that don't alter coordinates to convert within set of
    // projections with equal meaning.
    addEquivalentProjections((0, _epsg3857Js.PROJECTIONS));
    addEquivalentProjections((0, _epsg4326Js.PROJECTIONS));
    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like
    // coordinates and back.
    addEquivalentTransforms((0, _epsg4326Js.PROJECTIONS), (0, _epsg3857Js.PROJECTIONS), (0, _epsg3857Js.fromEPSG4326), (0, _epsg3857Js.toEPSG4326));
}
addCommon();

},{"./proj/Projection.js":"7HvLt","./proj/Units.js":"gOgy6","./proj/epsg3857.js":"3MTbx","./proj/epsg4326.js":"6Thur","./proj/projections.js":"9svUu","./proj/transforms.js":"gPHoN","./extent.js":"6YrVc","./math.js":"5jEFr","./coordinate.js":"85Vu7","./sphere.js":"eJjHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7HvLt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/proj/Projection
 */ var _unitsJs = require("./Units.js");
/**
 * @typedef {Object} Options
 * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.
 * @property {import("./Units.js").default|string} [units] Units. Required unless a
 * proj4 projection is defined for `code`.
 * @property {import("../extent.js").Extent} [extent] The validity extent for the SRS.
 * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.
 * @property {boolean} [global=false] Whether the projection is valid for the whole globe.
 * @property {number} [metersPerUnit] The meters per unit for the SRS.
 * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}
 * lookup table.
 * @property {import("../extent.js").Extent} [worldExtent] The world extent for the SRS.
 * @property {function(number, import("../coordinate.js").Coordinate):number} [getPointResolution]
 * Function to determine resolution at a point. The function is called with a
 * `number` view resolution and a {@link module:ol/coordinate~Coordinate Coordinate} as arguments, and returns
 * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,
 * the default {@link module:ol/proj.getPointResolution getPointResolution()} function will be used.
 */ /**
 * @classdesc
 * Projection definition class. One of these is created for each projection
 * supported in the application and stored in the {@link module:ol/proj} namespace.
 * You can use these in applications, but this is not required, as API params
 * and options use {@link module:ol/proj~ProjectionLike} which means the simple string
 * code will suffice.
 *
 * You can use {@link module:ol/proj.get} to retrieve the object for a particular
 * projection.
 *
 * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together
 * with the following aliases:
 * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,
 *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,
 *     http://www.opengis.net/gml/srs/epsg.xml#4326,
 *     urn:x-ogc:def:crs:EPSG:4326
 * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,
 *     urn:ogc:def:crs:EPSG:6.18:3:3857,
 *     http://www.opengis.net/gml/srs/epsg.xml#3857
 *
 * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can
 * be added using `proj4.defs()`. After all required projection definitions are
 * added, call the {@link module:ol/proj/proj4.register} function.
 *
 * @api
 */ var Projection = /** @class */ function() {
    /**
     * @param {Options} options Projection options.
     */ function Projection1(options) {
        /**
         * @private
         * @type {string}
         */ this.code_ = options.code;
        /**
         * Units of projected coordinates. When set to `TILE_PIXELS`, a
         * `this.extent_` and `this.worldExtent_` must be configured properly for each
         * tile.
         * @private
         * @type {import("./Units.js").default}
         */ this.units_ = options.units;
        /**
         * Validity extent of the projection in projected coordinates. For projections
         * with `TILE_PIXELS` units, this is the extent of the tile in
         * tile pixel space.
         * @private
         * @type {import("../extent.js").Extent}
         */ this.extent_ = options.extent !== undefined ? options.extent : null;
        /**
         * Extent of the world in EPSG:4326. For projections with
         * `TILE_PIXELS` units, this is the extent of the tile in
         * projected coordinate space.
         * @private
         * @type {import("../extent.js").Extent}
         */ this.worldExtent_ = options.worldExtent !== undefined ? options.worldExtent : null;
        /**
         * @private
         * @type {string}
         */ this.axisOrientation_ = options.axisOrientation !== undefined ? options.axisOrientation : "enu";
        /**
         * @private
         * @type {boolean}
         */ this.global_ = options.global !== undefined ? options.global : false;
        /**
         * @private
         * @type {boolean}
         */ this.canWrapX_ = !!(this.global_ && this.extent_);
        /**
         * @private
         * @type {function(number, import("../coordinate.js").Coordinate):number|undefined}
         */ this.getPointResolutionFunc_ = options.getPointResolution;
        /**
         * @private
         * @type {import("../tilegrid/TileGrid.js").default}
         */ this.defaultTileGrid_ = null;
        /**
         * @private
         * @type {number|undefined}
         */ this.metersPerUnit_ = options.metersPerUnit;
    }
    /**
     * @return {boolean} The projection is suitable for wrapping the x-axis
     */ Projection1.prototype.canWrapX = function() {
        return this.canWrapX_;
    };
    /**
     * Get the code for this projection, e.g. 'EPSG:4326'.
     * @return {string} Code.
     * @api
     */ Projection1.prototype.getCode = function() {
        return this.code_;
    };
    /**
     * Get the validity extent for this projection.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */ Projection1.prototype.getExtent = function() {
        return this.extent_;
    };
    /**
     * Get the units of this projection.
     * @return {import("./Units.js").default} Units.
     * @api
     */ Projection1.prototype.getUnits = function() {
        return this.units_;
    };
    /**
     * Get the amount of meters per unit of this projection.  If the projection is
     * not configured with `metersPerUnit` or a units identifier, the return is
     * `undefined`.
     * @return {number|undefined} Meters.
     * @api
     */ Projection1.prototype.getMetersPerUnit = function() {
        return this.metersPerUnit_ || (0, _unitsJs.METERS_PER_UNIT)[this.units_];
    };
    /**
     * Get the world extent for this projection.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */ Projection1.prototype.getWorldExtent = function() {
        return this.worldExtent_;
    };
    /**
     * Get the axis orientation of this projection.
     * Example values are:
     * enu - the default easting, northing, elevation.
     * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
     *     or south orientated transverse mercator.
     * wnu - westing, northing, up - some planetary coordinate systems have
     *     "west positive" coordinate systems
     * @return {string} Axis orientation.
     * @api
     */ Projection1.prototype.getAxisOrientation = function() {
        return this.axisOrientation_;
    };
    /**
     * Is this projection a global projection which spans the whole world?
     * @return {boolean} Whether the projection is global.
     * @api
     */ Projection1.prototype.isGlobal = function() {
        return this.global_;
    };
    /**
     * Set if the projection is a global projection which spans the whole world
     * @param {boolean} global Whether the projection is global.
     * @api
     */ Projection1.prototype.setGlobal = function(global) {
        this.global_ = global;
        this.canWrapX_ = !!(global && this.extent_);
    };
    /**
     * @return {import("../tilegrid/TileGrid.js").default} The default tile grid.
     */ Projection1.prototype.getDefaultTileGrid = function() {
        return this.defaultTileGrid_;
    };
    /**
     * @param {import("../tilegrid/TileGrid.js").default} tileGrid The default tile grid.
     */ Projection1.prototype.setDefaultTileGrid = function(tileGrid) {
        this.defaultTileGrid_ = tileGrid;
    };
    /**
     * Set the validity extent for this projection.
     * @param {import("../extent.js").Extent} extent Extent.
     * @api
     */ Projection1.prototype.setExtent = function(extent) {
        this.extent_ = extent;
        this.canWrapX_ = !!(this.global_ && extent);
    };
    /**
     * Set the world extent for this projection.
     * @param {import("../extent.js").Extent} worldExtent World extent
     *     [minlon, minlat, maxlon, maxlat].
     * @api
     */ Projection1.prototype.setWorldExtent = function(worldExtent) {
        this.worldExtent_ = worldExtent;
    };
    /**
     * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}
     * for this projection.
     * @param {function(number, import("../coordinate.js").Coordinate):number} func Function
     * @api
     */ Projection1.prototype.setGetPointResolution = function(func) {
        this.getPointResolutionFunc_ = func;
    };
    /**
     * Get the custom point resolution function for this projection (if set).
     * @return {function(number, import("../coordinate.js").Coordinate):number|undefined} The custom point
     * resolution function (if set).
     */ Projection1.prototype.getPointResolutionFunc = function() {
        return this.getPointResolutionFunc_;
    };
    return Projection1;
}();
exports.default = Projection;

},{"./Units.js":"gOgy6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gOgy6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {number} code Unit code.
 * @return {Units} Units.
 */ parcelHelpers.export(exports, "fromCode", ()=>fromCode);
parcelHelpers.export(exports, "METERS_PER_UNIT", ()=>METERS_PER_UNIT);
/**
 * @module ol/proj/Units
 */ /**
 * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or
 * `'us-ft'`.
 * @enum {string}
 */ var Units = {
    /**
     * Radians
     * @api
     */ RADIANS: "radians",
    /**
     * Degrees
     * @api
     */ DEGREES: "degrees",
    /**
     * Feet
     * @api
     */ FEET: "ft",
    /**
     * Meters
     * @api
     */ METERS: "m",
    /**
     * Pixels
     * @api
     */ PIXELS: "pixels",
    /**
     * Tile Pixels
     * @api
     */ TILE_PIXELS: "tile-pixels",
    /**
     * US Feet
     * @api
     */ USFEET: "us-ft"
};
/**
 * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt
 * @type {Object<number, Units>}
 */ var unitByCode = {
    "9001": Units.METERS,
    "9002": Units.FEET,
    "9003": Units.USFEET,
    "9101": Units.RADIANS,
    "9102": Units.DEGREES
};
function fromCode(code) {
    return unitByCode[code];
}
var METERS_PER_UNIT = {};
// use the radius of the Normal sphere
METERS_PER_UNIT[Units.RADIANS] = 6370997 / (2 * Math.PI);
METERS_PER_UNIT[Units.DEGREES] = 2 * Math.PI * 6370997 / 360;
METERS_PER_UNIT[Units.FEET] = 0.3048;
METERS_PER_UNIT[Units.METERS] = 1;
METERS_PER_UNIT[Units.USFEET] = 1200 / 3937;
exports.default = Units;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"3MTbx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RADIUS", ()=>RADIUS);
parcelHelpers.export(exports, "HALF_SIZE", ()=>HALF_SIZE);
parcelHelpers.export(exports, "EXTENT", ()=>EXTENT);
parcelHelpers.export(exports, "WORLD_EXTENT", ()=>WORLD_EXTENT);
parcelHelpers.export(exports, "MAX_SAFE_Y", ()=>MAX_SAFE_Y);
parcelHelpers.export(exports, "PROJECTIONS", ()=>PROJECTIONS);
/**
 * Transformation from EPSG:4326 to EPSG:3857.
 *
 * @param {Array<number>} input Input array of coordinate values.
 * @param {Array<number>} [opt_output] Output array of coordinate values.
 * @param {number} [opt_dimension] Dimension (default is `2`).
 * @return {Array<number>} Output array of coordinate values.
 */ parcelHelpers.export(exports, "fromEPSG4326", ()=>fromEPSG4326);
/**
 * Transformation from EPSG:3857 to EPSG:4326.
 *
 * @param {Array<number>} input Input array of coordinate values.
 * @param {Array<number>} [opt_output] Output array of coordinate values.
 * @param {number} [opt_dimension] Dimension (default is `2`).
 * @return {Array<number>} Output array of coordinate values.
 */ parcelHelpers.export(exports, "toEPSG4326", ()=>toEPSG4326);
/**
 * @module ol/proj/epsg3857
 */ var _projectionJs = require("./Projection.js");
var _projectionJsDefault = parcelHelpers.interopDefault(_projectionJs);
var _unitsJs = require("./Units.js");
var _unitsJsDefault = parcelHelpers.interopDefault(_unitsJs);
var _mathJs = require("../math.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var RADIUS = 6378137;
var HALF_SIZE = Math.PI * RADIUS;
var EXTENT = [
    -HALF_SIZE,
    -HALF_SIZE,
    HALF_SIZE,
    HALF_SIZE
];
var WORLD_EXTENT = [
    -180,
    -85,
    180,
    85
];
var MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));
/**
 * @classdesc
 * Projection object for web/spherical Mercator (EPSG:3857).
 */ var EPSG3857Projection = /** @class */ function(_super) {
    __extends(EPSG3857Projection1, _super);
    /**
     * @param {string} code Code.
     */ function EPSG3857Projection1(code) {
        return _super.call(this, {
            code: code,
            units: (0, _unitsJsDefault.default).METERS,
            extent: EXTENT,
            global: true,
            worldExtent: WORLD_EXTENT,
            getPointResolution: function(resolution, point) {
                return resolution / (0, _mathJs.cosh)(point[1] / RADIUS);
            }
        }) || this;
    }
    return EPSG3857Projection1;
}((0, _projectionJsDefault.default));
var PROJECTIONS = [
    new EPSG3857Projection("EPSG:3857"),
    new EPSG3857Projection("EPSG:102100"),
    new EPSG3857Projection("EPSG:102113"),
    new EPSG3857Projection("EPSG:900913"),
    new EPSG3857Projection("http://www.opengis.net/def/crs/EPSG/0/3857"),
    new EPSG3857Projection("http://www.opengis.net/gml/srs/epsg.xml#3857"), 
];
function fromEPSG4326(input, opt_output, opt_dimension) {
    var length = input.length;
    var dimension = opt_dimension > 1 ? opt_dimension : 2;
    var output = opt_output;
    if (output === undefined) {
        if (dimension > 2) // preserve values beyond second dimension
        output = input.slice();
        else output = new Array(length);
    }
    for(var i = 0; i < length; i += dimension){
        output[i] = HALF_SIZE * input[i] / 180;
        var y = RADIUS * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));
        if (y > MAX_SAFE_Y) y = MAX_SAFE_Y;
        else if (y < -MAX_SAFE_Y) y = -MAX_SAFE_Y;
        output[i + 1] = y;
    }
    return output;
}
function toEPSG4326(input, opt_output, opt_dimension) {
    var length = input.length;
    var dimension = opt_dimension > 1 ? opt_dimension : 2;
    var output = opt_output;
    if (output === undefined) {
        if (dimension > 2) // preserve values beyond second dimension
        output = input.slice();
        else output = new Array(length);
    }
    for(var i = 0; i < length; i += dimension){
        output[i] = 180 * input[i] / HALF_SIZE;
        output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;
    }
    return output;
}

},{"./Projection.js":"7HvLt","./Units.js":"gOgy6","../math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5jEFr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/math
 */ /**
 * Takes a number and clamps it to within the provided bounds.
 * @param {number} value The input number.
 * @param {number} min The minimum value to return.
 * @param {number} max The maximum value to return.
 * @return {number} The input number if it is within bounds, or the nearest
 *     number within the bounds.
 */ parcelHelpers.export(exports, "clamp", ()=>clamp);
parcelHelpers.export(exports, "cosh", ()=>cosh);
parcelHelpers.export(exports, "log2", ()=>log2);
/**
 * Returns the square of the closest distance between the point (x, y) and the
 * line segment (x1, y1) to (x2, y2).
 * @param {number} x X.
 * @param {number} y Y.
 * @param {number} x1 X1.
 * @param {number} y1 Y1.
 * @param {number} x2 X2.
 * @param {number} y2 Y2.
 * @return {number} Squared distance.
 */ parcelHelpers.export(exports, "squaredSegmentDistance", ()=>squaredSegmentDistance);
/**
 * Returns the square of the distance between the points (x1, y1) and (x2, y2).
 * @param {number} x1 X1.
 * @param {number} y1 Y1.
 * @param {number} x2 X2.
 * @param {number} y2 Y2.
 * @return {number} Squared distance.
 */ parcelHelpers.export(exports, "squaredDistance", ()=>squaredDistance);
/**
 * Solves system of linear equations using Gaussian elimination method.
 *
 * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)
 *                                     in row-major order.
 * @return {Array<number>} The resulting vector.
 */ parcelHelpers.export(exports, "solveLinearSystem", ()=>solveLinearSystem);
/**
 * Converts radians to to degrees.
 *
 * @param {number} angleInRadians Angle in radians.
 * @return {number} Angle in degrees.
 */ parcelHelpers.export(exports, "toDegrees", ()=>toDegrees);
/**
 * Converts degrees to radians.
 *
 * @param {number} angleInDegrees Angle in degrees.
 * @return {number} Angle in radians.
 */ parcelHelpers.export(exports, "toRadians", ()=>toRadians);
/**
 * Returns the modulo of a / b, depending on the sign of b.
 *
 * @param {number} a Dividend.
 * @param {number} b Divisor.
 * @return {number} Modulo.
 */ parcelHelpers.export(exports, "modulo", ()=>modulo);
/**
 * Calculates the linearly interpolated value of x between a and b.
 *
 * @param {number} a Number
 * @param {number} b Number
 * @param {number} x Value to be interpolated.
 * @return {number} Interpolated value.
 */ parcelHelpers.export(exports, "lerp", ()=>lerp);
/**
 * Returns a number with a limited number of decimal digits.
 * @param {number} n The input number.
 * @param {number} decimals The maximum number of decimal digits.
 * @return {number} The input number with a limited number of decimal digits.
 */ parcelHelpers.export(exports, "toFixed", ()=>toFixed);
/**
 * Rounds a number to the nearest integer value considering only the given number
 * of decimal digits (with rounding on the final digit).
 * @param {number} n The input number.
 * @param {number} decimals The maximum number of decimal digits.
 * @return {number} The nearest integer.
 */ parcelHelpers.export(exports, "round", ()=>round);
/**
 * Rounds a number to the next smaller integer considering only the given number
 * of decimal digits (with rounding on the final digit).
 * @param {number} n The input number.
 * @param {number} decimals The maximum number of decimal digits.
 * @return {number} The next smaller integer.
 */ parcelHelpers.export(exports, "floor", ()=>floor);
/**
 * Rounds a number to the next bigger integer considering only the given number
 * of decimal digits (with rounding on the final digit).
 * @param {number} n The input number.
 * @param {number} decimals The maximum number of decimal digits.
 * @return {number} The next bigger integer.
 */ parcelHelpers.export(exports, "ceil", ()=>ceil);
function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
}
var cosh = function() {
    // Wrapped in a iife, to save the overhead of checking for the native
    // implementation on every invocation.
    var cosh1;
    if ("cosh" in Math) // The environment supports the native Math.cosh function, use it…
    cosh1 = Math.cosh;
    else // … else, use the reference implementation of MDN:
    cosh1 = function(x) {
        var y = /** @type {Math} */ Math.exp(x);
        return (y + 1 / y) / 2;
    };
    return cosh1;
}();
var log2 = function() {
    // Wrapped in a iife, to save the overhead of checking for the native
    // implementation on every invocation.
    var log21;
    if ("log2" in Math) // The environment supports the native Math.log2 function, use it…
    log21 = Math.log2;
    else // … else, use the reference implementation of MDN:
    log21 = function(x) {
        return Math.log(x) * Math.LOG2E;
    };
    return log21;
}();
function squaredSegmentDistance(x, y, x1, y1, x2, y2) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    if (dx !== 0 || dy !== 0) {
        var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
        if (t > 1) {
            x1 = x2;
            y1 = y2;
        } else if (t > 0) {
            x1 += dx * t;
            y1 += dy * t;
        }
    }
    return squaredDistance(x, y, x1, y1);
}
function squaredDistance(x1, y1, x2, y2) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    return dx * dx + dy * dy;
}
function solveLinearSystem(mat) {
    var n = mat.length;
    for(var i = 0; i < n; i++){
        // Find max in the i-th column (ignoring i - 1 first rows)
        var maxRow = i;
        var maxEl = Math.abs(mat[i][i]);
        for(var r = i + 1; r < n; r++){
            var absValue = Math.abs(mat[r][i]);
            if (absValue > maxEl) {
                maxEl = absValue;
                maxRow = r;
            }
        }
        if (maxEl === 0) return null; // matrix is singular
        // Swap max row with i-th (current) row
        var tmp = mat[maxRow];
        mat[maxRow] = mat[i];
        mat[i] = tmp;
        // Subtract the i-th row to make all the remaining rows 0 in the i-th column
        for(var j = i + 1; j < n; j++){
            var coef = -mat[j][i] / mat[i][i];
            for(var k = i; k < n + 1; k++)if (i == k) mat[j][k] = 0;
            else mat[j][k] += coef * mat[i][k];
        }
    }
    // Solve Ax=b for upper triangular matrix A (mat)
    var x = new Array(n);
    for(var l = n - 1; l >= 0; l--){
        x[l] = mat[l][n] / mat[l][l];
        for(var m = l - 1; m >= 0; m--)mat[m][n] -= mat[m][l] * x[l];
    }
    return x;
}
function toDegrees(angleInRadians) {
    return angleInRadians * 180 / Math.PI;
}
function toRadians(angleInDegrees) {
    return angleInDegrees * Math.PI / 180;
}
function modulo(a, b) {
    var r = a % b;
    return r * b < 0 ? r + b : r;
}
function lerp(a, b, x) {
    return a + x * (b - a);
}
function toFixed(n, decimals) {
    var factor = Math.pow(10, decimals);
    return Math.round(n * factor) / factor;
}
function round(n, decimals) {
    return Math.round(toFixed(n, decimals));
}
function floor(n, decimals) {
    return Math.floor(toFixed(n, decimals));
}
function ceil(n, decimals) {
    return Math.ceil(toFixed(n, decimals));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Thur":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RADIUS", ()=>RADIUS);
parcelHelpers.export(exports, "EXTENT", ()=>EXTENT);
parcelHelpers.export(exports, "METERS_PER_UNIT", ()=>METERS_PER_UNIT);
parcelHelpers.export(exports, "PROJECTIONS", ()=>PROJECTIONS);
/**
 * @module ol/proj/epsg4326
 */ var _projectionJs = require("./Projection.js");
var _projectionJsDefault = parcelHelpers.interopDefault(_projectionJs);
var _unitsJs = require("./Units.js");
var _unitsJsDefault = parcelHelpers.interopDefault(_unitsJs);
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var RADIUS = 6378137;
var EXTENT = [
    -180,
    -90,
    180,
    90
];
var METERS_PER_UNIT = Math.PI * RADIUS / 180;
/**
 * @classdesc
 * Projection object for WGS84 geographic coordinates (EPSG:4326).
 *
 * Note that OpenLayers does not strictly comply with the EPSG definition.
 * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).
 * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.
 */ var EPSG4326Projection = /** @class */ function(_super) {
    __extends(EPSG4326Projection1, _super);
    /**
     * @param {string} code Code.
     * @param {string} [opt_axisOrientation] Axis orientation.
     */ function EPSG4326Projection1(code, opt_axisOrientation) {
        return _super.call(this, {
            code: code,
            units: (0, _unitsJsDefault.default).DEGREES,
            extent: EXTENT,
            axisOrientation: opt_axisOrientation,
            global: true,
            metersPerUnit: METERS_PER_UNIT,
            worldExtent: EXTENT
        }) || this;
    }
    return EPSG4326Projection1;
}((0, _projectionJsDefault.default));
var PROJECTIONS = [
    new EPSG4326Projection("CRS:84"),
    new EPSG4326Projection("EPSG:4326", "neu"),
    new EPSG4326Projection("urn:ogc:def:crs:OGC:1.3:CRS84"),
    new EPSG4326Projection("urn:ogc:def:crs:OGC:2:84"),
    new EPSG4326Projection("http://www.opengis.net/def/crs/OGC/1.3/CRS84"),
    new EPSG4326Projection("http://www.opengis.net/gml/srs/epsg.xml#4326", "neu"),
    new EPSG4326Projection("http://www.opengis.net/def/crs/EPSG/0/4326", "neu"), 
];

},{"./Projection.js":"7HvLt","./Units.js":"gOgy6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9svUu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Clear the projections cache.
 */ parcelHelpers.export(exports, "clear", ()=>clear);
/**
 * Get a cached projection by code.
 * @param {string} code The code for the projection.
 * @return {import("./Projection.js").default} The projection (if cached).
 */ parcelHelpers.export(exports, "get", ()=>get);
/**
 * Add a projection to the cache.
 * @param {string} code The projection code.
 * @param {import("./Projection.js").default} projection The projection to cache.
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * @module ol/proj/projections
 */ /**
 * @type {Object<string, import("./Projection.js").default>}
 */ var cache = {};
function clear() {
    cache = {};
}
function get(code) {
    return cache[code] || cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/, "EPSG:$3")] || null;
}
function add(code, projection) {
    cache[code] = projection;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gPHoN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Clear the transform cache.
 */ parcelHelpers.export(exports, "clear", ()=>clear);
/**
 * Registers a conversion function to convert coordinates from the source
 * projection to the destination projection.
 *
 * @param {import("./Projection.js").default} source Source.
 * @param {import("./Projection.js").default} destination Destination.
 * @param {import("../proj.js").TransformFunction} transformFn Transform.
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Unregisters the conversion function to convert coordinates from the source
 * projection to the destination projection.  This method is used to clean up
 * cached transforms during testing.
 *
 * @param {import("./Projection.js").default} source Source projection.
 * @param {import("./Projection.js").default} destination Destination projection.
 * @return {import("../proj.js").TransformFunction} transformFn The unregistered transform.
 */ parcelHelpers.export(exports, "remove", ()=>remove);
/**
 * Get a transform given a source code and a destination code.
 * @param {string} sourceCode The code for the source projection.
 * @param {string} destinationCode The code for the destination projection.
 * @return {import("../proj.js").TransformFunction|undefined} The transform function (if found).
 */ parcelHelpers.export(exports, "get", ()=>get);
/**
 * @module ol/proj/transforms
 */ var _objJs = require("../obj.js");
/**
 * @private
 * @type {!Object<string, Object<string, import("../proj.js").TransformFunction>>}
 */ var transforms = {};
function clear() {
    transforms = {};
}
function add(source, destination, transformFn) {
    var sourceCode = source.getCode();
    var destinationCode = destination.getCode();
    if (!(sourceCode in transforms)) transforms[sourceCode] = {};
    transforms[sourceCode][destinationCode] = transformFn;
}
function remove(source, destination) {
    var sourceCode = source.getCode();
    var destinationCode = destination.getCode();
    var transform = transforms[sourceCode][destinationCode];
    delete transforms[sourceCode][destinationCode];
    if ((0, _objJs.isEmpty)(transforms[sourceCode])) delete transforms[sourceCode];
    return transform;
}
function get(sourceCode, destinationCode) {
    var transform;
    if (sourceCode in transforms && destinationCode in transforms[sourceCode]) transform = transforms[sourceCode][destinationCode];
    return transform;
}

},{"../obj.js":"3ssAG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ssAG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assign", ()=>assign);
/**
 * Removes all properties from an object.
 * @param {Object} object The object to clear.
 */ parcelHelpers.export(exports, "clear", ()=>clear);
parcelHelpers.export(exports, "getValues", ()=>getValues);
/**
 * Determine if an object has any properties.
 * @param {Object} object The object to check.
 * @return {boolean} The object is empty.
 */ parcelHelpers.export(exports, "isEmpty", ()=>isEmpty);
var assign = typeof Object.assign === "function" ? Object.assign : function(target, var_sources) {
    if (target === undefined || target === null) throw new TypeError("Cannot convert undefined or null to object");
    var output = Object(target);
    for(var i = 1, ii = arguments.length; i < ii; ++i){
        var source = arguments[i];
        if (source !== undefined && source !== null) {
            for(var key in source)if (source.hasOwnProperty(key)) output[key] = source[key];
        }
    }
    return output;
};
function clear(object) {
    for(var property in object)delete object[property];
}
var getValues = typeof Object.values === "function" ? Object.values : function(object) {
    var values = [];
    for(var property in object)values.push(object[property]);
    return values;
};
function isEmpty(object) {
    var property;
    for(property in object)return false;
    return !property;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6YrVc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.
 * @typedef {Array<number>} Extent
 * @api
 */ /**
 * Build an extent that includes all given coordinates.
 *
 * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
 * @return {Extent} Bounding extent.
 * @api
 */ parcelHelpers.export(exports, "boundingExtent", ()=>boundingExtent);
/**
 * Return extent increased by the provided value.
 * @param {Extent} extent Extent.
 * @param {number} value The amount by which the extent should be buffered.
 * @param {Extent} [opt_extent] Extent.
 * @return {Extent} Extent.
 * @api
 */ parcelHelpers.export(exports, "buffer", ()=>buffer);
/**
 * Creates a clone of an extent.
 *
 * @param {Extent} extent Extent to clone.
 * @param {Extent} [opt_extent] Extent.
 * @return {Extent} The clone.
 */ parcelHelpers.export(exports, "clone", ()=>clone);
/**
 * @param {Extent} extent Extent.
 * @param {number} x X.
 * @param {number} y Y.
 * @return {number} Closest squared distance.
 */ parcelHelpers.export(exports, "closestSquaredDistanceXY", ()=>closestSquaredDistanceXY);
/**
 * Check if the passed coordinate is contained or on the edge of the extent.
 *
 * @param {Extent} extent Extent.
 * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
 * @return {boolean} The coordinate is contained in the extent.
 * @api
 */ parcelHelpers.export(exports, "containsCoordinate", ()=>containsCoordinate);
/**
 * Check if one extent contains another.
 *
 * An extent is deemed contained if it lies completely within the other extent,
 * including if they share one or more edges.
 *
 * @param {Extent} extent1 Extent 1.
 * @param {Extent} extent2 Extent 2.
 * @return {boolean} The second extent is contained by or on the edge of the
 *     first.
 * @api
 */ parcelHelpers.export(exports, "containsExtent", ()=>containsExtent);
/**
 * Check if the passed coordinate is contained or on the edge of the extent.
 *
 * @param {Extent} extent Extent.
 * @param {number} x X coordinate.
 * @param {number} y Y coordinate.
 * @return {boolean} The x, y values are contained in the extent.
 * @api
 */ parcelHelpers.export(exports, "containsXY", ()=>containsXY);
/**
 * Get the relationship between a coordinate and extent.
 * @param {Extent} extent The extent.
 * @param {import("./coordinate.js").Coordinate} coordinate The coordinate.
 * @return {import("./extent/Relationship.js").default} The relationship (bitwise compare with
 *     import("./extent/Relationship.js").Relationship).
 */ parcelHelpers.export(exports, "coordinateRelationship", ()=>coordinateRelationship);
/**
 * Create an empty extent.
 * @return {Extent} Empty extent.
 * @api
 */ parcelHelpers.export(exports, "createEmpty", ()=>createEmpty);
/**
 * Create a new extent or update the provided extent.
 * @param {number} minX Minimum X.
 * @param {number} minY Minimum Y.
 * @param {number} maxX Maximum X.
 * @param {number} maxY Maximum Y.
 * @param {Extent} [opt_extent] Destination extent.
 * @return {Extent} Extent.
 */ parcelHelpers.export(exports, "createOrUpdate", ()=>createOrUpdate);
/**
 * Create a new empty extent or make the provided one empty.
 * @param {Extent} [opt_extent] Extent.
 * @return {Extent} Extent.
 */ parcelHelpers.export(exports, "createOrUpdateEmpty", ()=>createOrUpdateEmpty);
/**
 * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
 * @param {Extent} [opt_extent] Extent.
 * @return {Extent} Extent.
 */ parcelHelpers.export(exports, "createOrUpdateFromCoordinate", ()=>createOrUpdateFromCoordinate);
/**
 * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
 * @param {Extent} [opt_extent] Extent.
 * @return {Extent} Extent.
 */ parcelHelpers.export(exports, "createOrUpdateFromCoordinates", ()=>createOrUpdateFromCoordinates);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {Extent} [opt_extent] Extent.
 * @return {Extent} Extent.
 */ parcelHelpers.export(exports, "createOrUpdateFromFlatCoordinates", ()=>createOrUpdateFromFlatCoordinates);
/**
 * @param {Array<Array<import("./coordinate.js").Coordinate>>} rings Rings.
 * @param {Extent} [opt_extent] Extent.
 * @return {Extent} Extent.
 */ parcelHelpers.export(exports, "createOrUpdateFromRings", ()=>createOrUpdateFromRings);
/**
 * Determine if two extents are equivalent.
 * @param {Extent} extent1 Extent 1.
 * @param {Extent} extent2 Extent 2.
 * @return {boolean} The two extents are equivalent.
 * @api
 */ parcelHelpers.export(exports, "equals", ()=>equals);
/**
 * Determine if two extents are approximately equivalent.
 * @param {Extent} extent1 Extent 1.
 * @param {Extent} extent2 Extent 2.
 * @param {number} tolerance Tolerance in extent coordinate units.
 * @return {boolean} The two extents differ by less than the tolerance.
 */ parcelHelpers.export(exports, "approximatelyEquals", ()=>approximatelyEquals);
/**
 * Modify an extent to include another extent.
 * @param {Extent} extent1 The extent to be modified.
 * @param {Extent} extent2 The extent that will be included in the first.
 * @return {Extent} A reference to the first (extended) extent.
 * @api
 */ parcelHelpers.export(exports, "extend", ()=>extend);
/**
 * @param {Extent} extent Extent.
 * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
 */ parcelHelpers.export(exports, "extendCoordinate", ()=>extendCoordinate);
/**
 * @param {Extent} extent Extent.
 * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
 * @return {Extent} Extent.
 */ parcelHelpers.export(exports, "extendCoordinates", ()=>extendCoordinates);
/**
 * @param {Extent} extent Extent.
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {Extent} Extent.
 */ parcelHelpers.export(exports, "extendFlatCoordinates", ()=>extendFlatCoordinates);
/**
 * @param {Extent} extent Extent.
 * @param {Array<Array<import("./coordinate.js").Coordinate>>} rings Rings.
 * @return {Extent} Extent.
 */ parcelHelpers.export(exports, "extendRings", ()=>extendRings);
/**
 * @param {Extent} extent Extent.
 * @param {number} x X.
 * @param {number} y Y.
 */ parcelHelpers.export(exports, "extendXY", ()=>extendXY);
/**
 * This function calls `callback` for each corner of the extent. If the
 * callback returns a truthy value the function returns that value
 * immediately. Otherwise the function returns `false`.
 * @param {Extent} extent Extent.
 * @param {function(import("./coordinate.js").Coordinate): S} callback Callback.
 * @return {S|boolean} Value.
 * @template S
 */ parcelHelpers.export(exports, "forEachCorner", ()=>forEachCorner);
/**
 * Get the size of an extent.
 * @param {Extent} extent Extent.
 * @return {number} Area.
 * @api
 */ parcelHelpers.export(exports, "getArea", ()=>getArea);
/**
 * Get the bottom left coordinate of an extent.
 * @param {Extent} extent Extent.
 * @return {import("./coordinate.js").Coordinate} Bottom left coordinate.
 * @api
 */ parcelHelpers.export(exports, "getBottomLeft", ()=>getBottomLeft);
/**
 * Get the bottom right coordinate of an extent.
 * @param {Extent} extent Extent.
 * @return {import("./coordinate.js").Coordinate} Bottom right coordinate.
 * @api
 */ parcelHelpers.export(exports, "getBottomRight", ()=>getBottomRight);
/**
 * Get the center coordinate of an extent.
 * @param {Extent} extent Extent.
 * @return {import("./coordinate.js").Coordinate} Center.
 * @api
 */ parcelHelpers.export(exports, "getCenter", ()=>getCenter);
/**
 * Get a corner coordinate of an extent.
 * @param {Extent} extent Extent.
 * @param {import("./extent/Corner.js").default} corner Corner.
 * @return {import("./coordinate.js").Coordinate} Corner coordinate.
 */ parcelHelpers.export(exports, "getCorner", ()=>getCorner);
/**
 * @param {Extent} extent1 Extent 1.
 * @param {Extent} extent2 Extent 2.
 * @return {number} Enlarged area.
 */ parcelHelpers.export(exports, "getEnlargedArea", ()=>getEnlargedArea);
/**
 * @param {import("./coordinate.js").Coordinate} center Center.
 * @param {number} resolution Resolution.
 * @param {number} rotation Rotation.
 * @param {import("./size.js").Size} size Size.
 * @param {Extent} [opt_extent] Destination extent.
 * @return {Extent} Extent.
 */ parcelHelpers.export(exports, "getForViewAndSize", ()=>getForViewAndSize);
/**
 * Get the height of an extent.
 * @param {Extent} extent Extent.
 * @return {number} Height.
 * @api
 */ parcelHelpers.export(exports, "getHeight", ()=>getHeight);
/**
 * @param {Extent} extent1 Extent 1.
 * @param {Extent} extent2 Extent 2.
 * @return {number} Intersection area.
 */ parcelHelpers.export(exports, "getIntersectionArea", ()=>getIntersectionArea);
/**
 * Get the intersection of two extents.
 * @param {Extent} extent1 Extent 1.
 * @param {Extent} extent2 Extent 2.
 * @param {Extent} [opt_extent] Optional extent to populate with intersection.
 * @return {Extent} Intersecting extent.
 * @api
 */ parcelHelpers.export(exports, "getIntersection", ()=>getIntersection);
/**
 * @param {Extent} extent Extent.
 * @return {number} Margin.
 */ parcelHelpers.export(exports, "getMargin", ()=>getMargin);
/**
 * Get the size (width, height) of an extent.
 * @param {Extent} extent The extent.
 * @return {import("./size.js").Size} The extent size.
 * @api
 */ parcelHelpers.export(exports, "getSize", ()=>getSize);
/**
 * Get the top left coordinate of an extent.
 * @param {Extent} extent Extent.
 * @return {import("./coordinate.js").Coordinate} Top left coordinate.
 * @api
 */ parcelHelpers.export(exports, "getTopLeft", ()=>getTopLeft);
/**
 * Get the top right coordinate of an extent.
 * @param {Extent} extent Extent.
 * @return {import("./coordinate.js").Coordinate} Top right coordinate.
 * @api
 */ parcelHelpers.export(exports, "getTopRight", ()=>getTopRight);
/**
 * Get the width of an extent.
 * @param {Extent} extent Extent.
 * @return {number} Width.
 * @api
 */ parcelHelpers.export(exports, "getWidth", ()=>getWidth);
/**
 * Determine if one extent intersects another.
 * @param {Extent} extent1 Extent 1.
 * @param {Extent} extent2 Extent.
 * @return {boolean} The two extents intersect.
 * @api
 */ parcelHelpers.export(exports, "intersects", ()=>intersects);
/**
 * Determine if an extent is empty.
 * @param {Extent} extent Extent.
 * @return {boolean} Is empty.
 * @api
 */ parcelHelpers.export(exports, "isEmpty", ()=>isEmpty);
/**
 * @param {Extent} extent Extent.
 * @param {Extent} [opt_extent] Extent.
 * @return {Extent} Extent.
 */ parcelHelpers.export(exports, "returnOrUpdate", ()=>returnOrUpdate);
/**
 * @param {Extent} extent Extent.
 * @param {number} value Value.
 */ parcelHelpers.export(exports, "scaleFromCenter", ()=>scaleFromCenter);
/**
 * Determine if the segment between two coordinates intersects (crosses,
 * touches, or is contained by) the provided extent.
 * @param {Extent} extent The extent.
 * @param {import("./coordinate.js").Coordinate} start Segment start coordinate.
 * @param {import("./coordinate.js").Coordinate} end Segment end coordinate.
 * @return {boolean} The segment intersects the extent.
 */ parcelHelpers.export(exports, "intersectsSegment", ()=>intersectsSegment);
/**
 * Apply a transform function to the extent.
 * @param {Extent} extent Extent.
 * @param {import("./proj.js").TransformFunction} transformFn Transform function.
 * Called with `[minX, minY, maxX, maxY]` extent coordinates.
 * @param {Extent} [opt_extent] Destination extent.
 * @param {number} [opt_stops] Number of stops per side used for the transform.
 * By default only the corners are used.
 * @return {Extent} Extent.
 * @api
 */ parcelHelpers.export(exports, "applyTransform", ()=>applyTransform);
/**
 * Modifies the provided extent in-place to be within the real world
 * extent.
 *
 * @param {Extent} extent Extent.
 * @param {import("./proj/Projection.js").default} projection Projection
 * @return {Extent} The extent within the real world extent.
 */ parcelHelpers.export(exports, "wrapX", ()=>wrapX);
/**
 * @module ol/extent
 */ var _cornerJs = require("./extent/Corner.js");
var _cornerJsDefault = parcelHelpers.interopDefault(_cornerJs);
var _relationshipJs = require("./extent/Relationship.js");
var _relationshipJsDefault = parcelHelpers.interopDefault(_relationshipJs);
var _assertsJs = require("./asserts.js");
function boundingExtent(coordinates) {
    var extent = createEmpty();
    for(var i = 0, ii = coordinates.length; i < ii; ++i)extendCoordinate(extent, coordinates[i]);
    return extent;
}
/**
 * @param {Array<number>} xs Xs.
 * @param {Array<number>} ys Ys.
 * @param {Extent} [opt_extent] Destination extent.
 * @private
 * @return {Extent} Extent.
 */ function _boundingExtentXYs(xs, ys, opt_extent) {
    var minX = Math.min.apply(null, xs);
    var minY = Math.min.apply(null, ys);
    var maxX = Math.max.apply(null, xs);
    var maxY = Math.max.apply(null, ys);
    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
}
function buffer(extent, value, opt_extent) {
    if (opt_extent) {
        opt_extent[0] = extent[0] - value;
        opt_extent[1] = extent[1] - value;
        opt_extent[2] = extent[2] + value;
        opt_extent[3] = extent[3] + value;
        return opt_extent;
    } else return [
        extent[0] - value,
        extent[1] - value,
        extent[2] + value,
        extent[3] + value, 
    ];
}
function clone(extent, opt_extent) {
    if (opt_extent) {
        opt_extent[0] = extent[0];
        opt_extent[1] = extent[1];
        opt_extent[2] = extent[2];
        opt_extent[3] = extent[3];
        return opt_extent;
    } else return extent.slice();
}
function closestSquaredDistanceXY(extent, x, y) {
    var dx, dy;
    if (x < extent[0]) dx = extent[0] - x;
    else if (extent[2] < x) dx = x - extent[2];
    else dx = 0;
    if (y < extent[1]) dy = extent[1] - y;
    else if (extent[3] < y) dy = y - extent[3];
    else dy = 0;
    return dx * dx + dy * dy;
}
function containsCoordinate(extent, coordinate) {
    return containsXY(extent, coordinate[0], coordinate[1]);
}
function containsExtent(extent1, extent2) {
    return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];
}
function containsXY(extent, x, y) {
    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];
}
function coordinateRelationship(extent, coordinate) {
    var minX = extent[0];
    var minY = extent[1];
    var maxX = extent[2];
    var maxY = extent[3];
    var x = coordinate[0];
    var y = coordinate[1];
    var relationship = (0, _relationshipJsDefault.default).UNKNOWN;
    if (x < minX) relationship = relationship | (0, _relationshipJsDefault.default).LEFT;
    else if (x > maxX) relationship = relationship | (0, _relationshipJsDefault.default).RIGHT;
    if (y < minY) relationship = relationship | (0, _relationshipJsDefault.default).BELOW;
    else if (y > maxY) relationship = relationship | (0, _relationshipJsDefault.default).ABOVE;
    if (relationship === (0, _relationshipJsDefault.default).UNKNOWN) relationship = (0, _relationshipJsDefault.default).INTERSECTING;
    return relationship;
}
function createEmpty() {
    return [
        Infinity,
        Infinity,
        -Infinity,
        -Infinity
    ];
}
function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {
    if (opt_extent) {
        opt_extent[0] = minX;
        opt_extent[1] = minY;
        opt_extent[2] = maxX;
        opt_extent[3] = maxY;
        return opt_extent;
    } else return [
        minX,
        minY,
        maxX,
        maxY
    ];
}
function createOrUpdateEmpty(opt_extent) {
    return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);
}
function createOrUpdateFromCoordinate(coordinate, opt_extent) {
    var x = coordinate[0];
    var y = coordinate[1];
    return createOrUpdate(x, y, x, y, opt_extent);
}
function createOrUpdateFromCoordinates(coordinates, opt_extent) {
    var extent = createOrUpdateEmpty(opt_extent);
    return extendCoordinates(extent, coordinates);
}
function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {
    var extent = createOrUpdateEmpty(opt_extent);
    return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);
}
function createOrUpdateFromRings(rings, opt_extent) {
    var extent = createOrUpdateEmpty(opt_extent);
    return extendRings(extent, rings);
}
function equals(extent1, extent2) {
    return extent1[0] == extent2[0] && extent1[2] == extent2[2] && extent1[1] == extent2[1] && extent1[3] == extent2[3];
}
function approximatelyEquals(extent1, extent2, tolerance) {
    return Math.abs(extent1[0] - extent2[0]) < tolerance && Math.abs(extent1[2] - extent2[2]) < tolerance && Math.abs(extent1[1] - extent2[1]) < tolerance && Math.abs(extent1[3] - extent2[3]) < tolerance;
}
function extend(extent1, extent2) {
    if (extent2[0] < extent1[0]) extent1[0] = extent2[0];
    if (extent2[2] > extent1[2]) extent1[2] = extent2[2];
    if (extent2[1] < extent1[1]) extent1[1] = extent2[1];
    if (extent2[3] > extent1[3]) extent1[3] = extent2[3];
    return extent1;
}
function extendCoordinate(extent, coordinate) {
    if (coordinate[0] < extent[0]) extent[0] = coordinate[0];
    if (coordinate[0] > extent[2]) extent[2] = coordinate[0];
    if (coordinate[1] < extent[1]) extent[1] = coordinate[1];
    if (coordinate[1] > extent[3]) extent[3] = coordinate[1];
}
function extendCoordinates(extent, coordinates) {
    for(var i = 0, ii = coordinates.length; i < ii; ++i)extendCoordinate(extent, coordinates[i]);
    return extent;
}
function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {
    for(; offset < end; offset += stride)extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);
    return extent;
}
function extendRings(extent, rings) {
    for(var i = 0, ii = rings.length; i < ii; ++i)extendCoordinates(extent, rings[i]);
    return extent;
}
function extendXY(extent, x, y) {
    extent[0] = Math.min(extent[0], x);
    extent[1] = Math.min(extent[1], y);
    extent[2] = Math.max(extent[2], x);
    extent[3] = Math.max(extent[3], y);
}
function forEachCorner(extent, callback) {
    var val;
    val = callback(getBottomLeft(extent));
    if (val) return val;
    val = callback(getBottomRight(extent));
    if (val) return val;
    val = callback(getTopRight(extent));
    if (val) return val;
    val = callback(getTopLeft(extent));
    if (val) return val;
    return false;
}
function getArea(extent) {
    var area = 0;
    if (!isEmpty(extent)) area = getWidth(extent) * getHeight(extent);
    return area;
}
function getBottomLeft(extent) {
    return [
        extent[0],
        extent[1]
    ];
}
function getBottomRight(extent) {
    return [
        extent[2],
        extent[1]
    ];
}
function getCenter(extent) {
    return [
        (extent[0] + extent[2]) / 2,
        (extent[1] + extent[3]) / 2
    ];
}
function getCorner(extent, corner) {
    var coordinate;
    if (corner === (0, _cornerJsDefault.default).BOTTOM_LEFT) coordinate = getBottomLeft(extent);
    else if (corner === (0, _cornerJsDefault.default).BOTTOM_RIGHT) coordinate = getBottomRight(extent);
    else if (corner === (0, _cornerJsDefault.default).TOP_LEFT) coordinate = getTopLeft(extent);
    else if (corner === (0, _cornerJsDefault.default).TOP_RIGHT) coordinate = getTopRight(extent);
    else (0, _assertsJs.assert)(false, 13); // Invalid corner
    return coordinate;
}
function getEnlargedArea(extent1, extent2) {
    var minX = Math.min(extent1[0], extent2[0]);
    var minY = Math.min(extent1[1], extent2[1]);
    var maxX = Math.max(extent1[2], extent2[2]);
    var maxY = Math.max(extent1[3], extent2[3]);
    return (maxX - minX) * (maxY - minY);
}
function getForViewAndSize(center, resolution, rotation, size, opt_extent) {
    var dx = resolution * size[0] / 2;
    var dy = resolution * size[1] / 2;
    var cosRotation = Math.cos(rotation);
    var sinRotation = Math.sin(rotation);
    var xCos = dx * cosRotation;
    var xSin = dx * sinRotation;
    var yCos = dy * cosRotation;
    var ySin = dy * sinRotation;
    var x = center[0];
    var y = center[1];
    var x0 = x - xCos + ySin;
    var x1 = x - xCos - ySin;
    var x2 = x + xCos - ySin;
    var x3 = x + xCos + ySin;
    var y0 = y - xSin - yCos;
    var y1 = y - xSin + yCos;
    var y2 = y + xSin + yCos;
    var y3 = y + xSin - yCos;
    return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);
}
function getHeight(extent) {
    return extent[3] - extent[1];
}
function getIntersectionArea(extent1, extent2) {
    var intersection = getIntersection(extent1, extent2);
    return getArea(intersection);
}
function getIntersection(extent1, extent2, opt_extent) {
    var intersection = opt_extent ? opt_extent : createEmpty();
    if (intersects(extent1, extent2)) {
        if (extent1[0] > extent2[0]) intersection[0] = extent1[0];
        else intersection[0] = extent2[0];
        if (extent1[1] > extent2[1]) intersection[1] = extent1[1];
        else intersection[1] = extent2[1];
        if (extent1[2] < extent2[2]) intersection[2] = extent1[2];
        else intersection[2] = extent2[2];
        if (extent1[3] < extent2[3]) intersection[3] = extent1[3];
        else intersection[3] = extent2[3];
    } else createOrUpdateEmpty(intersection);
    return intersection;
}
function getMargin(extent) {
    return getWidth(extent) + getHeight(extent);
}
function getSize(extent) {
    return [
        extent[2] - extent[0],
        extent[3] - extent[1]
    ];
}
function getTopLeft(extent) {
    return [
        extent[0],
        extent[3]
    ];
}
function getTopRight(extent) {
    return [
        extent[2],
        extent[3]
    ];
}
function getWidth(extent) {
    return extent[2] - extent[0];
}
function intersects(extent1, extent2) {
    return extent1[0] <= extent2[2] && extent1[2] >= extent2[0] && extent1[1] <= extent2[3] && extent1[3] >= extent2[1];
}
function isEmpty(extent) {
    return extent[2] < extent[0] || extent[3] < extent[1];
}
function returnOrUpdate(extent, opt_extent) {
    if (opt_extent) {
        opt_extent[0] = extent[0];
        opt_extent[1] = extent[1];
        opt_extent[2] = extent[2];
        opt_extent[3] = extent[3];
        return opt_extent;
    } else return extent;
}
function scaleFromCenter(extent, value) {
    var deltaX = (extent[2] - extent[0]) / 2 * (value - 1);
    var deltaY = (extent[3] - extent[1]) / 2 * (value - 1);
    extent[0] -= deltaX;
    extent[2] += deltaX;
    extent[1] -= deltaY;
    extent[3] += deltaY;
}
function intersectsSegment(extent, start, end) {
    var intersects1 = false;
    var startRel = coordinateRelationship(extent, start);
    var endRel = coordinateRelationship(extent, end);
    if (startRel === (0, _relationshipJsDefault.default).INTERSECTING || endRel === (0, _relationshipJsDefault.default).INTERSECTING) intersects1 = true;
    else {
        var minX = extent[0];
        var minY = extent[1];
        var maxX = extent[2];
        var maxY = extent[3];
        var startX = start[0];
        var startY = start[1];
        var endX = end[0];
        var endY = end[1];
        var slope = (endY - startY) / (endX - startX);
        var x = void 0, y = void 0;
        if (!!(endRel & (0, _relationshipJsDefault.default).ABOVE) && !(startRel & (0, _relationshipJsDefault.default).ABOVE)) {
            // potentially intersects top
            x = endX - (endY - maxY) / slope;
            intersects1 = x >= minX && x <= maxX;
        }
        if (!intersects1 && !!(endRel & (0, _relationshipJsDefault.default).RIGHT) && !(startRel & (0, _relationshipJsDefault.default).RIGHT)) {
            // potentially intersects right
            y = endY - (endX - maxX) * slope;
            intersects1 = y >= minY && y <= maxY;
        }
        if (!intersects1 && !!(endRel & (0, _relationshipJsDefault.default).BELOW) && !(startRel & (0, _relationshipJsDefault.default).BELOW)) {
            // potentially intersects bottom
            x = endX - (endY - minY) / slope;
            intersects1 = x >= minX && x <= maxX;
        }
        if (!intersects1 && !!(endRel & (0, _relationshipJsDefault.default).LEFT) && !(startRel & (0, _relationshipJsDefault.default).LEFT)) {
            // potentially intersects left
            y = endY - (endX - minX) * slope;
            intersects1 = y >= minY && y <= maxY;
        }
    }
    return intersects1;
}
function applyTransform(extent, transformFn, opt_extent, opt_stops) {
    var coordinates = [];
    if (opt_stops > 1) {
        var width = extent[2] - extent[0];
        var height = extent[3] - extent[1];
        for(var i = 0; i < opt_stops; ++i)coordinates.push(extent[0] + width * i / opt_stops, extent[1], extent[2], extent[1] + height * i / opt_stops, extent[2] - width * i / opt_stops, extent[3], extent[0], extent[3] - height * i / opt_stops);
    } else coordinates = [
        extent[0],
        extent[1],
        extent[2],
        extent[1],
        extent[2],
        extent[3],
        extent[0],
        extent[3], 
    ];
    transformFn(coordinates, coordinates, 2);
    var xs = [];
    var ys = [];
    for(var i = 0, l = coordinates.length; i < l; i += 2){
        xs.push(coordinates[i]);
        ys.push(coordinates[i + 1]);
    }
    return _boundingExtentXYs(xs, ys, opt_extent);
}
function wrapX(extent, projection) {
    var projectionExtent = projection.getExtent();
    var center = getCenter(extent);
    if (projection.canWrapX() && (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {
        var worldWidth = getWidth(projectionExtent);
        var worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);
        var offset = worldsAway * worldWidth;
        extent[0] -= offset;
        extent[2] -= offset;
    }
    return extent;
}

},{"./extent/Corner.js":"cPFYO","./extent/Relationship.js":"9q0e7","./asserts.js":"e4TiF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cPFYO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/extent/Corner
 */ /**
 * Extent corner.
 * @enum {string}
 */ exports.default = {
    BOTTOM_LEFT: "bottom-left",
    BOTTOM_RIGHT: "bottom-right",
    TOP_LEFT: "top-left",
    TOP_RIGHT: "top-right"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9q0e7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/extent/Relationship
 */ /**
 * Relationship to an extent.
 * @enum {number}
 */ exports.default = {
    UNKNOWN: 0,
    INTERSECTING: 1,
    ABOVE: 2,
    RIGHT: 4,
    BELOW: 8,
    LEFT: 16
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e4TiF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {*} assertion Assertion we expected to be truthy.
 * @param {number} errorCode Error code.
 */ parcelHelpers.export(exports, "assert", ()=>assert);
/**
 * @module ol/asserts
 */ var _assertionErrorJs = require("./AssertionError.js");
var _assertionErrorJsDefault = parcelHelpers.interopDefault(_assertionErrorJs);
function assert(assertion, errorCode) {
    if (!assertion) throw new (0, _assertionErrorJsDefault.default)(errorCode);
}

},{"./AssertionError.js":"1MBbN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1MBbN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/AssertionError
 */ var _utilJs = require("./util.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * Error object thrown when an assertion failed. This is an ECMA-262 Error,
 * extended with a `code` property.
 * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.
 */ var AssertionError = /** @class */ function(_super) {
    __extends(AssertionError1, _super);
    /**
     * @param {number} code Error code.
     */ function AssertionError1(code) {
        var _this = this;
        var path = (0, _utilJs.VERSION) === "latest" ? (0, _utilJs.VERSION) : "v" + (0, _utilJs.VERSION).split("-")[0];
        var message = "Assertion failed. See https://openlayers.org/en/" + path + "/doc/errors/#" + code + " for details.";
        _this = _super.call(this, message) || this;
        /**
         * Error code. The meaning of the code can be found on
         * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with
         * the version found in the OpenLayers script's header comment if a version
         * other than the latest is used).
         * @type {number}
         * @api
         */ _this.code = code;
        /**
         * @type {string}
         */ _this.name = "AssertionError";
        // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40
        _this.message = message;
        return _this;
    }
    return AssertionError1;
}(Error);
exports.default = AssertionError;

},{"./util.js":"pLBjQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"pLBjQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/util
 */ /**
 * @return {?} Any return.
 */ parcelHelpers.export(exports, "abstract", ()=>abstract);
/**
 * Gets a unique ID for an object. This mutates the object so that further calls
 * with the same object as a parameter returns the same value. Unique IDs are generated
 * as a strictly increasing sequence. Adapted from goog.getUid.
 *
 * @param {Object} obj The object to get the unique ID for.
 * @return {string} The unique ID for the object.
 * @api
 */ parcelHelpers.export(exports, "getUid", ()=>getUid);
parcelHelpers.export(exports, "VERSION", ()=>VERSION);
function abstract() {
    return /** @type {?} */ function() {
        throw new Error("Unimplemented abstract method.");
    }();
}
/**
 * Counter for getUid.
 * @type {number}
 * @private
 */ var uidCounter_ = 0;
function getUid(obj) {
    return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));
}
var VERSION = "6.14.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"85Vu7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * An array of numbers representing an xy coordinate. Example: `[16, 48]`.
 * @typedef {Array<number>} Coordinate
 * @api
 */ /**
 * A function that takes a {@link module:ol/coordinate~Coordinate} and
 * transforms it into a `{string}`.
 *
 * @typedef {function((Coordinate|undefined)): string} CoordinateFormat
 * @api
 */ /**
 * Add `delta` to `coordinate`. `coordinate` is modified in place and returned
 * by the function.
 *
 * Example:
 *
 *     import {add} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     add(coord, [-2, 4]);
 *     // coord is now [5.85, 51.983333]
 *
 * @param {Coordinate} coordinate Coordinate.
 * @param {Coordinate} delta Delta.
 * @return {Coordinate} The input coordinate adjusted by
 * the given delta.
 * @api
 */ parcelHelpers.export(exports, "add", ()=>add);
/**
 * Calculates the point closest to the passed coordinate on the passed circle.
 *
 * @param {Coordinate} coordinate The coordinate.
 * @param {import("./geom/Circle.js").default} circle The circle.
 * @return {Coordinate} Closest point on the circumference.
 */ parcelHelpers.export(exports, "closestOnCircle", ()=>closestOnCircle);
/**
 * Calculates the point closest to the passed coordinate on the passed segment.
 * This is the foot of the perpendicular of the coordinate to the segment when
 * the foot is on the segment, or the closest segment coordinate when the foot
 * is outside the segment.
 *
 * @param {Coordinate} coordinate The coordinate.
 * @param {Array<Coordinate>} segment The two coordinates
 * of the segment.
 * @return {Coordinate} The foot of the perpendicular of
 * the coordinate to the segment.
 */ parcelHelpers.export(exports, "closestOnSegment", ()=>closestOnSegment);
/**
 * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be
 * used to format
 * a {Coordinate} to a string.
 *
 * Example without specifying the fractional digits:
 *
 *     import {createStringXY} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var stringifyFunc = createStringXY();
 *     var out = stringifyFunc(coord);
 *     // out is now '8, 48'
 *
 * Example with explicitly specifying 2 fractional digits:
 *
 *     import {createStringXY} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var stringifyFunc = createStringXY(2);
 *     var out = stringifyFunc(coord);
 *     // out is now '7.85, 47.98'
 *
 * @param {number} [opt_fractionDigits] The number of digits to include
 *    after the decimal point. Default is `0`.
 * @return {CoordinateFormat} Coordinate format.
 * @api
 */ parcelHelpers.export(exports, "createStringXY", ()=>createStringXY);
/**
 * @param {string} hemispheres Hemispheres.
 * @param {number} degrees Degrees.
 * @param {number} [opt_fractionDigits] The number of digits to include
 *    after the decimal point. Default is `0`.
 * @return {string} String.
 */ parcelHelpers.export(exports, "degreesToStringHDMS", ()=>degreesToStringHDMS);
/**
 * Transforms the given {@link module:ol/coordinate~Coordinate} to a string
 * using the given string template. The strings `{x}` and `{y}` in the template
 * will be replaced with the first and second coordinate values respectively.
 *
 * Example without specifying the fractional digits:
 *
 *     import {format} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var template = 'Coordinate is ({x}|{y}).';
 *     var out = format(coord, template);
 *     // out is now 'Coordinate is (8|48).'
 *
 * Example explicitly specifying the fractional digits:
 *
 *     import {format} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var template = 'Coordinate is ({x}|{y}).';
 *     var out = format(coord, template, 2);
 *     // out is now 'Coordinate is (7.85|47.98).'
 *
 * @param {Coordinate} coordinate Coordinate.
 * @param {string} template A template string with `{x}` and `{y}` placeholders
 *     that will be replaced by first and second coordinate values.
 * @param {number} [opt_fractionDigits] The number of digits to include
 *    after the decimal point. Default is `0`.
 * @return {string} Formatted coordinate.
 * @api
 */ parcelHelpers.export(exports, "format", ()=>format);
/**
 * @param {Coordinate} coordinate1 First coordinate.
 * @param {Coordinate} coordinate2 Second coordinate.
 * @return {boolean} The two coordinates are equal.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
/**
 * Rotate `coordinate` by `angle`. `coordinate` is modified in place and
 * returned by the function.
 *
 * Example:
 *
 *     import {rotate} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var rotateRadians = Math.PI / 2; // 90 degrees
 *     rotate(coord, rotateRadians);
 *     // coord is now [-47.983333, 7.85]
 *
 * @param {Coordinate} coordinate Coordinate.
 * @param {number} angle Angle in radian.
 * @return {Coordinate} Coordinate.
 * @api
 */ parcelHelpers.export(exports, "rotate", ()=>rotate);
/**
 * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned
 * by the function.
 *
 * Example:
 *
 *     import {scale as scaleCoordinate} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var scale = 1.2;
 *     scaleCoordinate(coord, scale);
 *     // coord is now [9.42, 57.5799996]
 *
 * @param {Coordinate} coordinate Coordinate.
 * @param {number} scale Scale factor.
 * @return {Coordinate} Coordinate.
 */ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * @param {Coordinate} coord1 First coordinate.
 * @param {Coordinate} coord2 Second coordinate.
 * @return {number} Squared distance between coord1 and coord2.
 */ parcelHelpers.export(exports, "squaredDistance", ()=>squaredDistance);
/**
 * @param {Coordinate} coord1 First coordinate.
 * @param {Coordinate} coord2 Second coordinate.
 * @return {number} Distance between coord1 and coord2.
 */ parcelHelpers.export(exports, "distance", ()=>distance);
/**
 * Calculate the squared distance from a coordinate to a line segment.
 *
 * @param {Coordinate} coordinate Coordinate of the point.
 * @param {Array<Coordinate>} segment Line segment (2
 * coordinates).
 * @return {number} Squared distance from the point to the line segment.
 */ parcelHelpers.export(exports, "squaredDistanceToSegment", ()=>squaredDistanceToSegment);
/**
 * Format a geographic coordinate with the hemisphere, degrees, minutes, and
 * seconds.
 *
 * Example without specifying fractional digits:
 *
 *     import {toStringHDMS} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var out = toStringHDMS(coord);
 *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'
 *
 * Example explicitly specifying 1 fractional digit:
 *
 *     import {toStringHDMS} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var out = toStringHDMS(coord, 1);
 *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'
 *
 * @param {Coordinate} coordinate Coordinate.
 * @param {number} [opt_fractionDigits] The number of digits to include
 *    after the decimal point. Default is `0`.
 * @return {string} Hemisphere, degrees, minutes and seconds.
 * @api
 */ parcelHelpers.export(exports, "toStringHDMS", ()=>toStringHDMS);
/**
 * Format a coordinate as a comma delimited string.
 *
 * Example without specifying fractional digits:
 *
 *     import {toStringXY} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var out = toStringXY(coord);
 *     // out is now '8, 48'
 *
 * Example explicitly specifying 1 fractional digit:
 *
 *     import {toStringXY} from 'ol/coordinate';
 *
 *     var coord = [7.85, 47.983333];
 *     var out = toStringXY(coord, 1);
 *     // out is now '7.8, 48.0'
 *
 * @param {Coordinate} coordinate Coordinate.
 * @param {number} [opt_fractionDigits] The number of digits to include
 *    after the decimal point. Default is `0`.
 * @return {string} XY.
 * @api
 */ parcelHelpers.export(exports, "toStringXY", ()=>toStringXY);
/**
 * Modifies the provided coordinate in-place to be within the real world
 * extent. The lower projection extent boundary is inclusive, the upper one
 * exclusive.
 *
 * @param {Coordinate} coordinate Coordinate.
 * @param {import("./proj/Projection.js").default} projection Projection.
 * @return {Coordinate} The coordinate within the real world extent.
 */ parcelHelpers.export(exports, "wrapX", ()=>wrapX);
/**
 * @param {Coordinate} coordinate Coordinate.
 * @param {import("./proj/Projection.js").default} projection Projection.
 * @param {number} [opt_sourceExtentWidth] Width of the source extent.
 * @return {number} Offset in world widths.
 */ parcelHelpers.export(exports, "getWorldsAway", ()=>getWorldsAway);
/**
 * @module ol/coordinate
 */ var _extentJs = require("./extent.js");
var _mathJs = require("./math.js");
var _stringJs = require("./string.js");
function add(coordinate, delta) {
    coordinate[0] += +delta[0];
    coordinate[1] += +delta[1];
    return coordinate;
}
function closestOnCircle(coordinate, circle) {
    var r = circle.getRadius();
    var center = circle.getCenter();
    var x0 = center[0];
    var y0 = center[1];
    var x1 = coordinate[0];
    var y1 = coordinate[1];
    var dx = x1 - x0;
    var dy = y1 - y0;
    if (dx === 0 && dy === 0) dx = 1;
    var d = Math.sqrt(dx * dx + dy * dy);
    var x = x0 + r * dx / d;
    var y = y0 + r * dy / d;
    return [
        x,
        y
    ];
}
function closestOnSegment(coordinate, segment) {
    var x0 = coordinate[0];
    var y0 = coordinate[1];
    var start = segment[0];
    var end = segment[1];
    var x1 = start[0];
    var y1 = start[1];
    var x2 = end[0];
    var y2 = end[1];
    var dx = x2 - x1;
    var dy = y2 - y1;
    var along = dx === 0 && dy === 0 ? 0 : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);
    var x, y;
    if (along <= 0) {
        x = x1;
        y = y1;
    } else if (along >= 1) {
        x = x2;
        y = y2;
    } else {
        x = x1 + along * dx;
        y = y1 + along * dy;
    }
    return [
        x,
        y
    ];
}
function createStringXY(opt_fractionDigits) {
    return(/**
     * @param {Coordinate} coordinate Coordinate.
     * @return {string} String XY.
     */ function(coordinate) {
        return toStringXY(coordinate, opt_fractionDigits);
    });
}
function degreesToStringHDMS(hemispheres, degrees, opt_fractionDigits) {
    var normalizedDegrees = (0, _mathJs.modulo)(degrees + 180, 360) - 180;
    var x = Math.abs(3600 * normalizedDegrees);
    var dflPrecision = opt_fractionDigits || 0;
    var precision = Math.pow(10, dflPrecision);
    var deg = Math.floor(x / 3600);
    var min = Math.floor((x - deg * 3600) / 60);
    var sec = x - deg * 3600 - min * 60;
    sec = Math.ceil(sec * precision) / precision;
    if (sec >= 60) {
        sec = 0;
        min += 1;
    }
    if (min >= 60) {
        min = 0;
        deg += 1;
    }
    return deg + "\xb0 " + (0, _stringJs.padNumber)(min, 2) + "\u2032 " + (0, _stringJs.padNumber)(sec, 2, dflPrecision) + "\u2033" + (normalizedDegrees == 0 ? "" : " " + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0));
}
function format(coordinate, template, opt_fractionDigits) {
    if (coordinate) return template.replace("{x}", coordinate[0].toFixed(opt_fractionDigits)).replace("{y}", coordinate[1].toFixed(opt_fractionDigits));
    else return "";
}
function equals(coordinate1, coordinate2) {
    var equals1 = true;
    for(var i = coordinate1.length - 1; i >= 0; --i)if (coordinate1[i] != coordinate2[i]) {
        equals1 = false;
        break;
    }
    return equals1;
}
function rotate(coordinate, angle) {
    var cosAngle = Math.cos(angle);
    var sinAngle = Math.sin(angle);
    var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
    var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
    coordinate[0] = x;
    coordinate[1] = y;
    return coordinate;
}
function scale(coordinate, scale1) {
    coordinate[0] *= scale1;
    coordinate[1] *= scale1;
    return coordinate;
}
function squaredDistance(coord1, coord2) {
    var dx = coord1[0] - coord2[0];
    var dy = coord1[1] - coord2[1];
    return dx * dx + dy * dy;
}
function distance(coord1, coord2) {
    return Math.sqrt(squaredDistance(coord1, coord2));
}
function squaredDistanceToSegment(coordinate, segment) {
    return squaredDistance(coordinate, closestOnSegment(coordinate, segment));
}
function toStringHDMS(coordinate, opt_fractionDigits) {
    if (coordinate) return degreesToStringHDMS("NS", coordinate[1], opt_fractionDigits) + " " + degreesToStringHDMS("EW", coordinate[0], opt_fractionDigits);
    else return "";
}
function toStringXY(coordinate, opt_fractionDigits) {
    return format(coordinate, "{x}, {y}", opt_fractionDigits);
}
function wrapX(coordinate, projection) {
    if (projection.canWrapX()) {
        var worldWidth = (0, _extentJs.getWidth)(projection.getExtent());
        var worldsAway = getWorldsAway(coordinate, projection, worldWidth);
        if (worldsAway) coordinate[0] -= worldsAway * worldWidth;
    }
    return coordinate;
}
function getWorldsAway(coordinate, projection, opt_sourceExtentWidth) {
    var projectionExtent = projection.getExtent();
    var worldsAway = 0;
    if (projection.canWrapX() && (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])) {
        var sourceExtentWidth = opt_sourceExtentWidth || (0, _extentJs.getWidth)(projectionExtent);
        worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / sourceExtentWidth);
    }
    return worldsAway;
}

},{"./extent.js":"6YrVc","./math.js":"5jEFr","./string.js":"fIYwS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fIYwS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/string
 */ /**
 * @param {number} number Number to be formatted
 * @param {number} width The desired width
 * @param {number} [opt_precision] Precision of the output string (i.e. number of decimal places)
 * @return {string} Formatted string
 */ parcelHelpers.export(exports, "padNumber", ()=>padNumber);
/**
 * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js
 * @param {string|number} v1 First version
 * @param {string|number} v2 Second version
 * @return {number} Value
 */ parcelHelpers.export(exports, "compareVersions", ()=>compareVersions);
function padNumber(number, width, opt_precision) {
    var numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : "" + number;
    var decimal = numberString.indexOf(".");
    decimal = decimal === -1 ? numberString.length : decimal;
    return decimal > width ? numberString : new Array(1 + width - decimal).join("0") + numberString;
}
function compareVersions(v1, v2) {
    var s1 = ("" + v1).split(".");
    var s2 = ("" + v2).split(".");
    for(var i = 0; i < Math.max(s1.length, s2.length); i++){
        var n1 = parseInt(s1[i] || "0", 10);
        var n2 = parseInt(s2[i] || "0", 10);
        if (n1 > n2) return 1;
        if (n2 > n1) return -1;
    }
    return 0;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eJjHw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_RADIUS", ()=>DEFAULT_RADIUS);
/**
 * Get the great circle distance (in meters) between two geographic coordinates.
 * @param {Array} c1 Starting coordinate.
 * @param {Array} c2 Ending coordinate.
 * @param {number} [opt_radius] The sphere radius to use.  Defaults to the Earth's
 *     mean radius using the WGS84 ellipsoid.
 * @return {number} The great circle distance between the points (in meters).
 * @api
 */ parcelHelpers.export(exports, "getDistance", ()=>getDistance);
/**
 * Get the spherical length of a geometry.  This length is the sum of the
 * great circle distances between coordinates.  For polygons, the length is
 * the sum of all rings.  For points, the length is zero.  For multi-part
 * geometries, the length is the sum of the length of each part.
 * @param {import("./geom/Geometry.js").default} geometry A geometry.
 * @param {SphereMetricOptions} [opt_options] Options for the
 * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.
 * You can change this by providing a `projection` option.
 * @return {number} The spherical length (in meters).
 * @api
 */ parcelHelpers.export(exports, "getLength", ()=>getLength);
/**
 * Get the spherical area of a geometry.  This is the area (in meters) assuming
 * that polygon edges are segments of great circles on a sphere.
 * @param {import("./geom/Geometry.js").default} geometry A geometry.
 * @param {SphereMetricOptions} [opt_options] Options for the area
 *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.
 *     You can change this by providing a `projection` option.
 * @return {number} The spherical area (in square meters).
 * @api
 */ parcelHelpers.export(exports, "getArea", ()=>getArea);
/**
 * Returns the coordinate at the given distance and bearing from `c1`.
 *
 * @param {import("./coordinate.js").Coordinate} c1 The origin point (`[lon, lat]` in degrees).
 * @param {number} distance The great-circle distance between the origin
 *     point and the target point.
 * @param {number} bearing The bearing (in radians).
 * @param {number} [opt_radius] The sphere radius to use.  Defaults to the Earth's
 *     mean radius using the WGS84 ellipsoid.
 * @return {import("./coordinate.js").Coordinate} The target point.
 */ parcelHelpers.export(exports, "offset", ()=>offset);
/**
 * @module ol/sphere
 */ var _geometryTypeJs = require("./geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _mathJs = require("./math.js");
var DEFAULT_RADIUS = 6371008.8;
function getDistance(c1, c2, opt_radius) {
    var radius = opt_radius || DEFAULT_RADIUS;
    var lat1 = (0, _mathJs.toRadians)(c1[1]);
    var lat2 = (0, _mathJs.toRadians)(c2[1]);
    var deltaLatBy2 = (lat2 - lat1) / 2;
    var deltaLonBy2 = (0, _mathJs.toRadians)(c2[0] - c1[0]) / 2;
    var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) + Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) * Math.cos(lat1) * Math.cos(lat2);
    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
}
/**
 * Get the cumulative great circle length of linestring coordinates (geographic).
 * @param {Array} coordinates Linestring coordinates.
 * @param {number} radius The sphere radius to use.
 * @return {number} The length (in meters).
 */ function getLengthInternal(coordinates, radius) {
    var length = 0;
    for(var i = 0, ii = coordinates.length; i < ii - 1; ++i)length += getDistance(coordinates[i], coordinates[i + 1], radius);
    return length;
}
function getLength(geometry, opt_options) {
    var options = opt_options || {};
    var radius = options.radius || DEFAULT_RADIUS;
    var projection = options.projection || "EPSG:3857";
    var type = geometry.getType();
    if (type !== (0, _geometryTypeJsDefault.default).GEOMETRY_COLLECTION) geometry = geometry.clone().transform(projection, "EPSG:4326");
    var length = 0;
    var coordinates, coords, i, ii, j, jj;
    switch(type){
        case (0, _geometryTypeJsDefault.default).POINT:
        case (0, _geometryTypeJsDefault.default).MULTI_POINT:
            break;
        case (0, _geometryTypeJsDefault.default).LINE_STRING:
        case (0, _geometryTypeJsDefault.default).LINEAR_RING:
            coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ geometry.getCoordinates();
            length = getLengthInternal(coordinates, radius);
            break;
        case (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING:
        case (0, _geometryTypeJsDefault.default).POLYGON:
            coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ geometry.getCoordinates();
            for(i = 0, ii = coordinates.length; i < ii; ++i)length += getLengthInternal(coordinates[i], radius);
            break;
        case (0, _geometryTypeJsDefault.default).MULTI_POLYGON:
            coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ geometry.getCoordinates();
            for(i = 0, ii = coordinates.length; i < ii; ++i){
                coords = coordinates[i];
                for(j = 0, jj = coords.length; j < jj; ++j)length += getLengthInternal(coords[j], radius);
            }
            break;
        case (0, _geometryTypeJsDefault.default).GEOMETRY_COLLECTION:
            var geometries = /** @type {import("./geom/GeometryCollection.js").default} */ geometry.getGeometries();
            for(i = 0, ii = geometries.length; i < ii; ++i)length += getLength(geometries[i], opt_options);
            break;
        default:
            throw new Error("Unsupported geometry type: " + type);
    }
    return length;
}
/**
 * Returns the spherical area for a list of coordinates.
 *
 * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)
 * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for
 * Polygons on a Sphere", JPL Publication 07-03, Jet Propulsion
 * Laboratory, Pasadena, CA, June 2007
 *
 * @param {Array<import("./coordinate.js").Coordinate>} coordinates List of coordinates of a linear
 * ring. If the ring is oriented clockwise, the area will be positive,
 * otherwise it will be negative.
 * @param {number} radius The sphere radius.
 * @return {number} Area (in square meters).
 */ function getAreaInternal(coordinates, radius) {
    var area = 0;
    var len = coordinates.length;
    var x1 = coordinates[len - 1][0];
    var y1 = coordinates[len - 1][1];
    for(var i = 0; i < len; i++){
        var x2 = coordinates[i][0];
        var y2 = coordinates[i][1];
        area += (0, _mathJs.toRadians)(x2 - x1) * (2 + Math.sin((0, _mathJs.toRadians)(y1)) + Math.sin((0, _mathJs.toRadians)(y2)));
        x1 = x2;
        y1 = y2;
    }
    return area * radius * radius / 2.0;
}
function getArea(geometry, opt_options) {
    var options = opt_options || {};
    var radius = options.radius || DEFAULT_RADIUS;
    var projection = options.projection || "EPSG:3857";
    var type = geometry.getType();
    if (type !== (0, _geometryTypeJsDefault.default).GEOMETRY_COLLECTION) geometry = geometry.clone().transform(projection, "EPSG:4326");
    var area = 0;
    var coordinates, coords, i, ii, j, jj;
    switch(type){
        case (0, _geometryTypeJsDefault.default).POINT:
        case (0, _geometryTypeJsDefault.default).MULTI_POINT:
        case (0, _geometryTypeJsDefault.default).LINE_STRING:
        case (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING:
        case (0, _geometryTypeJsDefault.default).LINEAR_RING:
            break;
        case (0, _geometryTypeJsDefault.default).POLYGON:
            coordinates = /** @type {import("./geom/Polygon.js").default} */ geometry.getCoordinates();
            area = Math.abs(getAreaInternal(coordinates[0], radius));
            for(i = 1, ii = coordinates.length; i < ii; ++i)area -= Math.abs(getAreaInternal(coordinates[i], radius));
            break;
        case (0, _geometryTypeJsDefault.default).MULTI_POLYGON:
            coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ geometry.getCoordinates();
            for(i = 0, ii = coordinates.length; i < ii; ++i){
                coords = coordinates[i];
                area += Math.abs(getAreaInternal(coords[0], radius));
                for(j = 1, jj = coords.length; j < jj; ++j)area -= Math.abs(getAreaInternal(coords[j], radius));
            }
            break;
        case (0, _geometryTypeJsDefault.default).GEOMETRY_COLLECTION:
            var geometries = /** @type {import("./geom/GeometryCollection.js").default} */ geometry.getGeometries();
            for(i = 0, ii = geometries.length; i < ii; ++i)area += getArea(geometries[i], opt_options);
            break;
        default:
            throw new Error("Unsupported geometry type: " + type);
    }
    return area;
}
function offset(c1, distance, bearing, opt_radius) {
    var radius = opt_radius || DEFAULT_RADIUS;
    var lat1 = (0, _mathJs.toRadians)(c1[1]);
    var lon1 = (0, _mathJs.toRadians)(c1[0]);
    var dByR = distance / radius;
    var lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));
    var lon = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));
    return [
        (0, _mathJs.toDegrees)(lon),
        (0, _mathJs.toDegrees)(lat)
    ];
}

},{"./geom/GeometryType.js":"j6daa","./math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j6daa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/GeometryType
 */ /**
 * The geometry type. One of `'Point'`, `'LineString'`, `'LinearRing'`,
 * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
 * `'GeometryCollection'`, `'Circle'`.
 * @enum {string}
 */ exports.default = {
    POINT: "Point",
    LINE_STRING: "LineString",
    LINEAR_RING: "LinearRing",
    POLYGON: "Polygon",
    MULTI_POINT: "MultiPoint",
    MULTI_LINE_STRING: "MultiLineString",
    MULTI_POLYGON: "MultiPolygon",
    GEOMETRY_COLLECTION: "GeometryCollection",
    CIRCLE: "Circle"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Pehg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Attribution", ()=>(0, _attributionJsDefault.default));
parcelHelpers.export(exports, "Control", ()=>(0, _controlJsDefault.default));
parcelHelpers.export(exports, "FullScreen", ()=>(0, _fullScreenJsDefault.default));
parcelHelpers.export(exports, "MousePosition", ()=>(0, _mousePositionJsDefault.default));
parcelHelpers.export(exports, "OverviewMap", ()=>(0, _overviewMapJsDefault.default));
parcelHelpers.export(exports, "Rotate", ()=>(0, _rotateJsDefault.default));
parcelHelpers.export(exports, "ScaleLine", ()=>(0, _scaleLineJsDefault.default));
parcelHelpers.export(exports, "Zoom", ()=>(0, _zoomJsDefault.default));
parcelHelpers.export(exports, "ZoomSlider", ()=>(0, _zoomSliderJsDefault.default));
parcelHelpers.export(exports, "ZoomToExtent", ()=>(0, _zoomToExtentJsDefault.default));
/**
 * @typedef {Object} DefaultsOptions
 * @property {boolean} [attribution=true] Include
 * {@link module:ol/control/Attribution~Attribution}.
 * @property {import("./control/Attribution.js").Options} [attributionOptions]
 * Options for {@link module:ol/control/Attribution~Attribution}.
 * @property {boolean} [rotate=true] Include
 * {@link module:ol/control/Rotate~Rotate}.
 * @property {import("./control/Rotate.js").Options} [rotateOptions] Options
 * for {@link module:ol/control/Rotate~Rotate}.
 * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.
 * @property {import("./control/Zoom.js").Options} [zoomOptions] Options for
 * {@link module:ol/control/Zoom~Zoom}.
 * @api
 */ /**
 * Set of controls included in maps by default. Unless configured otherwise,
 * this returns a collection containing an instance of each of the following
 * controls:
 * * {@link module:ol/control/Zoom~Zoom}
 * * {@link module:ol/control/Rotate~Rotate}
 * * {@link module:ol/control/Attribution~Attribution}
 *
 * @param {DefaultsOptions} [opt_options]
 * Defaults options.
 * @return {Collection<import("./control/Control.js").default>}
 * Controls.
 * @api
 */ parcelHelpers.export(exports, "defaults", ()=>defaults);
/**
 * @module ol/control
 */ var _attributionJs = require("./control/Attribution.js");
var _attributionJsDefault = parcelHelpers.interopDefault(_attributionJs);
var _collectionJs = require("./Collection.js");
var _collectionJsDefault = parcelHelpers.interopDefault(_collectionJs);
var _rotateJs = require("./control/Rotate.js");
var _rotateJsDefault = parcelHelpers.interopDefault(_rotateJs);
var _zoomJs = require("./control/Zoom.js");
var _zoomJsDefault = parcelHelpers.interopDefault(_zoomJs);
var _controlJs = require("./control/Control.js");
var _controlJsDefault = parcelHelpers.interopDefault(_controlJs);
var _fullScreenJs = require("./control/FullScreen.js");
var _fullScreenJsDefault = parcelHelpers.interopDefault(_fullScreenJs);
var _mousePositionJs = require("./control/MousePosition.js");
var _mousePositionJsDefault = parcelHelpers.interopDefault(_mousePositionJs);
var _overviewMapJs = require("./control/OverviewMap.js");
var _overviewMapJsDefault = parcelHelpers.interopDefault(_overviewMapJs);
var _scaleLineJs = require("./control/ScaleLine.js");
var _scaleLineJsDefault = parcelHelpers.interopDefault(_scaleLineJs);
var _zoomSliderJs = require("./control/ZoomSlider.js");
var _zoomSliderJsDefault = parcelHelpers.interopDefault(_zoomSliderJs);
var _zoomToExtentJs = require("./control/ZoomToExtent.js");
var _zoomToExtentJsDefault = parcelHelpers.interopDefault(_zoomToExtentJs);
function defaults(opt_options) {
    var options = opt_options ? opt_options : {};
    var controls = new (0, _collectionJsDefault.default)();
    var zoomControl = options.zoom !== undefined ? options.zoom : true;
    if (zoomControl) controls.push(new (0, _zoomJsDefault.default)(options.zoomOptions));
    var rotateControl = options.rotate !== undefined ? options.rotate : true;
    if (rotateControl) controls.push(new (0, _rotateJsDefault.default)(options.rotateOptions));
    var attributionControl = options.attribution !== undefined ? options.attribution : true;
    if (attributionControl) controls.push(new (0, _attributionJsDefault.default)(options.attributionOptions));
    return controls;
}

},{"./control/Attribution.js":"34CRm","./Collection.js":"gReoh","./control/Rotate.js":"h01dD","./control/Zoom.js":"956F8","./control/Control.js":"a2mnq","./control/FullScreen.js":"jT75q","./control/MousePosition.js":"3RlUn","./control/OverviewMap.js":"5pnxZ","./control/ScaleLine.js":"4aXFi","./control/ZoomSlider.js":"9lbTD","./control/ZoomToExtent.js":"ifceJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"34CRm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/control/Attribution
 */ var _controlJs = require("./Control.js");
var _controlJsDefault = parcelHelpers.interopDefault(_controlJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _cssJs = require("../css.js");
var _arrayJs = require("../array.js");
var _layerJs = require("../layer/Layer.js");
var _domJs = require("../dom.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {string} [className='ol-attribution'] CSS class name.
 * @property {HTMLElement|string} [target] Specify a target if you
 * want the control to be rendered outside of the map's
 * viewport.
 * @property {boolean} [collapsible] Specify if attributions can
 * be collapsed. If not specified, sources control this behavior with their
 * `attributionsCollapsible` setting.
 * @property {boolean} [collapsed=true] Specify if attributions should
 * be collapsed at startup.
 * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.
 * @property {string|HTMLElement} [label='i'] Text label to use for the
 * collapsed attributions button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [expandClassName=className + '-expand'] CSS class name for the
 * collapsed attributions button.
 * @property {string|HTMLElement} [collapseLabel='›'] Text label to use
 * for the expanded attributions button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the
 * expanded attributions button.
 * @property {function(import("../MapEvent.js").default):void} [render] Function called when
 * the control should be re-rendered. This is called in a `requestAnimationFrame`
 * callback.
 */ /**
 * @classdesc
 * Control to show all the attributions associated with the layer sources
 * in the map. This control is one of the default controls included in maps.
 * By default it will show in the bottom right portion of the map, but this can
 * be changed by using a css selector for `.ol-attribution`.
 *
 * @api
 */ var Attribution = /** @class */ function(_super) {
    __extends(Attribution1, _super);
    /**
     * @param {Options} [opt_options] Attribution options.
     */ function Attribution1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this, {
            element: document.createElement("div"),
            render: options.render,
            target: options.target
        }) || this;
        /**
         * @private
         * @type {HTMLElement}
         */ _this.ulElement_ = document.createElement("ul");
        /**
         * @private
         * @type {boolean}
         */ _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;
        /**
         * @private
         * @type {boolean}
         */ _this.userCollapsed_ = _this.collapsed_;
        /**
         * @private
         * @type {boolean}
         */ _this.overrideCollapsible_ = options.collapsible !== undefined;
        /**
         * @private
         * @type {boolean}
         */ _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;
        if (!_this.collapsible_) _this.collapsed_ = false;
        var className = options.className !== undefined ? options.className : "ol-attribution";
        var tipLabel = options.tipLabel !== undefined ? options.tipLabel : "Attributions";
        var expandClassName = options.expandClassName !== undefined ? options.expandClassName : className + "-expand";
        var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : "\u203A";
        var collapseClassName = options.collapseClassName !== undefined ? options.collapseClassName : className + "-collapse";
        if (typeof collapseLabel === "string") {
            /**
             * @private
             * @type {HTMLElement}
             */ _this.collapseLabel_ = document.createElement("span");
            _this.collapseLabel_.textContent = collapseLabel;
            _this.collapseLabel_.className = collapseClassName;
        } else _this.collapseLabel_ = collapseLabel;
        var label = options.label !== undefined ? options.label : "i";
        if (typeof label === "string") {
            /**
             * @private
             * @type {HTMLElement}
             */ _this.label_ = document.createElement("span");
            _this.label_.textContent = label;
            _this.label_.className = expandClassName;
        } else _this.label_ = label;
        var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;
        /**
         * @private
         * @type {HTMLElement}
         */ _this.toggleButton_ = document.createElement("button");
        _this.toggleButton_.setAttribute("type", "button");
        _this.toggleButton_.setAttribute("aria-expanded", String(!_this.collapsed_));
        _this.toggleButton_.title = tipLabel;
        _this.toggleButton_.appendChild(activeLabel);
        _this.toggleButton_.addEventListener((0, _eventTypeJsDefault.default).CLICK, _this.handleClick_.bind(_this), false);
        var cssClasses = className + " " + (0, _cssJs.CLASS_UNSELECTABLE) + " " + (0, _cssJs.CLASS_CONTROL) + (_this.collapsed_ && _this.collapsible_ ? " " + (0, _cssJs.CLASS_COLLAPSED) : "") + (_this.collapsible_ ? "" : " ol-uncollapsible");
        var element = _this.element;
        element.className = cssClasses;
        element.appendChild(_this.toggleButton_);
        element.appendChild(_this.ulElement_);
        /**
         * A list of currently rendered resolutions.
         * @type {Array<string>}
         * @private
         */ _this.renderedAttributions_ = [];
        /**
         * @private
         * @type {boolean}
         */ _this.renderedVisible_ = true;
        return _this;
    }
    /**
     * Collect a list of visible attributions and set the collapsible state.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @return {Array<string>} Attributions.
     * @private
     */ Attribution1.prototype.collectSourceAttributions_ = function(frameState) {
        /**
         * Used to determine if an attribution already exists.
         * @type {!Object<string, boolean>}
         */ var lookup = {};
        /**
         * A list of visible attributions.
         * @type {Array<string>}
         */ var visibleAttributions = [];
        var collapsible = true;
        var layerStatesArray = frameState.layerStatesArray;
        for(var i = 0, ii = layerStatesArray.length; i < ii; ++i){
            var layerState = layerStatesArray[i];
            if (!(0, _layerJs.inView)(layerState, frameState.viewState)) continue;
            var source = /** @type {import("../layer/Layer.js").default} */ layerState.layer.getSource();
            if (!source) continue;
            var attributionGetter = source.getAttributions();
            if (!attributionGetter) continue;
            var attributions = attributionGetter(frameState);
            if (!attributions) continue;
            collapsible = collapsible && source.getAttributionsCollapsible() !== false;
            if (Array.isArray(attributions)) {
                for(var j = 0, jj = attributions.length; j < jj; ++j)if (!(attributions[j] in lookup)) {
                    visibleAttributions.push(attributions[j]);
                    lookup[attributions[j]] = true;
                }
            } else if (!(attributions in lookup)) {
                visibleAttributions.push(attributions);
                lookup[attributions] = true;
            }
        }
        if (!this.overrideCollapsible_) this.setCollapsible(collapsible);
        return visibleAttributions;
    };
    /**
     * @private
     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
     */ Attribution1.prototype.updateElement_ = function(frameState) {
        if (!frameState) {
            if (this.renderedVisible_) {
                this.element.style.display = "none";
                this.renderedVisible_ = false;
            }
            return;
        }
        var attributions = this.collectSourceAttributions_(frameState);
        var visible = attributions.length > 0;
        if (this.renderedVisible_ != visible) {
            this.element.style.display = visible ? "" : "none";
            this.renderedVisible_ = visible;
        }
        if ((0, _arrayJs.equals)(attributions, this.renderedAttributions_)) return;
        (0, _domJs.removeChildren)(this.ulElement_);
        // append the attributions
        for(var i = 0, ii = attributions.length; i < ii; ++i){
            var element = document.createElement("li");
            element.innerHTML = attributions[i];
            this.ulElement_.appendChild(element);
        }
        this.renderedAttributions_ = attributions;
    };
    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */ Attribution1.prototype.handleClick_ = function(event) {
        event.preventDefault();
        this.handleToggle_();
        this.userCollapsed_ = this.collapsed_;
    };
    /**
     * @private
     */ Attribution1.prototype.handleToggle_ = function() {
        this.element.classList.toggle((0, _cssJs.CLASS_COLLAPSED));
        if (this.collapsed_) (0, _domJs.replaceNode)(this.collapseLabel_, this.label_);
        else (0, _domJs.replaceNode)(this.label_, this.collapseLabel_);
        this.collapsed_ = !this.collapsed_;
        this.toggleButton_.setAttribute("aria-expanded", String(!this.collapsed_));
    };
    /**
     * Return `true` if the attribution is collapsible, `false` otherwise.
     * @return {boolean} True if the widget is collapsible.
     * @api
     */ Attribution1.prototype.getCollapsible = function() {
        return this.collapsible_;
    };
    /**
     * Set whether the attribution should be collapsible.
     * @param {boolean} collapsible True if the widget is collapsible.
     * @api
     */ Attribution1.prototype.setCollapsible = function(collapsible) {
        if (this.collapsible_ === collapsible) return;
        this.collapsible_ = collapsible;
        this.element.classList.toggle("ol-uncollapsible");
        if (this.userCollapsed_) this.handleToggle_();
    };
    /**
     * Collapse or expand the attribution according to the passed parameter. Will
     * not do anything if the attribution isn't collapsible or if the current
     * collapsed state is already the one requested.
     * @param {boolean} collapsed True if the widget is collapsed.
     * @api
     */ Attribution1.prototype.setCollapsed = function(collapsed) {
        this.userCollapsed_ = collapsed;
        if (!this.collapsible_ || this.collapsed_ === collapsed) return;
        this.handleToggle_();
    };
    /**
     * Return `true` when the attribution is currently collapsed or `false`
     * otherwise.
     * @return {boolean} True if the widget is collapsed.
     * @api
     */ Attribution1.prototype.getCollapsed = function() {
        return this.collapsed_;
    };
    /**
     * Update the attribution element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */ Attribution1.prototype.render = function(mapEvent) {
        this.updateElement_(mapEvent.frameState);
    };
    return Attribution1;
}((0, _controlJsDefault.default));
exports.default = Attribution;

},{"./Control.js":"a2mnq","../events/EventType.js":"hrQJ6","../css.js":"lDlNi","../array.js":"1Fbic","../layer/Layer.js":"8J9Kf","../dom.js":"84QzQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a2mnq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/control/Control
 */ var _objectJs = require("../Object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _mapEventTypeJs = require("../MapEventType.js");
var _mapEventTypeJsDefault = parcelHelpers.interopDefault(_mapEventTypeJs);
var _functionsJs = require("../functions.js");
var _eventsJs = require("../events.js");
var _domJs = require("../dom.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {HTMLElement} [element] The element is the control's
 * container element. This only needs to be specified if you're developing
 * a custom control.
 * @property {function(import("../MapEvent.js").default):void} [render] Function called when
 * the control should be re-rendered. This is called in a `requestAnimationFrame`
 * callback.
 * @property {HTMLElement|string} [target] Specify a target if you want
 * the control to be rendered outside of the map's viewport.
 */ /**
 * @classdesc
 * A control is a visible widget with a DOM element in a fixed position on the
 * screen. They can involve user input (buttons), or be informational only;
 * the position is determined using CSS. By default these are placed in the
 * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
 * any outside DOM element.
 *
 * This is the base class for controls. You can use it for simple custom
 * controls by creating the element with listeners, creating an instance:
 * ```js
 * var myControl = new Control({element: myElement});
 * ```
 * and then adding this to the map.
 *
 * The main advantage of having this as a control rather than a simple separate
 * DOM element is that preventing propagation is handled for you. Controls
 * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.
 *
 * You can also extend this base for your own control class. See
 * examples/custom-controls for an example of how to do this.
 *
 * @api
 */ var Control = /** @class */ function(_super) {
    __extends(Control1, _super);
    /**
     * @param {Options} options Control options.
     */ function Control1(options) {
        var _this = _super.call(this) || this;
        var element = options.element;
        if (element && !options.target && !element.style.pointerEvents) element.style.pointerEvents = "auto";
        /**
         * @protected
         * @type {HTMLElement}
         */ _this.element = element ? element : null;
        /**
         * @private
         * @type {HTMLElement}
         */ _this.target_ = null;
        /**
         * @private
         * @type {import("../PluggableMap.js").default|null}
         */ _this.map_ = null;
        /**
         * @protected
         * @type {!Array<import("../events.js").EventsKey>}
         */ _this.listenerKeys = [];
        if (options.render) _this.render = options.render;
        if (options.target) _this.setTarget(options.target);
        return _this;
    }
    /**
     * Clean up.
     */ Control1.prototype.disposeInternal = function() {
        (0, _domJs.removeNode)(this.element);
        _super.prototype.disposeInternal.call(this);
    };
    /**
     * Get the map associated with this control.
     * @return {import("../PluggableMap.js").default|null} Map.
     * @api
     */ Control1.prototype.getMap = function() {
        return this.map_;
    };
    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default|null} map Map.
     * @api
     */ Control1.prototype.setMap = function(map) {
        if (this.map_) (0, _domJs.removeNode)(this.element);
        for(var i = 0, ii = this.listenerKeys.length; i < ii; ++i)(0, _eventsJs.unlistenByKey)(this.listenerKeys[i]);
        this.listenerKeys.length = 0;
        this.map_ = map;
        if (map) {
            var target = this.target_ ? this.target_ : map.getOverlayContainerStopEvent();
            target.appendChild(this.element);
            if (this.render !== (0, _functionsJs.VOID)) this.listenerKeys.push((0, _eventsJs.listen)(map, (0, _mapEventTypeJsDefault.default).POSTRENDER, this.render, this));
            map.render();
        }
    };
    /**
     * Renders the control.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @api
     */ Control1.prototype.render = function(mapEvent) {};
    /**
     * This function is used to set a target element for the control. It has no
     * effect if it is called after the control has been added to the map (i.e.
     * after `setMap` is called on the control). If no `target` is set in the
     * options passed to the control constructor and if `setTarget` is not called
     * then the control is added to the map's overlay container.
     * @param {HTMLElement|string} target Target.
     * @api
     */ Control1.prototype.setTarget = function(target) {
        this.target_ = typeof target === "string" ? document.getElementById(target) : target;
    };
    return Control1;
}((0, _objectJsDefault.default));
exports.default = Control;

},{"../Object.js":"1zG8z","../MapEventType.js":"1cFF9","../functions.js":"iqv8I","../events.js":"dcspA","../dom.js":"84QzQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1zG8z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ObjectEvent", ()=>ObjectEvent);
/**
 * @module ol/Object
 */ var _eventJs = require("./events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _objectEventTypeJs = require("./ObjectEventType.js");
var _objectEventTypeJsDefault = parcelHelpers.interopDefault(_objectEventTypeJs);
var _observableJs = require("./Observable.js");
var _observableJsDefault = parcelHelpers.interopDefault(_observableJs);
var _objJs = require("./obj.js");
var _utilJs = require("./util.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.
 */ var ObjectEvent = /** @class */ function(_super) {
    __extends(ObjectEvent1, _super);
    /**
     * @param {string} type The event type.
     * @param {string} key The property name.
     * @param {*} oldValue The old value for `key`.
     */ function ObjectEvent1(type, key, oldValue) {
        var _this = _super.call(this, type) || this;
        /**
         * The name of the property whose value is changing.
         * @type {string}
         * @api
         */ _this.key = key;
        /**
         * The old value. To get the new value use `e.target.get(e.key)` where
         * `e` is the event object.
         * @type {*}
         * @api
         */ _this.oldValue = oldValue;
        return _this;
    }
    return ObjectEvent1;
}((0, _eventJsDefault.default));
/***
 * @template Return
 * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
 *    import("./Observable").OnSignature<import("./ObjectEventType").Types, ObjectEvent, Return> &
 *    import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|import("./ObjectEventType").Types, Return>} ObjectOnSignature
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Most non-trivial classes inherit from this.
 *
 * This extends {@link module:ol/Observable~Observable} with observable
 * properties, where each property is observable as well as the object as a
 * whole.
 *
 * Classes that inherit from this have pre-defined properties, to which you can
 * add your owns. The pre-defined properties are listed in this documentation as
 * 'Observable Properties', and have their own accessors; for example,
 * {@link module:ol/Map~Map} has a `target` property, accessed with
 * `getTarget()` and changed with `setTarget()`. Not all properties are however
 * settable. There are also general-purpose accessors `get()` and `set()`. For
 * example, `get('target')` is equivalent to `getTarget()`.
 *
 * The `set` accessors trigger a change event, and you can monitor this by
 * registering a listener. For example, {@link module:ol/View~View} has a
 * `center` property, so `view.on('change:center', function(evt) {...});` would
 * call the function whenever the value of the center property changes. Within
 * the function, `evt.target` would be the view, so `evt.target.getCenter()`
 * would return the new center.
 *
 * You can add your own observable properties with
 * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
 * You can listen for changes on that property value with
 * `object.on('change:prop', listener)`. You can get a list of all
 * properties with {@link module:ol/Object~BaseObject#getProperties}.
 *
 * Note that the observable properties are separate from standard JS properties.
 * You can, for example, give your map object a title with
 * `map.title='New title'` and with `map.set('title', 'Another title')`. The
 * first will be a `hasOwnProperty`; the second will appear in
 * `getProperties()`. Only the second is observable.
 *
 * Properties can be deleted by using the unset method. E.g.
 * object.unset('foo').
 *
 * @fires ObjectEvent
 * @api
 */ var BaseObject = /** @class */ function(_super) {
    __extends(BaseObject1, _super);
    /**
     * @param {Object<string, *>} [opt_values] An object with key-value pairs.
     */ function BaseObject1(opt_values) {
        var _this = _super.call(this) || this;
        /***
         * @type {ObjectOnSignature<import("./events").EventsKey>}
         */ _this.on;
        /***
         * @type {ObjectOnSignature<import("./events").EventsKey>}
         */ _this.once;
        /***
         * @type {ObjectOnSignature<void>}
         */ _this.un;
        // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is
        // the same as the order in which they were created.  This also helps to
        // ensure that object properties are always added in the same order, which
        // helps many JavaScript engines generate faster code.
        (0, _utilJs.getUid)(_this);
        /**
         * @private
         * @type {Object<string, *>}
         */ _this.values_ = null;
        if (opt_values !== undefined) _this.setProperties(opt_values);
        return _this;
    }
    /**
     * Gets a value.
     * @param {string} key Key name.
     * @return {*} Value.
     * @api
     */ BaseObject1.prototype.get = function(key) {
        var value;
        if (this.values_ && this.values_.hasOwnProperty(key)) value = this.values_[key];
        return value;
    };
    /**
     * Get a list of object property names.
     * @return {Array<string>} List of property names.
     * @api
     */ BaseObject1.prototype.getKeys = function() {
        return this.values_ && Object.keys(this.values_) || [];
    };
    /**
     * Get an object of all property names and values.
     * @return {Object<string, *>} Object.
     * @api
     */ BaseObject1.prototype.getProperties = function() {
        return this.values_ && (0, _objJs.assign)({}, this.values_) || {};
    };
    /**
     * @return {boolean} The object has properties.
     */ BaseObject1.prototype.hasProperties = function() {
        return !!this.values_;
    };
    /**
     * @param {string} key Key name.
     * @param {*} oldValue Old value.
     */ BaseObject1.prototype.notify = function(key, oldValue) {
        var eventType;
        eventType = "change:".concat(key);
        if (this.hasListener(eventType)) this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
        eventType = (0, _objectEventTypeJsDefault.default).PROPERTYCHANGE;
        if (this.hasListener(eventType)) this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
    };
    /**
     * @param {string} key Key name.
     * @param {import("./events.js").Listener} listener Listener.
     */ BaseObject1.prototype.addChangeListener = function(key, listener) {
        this.addEventListener("change:".concat(key), listener);
    };
    /**
     * @param {string} key Key name.
     * @param {import("./events.js").Listener} listener Listener.
     */ BaseObject1.prototype.removeChangeListener = function(key, listener) {
        this.removeEventListener("change:".concat(key), listener);
    };
    /**
     * Sets a value.
     * @param {string} key Key name.
     * @param {*} value Value.
     * @param {boolean} [opt_silent] Update without triggering an event.
     * @api
     */ BaseObject1.prototype.set = function(key, value, opt_silent) {
        var values = this.values_ || (this.values_ = {});
        if (opt_silent) values[key] = value;
        else {
            var oldValue = values[key];
            values[key] = value;
            if (oldValue !== value) this.notify(key, oldValue);
        }
    };
    /**
     * Sets a collection of key-value pairs.  Note that this changes any existing
     * properties and adds new ones (it does not remove any existing properties).
     * @param {Object<string, *>} values Values.
     * @param {boolean} [opt_silent] Update without triggering an event.
     * @api
     */ BaseObject1.prototype.setProperties = function(values, opt_silent) {
        for(var key in values)this.set(key, values[key], opt_silent);
    };
    /**
     * Apply any properties from another object without triggering events.
     * @param {BaseObject} source The source object.
     * @protected
     */ BaseObject1.prototype.applyProperties = function(source) {
        if (!source.values_) return;
        (0, _objJs.assign)(this.values_ || (this.values_ = {}), source.values_);
    };
    /**
     * Unsets a property.
     * @param {string} key Key name.
     * @param {boolean} [opt_silent] Unset without triggering an event.
     * @api
     */ BaseObject1.prototype.unset = function(key, opt_silent) {
        if (this.values_ && key in this.values_) {
            var oldValue = this.values_[key];
            delete this.values_[key];
            if ((0, _objJs.isEmpty)(this.values_)) this.values_ = null;
            if (!opt_silent) this.notify(key, oldValue);
        }
    };
    return BaseObject1;
}((0, _observableJsDefault.default));
exports.default = BaseObject;

},{"./events/Event.js":"hwXQP","./ObjectEventType.js":"f2U6i","./Observable.js":"cQ2uI","./obj.js":"3ssAG","./util.js":"pLBjQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hwXQP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {Event|import("./Event.js").default} evt Event
 */ parcelHelpers.export(exports, "stopPropagation", ()=>stopPropagation);
/**
 * @param {Event|import("./Event.js").default} evt Event
 */ parcelHelpers.export(exports, "preventDefault", ()=>preventDefault);
/**
 * @module ol/events/Event
 */ /**
 * @classdesc
 * Stripped down implementation of the W3C DOM Level 2 Event interface.
 * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.
 *
 * This implementation only provides `type` and `target` properties, and
 * `stopPropagation` and `preventDefault` methods. It is meant as base class
 * for higher level events defined in the library, and works with
 * {@link module:ol/events/Target~Target}.
 */ var BaseEvent = /** @class */ function() {
    /**
     * @param {string} type Type.
     */ function BaseEvent1(type) {
        /**
         * @type {boolean}
         */ this.propagationStopped;
        /**
         * @type {boolean}
         */ this.defaultPrevented;
        /**
         * The event type.
         * @type {string}
         * @api
         */ this.type = type;
        /**
         * The event target.
         * @type {Object}
         * @api
         */ this.target = null;
    }
    /**
     * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events
     * will be fired.
     * @api
     */ BaseEvent1.prototype.preventDefault = function() {
        this.defaultPrevented = true;
    };
    /**
     * Stop event propagation.
     * @api
     */ BaseEvent1.prototype.stopPropagation = function() {
        this.propagationStopped = true;
    };
    return BaseEvent1;
}();
function stopPropagation(evt) {
    evt.stopPropagation();
}
function preventDefault(evt) {
    evt.preventDefault();
}
exports.default = BaseEvent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f2U6i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/ObjectEventType
 */ /**
 * @enum {string}
 */ exports.default = {
    /**
     * Triggered when a property is changed.
     * @event module:ol/Object.ObjectEvent#propertychange
     * @api
     */ PROPERTYCHANGE: "propertychange"
}; /**
 * @typedef {'propertychange'} Types
 */ 

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cQ2uI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Removes an event listener using the key returned by `on()` or `once()`.
 * @param {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} key The key returned by `on()`
 *     or `once()` (or an array of keys).
 * @api
 */ parcelHelpers.export(exports, "unByKey", ()=>unByKey);
/**
 * @module ol/Observable
 */ var _targetJs = require("./events/Target.js");
var _targetJsDefault = parcelHelpers.interopDefault(_targetJs);
var _eventTypeJs = require("./events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _eventsJs = require("./events.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/***
 * @template {string} Type
 * @template {Event|import("./events/Event.js").default} EventClass
 * @template Return
 * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature
 */ /***
 * @template {string} Type
 * @template Return
 * @typedef {(type: Type[], listener: (event: Event|import("./events/Event").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature
 */ /**
 * @typedef {'change'|'error'} EventTypes
 */ /***
 * @template Return
 * @typedef {OnSignature<EventTypes, import("./events/Event.js").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * An event target providing convenient methods for listener registration
 * and unregistration. A generic `change` event is always available through
 * {@link module:ol/Observable~Observable#changed}.
 *
 * @fires import("./events/Event.js").default
 * @api
 */ var Observable = /** @class */ function(_super) {
    __extends(Observable1, _super);
    function Observable1() {
        var _this = _super.call(this) || this;
        _this.on = _this.onInternal;
        _this.once = _this.onceInternal;
        _this.un = _this.unInternal;
        /**
         * @private
         * @type {number}
         */ _this.revision_ = 0;
        return _this;
    }
    /**
     * Increases the revision counter and dispatches a 'change' event.
     * @api
     */ Observable1.prototype.changed = function() {
        ++this.revision_;
        this.dispatchEvent((0, _eventTypeJsDefault.default).CHANGE);
    };
    /**
     * Get the version number for this object.  Each time the object is modified,
     * its version number will be incremented.
     * @return {number} Revision.
     * @api
     */ Observable1.prototype.getRevision = function() {
        return this.revision_;
    };
    /**
     * @param {string|Array<string>} type Type.
     * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Event key.
     * @protected
     */ Observable1.prototype.onInternal = function(type, listener) {
        if (Array.isArray(type)) {
            var len = type.length;
            var keys = new Array(len);
            for(var i = 0; i < len; ++i)keys[i] = (0, _eventsJs.listen)(this, type[i], listener);
            return keys;
        } else return (0, _eventsJs.listen)(this, type, listener);
    };
    /**
     * @param {string|Array<string>} type Type.
     * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Event key.
     * @protected
     */ Observable1.prototype.onceInternal = function(type, listener) {
        var key;
        if (Array.isArray(type)) {
            var len = type.length;
            key = new Array(len);
            for(var i = 0; i < len; ++i)key[i] = (0, _eventsJs.listenOnce)(this, type[i], listener);
        } else key = (0, _eventsJs.listenOnce)(this, type, listener);
        /** @type {Object} */ listener.ol_key = key;
        return key;
    };
    /**
     * Unlisten for a certain type of event.
     * @param {string|Array<string>} type Type.
     * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
     * @protected
     */ Observable1.prototype.unInternal = function(type, listener) {
        var key = /** @type {Object} */ listener.ol_key;
        if (key) unByKey(key);
        else if (Array.isArray(type)) for(var i = 0, ii = type.length; i < ii; ++i)this.removeEventListener(type[i], listener);
        else this.removeEventListener(type, listener);
    };
    return Observable1;
}((0, _targetJsDefault.default));
/**
 * Listen for a certain type of event.
 * @function
 * @param {string|Array<string>} type The event type or array of event types.
 * @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
 * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
 *     called with an array of event types as the first argument, the return
 *     will be an array of keys.
 * @api
 */ Observable.prototype.on;
/**
 * Listen once for a certain type of event.
 * @function
 * @param {string|Array<string>} type The event type or array of event types.
 * @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
 * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
 *     called with an array of event types as the first argument, the return
 *     will be an array of keys.
 * @api
 */ Observable.prototype.once;
/**
 * Unlisten for a certain type of event.
 * @function
 * @param {string|Array<string>} type The event type or array of event types.
 * @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
 * @api
 */ Observable.prototype.un;
function unByKey(key) {
    if (Array.isArray(key)) for(var i = 0, ii = key.length; i < ii; ++i)(0, _eventsJs.unlistenByKey)(key[i]);
    else (0, _eventsJs.unlistenByKey)(key);
}
exports.default = Observable;

},{"./events/Target.js":"7T5Yi","./events/EventType.js":"hrQJ6","./events.js":"dcspA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7T5Yi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/events/Target
 */ var _disposableJs = require("../Disposable.js");
var _disposableJsDefault = parcelHelpers.interopDefault(_disposableJs);
var _eventJs = require("./Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _functionsJs = require("../functions.js");
var _objJs = require("../obj.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {EventTarget|Target} EventTargetLike
 */ /**
 * @classdesc
 * A simplified implementation of the W3C DOM Level 2 EventTarget interface.
 * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.
 *
 * There are two important simplifications compared to the specification:
 *
 * 1. The handling of `useCapture` in `addEventListener` and
 *    `removeEventListener`. There is no real capture model.
 * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.
 *    There is no event target hierarchy. When a listener calls
 *    `stopPropagation` or `preventDefault` on an event object, it means that no
 *    more listeners after this one will be called. Same as when the listener
 *    returns false.
 */ var Target = /** @class */ function(_super) {
    __extends(Target1, _super);
    /**
     * @param {*} [opt_target] Default event target for dispatched events.
     */ function Target1(opt_target) {
        var _this = _super.call(this) || this;
        /**
         * @private
         * @type {*}
         */ _this.eventTarget_ = opt_target;
        /**
         * @private
         * @type {Object<string, number>}
         */ _this.pendingRemovals_ = null;
        /**
         * @private
         * @type {Object<string, number>}
         */ _this.dispatching_ = null;
        /**
         * @private
         * @type {Object<string, Array<import("../events.js").Listener>>}
         */ _this.listeners_ = null;
        return _this;
    }
    /**
     * @param {string} type Type.
     * @param {import("../events.js").Listener} listener Listener.
     */ Target1.prototype.addEventListener = function(type, listener) {
        if (!type || !listener) return;
        var listeners = this.listeners_ || (this.listeners_ = {});
        var listenersForType = listeners[type] || (listeners[type] = []);
        if (listenersForType.indexOf(listener) === -1) listenersForType.push(listener);
    };
    /**
     * Dispatches an event and calls all listeners listening for events
     * of this type. The event parameter can either be a string or an
     * Object with a `type` property.
     *
     * @param {import("./Event.js").default|string} event Event object.
     * @return {boolean|undefined} `false` if anyone called preventDefault on the
     *     event object or if any of the listeners returned false.
     * @api
     */ Target1.prototype.dispatchEvent = function(event) {
        var isString = typeof event === "string";
        var type = isString ? event : event.type;
        var listeners = this.listeners_ && this.listeners_[type];
        if (!listeners) return;
        var evt = isString ? new (0, _eventJsDefault.default)(event) : event;
        if (!evt.target) evt.target = this.eventTarget_ || this;
        var dispatching = this.dispatching_ || (this.dispatching_ = {});
        var pendingRemovals = this.pendingRemovals_ || (this.pendingRemovals_ = {});
        if (!(type in dispatching)) {
            dispatching[type] = 0;
            pendingRemovals[type] = 0;
        }
        ++dispatching[type];
        var propagate;
        for(var i = 0, ii = listeners.length; i < ii; ++i){
            if ("handleEvent" in listeners[i]) propagate = /** @type {import("../events.js").ListenerObject} */ listeners[i].handleEvent(evt);
            else propagate = /** @type {import("../events.js").ListenerFunction} */ listeners[i].call(this, evt);
            if (propagate === false || evt.propagationStopped) {
                propagate = false;
                break;
            }
        }
        if (--dispatching[type] === 0) {
            var pr = pendingRemovals[type];
            delete pendingRemovals[type];
            while(pr--)this.removeEventListener(type, (0, _functionsJs.VOID));
            delete dispatching[type];
        }
        return propagate;
    };
    /**
     * Clean up.
     */ Target1.prototype.disposeInternal = function() {
        this.listeners_ && (0, _objJs.clear)(this.listeners_);
    };
    /**
     * Get the listeners for a specified event type. Listeners are returned in the
     * order that they will be called in.
     *
     * @param {string} type Type.
     * @return {Array<import("../events.js").Listener>|undefined} Listeners.
     */ Target1.prototype.getListeners = function(type) {
        return this.listeners_ && this.listeners_[type] || undefined;
    };
    /**
     * @param {string} [opt_type] Type. If not provided,
     *     `true` will be returned if this event target has any listeners.
     * @return {boolean} Has listeners.
     */ Target1.prototype.hasListener = function(opt_type) {
        if (!this.listeners_) return false;
        return opt_type ? opt_type in this.listeners_ : Object.keys(this.listeners_).length > 0;
    };
    /**
     * @param {string} type Type.
     * @param {import("../events.js").Listener} listener Listener.
     */ Target1.prototype.removeEventListener = function(type, listener) {
        var listeners = this.listeners_ && this.listeners_[type];
        if (listeners) {
            var index = listeners.indexOf(listener);
            if (index !== -1) {
                if (this.pendingRemovals_ && type in this.pendingRemovals_) {
                    // make listener a no-op, and remove later in #dispatchEvent()
                    listeners[index] = (0, _functionsJs.VOID);
                    ++this.pendingRemovals_[type];
                } else {
                    listeners.splice(index, 1);
                    if (listeners.length === 0) delete this.listeners_[type];
                }
            }
        }
    };
    return Target1;
}((0, _disposableJsDefault.default));
exports.default = Target;

},{"../Disposable.js":"c0oTM","./Event.js":"hwXQP","../functions.js":"iqv8I","../obj.js":"3ssAG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c0oTM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/Disposable
 */ /**
 * @classdesc
 * Objects that need to clean up after themselves.
 */ var Disposable = /** @class */ function() {
    function Disposable1() {
        /**
         * The object has already been disposed.
         * @type {boolean}
         * @protected
         */ this.disposed = false;
    }
    /**
     * Clean up.
     */ Disposable1.prototype.dispose = function() {
        if (!this.disposed) {
            this.disposed = true;
            this.disposeInternal();
        }
    };
    /**
     * Extension point for disposable objects.
     * @protected
     */ Disposable1.prototype.disposeInternal = function() {};
    return Disposable1;
}();
exports.default = Disposable;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iqv8I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Always returns true.
 * @return {boolean} true.
 */ parcelHelpers.export(exports, "TRUE", ()=>TRUE);
/**
 * Always returns false.
 * @return {boolean} false.
 */ parcelHelpers.export(exports, "FALSE", ()=>FALSE);
/**
 * A reusable function, used e.g. as a default for callbacks.
 *
 * @return {void} Nothing.
 */ parcelHelpers.export(exports, "VOID", ()=>VOID);
/**
 * Wrap a function in another function that remembers the last return.  If the
 * returned function is called twice in a row with the same arguments and the same
 * this object, it will return the value from the first call in the second call.
 *
 * @param {function(...any): ReturnType} fn The function to memoize.
 * @return {function(...any): ReturnType} The memoized function.
 * @template ReturnType
 */ parcelHelpers.export(exports, "memoizeOne", ()=>memoizeOne);
/**
 * @template T
 * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.
 * @return {Promise<T>} A promise for the value.
 */ parcelHelpers.export(exports, "toPromise", ()=>toPromise);
/**
 * @module ol/functions
 */ var _arrayJs = require("./array.js");
function TRUE() {
    return true;
}
function FALSE() {
    return false;
}
function VOID() {}
function memoizeOne(fn) {
    var called = false;
    /** @type {ReturnType} */ var lastResult;
    /** @type {Array<any>} */ var lastArgs;
    var lastThis;
    return function() {
        var nextArgs = Array.prototype.slice.call(arguments);
        if (!called || this !== lastThis || !(0, _arrayJs.equals)(nextArgs, lastArgs)) {
            called = true;
            lastThis = this;
            lastArgs = nextArgs;
            lastResult = fn.apply(this, arguments);
        }
        return lastResult;
    };
}
function toPromise(getter) {
    function promiseGetter() {
        var value;
        try {
            value = getter();
        } catch (err) {
            return Promise.reject(err);
        }
        if (value instanceof Promise) return value;
        return Promise.resolve(value);
    }
    return promiseGetter();
}

},{"./array.js":"1Fbic","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Fbic":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/array
 */ /**
 * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.
 * https://github.com/darkskyapp/binary-search
 *
 * @param {Array<*>} haystack Items to search through.
 * @param {*} needle The item to look for.
 * @param {Function} [opt_comparator] Comparator function.
 * @return {number} The index of the item if found, -1 if not.
 */ parcelHelpers.export(exports, "binarySearch", ()=>binarySearch);
/**
 * Compare function for array sort that is safe for numbers.
 * @param {*} a The first object to be compared.
 * @param {*} b The second object to be compared.
 * @return {number} A negative number, zero, or a positive number as the first
 *     argument is less than, equal to, or greater than the second.
 */ parcelHelpers.export(exports, "numberSafeCompareFunction", ()=>numberSafeCompareFunction);
/**
 * Whether the array contains the given object.
 * @param {Array<*>} arr The array to test for the presence of the element.
 * @param {*} obj The object for which to test.
 * @return {boolean} The object is in the array.
 */ parcelHelpers.export(exports, "includes", ()=>includes);
/**
 * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function
 * of this type to determine which nearest resolution to use.
 *
 * This function takes a `{number}` representing a value between two array entries,
 * a `{number}` representing the value of the nearest higher entry and
 * a `{number}` representing the value of the nearest lower entry
 * as arguments and returns a `{number}`. If a negative number or zero is returned
 * the lower value will be used, if a positive number is returned the higher value
 * will be used.
 * @typedef {function(number, number, number): number} NearestDirectionFunction
 * @api
 */ /**
 * @param {Array<number>} arr Array in descending order.
 * @param {number} target Target.
 * @param {number|NearestDirectionFunction} direction
 *    0 means return the nearest,
 *    > 0 means return the largest nearest,
 *    < 0 means return the smallest nearest.
 * @return {number} Index.
 */ parcelHelpers.export(exports, "linearFindNearest", ()=>linearFindNearest);
/**
 * @param {Array<*>} arr Array.
 * @param {number} begin Begin index.
 * @param {number} end End index.
 */ parcelHelpers.export(exports, "reverseSubArray", ()=>reverseSubArray);
/**
 * @param {Array<VALUE>} arr The array to modify.
 * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.
 * @template VALUE
 */ parcelHelpers.export(exports, "extend", ()=>extend);
/**
 * @param {Array<VALUE>} arr The array to modify.
 * @param {VALUE} obj The element to remove.
 * @template VALUE
 * @return {boolean} If the element was removed.
 */ parcelHelpers.export(exports, "remove", ()=>remove);
/**
 * @param {Array<VALUE>} arr The array to search in.
 * @param {function(VALUE, number, ?) : boolean} func The function to compare.
 * @template VALUE
 * @return {VALUE|null} The element found or null.
 */ parcelHelpers.export(exports, "find", ()=>find);
/**
 * @param {Array|Uint8ClampedArray} arr1 The first array to compare.
 * @param {Array|Uint8ClampedArray} arr2 The second array to compare.
 * @return {boolean} Whether the two arrays are equal.
 */ parcelHelpers.export(exports, "equals", ()=>equals);
/**
 * Sort the passed array such that the relative order of equal elements is preserved.
 * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.
 * @param {Array<*>} arr The array to sort (modifies original).
 * @param {!function(*, *): number} compareFnc Comparison function.
 * @api
 */ parcelHelpers.export(exports, "stableSort", ()=>stableSort);
/**
 * @param {Array<*>} arr The array to search in.
 * @param {Function} func Comparison function.
 * @return {number} Return index.
 */ parcelHelpers.export(exports, "findIndex", ()=>findIndex);
/**
 * @param {Array<*>} arr The array to test.
 * @param {Function} [opt_func] Comparison function.
 * @param {boolean} [opt_strict] Strictly sorted (default false).
 * @return {boolean} Return index.
 */ parcelHelpers.export(exports, "isSorted", ()=>isSorted);
function binarySearch(haystack, needle, opt_comparator) {
    var mid, cmp;
    var comparator = opt_comparator || numberSafeCompareFunction;
    var low = 0;
    var high = haystack.length;
    var found = false;
    while(low < high){
        /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
         * to double (which gives the wrong results). */ mid = low + (high - low >> 1);
        cmp = +comparator(haystack[mid], needle);
        if (cmp < 0.0) /* Too low. */ low = mid + 1;
        else {
            /* Key found or too high */ high = mid;
            found = !cmp;
        }
    }
    /* Key not found. */ return found ? low : ~low;
}
function numberSafeCompareFunction(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
}
function includes(arr, obj) {
    return arr.indexOf(obj) >= 0;
}
function linearFindNearest(arr, target, direction) {
    var n = arr.length;
    if (arr[0] <= target) return 0;
    else if (target <= arr[n - 1]) return n - 1;
    else {
        var i = void 0;
        if (direction > 0) for(i = 1; i < n; ++i){
            if (arr[i] < target) return i - 1;
        }
        else if (direction < 0) for(i = 1; i < n; ++i){
            if (arr[i] <= target) return i;
        }
        else for(i = 1; i < n; ++i){
            if (arr[i] == target) return i;
            else if (arr[i] < target) {
                if (typeof direction === "function") {
                    if (direction(target, arr[i - 1], arr[i]) > 0) return i - 1;
                    else return i;
                } else if (arr[i - 1] - target < target - arr[i]) return i - 1;
                else return i;
            }
        }
        return n - 1;
    }
}
function reverseSubArray(arr, begin, end) {
    while(begin < end){
        var tmp = arr[begin];
        arr[begin] = arr[end];
        arr[end] = tmp;
        ++begin;
        --end;
    }
}
function extend(arr, data) {
    var extension = Array.isArray(data) ? data : [
        data
    ];
    var length = extension.length;
    for(var i = 0; i < length; i++)arr[arr.length] = extension[i];
}
function remove(arr, obj) {
    var i = arr.indexOf(obj);
    var found = i > -1;
    if (found) arr.splice(i, 1);
    return found;
}
function find(arr, func) {
    var length = arr.length >>> 0;
    var value;
    for(var i = 0; i < length; i++){
        value = arr[i];
        if (func(value, i, arr)) return value;
    }
    return null;
}
function equals(arr1, arr2) {
    var len1 = arr1.length;
    if (len1 !== arr2.length) return false;
    for(var i = 0; i < len1; i++){
        if (arr1[i] !== arr2[i]) return false;
    }
    return true;
}
function stableSort(arr, compareFnc) {
    var length = arr.length;
    var tmp = Array(arr.length);
    var i;
    for(i = 0; i < length; i++)tmp[i] = {
        index: i,
        value: arr[i]
    };
    tmp.sort(function(a, b) {
        return compareFnc(a.value, b.value) || a.index - b.index;
    });
    for(i = 0; i < arr.length; i++)arr[i] = tmp[i].value;
}
function findIndex(arr, func) {
    var index;
    var found = !arr.every(function(el, idx) {
        index = idx;
        return !func(el, idx, arr);
    });
    return found ? index : -1;
}
function isSorted(arr, opt_func, opt_strict) {
    var compare = opt_func || numberSafeCompareFunction;
    return arr.every(function(currentVal, index) {
        if (index === 0) return true;
        var res = compare(arr[index - 1], currentVal);
        return !(res > 0 || opt_strict && res === 0);
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hrQJ6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/events/EventType
 */ /**
 * @enum {string}
 * @const
 */ exports.default = {
    /**
     * Generic change event. Triggered when the revision counter is increased.
     * @event module:ol/events/Event~BaseEvent#change
     * @api
     */ CHANGE: "change",
    /**
     * Generic error event. Triggered when an error occurs.
     * @event module:ol/events/Event~BaseEvent#error
     * @api
     */ ERROR: "error",
    BLUR: "blur",
    CLEAR: "clear",
    CONTEXTMENU: "contextmenu",
    CLICK: "click",
    DBLCLICK: "dblclick",
    DRAGENTER: "dragenter",
    DRAGOVER: "dragover",
    DROP: "drop",
    FOCUS: "focus",
    KEYDOWN: "keydown",
    KEYPRESS: "keypress",
    LOAD: "load",
    RESIZE: "resize",
    TOUCHMOVE: "touchmove",
    WHEEL: "wheel"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dcspA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Key to use with {@link module:ol/Observable.unByKey}.
 * @typedef {Object} EventsKey
 * @property {ListenerFunction} listener Listener.
 * @property {import("./events/Target.js").EventTargetLike} target Target.
 * @property {string} type Type.
 * @api
 */ /**
 * Listener function. This function is called with an event object as argument.
 * When the function returns `false`, event propagation will stop.
 *
 * @typedef {function((Event|import("./events/Event.js").default)): (void|boolean)} ListenerFunction
 * @api
 */ /**
 * @typedef {Object} ListenerObject
 * @property {ListenerFunction} handleEvent HandleEvent listener function.
 */ /**
 * @typedef {ListenerFunction|ListenerObject} Listener
 */ /**
 * Registers an event listener on an event target. Inspired by
 * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
 *
 * This function efficiently binds a `listener` to a `this` object, and returns
 * a key for use with {@link module:ol/events.unlistenByKey}.
 *
 * @param {import("./events/Target.js").EventTargetLike} target Event target.
 * @param {string} type Event type.
 * @param {ListenerFunction} listener Listener.
 * @param {Object} [opt_this] Object referenced by the `this` keyword in the
 *     listener. Default is the `target`.
 * @param {boolean} [opt_once] If true, add the listener as one-off listener.
 * @return {EventsKey} Unique key for the listener.
 */ parcelHelpers.export(exports, "listen", ()=>listen);
/**
 * Registers a one-off event listener on an event target. Inspired by
 * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
 *
 * This function efficiently binds a `listener` as self-unregistering listener
 * to a `this` object, and returns a key for use with
 * {@link module:ol/events.unlistenByKey} in case the listener needs to be
 * unregistered before it is called.
 *
 * When {@link module:ol/events.listen} is called with the same arguments after this
 * function, the self-unregistering listener will be turned into a permanent
 * listener.
 *
 * @param {import("./events/Target.js").EventTargetLike} target Event target.
 * @param {string} type Event type.
 * @param {ListenerFunction} listener Listener.
 * @param {Object} [opt_this] Object referenced by the `this` keyword in the
 *     listener. Default is the `target`.
 * @return {EventsKey} Key for unlistenByKey.
 */ parcelHelpers.export(exports, "listenOnce", ()=>listenOnce);
/**
 * Unregisters event listeners on an event target. Inspired by
 * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
 *
 * The argument passed to this function is the key returned from
 * {@link module:ol/events.listen} or {@link module:ol/events.listenOnce}.
 *
 * @param {EventsKey} key The key.
 */ parcelHelpers.export(exports, "unlistenByKey", ()=>unlistenByKey);
/**
 * @module ol/events
 */ var _objJs = require("./obj.js");
function listen(target, type, listener, opt_this, opt_once) {
    if (opt_this && opt_this !== target) listener = listener.bind(opt_this);
    if (opt_once) {
        var originalListener_1 = listener;
        listener = function() {
            target.removeEventListener(type, listener);
            originalListener_1.apply(this, arguments);
        };
    }
    var eventsKey = {
        target: target,
        type: type,
        listener: listener
    };
    target.addEventListener(type, listener);
    return eventsKey;
}
function listenOnce(target, type, listener, opt_this) {
    return listen(target, type, listener, opt_this, true);
}
function unlistenByKey(key) {
    if (key && key.target) {
        key.target.removeEventListener(key.type, key.listener);
        (0, _objJs.clear)(key);
    }
}

},{"./obj.js":"3ssAG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1cFF9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/MapEventType
 */ /**
 * @enum {string}
 */ exports.default = {
    /**
     * Triggered after a map frame is rendered.
     * @event module:ol/MapEvent~MapEvent#postrender
     * @api
     */ POSTRENDER: "postrender",
    /**
     * Triggered when the map starts moving.
     * @event module:ol/MapEvent~MapEvent#movestart
     * @api
     */ MOVESTART: "movestart",
    /**
     * Triggered after the map is moved.
     * @event module:ol/MapEvent~MapEvent#moveend
     * @api
     */ MOVEEND: "moveend",
    /**
     * Triggered when loading of additional map data (tiles, images, features) starts.
     * @event module:ol/render/Event~RenderEvent#loadstart
     * @api
     */ LOADSTART: "loadstart",
    /**
     * Triggered when loading of additional map data has completed.
     * @event module:ol/render/Event~RenderEvent#loadend
     * @api
     */ LOADEND: "loadend"
}; /***
 * @typedef {'postrender'|'movestart'|'moveend'|'loadstart'|'loadend'} Types
 */ 

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"84QzQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/dom
 */ //FIXME Move this function to the canvas module
/**
 * Create an html canvas element and returns its 2d context.
 * @param {number} [opt_width] Canvas width.
 * @param {number} [opt_height] Canvas height.
 * @param {Array<HTMLCanvasElement>} [opt_canvasPool] Canvas pool to take existing canvas from.
 * @param {CanvasRenderingContext2DSettings} [opt_Context2DSettings] CanvasRenderingContext2DSettings
 * @return {CanvasRenderingContext2D} The context.
 */ parcelHelpers.export(exports, "createCanvasContext2D", ()=>createCanvasContext2D);
/**
 * Get the current computed width for the given element including margin,
 * padding and border.
 * Equivalent to jQuery's `$(el).outerWidth(true)`.
 * @param {!HTMLElement} element Element.
 * @return {number} The width.
 */ parcelHelpers.export(exports, "outerWidth", ()=>outerWidth);
/**
 * Get the current computed height for the given element including margin,
 * padding and border.
 * Equivalent to jQuery's `$(el).outerHeight(true)`.
 * @param {!HTMLElement} element Element.
 * @return {number} The height.
 */ parcelHelpers.export(exports, "outerHeight", ()=>outerHeight);
/**
 * @param {Node} newNode Node to replace old node
 * @param {Node} oldNode The node to be replaced
 */ parcelHelpers.export(exports, "replaceNode", ()=>replaceNode);
/**
 * @param {Node} node The node to remove.
 * @return {Node|null} The node that was removed or null.
 */ parcelHelpers.export(exports, "removeNode", ()=>removeNode);
/**
 * @param {Node} node The node to remove the children from.
 */ parcelHelpers.export(exports, "removeChildren", ()=>removeChildren);
/**
 * Transform the children of a parent node so they match the
 * provided list of children.  This function aims to efficiently
 * remove, add, and reorder child nodes while maintaining a simple
 * implementation (it is not guaranteed to minimize DOM operations).
 * @param {Node} node The parent node whose children need reworking.
 * @param {Array<Node>} children The desired children.
 */ parcelHelpers.export(exports, "replaceChildren", ()=>replaceChildren);
var _hasJs = require("./has.js");
function createCanvasContext2D(opt_width, opt_height, opt_canvasPool, opt_Context2DSettings) {
    /** @type {HTMLCanvasElement|OffscreenCanvas} */ var canvas;
    if (opt_canvasPool && opt_canvasPool.length) canvas = opt_canvasPool.shift();
    else if (0, _hasJs.WORKER_OFFSCREEN_CANVAS) canvas = new OffscreenCanvas(opt_width || 300, opt_height || 300);
    else canvas = document.createElement("canvas");
    if (opt_width) canvas.width = opt_width;
    if (opt_height) canvas.height = opt_height;
    //FIXME Allow OffscreenCanvasRenderingContext2D as return type
    return /** @type {CanvasRenderingContext2D} */ canvas.getContext("2d", opt_Context2DSettings);
}
function outerWidth(element) {
    var width = element.offsetWidth;
    var style = getComputedStyle(element);
    width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);
    return width;
}
function outerHeight(element) {
    var height = element.offsetHeight;
    var style = getComputedStyle(element);
    height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);
    return height;
}
function replaceNode(newNode, oldNode) {
    var parent = oldNode.parentNode;
    if (parent) parent.replaceChild(newNode, oldNode);
}
function removeNode(node) {
    return node && node.parentNode ? node.parentNode.removeChild(node) : null;
}
function removeChildren(node) {
    while(node.lastChild)node.removeChild(node.lastChild);
}
function replaceChildren(node, children) {
    var oldChildren = node.childNodes;
    for(var i = 0;; ++i){
        var oldChild = oldChildren[i];
        var newChild = children[i];
        // check if our work is done
        if (!oldChild && !newChild) break;
        // check if children match
        if (oldChild === newChild) continue;
        // check if a new child needs to be added
        if (!oldChild) {
            node.appendChild(newChild);
            continue;
        }
        // check if an old child needs to be removed
        if (!newChild) {
            node.removeChild(oldChild);
            --i;
            continue;
        }
        // reorder
        node.insertBefore(newChild, oldChild);
    }
}

},{"./has.js":"6BDNi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6BDNi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FIREFOX", ()=>FIREFOX);
parcelHelpers.export(exports, "SAFARI", ()=>SAFARI);
parcelHelpers.export(exports, "SAFARI_BUG_237906", ()=>SAFARI_BUG_237906);
parcelHelpers.export(exports, "WEBKIT", ()=>WEBKIT);
parcelHelpers.export(exports, "MAC", ()=>MAC);
parcelHelpers.export(exports, "DEVICE_PIXEL_RATIO", ()=>DEVICE_PIXEL_RATIO);
parcelHelpers.export(exports, "WORKER_OFFSCREEN_CANVAS", ()=>WORKER_OFFSCREEN_CANVAS);
parcelHelpers.export(exports, "IMAGE_DECODE", ()=>IMAGE_DECODE);
parcelHelpers.export(exports, "PASSIVE_EVENT_LISTENERS", ()=>PASSIVE_EVENT_LISTENERS);
/**
 * @module ol/has
 */ var ua = typeof navigator !== "undefined" && typeof navigator.userAgent !== "undefined" ? navigator.userAgent.toLowerCase() : "";
var FIREFOX = ua.indexOf("firefox") !== -1;
var SAFARI = ua.indexOf("safari") !== -1 && ua.indexOf("chrom") == -1;
var SAFARI_BUG_237906 = SAFARI && !!(ua.indexOf("version/15.4") >= 0 || ua.match(/cpu (os|iphone os) 15_4 like mac os x/));
var WEBKIT = ua.indexOf("webkit") !== -1 && ua.indexOf("edge") == -1;
var MAC = ua.indexOf("macintosh") !== -1;
var DEVICE_PIXEL_RATIO = typeof devicePixelRatio !== "undefined" ? devicePixelRatio : 1;
var WORKER_OFFSCREEN_CANVAS = typeof WorkerGlobalScope !== "undefined" && typeof OffscreenCanvas !== "undefined" && self instanceof WorkerGlobalScope; //eslint-disable-line
var IMAGE_DECODE = typeof Image !== "undefined" && Image.prototype.decode;
var PASSIVE_EVENT_LISTENERS = function() {
    var passive = false;
    try {
        var options = Object.defineProperty({}, "passive", {
            get: function() {
                passive = true;
            }
        });
        window.addEventListener("_", null, options);
        window.removeEventListener("_", null, options);
    } catch (error) {
    // passive not supported
    }
    return passive;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lDlNi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CLASS_HIDDEN", ()=>CLASS_HIDDEN);
parcelHelpers.export(exports, "CLASS_SELECTABLE", ()=>CLASS_SELECTABLE);
parcelHelpers.export(exports, "CLASS_UNSELECTABLE", ()=>CLASS_UNSELECTABLE);
parcelHelpers.export(exports, "CLASS_UNSUPPORTED", ()=>CLASS_UNSUPPORTED);
parcelHelpers.export(exports, "CLASS_CONTROL", ()=>CLASS_CONTROL);
parcelHelpers.export(exports, "CLASS_COLLAPSED", ()=>CLASS_COLLAPSED);
parcelHelpers.export(exports, "getFontParameters", ()=>getFontParameters);
/**
 * @param {number} opacity Opacity (0..1).
 * @return {string} CSS opacity.
 */ parcelHelpers.export(exports, "cssOpacity", ()=>cssOpacity);
var CLASS_HIDDEN = "ol-hidden";
var CLASS_SELECTABLE = "ol-selectable";
var CLASS_UNSELECTABLE = "ol-unselectable";
var CLASS_UNSUPPORTED = "ol-unsupported";
var CLASS_CONTROL = "ol-control";
var CLASS_COLLAPSED = "ol-collapsed";
/**
 * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font
 * @type {RegExp}
 */ var fontRegEx = new RegExp([
    "^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)",
    "(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)",
    "(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)",
    "(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?",
    "(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))",
    "(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))",
    "?\\s*([-,\\\"\\'\\sa-z]+?)\\s*$", 
].join(""), "i");
var fontRegExMatchIndex = [
    "style",
    "variant",
    "weight",
    "size",
    "lineHeight",
    "family", 
];
var getFontParameters = function(fontSpec) {
    var match = fontSpec.match(fontRegEx);
    if (!match) return null;
    var style = {
        lineHeight: "normal",
        size: "1.2em",
        style: "normal",
        weight: "normal",
        variant: "normal"
    };
    for(var i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i){
        var value = match[i + 1];
        if (value !== undefined) style[fontRegExMatchIndex[i]] = value;
    }
    style.families = style.family.split(/,\s?/);
    return style;
};
function cssOpacity(opacity) {
    return opacity === 1 ? "" : String(Math.round(opacity * 100) / 100);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8J9Kf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Return `true` if the layer is visible and if the provided view state
 * has resolution and zoom levels that are in range of the layer's min/max.
 * @param {State} layerState Layer state.
 * @param {import("../View.js").State} viewState View state.
 * @return {boolean} The layer is visible at the given view state.
 */ parcelHelpers.export(exports, "inView", ()=>inView);
/**
 * @module ol/layer/Layer
 */ var _baseJs = require("./Base.js");
var _baseJsDefault = parcelHelpers.interopDefault(_baseJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _propertyJs = require("./Property.js");
var _propertyJsDefault = parcelHelpers.interopDefault(_propertyJs);
var _eventTypeJs1 = require("../render/EventType.js");
var _eventTypeJsDefault1 = parcelHelpers.interopDefault(_eventTypeJs1);
var _stateJs = require("../source/State.js");
var _stateJsDefault = parcelHelpers.interopDefault(_stateJs);
var _assertsJs = require("../asserts.js");
var _objJs = require("../obj.js");
var _eventsJs = require("../events.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {function(import("../PluggableMap.js").FrameState):HTMLElement} RenderFunction
 */ /***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("./Base").BaseLayerObjectEventTypes|
 *     'change:source', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<import("../render/EventType").LayerRenderEventTypes, import("../render/Event").default, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("./Base").BaseLayerObjectEventTypes|'change:source'|
 *     import("../render/EventType").LayerRenderEventTypes, Return>} LayerOnSignature
 */ /**
 * @template {import("../source/Source.js").default} [SourceType=import("../source/Source.js").default]
 * @typedef {Object} Options
 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
 * method was used.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
 * visible.
 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
 * be visible.
 * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,
 * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after
 * construction.
 * @property {import("../PluggableMap.js").default|null} [map] Map.
 * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an
 * HTML element. Will overwrite the default rendering for the layer.
 * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
 */ /**
 * @typedef {Object} State
 * @property {import("./Layer.js").default} layer Layer.
 * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.
 * @property {boolean} visible Visible.
 * @property {boolean} managed Managed.
 * @property {import("../extent.js").Extent} [extent] Extent.
 * @property {number} zIndex ZIndex.
 * @property {number} maxResolution Maximum resolution.
 * @property {number} minResolution Minimum resolution.
 * @property {number} minZoom Minimum zoom.
 * @property {number} maxZoom Maximum zoom.
 */ /**
 * @classdesc
 * Base class from which all layer types are derived. This should only be instantiated
 * in the case where a custom layer is added to the map with a custom `render` function.
 * Such a function can be specified in the `options` object, and is expected to return an HTML element.
 *
 * A visual representation of raster or vector map data.
 * Layers group together those properties that pertain to how the data is to be
 * displayed, irrespective of the source of that data.
 *
 * Layers are usually added to a map with {@link import("../PluggableMap.js").default#addLayer map.addLayer()}. Components
 * like {@link module:ol/interaction/Draw~Draw} use unmanaged layers
 * internally. These unmanaged layers are associated with the map using
 * {@link module:ol/layer/Layer~Layer#setMap} instead.
 *
 * A generic `change` event is fired when the state of the source changes.
 *
 * Please note that for performance reasons several layers might get rendered to
 * the same HTML element, which will cause {@link import("../PluggableMap.js").default#forEachLayerAtPixel map.forEachLayerAtPixel()} to
 * give false positives. To avoid this, apply different `className` properties to the
 * layers at creation time.
 *
 * @fires import("../render/Event.js").RenderEvent#prerender
 * @fires import("../render/Event.js").RenderEvent#postrender
 *
 * @template {import("../source/Source.js").default} [SourceType=import("../source/Source.js").default]
 * @template {import("../renderer/Layer.js").default} [RendererType=import("../renderer/Layer.js").default]
 * @api
 */ var Layer = /** @class */ function(_super) {
    __extends(Layer1, _super);
    /**
     * @param {Options<SourceType>} options Layer options.
     */ function Layer1(options) {
        var _this = this;
        var baseOptions = (0, _objJs.assign)({}, options);
        delete baseOptions.source;
        _this = _super.call(this, baseOptions) || this;
        /***
         * @type {LayerOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {LayerOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {LayerOnSignature<void>}
         */ _this.un;
        /**
         * @private
         * @type {?import("../events.js").EventsKey}
         */ _this.mapPrecomposeKey_ = null;
        /**
         * @private
         * @type {?import("../events.js").EventsKey}
         */ _this.mapRenderKey_ = null;
        /**
         * @private
         * @type {?import("../events.js").EventsKey}
         */ _this.sourceChangeKey_ = null;
        /**
         * @private
         * @type {RendererType}
         */ _this.renderer_ = null;
        /**
         * @protected
         * @type {boolean}
         */ _this.rendered = false;
        // Overwrite default render method with a custom one
        if (options.render) _this.render = options.render;
        if (options.map) _this.setMap(options.map);
        _this.addChangeListener((0, _propertyJsDefault.default).SOURCE, _this.handleSourcePropertyChange_);
        var source = options.source ? options.source : null;
        _this.setSource(source);
        return _this;
    }
    /**
     * @param {Array<import("./Layer.js").default>} [opt_array] Array of layers (to be modified in place).
     * @return {Array<import("./Layer.js").default>} Array of layers.
     */ Layer1.prototype.getLayersArray = function(opt_array) {
        var array = opt_array ? opt_array : [];
        array.push(this);
        return array;
    };
    /**
     * @param {Array<import("./Layer.js").State>} [opt_states] Optional list of layer states (to be modified in place).
     * @return {Array<import("./Layer.js").State>} List of layer states.
     */ Layer1.prototype.getLayerStatesArray = function(opt_states) {
        var states = opt_states ? opt_states : [];
        states.push(this.getLayerState());
        return states;
    };
    /**
     * Get the layer source.
     * @return {SourceType|null} The layer source (or `null` if not yet set).
     * @observable
     * @api
     */ Layer1.prototype.getSource = function() {
        return /** @type {SourceType} */ this.get((0, _propertyJsDefault.default).SOURCE) || null;
    };
    /**
     * @return {SourceType|null} The source being rendered.
     */ Layer1.prototype.getRenderSource = function() {
        return this.getSource();
    };
    /**
     * @return {import("../source/State.js").default} Source state.
     */ Layer1.prototype.getSourceState = function() {
        var source = this.getSource();
        return !source ? (0, _stateJsDefault.default).UNDEFINED : source.getState();
    };
    /**
     * @private
     */ Layer1.prototype.handleSourceChange_ = function() {
        this.changed();
    };
    /**
     * @private
     */ Layer1.prototype.handleSourcePropertyChange_ = function() {
        if (this.sourceChangeKey_) {
            (0, _eventsJs.unlistenByKey)(this.sourceChangeKey_);
            this.sourceChangeKey_ = null;
        }
        var source = this.getSource();
        if (source) this.sourceChangeKey_ = (0, _eventsJs.listen)(source, (0, _eventTypeJsDefault.default).CHANGE, this.handleSourceChange_, this);
        this.changed();
    };
    /**
     * @param {import("../pixel").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with
     * an array of features.
     */ Layer1.prototype.getFeatures = function(pixel) {
        if (!this.renderer_) return new Promise(function(resolve) {
            return resolve([]);
        });
        return this.renderer_.getFeatures(pixel);
    };
    /**
     * @param {import("../pixel").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
     */ Layer1.prototype.getData = function(pixel) {
        if (!this.renderer_ || !this.rendered) return null;
        return this.renderer_.getData(pixel);
    };
    /**
     * In charge to manage the rendering of the layer. One layer type is
     * bounded with one layer renderer.
     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target which the renderer may (but need not) use
     * for rendering its content.
     * @return {HTMLElement} The rendered element.
     */ Layer1.prototype.render = function(frameState, target) {
        var layerRenderer = this.getRenderer();
        if (layerRenderer.prepareFrame(frameState)) {
            this.rendered = true;
            return layerRenderer.renderFrame(frameState, target);
        }
    };
    /**
     * Called when a layer is not visible during a map render.
     */ Layer1.prototype.unrender = function() {
        this.rendered = false;
    };
    /**
     * For use inside the library only.
     * @param {import("../PluggableMap.js").default|null} map Map.
     */ Layer1.prototype.setMapInternal = function(map) {
        if (!map) this.unrender();
        this.set((0, _propertyJsDefault.default).MAP, map);
    };
    /**
     * For use inside the library only.
     * @return {import("../PluggableMap.js").default|null} Map.
     */ Layer1.prototype.getMapInternal = function() {
        return this.get((0, _propertyJsDefault.default).MAP);
    };
    /**
     * Sets the layer to be rendered on top of other layers on a map. The map will
     * not manage this layer in its layers collection, and the callback in
     * {@link module:ol/Map~Map#forEachLayerAtPixel} will receive `null` as layer. This
     * is useful for temporary layers. To remove an unmanaged layer from the map,
     * use `#setMap(null)`.
     *
     * To add the layer to a map and have it managed by the map, use
     * {@link module:ol/Map~Map#addLayer} instead.
     * @param {import("../PluggableMap.js").default|null} map Map.
     * @api
     */ Layer1.prototype.setMap = function(map) {
        if (this.mapPrecomposeKey_) {
            (0, _eventsJs.unlistenByKey)(this.mapPrecomposeKey_);
            this.mapPrecomposeKey_ = null;
        }
        if (!map) this.changed();
        if (this.mapRenderKey_) {
            (0, _eventsJs.unlistenByKey)(this.mapRenderKey_);
            this.mapRenderKey_ = null;
        }
        if (map) {
            this.mapPrecomposeKey_ = (0, _eventsJs.listen)(map, (0, _eventTypeJsDefault1.default).PRECOMPOSE, function(evt) {
                var renderEvent = evt;
                var layerStatesArray = renderEvent.frameState.layerStatesArray;
                var layerState = this.getLayerState(false);
                // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.
                (0, _assertsJs.assert)(!layerStatesArray.some(function(arrayLayerState) {
                    return arrayLayerState.layer === layerState.layer;
                }), 67);
                layerStatesArray.push(layerState);
            }, this);
            this.mapRenderKey_ = (0, _eventsJs.listen)(this, (0, _eventTypeJsDefault.default).CHANGE, map.render, map);
            this.changed();
        }
    };
    /**
     * Set the layer source.
     * @param {SourceType|null} source The layer source.
     * @observable
     * @api
     */ Layer1.prototype.setSource = function(source) {
        this.set((0, _propertyJsDefault.default).SOURCE, source);
    };
    /**
     * Get the renderer for this layer.
     * @return {RendererType|null} The layer renderer.
     */ Layer1.prototype.getRenderer = function() {
        if (!this.renderer_) this.renderer_ = this.createRenderer();
        return this.renderer_;
    };
    /**
     * @return {boolean} The layer has a renderer.
     */ Layer1.prototype.hasRenderer = function() {
        return !!this.renderer_;
    };
    /**
     * Create a renderer for this layer.
     * @return {RendererType} A layer renderer.
     * @protected
     */ Layer1.prototype.createRenderer = function() {
        return null;
    };
    /**
     * Clean up.
     */ Layer1.prototype.disposeInternal = function() {
        if (this.renderer_) {
            this.renderer_.dispose();
            delete this.renderer_;
        }
        this.setSource(null);
        _super.prototype.disposeInternal.call(this);
    };
    return Layer1;
}((0, _baseJsDefault.default));
function inView(layerState, viewState) {
    if (!layerState.visible) return false;
    var resolution = viewState.resolution;
    if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) return false;
    var zoom = viewState.zoom;
    return zoom > layerState.minZoom && zoom <= layerState.maxZoom;
}
exports.default = Layer;

},{"./Base.js":"ag0tc","../events/EventType.js":"hrQJ6","./Property.js":"kCuCK","../render/EventType.js":"5G9JA","../source/State.js":"gW573","../asserts.js":"e4TiF","../obj.js":"3ssAG","../events.js":"dcspA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ag0tc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/layer/Base
 */ var _objectJs = require("../Object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _propertyJs = require("./Property.js");
var _propertyJsDefault = parcelHelpers.interopDefault(_propertyJs);
var _utilJs = require("../util.js");
var _assertsJs = require("../asserts.js");
var _objJs = require("../obj.js");
var _mathJs = require("../math.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * A css color, or a function called with a view resolution returning a css color.
 *
 * @typedef {string|function(number):string} BackgroundColor
 * @api
 */ /**
 * @typedef {import("../ObjectEventType").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|
 *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes
 */ /***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<BaseLayerObjectEventTypes, import("../Object").ObjectEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature
 */ /**
 * @typedef {Object} Options
 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
 * method was used.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
 * visible.
 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
 * be visible.
 * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background
 * will be rendered.
 * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in
 * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so
 * is observable, and has get/set accessors.
 *
 * @api
 */ var BaseLayer = /** @class */ function(_super) {
    __extends(BaseLayer1, _super);
    /**
     * @param {Options} options Layer options.
     */ function BaseLayer1(options) {
        var _this = _super.call(this) || this;
        /***
         * @type {BaseLayerOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {BaseLayerOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {BaseLayerOnSignature<void>}
         */ _this.un;
        /**
         * @type {BackgroundColor|false}
         * @private
         */ _this.background_ = options.background;
        /**
         * @type {Object<string, *>}
         */ var properties = (0, _objJs.assign)({}, options);
        if (typeof options.properties === "object") {
            delete properties.properties;
            (0, _objJs.assign)(properties, options.properties);
        }
        properties[(0, _propertyJsDefault.default).OPACITY] = options.opacity !== undefined ? options.opacity : 1;
        (0, _assertsJs.assert)(typeof properties[(0, _propertyJsDefault.default).OPACITY] === "number", 64); // Layer opacity must be a number
        properties[(0, _propertyJsDefault.default).VISIBLE] = options.visible !== undefined ? options.visible : true;
        properties[(0, _propertyJsDefault.default).Z_INDEX] = options.zIndex;
        properties[(0, _propertyJsDefault.default).MAX_RESOLUTION] = options.maxResolution !== undefined ? options.maxResolution : Infinity;
        properties[(0, _propertyJsDefault.default).MIN_RESOLUTION] = options.minResolution !== undefined ? options.minResolution : 0;
        properties[(0, _propertyJsDefault.default).MIN_ZOOM] = options.minZoom !== undefined ? options.minZoom : -Infinity;
        properties[(0, _propertyJsDefault.default).MAX_ZOOM] = options.maxZoom !== undefined ? options.maxZoom : Infinity;
        /**
         * @type {string}
         * @private
         */ _this.className_ = properties.className !== undefined ? properties.className : "ol-layer";
        delete properties.className;
        _this.setProperties(properties);
        /**
         * @type {import("./Layer.js").State}
         * @private
         */ _this.state_ = null;
        return _this;
    }
    /**
     * Get the background for this layer.
     * @return {BackgroundColor|false} Layer background.
     */ BaseLayer1.prototype.getBackground = function() {
        return this.background_;
    };
    /**
     * @return {string} CSS class name.
     */ BaseLayer1.prototype.getClassName = function() {
        return this.className_;
    };
    /**
     * This method is not meant to be called by layers or layer renderers because the state
     * is incorrect if the layer is included in a layer group.
     *
     * @param {boolean} [opt_managed] Layer is managed.
     * @return {import("./Layer.js").State} Layer state.
     */ BaseLayer1.prototype.getLayerState = function(opt_managed) {
        /** @type {import("./Layer.js").State} */ var state = this.state_ || {
            layer: this,
            managed: opt_managed === undefined ? true : opt_managed
        };
        var zIndex = this.getZIndex();
        state.opacity = (0, _mathJs.clamp)(Math.round(this.getOpacity() * 100) / 100, 0, 1);
        state.visible = this.getVisible();
        state.extent = this.getExtent();
        state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;
        state.maxResolution = this.getMaxResolution();
        state.minResolution = Math.max(this.getMinResolution(), 0);
        state.minZoom = this.getMinZoom();
        state.maxZoom = this.getMaxZoom();
        this.state_ = state;
        return state;
    };
    /**
     * @abstract
     * @param {Array<import("./Layer.js").default>} [opt_array] Array of layers (to be
     *     modified in place).
     * @return {Array<import("./Layer.js").default>} Array of layers.
     */ BaseLayer1.prototype.getLayersArray = function(opt_array) {
        return (0, _utilJs.abstract)();
    };
    /**
     * @abstract
     * @param {Array<import("./Layer.js").State>} [opt_states] Optional list of layer
     *     states (to be modified in place).
     * @return {Array<import("./Layer.js").State>} List of layer states.
     */ BaseLayer1.prototype.getLayerStatesArray = function(opt_states) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
     * will be visible regardless of extent.
     * @return {import("../extent.js").Extent|undefined} The layer extent.
     * @observable
     * @api
     */ BaseLayer1.prototype.getExtent = function() {
        return /** @type {import("../extent.js").Extent|undefined} */ this.get((0, _propertyJsDefault.default).EXTENT);
    };
    /**
     * Return the maximum resolution of the layer.
     * @return {number} The maximum resolution of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.getMaxResolution = function() {
        return /** @type {number} */ this.get((0, _propertyJsDefault.default).MAX_RESOLUTION);
    };
    /**
     * Return the minimum resolution of the layer.
     * @return {number} The minimum resolution of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.getMinResolution = function() {
        return /** @type {number} */ this.get((0, _propertyJsDefault.default).MIN_RESOLUTION);
    };
    /**
     * Return the minimum zoom level of the layer.
     * @return {number} The minimum zoom level of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.getMinZoom = function() {
        return /** @type {number} */ this.get((0, _propertyJsDefault.default).MIN_ZOOM);
    };
    /**
     * Return the maximum zoom level of the layer.
     * @return {number} The maximum zoom level of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.getMaxZoom = function() {
        return /** @type {number} */ this.get((0, _propertyJsDefault.default).MAX_ZOOM);
    };
    /**
     * Return the opacity of the layer (between 0 and 1).
     * @return {number} The opacity of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.getOpacity = function() {
        return /** @type {number} */ this.get((0, _propertyJsDefault.default).OPACITY);
    };
    /**
     * @abstract
     * @return {import("../source/State.js").default} Source state.
     */ BaseLayer1.prototype.getSourceState = function() {
        return (0, _utilJs.abstract)();
    };
    /**
     * Return the visibility of the layer (`true` or `false`).
     * @return {boolean} The visibility of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.getVisible = function() {
        return /** @type {boolean} */ this.get((0, _propertyJsDefault.default).VISIBLE);
    };
    /**
     * Return the Z-index of the layer, which is used to order layers before
     * rendering. The default Z-index is 0.
     * @return {number} The Z-index of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.getZIndex = function() {
        return /** @type {number} */ this.get((0, _propertyJsDefault.default).Z_INDEX);
    };
    /**
     * Sets the background color.
     * @param {BackgroundColor} [opt_background] Background color.
     */ BaseLayer1.prototype.setBackground = function(opt_background) {
        this.background_ = opt_background;
        this.changed();
    };
    /**
     * Set the extent at which the layer is visible.  If `undefined`, the layer
     * will be visible at all extents.
     * @param {import("../extent.js").Extent|undefined} extent The extent of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.setExtent = function(extent) {
        this.set((0, _propertyJsDefault.default).EXTENT, extent);
    };
    /**
     * Set the maximum resolution at which the layer is visible.
     * @param {number} maxResolution The maximum resolution of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.setMaxResolution = function(maxResolution) {
        this.set((0, _propertyJsDefault.default).MAX_RESOLUTION, maxResolution);
    };
    /**
     * Set the minimum resolution at which the layer is visible.
     * @param {number} minResolution The minimum resolution of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.setMinResolution = function(minResolution) {
        this.set((0, _propertyJsDefault.default).MIN_RESOLUTION, minResolution);
    };
    /**
     * Set the maximum zoom (exclusive) at which the layer is visible.
     * Note that the zoom levels for layer visibility are based on the
     * view zoom level, which may be different from a tile source zoom level.
     * @param {number} maxZoom The maximum zoom of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.setMaxZoom = function(maxZoom) {
        this.set((0, _propertyJsDefault.default).MAX_ZOOM, maxZoom);
    };
    /**
     * Set the minimum zoom (inclusive) at which the layer is visible.
     * Note that the zoom levels for layer visibility are based on the
     * view zoom level, which may be different from a tile source zoom level.
     * @param {number} minZoom The minimum zoom of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.setMinZoom = function(minZoom) {
        this.set((0, _propertyJsDefault.default).MIN_ZOOM, minZoom);
    };
    /**
     * Set the opacity of the layer, allowed values range from 0 to 1.
     * @param {number} opacity The opacity of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.setOpacity = function(opacity) {
        (0, _assertsJs.assert)(typeof opacity === "number", 64); // Layer opacity must be a number
        this.set((0, _propertyJsDefault.default).OPACITY, opacity);
    };
    /**
     * Set the visibility of the layer (`true` or `false`).
     * @param {boolean} visible The visibility of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.setVisible = function(visible) {
        this.set((0, _propertyJsDefault.default).VISIBLE, visible);
    };
    /**
     * Set Z-index of the layer, which is used to order layers before rendering.
     * The default Z-index is 0.
     * @param {number} zindex The z-index of the layer.
     * @observable
     * @api
     */ BaseLayer1.prototype.setZIndex = function(zindex) {
        this.set((0, _propertyJsDefault.default).Z_INDEX, zindex);
    };
    /**
     * Clean up.
     */ BaseLayer1.prototype.disposeInternal = function() {
        if (this.state_) {
            this.state_.layer = null;
            this.state_ = null;
        }
        _super.prototype.disposeInternal.call(this);
    };
    return BaseLayer1;
}((0, _objectJsDefault.default));
exports.default = BaseLayer;

},{"../Object.js":"1zG8z","./Property.js":"kCuCK","../util.js":"pLBjQ","../asserts.js":"e4TiF","../obj.js":"3ssAG","../math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kCuCK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/layer/Property
 */ /**
 * @enum {string}
 */ exports.default = {
    OPACITY: "opacity",
    VISIBLE: "visible",
    EXTENT: "extent",
    Z_INDEX: "zIndex",
    MAX_RESOLUTION: "maxResolution",
    MIN_RESOLUTION: "minResolution",
    MAX_ZOOM: "maxZoom",
    MIN_ZOOM: "minZoom",
    SOURCE: "source",
    MAP: "map"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5G9JA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/render/EventType
 */ /**
 * @enum {string}
 */ exports.default = {
    /**
     * Triggered before a layer is rendered.
     * @event module:ol/render/Event~RenderEvent#prerender
     * @api
     */ PRERENDER: "prerender",
    /**
     * Triggered after a layer is rendered.
     * @event module:ol/render/Event~RenderEvent#postrender
     * @api
     */ POSTRENDER: "postrender",
    /**
     * Triggered before layers are composed.  When dispatched by the map, the event object will not have
     * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only
     * WebGL layers currently dispatch this event.
     * @event module:ol/render/Event~RenderEvent#precompose
     * @api
     */ PRECOMPOSE: "precompose",
    /**
     * Triggered after layers are composed.  When dispatched by the map, the event object will not have
     * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only
     * WebGL layers currently dispatch this event.
     * @event module:ol/render/Event~RenderEvent#postcompose
     * @api
     */ POSTCOMPOSE: "postcompose",
    /**
     * Triggered when rendering is complete, i.e. all sources and tiles have
     * finished loading for the current viewport, and all tiles are faded in.
     * The event object will not have a `context` set.
     * @event module:ol/render/Event~RenderEvent#rendercomplete
     * @api
     */ RENDERCOMPLETE: "rendercomplete"
}; /**
 * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes
 */  /**
 * @typedef {'postrender'|'prerender'} LayerRenderEventTypes
 */ 

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gW573":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/source/State
 */ /**
 * @enum {string}
 * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
 */ exports.default = {
    UNDEFINED: "undefined",
    LOADING: "loading",
    READY: "ready",
    ERROR: "error"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gReoh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CollectionEvent", ()=>CollectionEvent);
/**
 * @module ol/Collection
 */ var _assertionErrorJs = require("./AssertionError.js");
var _assertionErrorJsDefault = parcelHelpers.interopDefault(_assertionErrorJs);
var _objectJs = require("./Object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _collectionEventTypeJs = require("./CollectionEventType.js");
var _collectionEventTypeJsDefault = parcelHelpers.interopDefault(_collectionEventTypeJs);
var _eventJs = require("./events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @enum {string}
 * @private
 */ var Property = {
    LENGTH: "length"
};
/**
 * @classdesc
 * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this
 * type.
 */ var CollectionEvent = /** @class */ function(_super) {
    __extends(CollectionEvent1, _super);
    /**
     * @param {import("./CollectionEventType.js").default} type Type.
     * @param {*} [opt_element] Element.
     * @param {number} [opt_index] The index of the added or removed element.
     */ function CollectionEvent1(type, opt_element, opt_index) {
        var _this = _super.call(this, type) || this;
        /**
         * The element that is added to or removed from the collection.
         * @type {*}
         * @api
         */ _this.element = opt_element;
        /**
         * The index of the added or removed element.
         * @type {number}
         * @api
         */ _this.index = opt_index;
        return _this;
    }
    return CollectionEvent1;
}((0, _eventJsDefault.default));
/***
 * @template Return
 * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
 *   import("./Observable").OnSignature<import("./ObjectEventType").Types|'change:length', import("./Object").ObjectEvent, Return> &
 *   import("./Observable").OnSignature<'add'|'remove', CollectionEvent, Return> &
 *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|import("./ObjectEventType").Types|
 *     'change:length'|'add'|'remove',Return>} CollectionOnSignature
 */ /**
 * @typedef {Object} Options
 * @property {boolean} [unique=false] Disallow the same item from being added to
 * the collection twice.
 */ /**
 * @classdesc
 * An expanded version of standard JS Array, adding convenience methods for
 * manipulation. Add and remove changes to the Collection trigger a Collection
 * event. Note that this does not cover changes to the objects _within_ the
 * Collection; they trigger events on the appropriate object, not on the
 * Collection as a whole.
 *
 * @fires CollectionEvent
 *
 * @template T
 * @api
 */ var Collection = /** @class */ function(_super) {
    __extends(Collection1, _super);
    /**
     * @param {Array<T>} [opt_array] Array.
     * @param {Options} [opt_options] Collection options.
     */ function Collection1(opt_array, opt_options) {
        var _this = _super.call(this) || this;
        /***
         * @type {CollectionOnSignature<import("./events").EventsKey>}
         */ _this.on;
        /***
         * @type {CollectionOnSignature<import("./events").EventsKey>}
         */ _this.once;
        /***
         * @type {CollectionOnSignature<void>}
         */ _this.un;
        var options = opt_options || {};
        /**
         * @private
         * @type {boolean}
         */ _this.unique_ = !!options.unique;
        /**
         * @private
         * @type {!Array<T>}
         */ _this.array_ = opt_array ? opt_array : [];
        if (_this.unique_) for(var i = 0, ii = _this.array_.length; i < ii; ++i)_this.assertUnique_(_this.array_[i], i);
        _this.updateLength_();
        return _this;
    }
    /**
     * Remove all elements from the collection.
     * @api
     */ Collection1.prototype.clear = function() {
        while(this.getLength() > 0)this.pop();
    };
    /**
     * Add elements to the collection.  This pushes each item in the provided array
     * to the end of the collection.
     * @param {!Array<T>} arr Array.
     * @return {Collection<T>} This collection.
     * @api
     */ Collection1.prototype.extend = function(arr) {
        for(var i = 0, ii = arr.length; i < ii; ++i)this.push(arr[i]);
        return this;
    };
    /**
     * Iterate over each element, calling the provided callback.
     * @param {function(T, number, Array<T>): *} f The function to call
     *     for every element. This function takes 3 arguments (the element, the
     *     index and the array). The return value is ignored.
     * @api
     */ Collection1.prototype.forEach = function(f) {
        var array = this.array_;
        for(var i = 0, ii = array.length; i < ii; ++i)f(array[i], i, array);
    };
    /**
     * Get a reference to the underlying Array object. Warning: if the array
     * is mutated, no events will be dispatched by the collection, and the
     * collection's "length" property won't be in sync with the actual length
     * of the array.
     * @return {!Array<T>} Array.
     * @api
     */ Collection1.prototype.getArray = function() {
        return this.array_;
    };
    /**
     * Get the element at the provided index.
     * @param {number} index Index.
     * @return {T} Element.
     * @api
     */ Collection1.prototype.item = function(index) {
        return this.array_[index];
    };
    /**
     * Get the length of this collection.
     * @return {number} The length of the array.
     * @observable
     * @api
     */ Collection1.prototype.getLength = function() {
        return this.get(Property.LENGTH);
    };
    /**
     * Insert an element at the provided index.
     * @param {number} index Index.
     * @param {T} elem Element.
     * @api
     */ Collection1.prototype.insertAt = function(index, elem) {
        if (this.unique_) this.assertUnique_(elem);
        this.array_.splice(index, 0, elem);
        this.updateLength_();
        this.dispatchEvent(new CollectionEvent((0, _collectionEventTypeJsDefault.default).ADD, elem, index));
    };
    /**
     * Remove the last element of the collection and return it.
     * Return `undefined` if the collection is empty.
     * @return {T|undefined} Element.
     * @api
     */ Collection1.prototype.pop = function() {
        return this.removeAt(this.getLength() - 1);
    };
    /**
     * Insert the provided element at the end of the collection.
     * @param {T} elem Element.
     * @return {number} New length of the collection.
     * @api
     */ Collection1.prototype.push = function(elem) {
        if (this.unique_) this.assertUnique_(elem);
        var n = this.getLength();
        this.insertAt(n, elem);
        return this.getLength();
    };
    /**
     * Remove the first occurrence of an element from the collection.
     * @param {T} elem Element.
     * @return {T|undefined} The removed element or undefined if none found.
     * @api
     */ Collection1.prototype.remove = function(elem) {
        var arr = this.array_;
        for(var i = 0, ii = arr.length; i < ii; ++i){
            if (arr[i] === elem) return this.removeAt(i);
        }
        return undefined;
    };
    /**
     * Remove the element at the provided index and return it.
     * Return `undefined` if the collection does not contain this index.
     * @param {number} index Index.
     * @return {T|undefined} Value.
     * @api
     */ Collection1.prototype.removeAt = function(index) {
        var prev = this.array_[index];
        this.array_.splice(index, 1);
        this.updateLength_();
        this.dispatchEvent(new CollectionEvent((0, _collectionEventTypeJsDefault.default).REMOVE, prev, index));
        return prev;
    };
    /**
     * Set the element at the provided index.
     * @param {number} index Index.
     * @param {T} elem Element.
     * @api
     */ Collection1.prototype.setAt = function(index, elem) {
        var n = this.getLength();
        if (index < n) {
            if (this.unique_) this.assertUnique_(elem, index);
            var prev = this.array_[index];
            this.array_[index] = elem;
            this.dispatchEvent(new CollectionEvent((0, _collectionEventTypeJsDefault.default).REMOVE, prev, index));
            this.dispatchEvent(new CollectionEvent((0, _collectionEventTypeJsDefault.default).ADD, elem, index));
        } else {
            for(var j = n; j < index; ++j)this.insertAt(j, undefined);
            this.insertAt(index, elem);
        }
    };
    /**
     * @private
     */ Collection1.prototype.updateLength_ = function() {
        this.set(Property.LENGTH, this.array_.length);
    };
    /**
     * @private
     * @param {T} elem Element.
     * @param {number} [opt_except] Optional index to ignore.
     */ Collection1.prototype.assertUnique_ = function(elem, opt_except) {
        for(var i = 0, ii = this.array_.length; i < ii; ++i){
            if (this.array_[i] === elem && i !== opt_except) throw new (0, _assertionErrorJsDefault.default)(58);
        }
    };
    return Collection1;
}((0, _objectJsDefault.default));
exports.default = Collection;

},{"./AssertionError.js":"1MBbN","./Object.js":"1zG8z","./CollectionEventType.js":"82Ksf","./events/Event.js":"hwXQP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"82Ksf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/CollectionEventType
 */ /**
 * @enum {string}
 */ exports.default = {
    /**
     * Triggered when an item is added to the collection.
     * @event module:ol/Collection.CollectionEvent#add
     * @api
     */ ADD: "add",
    /**
     * Triggered when an item is removed from the collection.
     * @event module:ol/Collection.CollectionEvent#remove
     * @api
     */ REMOVE: "remove"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h01dD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/control/Rotate
 */ var _controlJs = require("./Control.js");
var _controlJsDefault = parcelHelpers.interopDefault(_controlJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _cssJs = require("../css.js");
var _easingJs = require("../easing.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {string} [className='ol-rotate'] CSS class name.
 * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.
 * @property {string} [compassClassName='ol-compass'] CSS class name for the compass.
 * @property {number} [duration=250] Animation duration in milliseconds.
 * @property {boolean} [autoHide=true] Hide the control when rotation is 0.
 * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control should
 * be re-rendered. This is called in a `requestAnimationFrame` callback.
 * @property {function():void} [resetNorth] Function called when the control is clicked.
 * This will override the default `resetNorth`.
 * @property {HTMLElement|string} [target] Specify a target if you want the control to be
 * rendered outside of the map's viewport.
 */ /**
 * @classdesc
 * A button control to reset rotation to 0.
 * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
 * selector is added to the button when the rotation is 0.
 *
 * @api
 */ var Rotate = /** @class */ function(_super) {
    __extends(Rotate1, _super);
    /**
     * @param {Options} [opt_options] Rotate options.
     */ function Rotate1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this, {
            element: document.createElement("div"),
            render: options.render,
            target: options.target
        }) || this;
        var className = options.className !== undefined ? options.className : "ol-rotate";
        var label = options.label !== undefined ? options.label : "\u21E7";
        var compassClassName = options.compassClassName !== undefined ? options.compassClassName : "ol-compass";
        /**
         * @type {HTMLElement}
         * @private
         */ _this.label_ = null;
        if (typeof label === "string") {
            _this.label_ = document.createElement("span");
            _this.label_.className = compassClassName;
            _this.label_.textContent = label;
        } else {
            _this.label_ = label;
            _this.label_.classList.add(compassClassName);
        }
        var tipLabel = options.tipLabel ? options.tipLabel : "Reset rotation";
        var button = document.createElement("button");
        button.className = className + "-reset";
        button.setAttribute("type", "button");
        button.title = tipLabel;
        button.appendChild(_this.label_);
        button.addEventListener((0, _eventTypeJsDefault.default).CLICK, _this.handleClick_.bind(_this), false);
        var cssClasses = className + " " + (0, _cssJs.CLASS_UNSELECTABLE) + " " + (0, _cssJs.CLASS_CONTROL);
        var element = _this.element;
        element.className = cssClasses;
        element.appendChild(button);
        _this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;
        /**
         * @type {number}
         * @private
         */ _this.duration_ = options.duration !== undefined ? options.duration : 250;
        /**
         * @type {boolean}
         * @private
         */ _this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;
        /**
         * @private
         * @type {number|undefined}
         */ _this.rotation_ = undefined;
        if (_this.autoHide_) _this.element.classList.add((0, _cssJs.CLASS_HIDDEN));
        return _this;
    }
    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */ Rotate1.prototype.handleClick_ = function(event) {
        event.preventDefault();
        if (this.callResetNorth_ !== undefined) this.callResetNorth_();
        else this.resetNorth_();
    };
    /**
     * @private
     */ Rotate1.prototype.resetNorth_ = function() {
        var map = this.getMap();
        var view = map.getView();
        if (!view) // the map does not have a view, so we can't act
        // upon it
        return;
        var rotation = view.getRotation();
        if (rotation !== undefined) {
            if (this.duration_ > 0 && rotation % (2 * Math.PI) !== 0) view.animate({
                rotation: 0,
                duration: this.duration_,
                easing: (0, _easingJs.easeOut)
            });
            else view.setRotation(0);
        }
    };
    /**
     * Update the rotate control element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */ Rotate1.prototype.render = function(mapEvent) {
        var frameState = mapEvent.frameState;
        if (!frameState) return;
        var rotation = frameState.viewState.rotation;
        if (rotation != this.rotation_) {
            var transform = "rotate(" + rotation + "rad)";
            if (this.autoHide_) {
                var contains = this.element.classList.contains((0, _cssJs.CLASS_HIDDEN));
                if (!contains && rotation === 0) this.element.classList.add((0, _cssJs.CLASS_HIDDEN));
                else if (contains && rotation !== 0) this.element.classList.remove((0, _cssJs.CLASS_HIDDEN));
            }
            this.label_.style.transform = transform;
        }
        this.rotation_ = rotation;
    };
    return Rotate1;
}((0, _controlJsDefault.default));
exports.default = Rotate;

},{"./Control.js":"a2mnq","../events/EventType.js":"hrQJ6","../css.js":"lDlNi","../easing.js":"fYITA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fYITA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/easing
 */ /**
 * Start slow and speed up.
 * @param {number} t Input between 0 and 1.
 * @return {number} Output between 0 and 1.
 * @api
 */ parcelHelpers.export(exports, "easeIn", ()=>easeIn);
/**
 * Start fast and slow down.
 * @param {number} t Input between 0 and 1.
 * @return {number} Output between 0 and 1.
 * @api
 */ parcelHelpers.export(exports, "easeOut", ()=>easeOut);
/**
 * Start slow, speed up, and then slow down again.
 * @param {number} t Input between 0 and 1.
 * @return {number} Output between 0 and 1.
 * @api
 */ parcelHelpers.export(exports, "inAndOut", ()=>inAndOut);
/**
 * Maintain a constant speed over time.
 * @param {number} t Input between 0 and 1.
 * @return {number} Output between 0 and 1.
 * @api
 */ parcelHelpers.export(exports, "linear", ()=>linear);
/**
 * Start slow, speed up, and at the very end slow down again.  This has the
 * same general behavior as {@link module:ol/easing.inAndOut}, but the final
 * slowdown is delayed.
 * @param {number} t Input between 0 and 1.
 * @return {number} Output between 0 and 1.
 * @api
 */ parcelHelpers.export(exports, "upAndDown", ()=>upAndDown);
function easeIn(t) {
    return Math.pow(t, 3);
}
function easeOut(t) {
    return 1 - easeIn(1 - t);
}
function inAndOut(t) {
    return 3 * t * t - 2 * t * t * t;
}
function linear(t) {
    return t;
}
function upAndDown(t) {
    if (t < 0.5) return inAndOut(2 * t);
    else return 1 - inAndOut(2 * (t - 0.5));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"956F8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/control/Zoom
 */ var _controlJs = require("./Control.js");
var _controlJsDefault = parcelHelpers.interopDefault(_controlJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _cssJs = require("../css.js");
var _easingJs = require("../easing.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {number} [duration=250] Animation duration in milliseconds.
 * @property {string} [className='ol-zoom'] CSS class name.
 * @property {string} [zoomInClassName=className + '-in'] CSS class name for the zoom-in button.
 * @property {string} [zoomOutClassName=className + '-out'] CSS class name for the zoom-out button.
 * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in
 * button. Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string|HTMLElement} [zoomOutLabel='–'] Text label to use for the zoom-out button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.
 * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.
 * @property {number} [delta=1] The zoom delta applied on each click.
 * @property {HTMLElement|string} [target] Specify a target if you want the control to be
 * rendered outside of the map's viewport.
 */ /**
 * @classdesc
 * A control with 2 buttons, one for zoom in and one for zoom out.
 * This control is one of the default controls of a map. To style this control
 * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
 *
 * @api
 */ var Zoom = /** @class */ function(_super) {
    __extends(Zoom1, _super);
    /**
     * @param {Options} [opt_options] Zoom options.
     */ function Zoom1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this, {
            element: document.createElement("div"),
            target: options.target
        }) || this;
        var className = options.className !== undefined ? options.className : "ol-zoom";
        var delta = options.delta !== undefined ? options.delta : 1;
        var zoomInClassName = options.zoomInClassName !== undefined ? options.zoomInClassName : className + "-in";
        var zoomOutClassName = options.zoomOutClassName !== undefined ? options.zoomOutClassName : className + "-out";
        var zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : "+";
        var zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : "\u2013";
        var zoomInTipLabel = options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : "Zoom in";
        var zoomOutTipLabel = options.zoomOutTipLabel !== undefined ? options.zoomOutTipLabel : "Zoom out";
        var inElement = document.createElement("button");
        inElement.className = zoomInClassName;
        inElement.setAttribute("type", "button");
        inElement.title = zoomInTipLabel;
        inElement.appendChild(typeof zoomInLabel === "string" ? document.createTextNode(zoomInLabel) : zoomInLabel);
        inElement.addEventListener((0, _eventTypeJsDefault.default).CLICK, _this.handleClick_.bind(_this, delta), false);
        var outElement = document.createElement("button");
        outElement.className = zoomOutClassName;
        outElement.setAttribute("type", "button");
        outElement.title = zoomOutTipLabel;
        outElement.appendChild(typeof zoomOutLabel === "string" ? document.createTextNode(zoomOutLabel) : zoomOutLabel);
        outElement.addEventListener((0, _eventTypeJsDefault.default).CLICK, _this.handleClick_.bind(_this, -delta), false);
        var cssClasses = className + " " + (0, _cssJs.CLASS_UNSELECTABLE) + " " + (0, _cssJs.CLASS_CONTROL);
        var element = _this.element;
        element.className = cssClasses;
        element.appendChild(inElement);
        element.appendChild(outElement);
        /**
         * @type {number}
         * @private
         */ _this.duration_ = options.duration !== undefined ? options.duration : 250;
        return _this;
    }
    /**
     * @param {number} delta Zoom delta.
     * @param {MouseEvent} event The event to handle
     * @private
     */ Zoom1.prototype.handleClick_ = function(delta, event) {
        event.preventDefault();
        this.zoomByDelta_(delta);
    };
    /**
     * @param {number} delta Zoom delta.
     * @private
     */ Zoom1.prototype.zoomByDelta_ = function(delta) {
        var map = this.getMap();
        var view = map.getView();
        if (!view) // the map does not have a view, so we can't act
        // upon it
        return;
        var currentZoom = view.getZoom();
        if (currentZoom !== undefined) {
            var newZoom = view.getConstrainedZoom(currentZoom + delta);
            if (this.duration_ > 0) {
                if (view.getAnimating()) view.cancelAnimations();
                view.animate({
                    zoom: newZoom,
                    duration: this.duration_,
                    easing: (0, _easingJs.easeOut)
                });
            } else view.setZoom(newZoom);
        }
    };
    return Zoom1;
}((0, _controlJsDefault.default));
exports.default = Zoom;

},{"./Control.js":"a2mnq","../events/EventType.js":"hrQJ6","../css.js":"lDlNi","../easing.js":"fYITA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jT75q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/control/FullScreen
 */ var _controlJs = require("./Control.js");
var _controlJsDefault = parcelHelpers.interopDefault(_controlJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _mapPropertyJs = require("../MapProperty.js");
var _mapPropertyJsDefault = parcelHelpers.interopDefault(_mapPropertyJs);
var _cssJs = require("../css.js");
var _eventsJs = require("../events.js");
var _domJs = require("../dom.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var events = [
    "fullscreenchange",
    "webkitfullscreenchange",
    "MSFullscreenChange", 
];
/**
 * @enum {string}
 */ var FullScreenEventType = {
    /**
     * Triggered after the map entered fullscreen.
     * @event FullScreenEventType#enterfullscreen
     * @api
     */ ENTERFULLSCREEN: "enterfullscreen",
    /**
     * Triggered after the map leave fullscreen.
     * @event FullScreenEventType#leavefullscreen
     * @api
     */ LEAVEFULLSCREEN: "leavefullscreen"
};
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes|
 *     'enterfullscreen'|'leavefullscreen', import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|
 *     'enterfullscreen'|'leavefullscreen'|import("../ObjectEventType").Types, Return>} FullScreenOnSignature
 */ /**
 * @typedef {Object} Options
 * @property {string} [className='ol-full-screen'] CSS class name.
 * @property {string|Text|HTMLElement} [label='\u2922'] Text label to use for the button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string|Text|HTMLElement} [labelActive='\u00d7'] Text label to use for the
 * button when full-screen is active.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [activeClassName=className + '-true'] CSS class name for the button
 * when full-screen is active.
 * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button
 * when full-screen is inactive.
 * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.
 * @property {boolean} [keys=false] Full keyboard access.
 * @property {HTMLElement|string} [target] Specify a target if you want the
 * control to be rendered outside of the map's viewport.
 * @property {HTMLElement|string} [source] The element to be displayed
 * fullscreen. When not provided, the element containing the map viewport will
 * be displayed fullscreen.
 */ /**
 * @classdesc
 * Provides a button that when clicked fills up the full screen with the map.
 * The full screen source element is by default the element containing the map viewport unless
 * overridden by providing the `source` option. In which case, the dom
 * element introduced using this parameter will be displayed in full screen.
 *
 * When in full screen mode, a close button is shown to exit full screen mode.
 * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to
 * toggle the map in full screen mode.
 *
 * @fires FullScreenEventType#enterfullscreen
 * @fires FullScreenEventType#leavefullscreen
 * @api
 */ var FullScreen = /** @class */ function(_super) {
    __extends(FullScreen1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function FullScreen1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this, {
            element: document.createElement("div"),
            target: options.target
        }) || this;
        /***
         * @type {FullScreenOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {FullScreenOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {FullScreenOnSignature<void>}
         */ _this.un;
        /**
         * @private
         * @type {boolean}
         */ _this.keys_ = options.keys !== undefined ? options.keys : false;
        /**
         * @private
         * @type {HTMLElement|string|undefined}
         */ _this.source_ = options.source;
        /**
         * @type {boolean}
         * @private
         */ _this.isInFullscreen_ = false;
        /**
         * @private
         */ _this.boundHandleMapTargetChange_ = _this.handleMapTargetChange_.bind(_this);
        /**
         * @private
         * @type {string}
         */ _this.cssClassName_ = options.className !== undefined ? options.className : "ol-full-screen";
        /**
         * @private
         * @type {Array<import("../events.js").EventsKey>}
         */ _this.documentListeners_ = [];
        /**
         * @private
         * @type {Array<string>}
         */ _this.activeClassName_ = options.activeClassName !== undefined ? options.activeClassName.split(" ") : [
            _this.cssClassName_ + "-true"
        ];
        /**
         * @private
         * @type {Array<string>}
         */ _this.inactiveClassName_ = options.inactiveClassName !== undefined ? options.inactiveClassName.split(" ") : [
            _this.cssClassName_ + "-false"
        ];
        var label = options.label !== undefined ? options.label : "\u2922";
        /**
         * @private
         * @type {Text|HTMLElement}
         */ _this.labelNode_ = typeof label === "string" ? document.createTextNode(label) : label;
        var labelActive = options.labelActive !== undefined ? options.labelActive : "\xd7";
        /**
         * @private
         * @type {Text|HTMLElement}
         */ _this.labelActiveNode_ = typeof labelActive === "string" ? document.createTextNode(labelActive) : labelActive;
        var tipLabel = options.tipLabel ? options.tipLabel : "Toggle full-screen";
        /**
         * @private
         * @type {HTMLElement}
         */ _this.button_ = document.createElement("button");
        _this.button_.title = tipLabel;
        _this.button_.setAttribute("type", "button");
        _this.button_.appendChild(_this.labelNode_);
        _this.button_.addEventListener((0, _eventTypeJsDefault.default).CLICK, _this.handleClick_.bind(_this), false);
        _this.setClassName_(_this.button_, _this.isInFullscreen_);
        _this.element.className = "".concat(_this.cssClassName_, " ").concat((0, _cssJs.CLASS_UNSELECTABLE), " ").concat((0, _cssJs.CLASS_CONTROL));
        _this.element.appendChild(_this.button_);
        return _this;
    }
    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */ FullScreen1.prototype.handleClick_ = function(event) {
        event.preventDefault();
        this.handleFullScreen_();
    };
    /**
     * @private
     */ FullScreen1.prototype.handleFullScreen_ = function() {
        var map = this.getMap();
        if (!map) return;
        var doc = map.getOwnerDocument();
        if (!isFullScreenSupported(doc)) return;
        if (isFullScreen(doc)) exitFullScreen(doc);
        else {
            var element = void 0;
            if (this.source_) element = typeof this.source_ === "string" ? doc.getElementById(this.source_) : this.source_;
            else element = map.getTargetElement();
            if (this.keys_) requestFullScreenWithKeys(element);
            else requestFullScreen(element);
        }
    };
    /**
     * @private
     */ FullScreen1.prototype.handleFullScreenChange_ = function() {
        var map = this.getMap();
        if (!map) return;
        var wasInFullscreen = this.isInFullscreen_;
        this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());
        if (wasInFullscreen !== this.isInFullscreen_) {
            this.setClassName_(this.button_, this.isInFullscreen_);
            if (this.isInFullscreen_) {
                (0, _domJs.replaceNode)(this.labelActiveNode_, this.labelNode_);
                this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);
            } else {
                (0, _domJs.replaceNode)(this.labelNode_, this.labelActiveNode_);
                this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);
            }
            map.updateSize();
        }
    };
    /**
     * @param {HTMLElement} element Target element
     * @param {boolean} fullscreen True if fullscreen class name should be active
     * @private
     */ FullScreen1.prototype.setClassName_ = function(element, fullscreen) {
        var _a, _b, _c, _d;
        if (fullscreen) {
            (_a = element.classList).remove.apply(_a, this.inactiveClassName_);
            (_b = element.classList).add.apply(_b, this.activeClassName_);
        } else {
            (_c = element.classList).remove.apply(_c, this.activeClassName_);
            (_d = element.classList).add.apply(_d, this.inactiveClassName_);
        }
    };
    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default|null} map Map.
     * @api
     */ FullScreen1.prototype.setMap = function(map) {
        var oldMap = this.getMap();
        if (oldMap) oldMap.removeChangeListener((0, _mapPropertyJsDefault.default).TARGET, this.boundHandleMapTargetChange_);
        _super.prototype.setMap.call(this, map);
        this.handleMapTargetChange_();
        if (map) map.addChangeListener((0, _mapPropertyJsDefault.default).TARGET, this.boundHandleMapTargetChange_);
    };
    /**
     * @private
     */ FullScreen1.prototype.handleMapTargetChange_ = function() {
        var listeners = this.documentListeners_;
        for(var i = 0, ii = listeners.length; i < ii; ++i)(0, _eventsJs.unlistenByKey)(listeners[i]);
        listeners.length = 0;
        var map = this.getMap();
        if (map) {
            var doc = map.getOwnerDocument();
            if (isFullScreenSupported(doc)) this.element.classList.remove((0, _cssJs.CLASS_UNSUPPORTED));
            else this.element.classList.add((0, _cssJs.CLASS_UNSUPPORTED));
            for(var i = 0, ii = events.length; i < ii; ++i)listeners.push((0, _eventsJs.listen)(doc, events[i], this.handleFullScreenChange_, this));
            this.handleFullScreenChange_();
        }
    };
    return FullScreen1;
}((0, _controlJsDefault.default));
/**
 * @param {Document} doc The root document to check.
 * @return {boolean} Fullscreen is supported by the current platform.
 */ function isFullScreenSupported(doc) {
    var body = doc.body;
    return !!(body["webkitRequestFullscreen"] || body["msRequestFullscreen"] && doc["msFullscreenEnabled"] || body.requestFullscreen && doc.fullscreenEnabled);
}
/**
 * @param {Document} doc The root document to check.
 * @return {boolean} Element is currently in fullscreen.
 */ function isFullScreen(doc) {
    return !!(doc["webkitIsFullScreen"] || doc["msFullscreenElement"] || doc.fullscreenElement);
}
/**
 * Request to fullscreen an element.
 * @param {HTMLElement} element Element to request fullscreen
 */ function requestFullScreen(element) {
    if (element.requestFullscreen) element.requestFullscreen();
    else if (element["msRequestFullscreen"]) element["msRequestFullscreen"]();
    else if (element["webkitRequestFullscreen"]) element["webkitRequestFullscreen"]();
}
/**
 * Request to fullscreen an element with keyboard input.
 * @param {HTMLElement} element Element to request fullscreen
 */ function requestFullScreenWithKeys(element) {
    if (element["webkitRequestFullscreen"]) element["webkitRequestFullscreen"]();
    else requestFullScreen(element);
}
/**
 * Exit fullscreen.
 * @param {Document} doc The document to exit fullscren from
 */ function exitFullScreen(doc) {
    if (doc.exitFullscreen) doc.exitFullscreen();
    else if (doc["msExitFullscreen"]) doc["msExitFullscreen"]();
    else if (doc["webkitExitFullscreen"]) doc["webkitExitFullscreen"]();
}
exports.default = FullScreen;

},{"./Control.js":"a2mnq","../events/EventType.js":"hrQJ6","../MapProperty.js":"jMfsr","../css.js":"lDlNi","../events.js":"dcspA","../dom.js":"84QzQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jMfsr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/MapProperty
 */ /**
 * @enum {string}
 */ exports.default = {
    LAYERGROUP: "layergroup",
    SIZE: "size",
    TARGET: "target",
    VIEW: "view"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3RlUn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _controlJs = require("./Control.js");
var _controlJsDefault = parcelHelpers.interopDefault(_controlJs);
var _eventTypeJs = require("../pointer/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _projJs = require("../proj.js");
var _eventsJs = require("../events.js");
/**
 * @module ol/control/MousePosition
 */ var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @type {string}
 */ var PROJECTION = "projection";
/**
 * @type {string}
 */ var COORDINATE_FORMAT = "coordinateFormat";
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
 *     'change:coordinateFormat'|'change:projection', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature
 */ /**
 * @typedef {Object} Options
 * @property {string} [className='ol-mouse-position'] CSS class name.
 * @property {import("../coordinate.js").CoordinateFormat} [coordinateFormat] Coordinate format.
 * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
 * @property {function(import("../MapEvent.js").default):void} [render] Function called when the
 * control should be re-rendered. This is called in a `requestAnimationFrame`
 * callback.
 * @property {HTMLElement|string} [target] Specify a target if you want the
 * control to be rendered outside of the map's viewport.
 * @property {string|boolean} [placeholder] Markup to show when the mouse position is not
 * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space
 * is rendered when the mouse leaves the viewport.  To render something else, provide a string
 * to be used as the text content (e.g. 'no position' or '' for an empty string).  Set the placeholder
 * to `false` to retain the last position when the mouse leaves the viewport.  In a future release, this
 * will be the default behavior.
 * @property {string} [undefinedHTML='&#160;'] This option is deprecated.  Use the `placeholder` option instead.
 */ /**
 * @classdesc
 * A control to show the 2D coordinates of the mouse cursor. By default, these
 * are in the view projection, but can be in any supported projection.
 * By default the control is shown in the top right corner of the map, but this
 * can be changed by using the css selector `.ol-mouse-position`.
 *
 * On touch devices, which usually do not have a mouse cursor, the coordinates
 * of the currently touched position are shown.
 *
 * @api
 */ var MousePosition = /** @class */ function(_super) {
    __extends(MousePosition1, _super);
    /**
     * @param {Options} [opt_options] Mouse position options.
     */ function MousePosition1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        var element = document.createElement("div");
        element.className = options.className !== undefined ? options.className : "ol-mouse-position";
        _this = _super.call(this, {
            element: element,
            render: options.render,
            target: options.target
        }) || this;
        /***
         * @type {MousePositionOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {MousePositionOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {MousePositionOnSignature<void>}
         */ _this.un;
        _this.addChangeListener(PROJECTION, _this.handleProjectionChanged_);
        if (options.coordinateFormat) _this.setCoordinateFormat(options.coordinateFormat);
        if (options.projection) _this.setProjection(options.projection);
        /**
         * Change this to `false` when removing the deprecated `undefinedHTML` option.
         * @type {boolean}
         */ var renderOnMouseOut = true;
        /**
         * @type {string}
         */ var placeholder = "&#160;";
        if ("undefinedHTML" in options) {
            // deprecated behavior
            if (options.undefinedHTML !== undefined) placeholder = options.undefinedHTML;
            renderOnMouseOut = !!placeholder;
        } else if ("placeholder" in options) {
            if (options.placeholder === false) renderOnMouseOut = false;
            else placeholder = String(options.placeholder);
        }
        /**
         * @private
         * @type {string}
         */ _this.placeholder_ = placeholder;
        /**
         * @private
         * @type {boolean}
         */ _this.renderOnMouseOut_ = renderOnMouseOut;
        /**
         * @private
         * @type {string}
         */ _this.renderedHTML_ = element.innerHTML;
        /**
         * @private
         * @type {?import("../proj/Projection.js").default}
         */ _this.mapProjection_ = null;
        /**
         * @private
         * @type {?import("../proj.js").TransformFunction}
         */ _this.transform_ = null;
        return _this;
    }
    /**
     * @private
     */ MousePosition1.prototype.handleProjectionChanged_ = function() {
        this.transform_ = null;
    };
    /**
     * Return the coordinate format type used to render the current position or
     * undefined.
     * @return {import("../coordinate.js").CoordinateFormat|undefined} The format to render the current
     *     position in.
     * @observable
     * @api
     */ MousePosition1.prototype.getCoordinateFormat = function() {
        return /** @type {import("../coordinate.js").CoordinateFormat|undefined} */ this.get(COORDINATE_FORMAT);
    };
    /**
     * Return the projection that is used to report the mouse position.
     * @return {import("../proj/Projection.js").default|undefined} The projection to report mouse
     *     position in.
     * @observable
     * @api
     */ MousePosition1.prototype.getProjection = function() {
        return /** @type {import("../proj/Projection.js").default|undefined} */ this.get(PROJECTION);
    };
    /**
     * @param {MouseEvent} event Browser event.
     * @protected
     */ MousePosition1.prototype.handleMouseMove = function(event) {
        var map = this.getMap();
        this.updateHTML_(map.getEventPixel(event));
    };
    /**
     * @param {Event} event Browser event.
     * @protected
     */ MousePosition1.prototype.handleMouseOut = function(event) {
        this.updateHTML_(null);
    };
    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default|null} map Map.
     * @api
     */ MousePosition1.prototype.setMap = function(map) {
        _super.prototype.setMap.call(this, map);
        if (map) {
            var viewport = map.getViewport();
            this.listenerKeys.push((0, _eventsJs.listen)(viewport, (0, _eventTypeJsDefault.default).POINTERMOVE, this.handleMouseMove, this));
            if (this.renderOnMouseOut_) this.listenerKeys.push((0, _eventsJs.listen)(viewport, (0, _eventTypeJsDefault.default).POINTEROUT, this.handleMouseOut, this));
            this.updateHTML_(null);
        }
    };
    /**
     * Set the coordinate format type used to render the current position.
     * @param {import("../coordinate.js").CoordinateFormat} format The format to render the current
     *     position in.
     * @observable
     * @api
     */ MousePosition1.prototype.setCoordinateFormat = function(format) {
        this.set(COORDINATE_FORMAT, format);
    };
    /**
     * Set the projection that is used to report the mouse position.
     * @param {import("../proj.js").ProjectionLike} projection The projection to report mouse
     *     position in.
     * @observable
     * @api
     */ MousePosition1.prototype.setProjection = function(projection) {
        this.set(PROJECTION, (0, _projJs.get)(projection));
    };
    /**
     * @param {?import("../pixel.js").Pixel} pixel Pixel.
     * @private
     */ MousePosition1.prototype.updateHTML_ = function(pixel) {
        var html = this.placeholder_;
        if (pixel && this.mapProjection_) {
            if (!this.transform_) {
                var projection = this.getProjection();
                if (projection) this.transform_ = (0, _projJs.getTransformFromProjections)(this.mapProjection_, projection);
                else this.transform_ = (0, _projJs.identityTransform);
            }
            var map = this.getMap();
            var coordinate = map.getCoordinateFromPixelInternal(pixel);
            if (coordinate) {
                var userProjection = (0, _projJs.getUserProjection)();
                if (userProjection) this.transform_ = (0, _projJs.getTransformFromProjections)(this.mapProjection_, userProjection);
                this.transform_(coordinate, coordinate);
                var coordinateFormat = this.getCoordinateFormat();
                if (coordinateFormat) html = coordinateFormat(coordinate);
                else html = coordinate.toString();
            }
        }
        if (!this.renderedHTML_ || html !== this.renderedHTML_) {
            this.element.innerHTML = html;
            this.renderedHTML_ = html;
        }
    };
    /**
     * Update the projection. Rendering of the coordinates is done in
     * `handleMouseMove` and `handleMouseUp`.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */ MousePosition1.prototype.render = function(mapEvent) {
        var frameState = mapEvent.frameState;
        if (!frameState) this.mapProjection_ = null;
        else if (this.mapProjection_ != frameState.viewState.projection) {
            this.mapProjection_ = frameState.viewState.projection;
            this.transform_ = null;
        }
    };
    return MousePosition1;
}((0, _controlJsDefault.default));
exports.default = MousePosition;

},{"./Control.js":"a2mnq","../pointer/EventType.js":"cVfVH","../proj.js":"SznqC","../events.js":"dcspA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cVfVH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/pointer/EventType
 */ /**
 * Constants for event names.
 * @enum {string}
 */ exports.default = {
    POINTERMOVE: "pointermove",
    POINTERDOWN: "pointerdown",
    POINTERUP: "pointerup",
    POINTEROVER: "pointerover",
    POINTEROUT: "pointerout",
    POINTERENTER: "pointerenter",
    POINTERLEAVE: "pointerleave",
    POINTERCANCEL: "pointercancel"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5pnxZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/control/OverviewMap
 */ var _compositeJs = require("../renderer/Composite.js");
var _compositeJsDefault = parcelHelpers.interopDefault(_compositeJs);
var _controlJs = require("./Control.js");
var _controlJsDefault = parcelHelpers.interopDefault(_controlJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _mapEventTypeJs = require("../MapEventType.js");
var _mapEventTypeJsDefault = parcelHelpers.interopDefault(_mapEventTypeJs);
var _mapPropertyJs = require("../MapProperty.js");
var _mapPropertyJsDefault = parcelHelpers.interopDefault(_mapPropertyJs);
var _objectEventTypeJs = require("../ObjectEventType.js");
var _objectEventTypeJsDefault = parcelHelpers.interopDefault(_objectEventTypeJs);
var _overlayJs = require("../Overlay.js");
var _overlayJsDefault = parcelHelpers.interopDefault(_overlayJs);
var _overlayPositioningJs = require("../OverlayPositioning.js");
var _overlayPositioningJsDefault = parcelHelpers.interopDefault(_overlayPositioningJs);
var _pluggableMapJs = require("../PluggableMap.js");
var _pluggableMapJsDefault = parcelHelpers.interopDefault(_pluggableMapJs);
var _viewJs = require("../View.js");
var _viewJsDefault = parcelHelpers.interopDefault(_viewJs);
var _viewPropertyJs = require("../ViewProperty.js");
var _viewPropertyJsDefault = parcelHelpers.interopDefault(_viewPropertyJs);
var _cssJs = require("../css.js");
var _extentJs = require("../extent.js");
var _eventsJs = require("../events.js");
var _polygonJs = require("../geom/Polygon.js");
var _domJs = require("../dom.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * Maximum width and/or height extent ratio that determines when the overview
 * map should be zoomed out.
 * @type {number}
 */ var MAX_RATIO = 0.75;
/**
 * Minimum width and/or height extent ratio that determines when the overview
 * map should be zoomed in.
 * @type {number}
 */ var MIN_RATIO = 0.1;
var ControlledMap = /** @class */ function(_super) {
    __extends(ControlledMap1, _super);
    function ControlledMap1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ControlledMap1.prototype.createRenderer = function() {
        return new (0, _compositeJsDefault.default)(this);
    };
    return ControlledMap1;
}((0, _pluggableMapJsDefault.default));
/**
 * @typedef {Object} Options
 * @property {string} [className='ol-overviewmap'] CSS class name.
 * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).
 * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the
 * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.
 * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed
 * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {Array<import("../layer/Base.js").default>|import("../Collection.js").default<import("../layer/Base.js").default>} [layers]
 * Layers for the overview map.
 * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control
 * should be re-rendered. This is called in a `requestAnimationFrame` callback.
 * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.
 * @property {HTMLElement|string} [target] Specify a target if you want the control
 * to be rendered outside of the map's viewport.
 * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.
 * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,
 * a default view with the same projection as the main map will be used.
 */ /**
 * Create a new control with a map acting as an overview map for another
 * defined map.
 *
 * @api
 */ var OverviewMap = /** @class */ function(_super) {
    __extends(OverviewMap1, _super);
    /**
     * @param {Options} [opt_options] OverviewMap options.
     */ function OverviewMap1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this, {
            element: document.createElement("div"),
            render: options.render,
            target: options.target
        }) || this;
        /**
         * @private
         */ _this.boundHandleRotationChanged_ = _this.handleRotationChanged_.bind(_this);
        /**
         * @type {boolean}
         * @private
         */ _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;
        /**
         * @private
         * @type {boolean}
         */ _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;
        if (!_this.collapsible_) _this.collapsed_ = false;
        /**
         * @private
         * @type {boolean}
         */ _this.rotateWithView_ = options.rotateWithView !== undefined ? options.rotateWithView : false;
        /**
         * @private
         * @type {import("../extent.js").Extent|undefined}
         */ _this.viewExtent_ = undefined;
        var className = options.className !== undefined ? options.className : "ol-overviewmap";
        var tipLabel = options.tipLabel !== undefined ? options.tipLabel : "Overview map";
        var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : "\u2039";
        if (typeof collapseLabel === "string") {
            /**
             * @private
             * @type {HTMLElement}
             */ _this.collapseLabel_ = document.createElement("span");
            _this.collapseLabel_.textContent = collapseLabel;
        } else _this.collapseLabel_ = collapseLabel;
        var label = options.label !== undefined ? options.label : "\u203A";
        if (typeof label === "string") {
            /**
             * @private
             * @type {HTMLElement}
             */ _this.label_ = document.createElement("span");
            _this.label_.textContent = label;
        } else _this.label_ = label;
        var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;
        var button = document.createElement("button");
        button.setAttribute("type", "button");
        button.title = tipLabel;
        button.appendChild(activeLabel);
        button.addEventListener((0, _eventTypeJsDefault.default).CLICK, _this.handleClick_.bind(_this), false);
        /**
         * @type {HTMLElement}
         * @private
         */ _this.ovmapDiv_ = document.createElement("div");
        _this.ovmapDiv_.className = "ol-overviewmap-map";
        /**
         * Explicitly given view to be used instead of a view derived from the main map.
         * @type {View}
         * @private
         */ _this.view_ = options.view;
        /**
         * @type {ControlledMap}
         * @private
         */ _this.ovmap_ = new ControlledMap({
            view: options.view
        });
        var ovmap = _this.ovmap_;
        if (options.layers) options.layers.forEach(function(layer) {
            ovmap.addLayer(layer);
        });
        var box = document.createElement("div");
        box.className = "ol-overviewmap-box";
        box.style.boxSizing = "border-box";
        /**
         * @type {import("../Overlay.js").default}
         * @private
         */ _this.boxOverlay_ = new (0, _overlayJsDefault.default)({
            position: [
                0,
                0
            ],
            positioning: (0, _overlayPositioningJsDefault.default).CENTER_CENTER,
            element: box
        });
        _this.ovmap_.addOverlay(_this.boxOverlay_);
        var cssClasses = className + " " + (0, _cssJs.CLASS_UNSELECTABLE) + " " + (0, _cssJs.CLASS_CONTROL) + (_this.collapsed_ && _this.collapsible_ ? " " + (0, _cssJs.CLASS_COLLAPSED) : "") + (_this.collapsible_ ? "" : " ol-uncollapsible");
        var element = _this.element;
        element.className = cssClasses;
        element.appendChild(_this.ovmapDiv_);
        element.appendChild(button);
        /* Interactive map */ var scope = _this;
        var overlay = _this.boxOverlay_;
        var overlayBox = _this.boxOverlay_.getElement();
        /* Functions definition */ var computeDesiredMousePosition = function(mousePosition) {
            return {
                clientX: mousePosition.clientX,
                clientY: mousePosition.clientY
            };
        };
        var move = function(event) {
            var position = /** @type {?} */ computeDesiredMousePosition(event);
            var coordinates = ovmap.getEventCoordinateInternal(position);
            overlay.setPosition(coordinates);
        };
        var endMoving = function(event) {
            var coordinates = ovmap.getEventCoordinateInternal(event);
            scope.getMap().getView().setCenterInternal(coordinates);
            window.removeEventListener("mousemove", move);
            window.removeEventListener("mouseup", endMoving);
        };
        /* Binding */ overlayBox.addEventListener("mousedown", function() {
            window.addEventListener("mousemove", move);
            window.addEventListener("mouseup", endMoving);
        });
        return _this;
    }
    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default|null} map Map.
     * @api
     */ OverviewMap1.prototype.setMap = function(map) {
        var oldMap = this.getMap();
        if (map === oldMap) return;
        if (oldMap) {
            var oldView = oldMap.getView();
            if (oldView) this.unbindView_(oldView);
            this.ovmap_.setTarget(null);
        }
        _super.prototype.setMap.call(this, map);
        if (map) {
            this.ovmap_.setTarget(this.ovmapDiv_);
            this.listenerKeys.push((0, _eventsJs.listen)(map, (0, _objectEventTypeJsDefault.default).PROPERTYCHANGE, this.handleMapPropertyChange_, this));
            var view = map.getView();
            if (view) {
                this.bindView_(view);
                if (view.isDef()) {
                    this.ovmap_.updateSize();
                    this.resetExtent_();
                }
            }
            if (!this.ovmap_.isRendered()) this.updateBoxAfterOvmapIsRendered_();
        }
    };
    /**
     * Handle map property changes.  This only deals with changes to the map's view.
     * @param {import("../Object.js").ObjectEvent} event The propertychange event.
     * @private
     */ OverviewMap1.prototype.handleMapPropertyChange_ = function(event) {
        if (event.key === (0, _mapPropertyJsDefault.default).VIEW) {
            var oldView = event.oldValue;
            if (oldView) this.unbindView_(oldView);
            var newView = this.getMap().getView();
            this.bindView_(newView);
        } else if (!this.ovmap_.isRendered() && (event.key === (0, _mapPropertyJsDefault.default).TARGET || event.key === (0, _mapPropertyJsDefault.default).SIZE)) this.ovmap_.updateSize();
    };
    /**
     * Register listeners for view property changes.
     * @param {import("../View.js").default} view The view.
     * @private
     */ OverviewMap1.prototype.bindView_ = function(view) {
        if (!this.view_) {
            // Unless an explicit view definition was given, derive default from whatever main map uses.
            var newView = new (0, _viewJsDefault.default)({
                projection: view.getProjection()
            });
            this.ovmap_.setView(newView);
        }
        view.addChangeListener((0, _viewPropertyJsDefault.default).ROTATION, this.boundHandleRotationChanged_);
        // Sync once with the new view
        this.handleRotationChanged_();
    };
    /**
     * Unregister listeners for view property changes.
     * @param {import("../View.js").default} view The view.
     * @private
     */ OverviewMap1.prototype.unbindView_ = function(view) {
        view.removeChangeListener((0, _viewPropertyJsDefault.default).ROTATION, this.boundHandleRotationChanged_);
    };
    /**
     * Handle rotation changes to the main map.
     * @private
     */ OverviewMap1.prototype.handleRotationChanged_ = function() {
        if (this.rotateWithView_) this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());
    };
    /**
     * Reset the overview map extent if the box size (width or
     * height) is less than the size of the overview map size times minRatio
     * or is greater than the size of the overview size times maxRatio.
     *
     * If the map extent was not reset, the box size can fits in the defined
     * ratio sizes. This method then checks if is contained inside the overview
     * map current extent. If not, recenter the overview map to the current
     * main map center location.
     * @private
     */ OverviewMap1.prototype.validateExtent_ = function() {
        var map = this.getMap();
        var ovmap = this.ovmap_;
        if (!map.isRendered() || !ovmap.isRendered()) return;
        var mapSize = /** @type {import("../size.js").Size} */ map.getSize();
        var view = map.getView();
        var extent = view.calculateExtentInternal(mapSize);
        if (this.viewExtent_ && (0, _extentJs.equals)(extent, this.viewExtent_)) // repeats of the same extent may indicate constraint conflicts leading to an endless cycle
        return;
        this.viewExtent_ = extent;
        var ovmapSize = /** @type {import("../size.js").Size} */ ovmap.getSize();
        var ovview = ovmap.getView();
        var ovextent = ovview.calculateExtentInternal(ovmapSize);
        var topLeftPixel = ovmap.getPixelFromCoordinateInternal((0, _extentJs.getTopLeft)(extent));
        var bottomRightPixel = ovmap.getPixelFromCoordinateInternal((0, _extentJs.getBottomRight)(extent));
        var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);
        var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);
        var ovmapWidth = ovmapSize[0];
        var ovmapHeight = ovmapSize[1];
        if (boxWidth < ovmapWidth * MIN_RATIO || boxHeight < ovmapHeight * MIN_RATIO || boxWidth > ovmapWidth * MAX_RATIO || boxHeight > ovmapHeight * MAX_RATIO) this.resetExtent_();
        else if (!(0, _extentJs.containsExtent)(ovextent, extent)) this.recenter_();
    };
    /**
     * Reset the overview map extent to half calculated min and max ratio times
     * the extent of the main map.
     * @private
     */ OverviewMap1.prototype.resetExtent_ = function() {
        if (MAX_RATIO === 0 || MIN_RATIO === 0) return;
        var map = this.getMap();
        var ovmap = this.ovmap_;
        var mapSize = /** @type {import("../size.js").Size} */ map.getSize();
        var view = map.getView();
        var extent = view.calculateExtentInternal(mapSize);
        var ovview = ovmap.getView();
        // get how many times the current map overview could hold different
        // box sizes using the min and max ratio, pick the step in the middle used
        // to calculate the extent from the main map to set it to the overview map,
        var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;
        var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);
        (0, _extentJs.scaleFromCenter)(extent, ratio);
        ovview.fitInternal((0, _polygonJs.fromExtent)(extent));
    };
    /**
     * Set the center of the overview map to the map center without changing its
     * resolution.
     * @private
     */ OverviewMap1.prototype.recenter_ = function() {
        var map = this.getMap();
        var ovmap = this.ovmap_;
        var view = map.getView();
        var ovview = ovmap.getView();
        ovview.setCenterInternal(view.getCenterInternal());
    };
    /**
     * Update the box using the main map extent
     * @private
     */ OverviewMap1.prototype.updateBox_ = function() {
        var map = this.getMap();
        var ovmap = this.ovmap_;
        if (!map.isRendered() || !ovmap.isRendered()) return;
        var mapSize = /** @type {import("../size.js").Size} */ map.getSize();
        var view = map.getView();
        var ovview = ovmap.getView();
        var rotation = this.rotateWithView_ ? 0 : -view.getRotation();
        var overlay = this.boxOverlay_;
        var box = this.boxOverlay_.getElement();
        var center = view.getCenterInternal();
        var resolution = view.getResolution();
        var ovresolution = ovview.getResolution();
        var width = mapSize[0] * resolution / ovresolution;
        var height = mapSize[1] * resolution / ovresolution;
        // set position using center coordinates
        overlay.setPosition(center);
        // set box size calculated from map extent size and overview map resolution
        if (box) {
            box.style.width = width + "px";
            box.style.height = height + "px";
            var transform = "rotate(" + rotation + "rad)";
            box.style.transform = transform;
        }
    };
    /**
     * @private
     */ OverviewMap1.prototype.updateBoxAfterOvmapIsRendered_ = function() {
        if (this.ovmapPostrenderKey_) return;
        this.ovmapPostrenderKey_ = (0, _eventsJs.listenOnce)(this.ovmap_, (0, _mapEventTypeJsDefault.default).POSTRENDER, function(event) {
            delete this.ovmapPostrenderKey_;
            this.updateBox_();
        }, this);
    };
    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */ OverviewMap1.prototype.handleClick_ = function(event) {
        event.preventDefault();
        this.handleToggle_();
    };
    /**
     * @private
     */ OverviewMap1.prototype.handleToggle_ = function() {
        this.element.classList.toggle((0, _cssJs.CLASS_COLLAPSED));
        if (this.collapsed_) (0, _domJs.replaceNode)(this.collapseLabel_, this.label_);
        else (0, _domJs.replaceNode)(this.label_, this.collapseLabel_);
        this.collapsed_ = !this.collapsed_;
        // manage overview map if it had not been rendered before and control
        // is expanded
        var ovmap = this.ovmap_;
        if (!this.collapsed_) {
            if (ovmap.isRendered()) {
                this.viewExtent_ = undefined;
                ovmap.render();
                return;
            }
            ovmap.updateSize();
            this.resetExtent_();
            this.updateBoxAfterOvmapIsRendered_();
        }
    };
    /**
     * Return `true` if the overview map is collapsible, `false` otherwise.
     * @return {boolean} True if the widget is collapsible.
     * @api
     */ OverviewMap1.prototype.getCollapsible = function() {
        return this.collapsible_;
    };
    /**
     * Set whether the overview map should be collapsible.
     * @param {boolean} collapsible True if the widget is collapsible.
     * @api
     */ OverviewMap1.prototype.setCollapsible = function(collapsible) {
        if (this.collapsible_ === collapsible) return;
        this.collapsible_ = collapsible;
        this.element.classList.toggle("ol-uncollapsible");
        if (!collapsible && this.collapsed_) this.handleToggle_();
    };
    /**
     * Collapse or expand the overview map according to the passed parameter. Will
     * not do anything if the overview map isn't collapsible or if the current
     * collapsed state is already the one requested.
     * @param {boolean} collapsed True if the widget is collapsed.
     * @api
     */ OverviewMap1.prototype.setCollapsed = function(collapsed) {
        if (!this.collapsible_ || this.collapsed_ === collapsed) return;
        this.handleToggle_();
    };
    /**
     * Determine if the overview map is collapsed.
     * @return {boolean} The overview map is collapsed.
     * @api
     */ OverviewMap1.prototype.getCollapsed = function() {
        return this.collapsed_;
    };
    /**
     * Return `true` if the overview map view can rotate, `false` otherwise.
     * @return {boolean} True if the control view can rotate.
     * @api
     */ OverviewMap1.prototype.getRotateWithView = function() {
        return this.rotateWithView_;
    };
    /**
     * Set whether the overview map view should rotate with the main map view.
     * @param {boolean} rotateWithView True if the control view should rotate.
     * @api
     */ OverviewMap1.prototype.setRotateWithView = function(rotateWithView) {
        if (this.rotateWithView_ === rotateWithView) return;
        this.rotateWithView_ = rotateWithView;
        if (this.getMap().getView().getRotation() !== 0) {
            if (this.rotateWithView_) this.handleRotationChanged_();
            else this.ovmap_.getView().setRotation(0);
            this.viewExtent_ = undefined;
            this.validateExtent_();
            this.updateBox_();
        }
    };
    /**
     * Return the overview map.
     * @return {import("../PluggableMap.js").default} Overview map.
     * @api
     */ OverviewMap1.prototype.getOverviewMap = function() {
        return this.ovmap_;
    };
    /**
     * Update the overview map element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */ OverviewMap1.prototype.render = function(mapEvent) {
        this.validateExtent_();
        this.updateBox_();
    };
    return OverviewMap1;
}((0, _controlJsDefault.default));
exports.default = OverviewMap;

},{"../renderer/Composite.js":"fRfJ1","./Control.js":"a2mnq","../events/EventType.js":"hrQJ6","../MapEventType.js":"1cFF9","../MapProperty.js":"jMfsr","../ObjectEventType.js":"f2U6i","../Overlay.js":"j72Wp","../OverlayPositioning.js":"iHqu7","../PluggableMap.js":"75npf","../View.js":"8xbkS","../ViewProperty.js":"lWCek","../css.js":"lDlNi","../extent.js":"6YrVc","../events.js":"dcspA","../geom/Polygon.js":"cJuQF","../dom.js":"84QzQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fRfJ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/renderer/Composite
 */ var _mapJs = require("./Map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
var _objectEventTypeJs = require("../ObjectEventType.js");
var _objectEventTypeJsDefault = parcelHelpers.interopDefault(_objectEventTypeJs);
var _eventJs = require("../render/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _eventTypeJs = require("../render/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _stateJs = require("../source/State.js");
var _stateJsDefault = parcelHelpers.interopDefault(_stateJs);
var _cssJs = require("../css.js");
var _canvasJs = require("../render/canvas.js");
var _layerJs = require("../layer/Layer.js");
var _eventsJs = require("../events.js");
var _domJs = require("../dom.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Canvas map renderer.
 * @api
 */ var CompositeMapRenderer = /** @class */ function(_super) {
    __extends(CompositeMapRenderer1, _super);
    /**
     * @param {import("../PluggableMap.js").default} map Map.
     */ function CompositeMapRenderer1(map) {
        var _this = _super.call(this, map) || this;
        /**
         * @type {import("../events.js").EventsKey}
         */ _this.fontChangeListenerKey_ = (0, _eventsJs.listen)((0, _canvasJs.checkedFonts), (0, _objectEventTypeJsDefault.default).PROPERTYCHANGE, map.redrawText.bind(map));
        /**
         * @private
         * @type {HTMLDivElement}
         */ _this.element_ = document.createElement("div");
        var style = _this.element_.style;
        style.position = "absolute";
        style.width = "100%";
        style.height = "100%";
        style.zIndex = "0";
        _this.element_.className = (0, _cssJs.CLASS_UNSELECTABLE) + " ol-layers";
        var container = map.getViewport();
        container.insertBefore(_this.element_, container.firstChild || null);
        /**
         * @private
         * @type {Array<HTMLElement>}
         */ _this.children_ = [];
        /**
         * @private
         * @type {boolean}
         */ _this.renderedVisible_ = true;
        return _this;
    }
    /**
     * @param {import("../render/EventType.js").default} type Event type.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     */ CompositeMapRenderer1.prototype.dispatchRenderEvent = function(type, frameState) {
        var map = this.getMap();
        if (map.hasListener(type)) {
            var event_1 = new (0, _eventJsDefault.default)(type, undefined, frameState);
            map.dispatchEvent(event_1);
        }
    };
    CompositeMapRenderer1.prototype.disposeInternal = function() {
        (0, _eventsJs.unlistenByKey)(this.fontChangeListenerKey_);
        this.element_.parentNode.removeChild(this.element_);
        _super.prototype.disposeInternal.call(this);
    };
    /**
     * Render.
     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
     */ CompositeMapRenderer1.prototype.renderFrame = function(frameState) {
        if (!frameState) {
            if (this.renderedVisible_) {
                this.element_.style.display = "none";
                this.renderedVisible_ = false;
            }
            return;
        }
        this.calculateMatrices2D(frameState);
        this.dispatchRenderEvent((0, _eventTypeJsDefault.default).PRECOMPOSE, frameState);
        var layerStatesArray = frameState.layerStatesArray.sort(function(a, b) {
            return a.zIndex - b.zIndex;
        });
        var viewState = frameState.viewState;
        this.children_.length = 0;
        /**
         * @type {Array<import("../layer/BaseVector.js").default>}
         */ var declutterLayers = [];
        var previousElement = null;
        for(var i = 0, ii = layerStatesArray.length; i < ii; ++i){
            var layerState = layerStatesArray[i];
            frameState.layerIndex = i;
            var layer = layerState.layer;
            var sourceState = layer.getSourceState();
            if (!(0, _layerJs.inView)(layerState, viewState) || sourceState != (0, _stateJsDefault.default).READY && sourceState != (0, _stateJsDefault.default).UNDEFINED) {
                layer.unrender();
                continue;
            }
            var element = layer.render(frameState, previousElement);
            if (!element) continue;
            if (element !== previousElement) {
                this.children_.push(element);
                previousElement = element;
            }
            if ("getDeclutter" in layer) declutterLayers.push(layer);
        }
        for(var i = declutterLayers.length - 1; i >= 0; --i)declutterLayers[i].renderDeclutter(frameState);
        (0, _domJs.replaceChildren)(this.element_, this.children_);
        this.dispatchRenderEvent((0, _eventTypeJsDefault.default).POSTCOMPOSE, frameState);
        if (!this.renderedVisible_) {
            this.element_.style.display = "";
            this.renderedVisible_ = true;
        }
        this.scheduleExpireIconCache(frameState);
    };
    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(import("../layer/Layer.js").default<import("../source/Source").default>, (Uint8ClampedArray|Uint8Array)): T} callback Layer
     *     callback.
     * @param {function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @return {T|undefined} Callback result.
     * @template T
     */ CompositeMapRenderer1.prototype.forEachLayerAtPixel = function(pixel, frameState, hitTolerance, callback, layerFilter) {
        var viewState = frameState.viewState;
        var layerStates = frameState.layerStatesArray;
        var numLayers = layerStates.length;
        for(var i = numLayers - 1; i >= 0; --i){
            var layerState = layerStates[i];
            var layer = layerState.layer;
            if (layer.hasRenderer() && (0, _layerJs.inView)(layerState, viewState) && layerFilter(layer)) {
                var layerRenderer = layer.getRenderer();
                var data = layerRenderer.getDataAtPixel(pixel, frameState, hitTolerance);
                if (data) {
                    var result = callback(layer, data);
                    if (result) return result;
                }
            }
        }
        return undefined;
    };
    return CompositeMapRenderer1;
}((0, _mapJsDefault.default));
exports.default = CompositeMapRenderer;

},{"./Map.js":"5iRLs","../ObjectEventType.js":"f2U6i","../render/Event.js":"bpzid","../render/EventType.js":"5G9JA","../source/State.js":"gW573","../css.js":"lDlNi","../render/canvas.js":"e85iQ","../layer/Layer.js":"8J9Kf","../events.js":"dcspA","../dom.js":"84QzQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5iRLs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/renderer/Map
 */ var _disposableJs = require("../Disposable.js");
var _disposableJsDefault = parcelHelpers.interopDefault(_disposableJs);
var _functionsJs = require("../functions.js");
var _utilJs = require("../util.js");
var _transformJs = require("../transform.js");
var _extentJs = require("../extent.js");
var _iconImageCacheJs = require("../style/IconImageCache.js");
var _layerJs = require("../layer/Layer.js");
var _coordinateJs = require("../coordinate.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef HitMatch
 * @property {import("../Feature.js").FeatureLike} feature Feature.
 * @property {import("../layer/Layer.js").default} layer Layer.
 * @property {import("../geom/SimpleGeometry.js").default} geometry Geometry.
 * @property {number} distanceSq Squared distance.
 * @property {import("./vector.js").FeatureCallback<T>} callback Callback.
 * @template T
 */ /**
 * @abstract
 */ var MapRenderer = /** @class */ function(_super) {
    __extends(MapRenderer1, _super);
    /**
     * @param {import("../PluggableMap.js").default} map Map.
     */ function MapRenderer1(map) {
        var _this = _super.call(this) || this;
        /**
         * @private
         * @type {import("../PluggableMap.js").default}
         */ _this.map_ = map;
        return _this;
    }
    /**
     * @abstract
     * @param {import("../render/EventType.js").default} type Event type.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     */ MapRenderer1.prototype.dispatchRenderEvent = function(type, frameState) {
        (0, _utilJs.abstract)();
    };
    /**
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @protected
     */ MapRenderer1.prototype.calculateMatrices2D = function(frameState) {
        var viewState = frameState.viewState;
        var coordinateToPixelTransform = frameState.coordinateToPixelTransform;
        var pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;
        (0, _transformJs.compose)(coordinateToPixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / viewState.resolution, -1 / viewState.resolution, -viewState.rotation, -viewState.center[0], -viewState.center[1]);
        (0, _transformJs.makeInverse)(pixelToCoordinateTransform, coordinateToPixelTransform);
    };
    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {boolean} checkWrapped Check for wrapped geometries.
     * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
     * @param {S} thisArg Value to use as `this` when executing `callback`.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
     * @return {T|undefined} Callback result.
     * @template S,T,U
     */ MapRenderer1.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, checkWrapped, callback, thisArg, layerFilter, thisArg2) {
        var result;
        var viewState = frameState.viewState;
        /**
         * @param {boolean} managed Managed layer.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         * @param {import("../layer/Layer.js").default} layer Layer.
         * @param {import("../geom/Geometry.js").default} geometry Geometry.
         * @return {T|undefined} Callback result.
         */ function forEachFeatureAtCoordinate(managed, feature, layer, geometry) {
            return callback.call(thisArg, feature, managed ? layer : null, geometry);
        }
        var projection = viewState.projection;
        var translatedCoordinate = (0, _coordinateJs.wrapX)(coordinate.slice(), projection);
        var offsets = [
            [
                0,
                0
            ]
        ];
        if (projection.canWrapX() && checkWrapped) {
            var projectionExtent = projection.getExtent();
            var worldWidth = (0, _extentJs.getWidth)(projectionExtent);
            offsets.push([
                -worldWidth,
                0
            ], [
                worldWidth,
                0
            ]);
        }
        var layerStates = frameState.layerStatesArray;
        var numLayers = layerStates.length;
        var matches = [];
        var tmpCoord = [];
        for(var i1 = 0; i1 < offsets.length; i1++)for(var j = numLayers - 1; j >= 0; --j){
            var layerState = layerStates[j];
            var layer1 = layerState.layer;
            if (layer1.hasRenderer() && (0, _layerJs.inView)(layerState, viewState) && layerFilter.call(thisArg2, layer1)) {
                var layerRenderer = layer1.getRenderer();
                var source = layer1.getSource();
                if (layerRenderer && source) {
                    var coordinates = source.getWrapX() ? translatedCoordinate : coordinate;
                    var callback_1 = forEachFeatureAtCoordinate.bind(null, layerState.managed);
                    tmpCoord[0] = coordinates[0] + offsets[i1][0];
                    tmpCoord[1] = coordinates[1] + offsets[i1][1];
                    result = layerRenderer.forEachFeatureAtCoordinate(tmpCoord, frameState, hitTolerance, callback_1, matches);
                }
                if (result) return result;
            }
        }
        if (matches.length === 0) return undefined;
        var order = 1 / matches.length;
        matches.forEach(function(m, i) {
            return m.distanceSq += i * order;
        });
        matches.sort(function(a, b) {
            return a.distanceSq - b.distanceSq;
        });
        matches.some(function(m) {
            return result = m.callback(m.feature, m.layer, m.geometry);
        });
        return result;
    };
    /**
     * @abstract
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(import("../layer/Layer.js").default<import("../source/Source").default>, (Uint8ClampedArray|Uint8Array)): T} callback Layer
     *     callback.
     * @param {function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @return {T|undefined} Callback result.
     * @template T
     */ MapRenderer1.prototype.forEachLayerAtPixel = function(pixel, frameState, hitTolerance, callback, layerFilter) {
        return (0, _utilJs.abstract)();
    };
    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {boolean} checkWrapped Check for wrapped geometries.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
     * @return {boolean} Is there a feature at the given coordinate?
     * @template U
     */ MapRenderer1.prototype.hasFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, checkWrapped, layerFilter, thisArg) {
        var hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, (0, _functionsJs.TRUE), this, layerFilter, thisArg);
        return hasFeature !== undefined;
    };
    /**
     * @return {import("../PluggableMap.js").default} Map.
     */ MapRenderer1.prototype.getMap = function() {
        return this.map_;
    };
    /**
     * Render.
     * @abstract
     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
     */ MapRenderer1.prototype.renderFrame = function(frameState) {
        (0, _utilJs.abstract)();
    };
    /**
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */ MapRenderer1.prototype.scheduleExpireIconCache = function(frameState) {
        if ((0, _iconImageCacheJs.shared).canExpireCache()) frameState.postRenderFunctions.push(expireIconCache);
    };
    return MapRenderer1;
}((0, _disposableJsDefault.default));
/**
 * @param {import("../PluggableMap.js").default} map Map.
 * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
 */ function expireIconCache(map, frameState) {
    (0, _iconImageCacheJs.shared).expire();
}
exports.default = MapRenderer;

},{"../Disposable.js":"c0oTM","../functions.js":"iqv8I","../util.js":"pLBjQ","../transform.js":"1BqUf","../extent.js":"6YrVc","../style/IconImageCache.js":"2uEpE","../layer/Layer.js":"8J9Kf","../coordinate.js":"85Vu7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1BqUf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create an identity transform.
 * @return {!Transform} Identity transform.
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * Resets the given transform to an identity transform.
 * @param {!Transform} transform Transform.
 * @return {!Transform} Transform.
 */ parcelHelpers.export(exports, "reset", ()=>reset);
/**
 * Multiply the underlying matrices of two transforms and return the result in
 * the first transform.
 * @param {!Transform} transform1 Transform parameters of matrix 1.
 * @param {!Transform} transform2 Transform parameters of matrix 2.
 * @return {!Transform} transform1 multiplied with transform2.
 */ parcelHelpers.export(exports, "multiply", ()=>multiply);
/**
 * Set the transform components a-f on a given transform.
 * @param {!Transform} transform Transform.
 * @param {number} a The a component of the transform.
 * @param {number} b The b component of the transform.
 * @param {number} c The c component of the transform.
 * @param {number} d The d component of the transform.
 * @param {number} e The e component of the transform.
 * @param {number} f The f component of the transform.
 * @return {!Transform} Matrix with transform applied.
 */ parcelHelpers.export(exports, "set", ()=>set);
/**
 * Set transform on one matrix from another matrix.
 * @param {!Transform} transform1 Matrix to set transform to.
 * @param {!Transform} transform2 Matrix to set transform from.
 * @return {!Transform} transform1 with transform from transform2 applied.
 */ parcelHelpers.export(exports, "setFromArray", ()=>setFromArray);
/**
 * Transforms the given coordinate with the given transform returning the
 * resulting, transformed coordinate. The coordinate will be modified in-place.
 *
 * @param {Transform} transform The transformation.
 * @param {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} coordinate The coordinate to transform.
 * @return {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} return coordinate so that operations can be
 *     chained together.
 */ parcelHelpers.export(exports, "apply", ()=>apply);
/**
 * Applies rotation to the given transform.
 * @param {!Transform} transform Transform.
 * @param {number} angle Angle in radians.
 * @return {!Transform} The rotated transform.
 */ parcelHelpers.export(exports, "rotate", ()=>rotate);
/**
 * Applies scale to a given transform.
 * @param {!Transform} transform Transform.
 * @param {number} x Scale factor x.
 * @param {number} y Scale factor y.
 * @return {!Transform} The scaled transform.
 */ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * Creates a scale transform.
 * @param {!Transform} target Transform to overwrite.
 * @param {number} x Scale factor x.
 * @param {number} y Scale factor y.
 * @return {!Transform} The scale transform.
 */ parcelHelpers.export(exports, "makeScale", ()=>makeScale);
/**
 * Applies translation to the given transform.
 * @param {!Transform} transform Transform.
 * @param {number} dx Translation x.
 * @param {number} dy Translation y.
 * @return {!Transform} The translated transform.
 */ parcelHelpers.export(exports, "translate", ()=>translate);
/**
 * Creates a composite transform given an initial translation, scale, rotation, and
 * final translation (in that order only, not commutative).
 * @param {!Transform} transform The transform (will be modified in place).
 * @param {number} dx1 Initial translation x.
 * @param {number} dy1 Initial translation y.
 * @param {number} sx Scale factor x.
 * @param {number} sy Scale factor y.
 * @param {number} angle Rotation (in counter-clockwise radians).
 * @param {number} dx2 Final translation x.
 * @param {number} dy2 Final translation y.
 * @return {!Transform} The composite transform.
 */ parcelHelpers.export(exports, "compose", ()=>compose);
/**
 * Creates a composite transform given an initial translation, scale, rotation, and
 * final translation (in that order only, not commutative). The resulting transform
 * string can be applied as `transform` property of an HTMLElement's style.
 * @param {number} dx1 Initial translation x.
 * @param {number} dy1 Initial translation y.
 * @param {number} sx Scale factor x.
 * @param {number} sy Scale factor y.
 * @param {number} angle Rotation (in counter-clockwise radians).
 * @param {number} dx2 Final translation x.
 * @param {number} dy2 Final translation y.
 * @return {string} The composite css transform.
 * @api
 */ parcelHelpers.export(exports, "composeCssTransform", ()=>composeCssTransform);
/**
 * Invert the given transform.
 * @param {!Transform} source The source transform to invert.
 * @return {!Transform} The inverted (source) transform.
 */ parcelHelpers.export(exports, "invert", ()=>invert);
/**
 * Invert the given transform.
 * @param {!Transform} target Transform to be set as the inverse of
 *     the source transform.
 * @param {!Transform} source The source transform to invert.
 * @return {!Transform} The inverted (target) transform.
 */ parcelHelpers.export(exports, "makeInverse", ()=>makeInverse);
/**
 * Returns the determinant of the given matrix.
 * @param {!Transform} mat Matrix.
 * @return {number} Determinant.
 */ parcelHelpers.export(exports, "determinant", ()=>determinant);
/**
 * A rounded string version of the transform.  This can be used
 * for CSS transforms.
 * @param {!Transform} mat Matrix.
 * @return {string} The transform as a string.
 */ parcelHelpers.export(exports, "toString", ()=>toString);
/**
 * @module ol/transform
 */ var _hasJs = require("./has.js");
var _assertsJs = require("./asserts.js");
/**
 * An array representing an affine 2d transformation for use with
 * {@link module:ol/transform} functions. The array has 6 elements.
 * @typedef {!Array<number>} Transform
 * @api
 */ /**
 * Collection of affine 2d transformation functions. The functions work on an
 * array of 6 elements. The element order is compatible with the [SVGMatrix
 * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is
 * a subset (elements a to f) of a 3×3 matrix:
 * ```
 * [ a c e ]
 * [ b d f ]
 * [ 0 0 1 ]
 * ```
 */ /**
 * @private
 * @type {Transform}
 */ var tmp_ = new Array(6);
function create() {
    return [
        1,
        0,
        0,
        1,
        0,
        0
    ];
}
function reset(transform) {
    return set(transform, 1, 0, 0, 1, 0, 0);
}
function multiply(transform1, transform2) {
    var a1 = transform1[0];
    var b1 = transform1[1];
    var c1 = transform1[2];
    var d1 = transform1[3];
    var e1 = transform1[4];
    var f1 = transform1[5];
    var a2 = transform2[0];
    var b2 = transform2[1];
    var c2 = transform2[2];
    var d2 = transform2[3];
    var e2 = transform2[4];
    var f2 = transform2[5];
    transform1[0] = a1 * a2 + c1 * b2;
    transform1[1] = b1 * a2 + d1 * b2;
    transform1[2] = a1 * c2 + c1 * d2;
    transform1[3] = b1 * c2 + d1 * d2;
    transform1[4] = a1 * e2 + c1 * f2 + e1;
    transform1[5] = b1 * e2 + d1 * f2 + f1;
    return transform1;
}
function set(transform, a, b, c, d, e, f) {
    transform[0] = a;
    transform[1] = b;
    transform[2] = c;
    transform[3] = d;
    transform[4] = e;
    transform[5] = f;
    return transform;
}
function setFromArray(transform1, transform2) {
    transform1[0] = transform2[0];
    transform1[1] = transform2[1];
    transform1[2] = transform2[2];
    transform1[3] = transform2[3];
    transform1[4] = transform2[4];
    transform1[5] = transform2[5];
    return transform1;
}
function apply(transform, coordinate) {
    var x = coordinate[0];
    var y = coordinate[1];
    coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
    coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
    return coordinate;
}
function rotate(transform, angle) {
    var cos = Math.cos(angle);
    var sin = Math.sin(angle);
    return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));
}
function scale(transform, x, y) {
    return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));
}
function makeScale(target, x, y) {
    return set(target, x, 0, 0, y, 0, 0);
}
function translate(transform, dx, dy) {
    return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));
}
function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
    var sin = Math.sin(angle);
    var cos = Math.cos(angle);
    transform[0] = sx * cos;
    transform[1] = sy * sin;
    transform[2] = -sx * sin;
    transform[3] = sy * cos;
    transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;
    transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;
    return transform;
}
function composeCssTransform(dx1, dy1, sx, sy, angle, dx2, dy2) {
    return toString(compose(create(), dx1, dy1, sx, sy, angle, dx2, dy2));
}
function invert(source) {
    return makeInverse(source, source);
}
function makeInverse(target, source) {
    var det = determinant(source);
    (0, _assertsJs.assert)(det !== 0, 32); // Transformation matrix cannot be inverted
    var a = source[0];
    var b = source[1];
    var c = source[2];
    var d = source[3];
    var e = source[4];
    var f = source[5];
    target[0] = d / det;
    target[1] = -b / det;
    target[2] = -c / det;
    target[3] = a / det;
    target[4] = (c * f - d * e) / det;
    target[5] = -(a * f - b * e) / det;
    return target;
}
function determinant(mat) {
    return mat[0] * mat[3] - mat[1] * mat[2];
}
/**
 * @type {HTMLElement}
 * @private
 */ var transformStringDiv;
function toString(mat) {
    var transformString = "matrix(" + mat.join(", ") + ")";
    if (0, _hasJs.WORKER_OFFSCREEN_CANVAS) return transformString;
    var node = transformStringDiv || (transformStringDiv = document.createElement("div"));
    node.style.transform = transformString;
    return node.style.transform;
}

},{"./has.js":"6BDNi","./asserts.js":"e4TiF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2uEpE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shared", ()=>shared);
/**
 * @module ol/style/IconImageCache
 */ var _colorJs = require("../color.js");
/**
 * @classdesc
 * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.
 */ var IconImageCache = /** @class */ function() {
    function IconImageCache1() {
        /**
         * @type {!Object<string, import("./IconImage.js").default>}
         * @private
         */ this.cache_ = {};
        /**
         * @type {number}
         * @private
         */ this.cacheSize_ = 0;
        /**
         * @type {number}
         * @private
         */ this.maxCacheSize_ = 32;
    }
    /**
     * FIXME empty description for jsdoc
     */ IconImageCache1.prototype.clear = function() {
        this.cache_ = {};
        this.cacheSize_ = 0;
    };
    /**
     * @return {boolean} Can expire cache.
     */ IconImageCache1.prototype.canExpireCache = function() {
        return this.cacheSize_ > this.maxCacheSize_;
    };
    /**
     * FIXME empty description for jsdoc
     */ IconImageCache1.prototype.expire = function() {
        if (this.canExpireCache()) {
            var i = 0;
            for(var key in this.cache_){
                var iconImage = this.cache_[key];
                if (((i++) & 3) === 0 && !iconImage.hasListener()) {
                    delete this.cache_[key];
                    --this.cacheSize_;
                }
            }
        }
    };
    /**
     * @param {string} src Src.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../color.js").Color} color Color.
     * @return {import("./IconImage.js").default} Icon image.
     */ IconImageCache1.prototype.get = function(src, crossOrigin, color) {
        var key = getKey(src, crossOrigin, color);
        return key in this.cache_ ? this.cache_[key] : null;
    };
    /**
     * @param {string} src Src.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../color.js").Color} color Color.
     * @param {import("./IconImage.js").default} iconImage Icon image.
     */ IconImageCache1.prototype.set = function(src, crossOrigin, color, iconImage) {
        var key = getKey(src, crossOrigin, color);
        this.cache_[key] = iconImage;
        ++this.cacheSize_;
    };
    /**
     * Set the cache size of the icon cache. Default is `32`. Change this value when
     * your map uses more than 32 different icon images and you are not caching icon
     * styles on the application level.
     * @param {number} maxCacheSize Cache max size.
     * @api
     */ IconImageCache1.prototype.setSize = function(maxCacheSize) {
        this.maxCacheSize_ = maxCacheSize;
        this.expire();
    };
    return IconImageCache1;
}();
/**
 * @param {string} src Src.
 * @param {?string} crossOrigin Cross origin.
 * @param {import("../color.js").Color} color Color.
 * @return {string} Cache key.
 */ function getKey(src, crossOrigin, color) {
    var colorString = color ? (0, _colorJs.asString)(color) : "null";
    return crossOrigin + ":" + src + ":" + colorString;
}
exports.default = IconImageCache;
var shared = new IconImageCache();

},{"../color.js":"4tahz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4tahz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Return the color as an rgba string.
 * @param {Color|string} color Color.
 * @return {string} Rgba string.
 * @api
 */ parcelHelpers.export(exports, "asString", ()=>asString);
parcelHelpers.export(exports, "fromString", ()=>fromString);
/**
 * Return the color as an array. This function maintains a cache of calculated
 * arrays which means the result should not be modified.
 * @param {Color|string} color Color.
 * @return {Color} Color.
 * @api
 */ parcelHelpers.export(exports, "asArray", ()=>asArray);
/**
 * TODO this function is only used in the test, we probably shouldn't export it
 * @param {Color} color Color.
 * @return {Color} Clamped color.
 */ parcelHelpers.export(exports, "normalize", ()=>normalize);
/**
 * @param {Color} color Color.
 * @return {string} String.
 */ parcelHelpers.export(exports, "toString", ()=>toString);
/**
 * @param {string} s String.
 * @return {boolean} Whether the string is actually a valid color
 */ parcelHelpers.export(exports, "isStringColor", ()=>isStringColor);
/**
 * @module ol/color
 */ var _assertsJs = require("./asserts.js");
var _mathJs = require("./math.js");
/**
 * A color represented as a short array [red, green, blue, alpha].
 * red, green, and blue should be integers in the range 0..255 inclusive.
 * alpha should be a float in the range 0..1 inclusive. If no alpha value is
 * given then `1` will be used.
 * @typedef {Array<number>} Color
 * @api
 */ /**
 * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.
 * @const
 * @type {RegExp}
 * @private
 */ var HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;
/**
 * Regular expression for matching potential named color style strings.
 * @const
 * @type {RegExp}
 * @private
 */ var NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\(.*\)$/i;
function asString(color) {
    if (typeof color === "string") return color;
    else return toString(color);
}
/**
 * Return named color as an rgba string.
 * @param {string} color Named color.
 * @return {string} Rgb string.
 */ function fromNamed(color) {
    var el = document.createElement("div");
    el.style.color = color;
    if (el.style.color !== "") {
        document.body.appendChild(el);
        var rgb = getComputedStyle(el).color;
        document.body.removeChild(el);
        return rgb;
    } else return "";
}
var fromString = function() {
    // We maintain a small cache of parsed strings.  To provide cheap LRU-like
    // semantics, whenever the cache grows too large we simply delete an
    // arbitrary 25% of the entries.
    /**
     * @const
     * @type {number}
     */ var MAX_CACHE_SIZE = 1024;
    /**
     * @type {Object<string, Color>}
     */ var cache = {};
    /**
     * @type {number}
     */ var cacheSize = 0;
    return(/**
     * @param {string} s String.
     * @return {Color} Color.
     */ function(s) {
        var color;
        if (cache.hasOwnProperty(s)) color = cache[s];
        else {
            if (cacheSize >= MAX_CACHE_SIZE) {
                var i = 0;
                for(var key in cache)if (((i++) & 3) === 0) {
                    delete cache[key];
                    --cacheSize;
                }
            }
            color = fromStringInternal_(s);
            cache[s] = color;
            ++cacheSize;
        }
        return color;
    });
}();
function asArray(color) {
    if (Array.isArray(color)) return color;
    else return fromString(color);
}
/**
 * @param {string} s String.
 * @private
 * @return {Color} Color.
 */ function fromStringInternal_(s) {
    var r, g, b, a, color;
    if (NAMED_COLOR_RE_.exec(s)) s = fromNamed(s);
    if (HEX_COLOR_RE_.exec(s)) {
        // hex
        var n = s.length - 1; // number of hex digits
        var d = void 0; // number of digits per channel
        if (n <= 4) d = 1;
        else d = 2;
        var hasAlpha = n === 4 || n === 8;
        r = parseInt(s.substr(1 + 0 * d, d), 16);
        g = parseInt(s.substr(1 + 1 * d, d), 16);
        b = parseInt(s.substr(1 + 2 * d, d), 16);
        if (hasAlpha) a = parseInt(s.substr(1 + 3 * d, d), 16);
        else a = 255;
        if (d == 1) {
            r = (r << 4) + r;
            g = (g << 4) + g;
            b = (b << 4) + b;
            if (hasAlpha) a = (a << 4) + a;
        }
        color = [
            r,
            g,
            b,
            a / 255
        ];
    } else if (s.indexOf("rgba(") == 0) {
        // rgba()
        color = s.slice(5, -1).split(",").map(Number);
        normalize(color);
    } else if (s.indexOf("rgb(") == 0) {
        // rgb()
        color = s.slice(4, -1).split(",").map(Number);
        color.push(1);
        normalize(color);
    } else (0, _assertsJs.assert)(false, 14); // Invalid color
    return color;
}
function normalize(color) {
    color[0] = (0, _mathJs.clamp)(color[0] + 0.5 | 0, 0, 255);
    color[1] = (0, _mathJs.clamp)(color[1] + 0.5 | 0, 0, 255);
    color[2] = (0, _mathJs.clamp)(color[2] + 0.5 | 0, 0, 255);
    color[3] = (0, _mathJs.clamp)(color[3], 0, 1);
    return color;
}
function toString(color) {
    var r = color[0];
    if (r != (r | 0)) r = r + 0.5 | 0;
    var g = color[1];
    if (g != (g | 0)) g = g + 0.5 | 0;
    var b = color[2];
    if (b != (b | 0)) b = b + 0.5 | 0;
    var a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;
    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
}
function isStringColor(s) {
    if (NAMED_COLOR_RE_.test(s)) s = fromNamed(s);
    return HEX_COLOR_RE_.test(s) || s.indexOf("rgba(") === 0 || s.indexOf("rgb(") === 0;
}

},{"./asserts.js":"e4TiF","./math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bpzid":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventJs = require("../events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
/**
 * @module ol/render/Event
 */ var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var RenderEvent = /** @class */ function(_super) {
    __extends(RenderEvent1, _super);
    /**
     * @param {import("./EventType.js").default} type Type.
     * @param {import("../transform.js").Transform} [opt_inversePixelTransform] Transform for
     *     CSS pixels to rendered pixels.
     * @param {import("../PluggableMap.js").FrameState} [opt_frameState] Frame state.
     * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [opt_context] Context.
     */ function RenderEvent1(type, opt_inversePixelTransform, opt_frameState, opt_context) {
        var _this = _super.call(this, type) || this;
        /**
         * Transform from CSS pixels (relative to the top-left corner of the map viewport)
         * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.
         * @type {import("../transform.js").Transform|undefined}
         * @api
         */ _this.inversePixelTransform = opt_inversePixelTransform;
        /**
         * An object representing the current render frame state.
         * @type {import("../PluggableMap.js").FrameState|undefined}
         * @api
         */ _this.frameState = opt_frameState;
        /**
         * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,
         * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL
         * context.
         * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}
         * @api
         */ _this.context = opt_context;
        return _this;
    }
    return RenderEvent1;
}((0, _eventJsDefault.default));
exports.default = RenderEvent;

},{"../events/Event.js":"hwXQP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e85iQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultFont", ()=>defaultFont);
parcelHelpers.export(exports, "defaultFillStyle", ()=>defaultFillStyle);
parcelHelpers.export(exports, "defaultLineCap", ()=>defaultLineCap);
parcelHelpers.export(exports, "defaultLineDash", ()=>defaultLineDash);
parcelHelpers.export(exports, "defaultLineDashOffset", ()=>defaultLineDashOffset);
parcelHelpers.export(exports, "defaultLineJoin", ()=>defaultLineJoin);
parcelHelpers.export(exports, "defaultMiterLimit", ()=>defaultMiterLimit);
parcelHelpers.export(exports, "defaultStrokeStyle", ()=>defaultStrokeStyle);
parcelHelpers.export(exports, "defaultTextAlign", ()=>defaultTextAlign);
parcelHelpers.export(exports, "defaultTextBaseline", ()=>defaultTextBaseline);
parcelHelpers.export(exports, "defaultPadding", ()=>defaultPadding);
parcelHelpers.export(exports, "defaultLineWidth", ()=>defaultLineWidth);
parcelHelpers.export(exports, "checkedFonts", ()=>checkedFonts);
parcelHelpers.export(exports, "labelCache", ()=>labelCache);
parcelHelpers.export(exports, "textHeights", ()=>textHeights);
parcelHelpers.export(exports, "registerFont", ()=>registerFont);
parcelHelpers.export(exports, "measureTextHeight", ()=>measureTextHeight);
/**
 * @param {string} font Font.
 * @param {string} text Text.
 * @return {number} Width.
 */ parcelHelpers.export(exports, "measureTextWidth", ()=>measureTextWidth);
/**
 * Measure text width using a cache.
 * @param {string} font The font.
 * @param {string} text The text to measure.
 * @param {Object<string, number>} cache A lookup of cached widths by text.
 * @return {number} The text width.
 */ parcelHelpers.export(exports, "measureAndCacheTextWidth", ()=>measureAndCacheTextWidth);
/**
 * @param {TextState} baseStyle Base style.
 * @param {Array<string>} chunks Text chunks to measure.
 * @return {{width: number, height: number, widths: Array<number>, heights: Array<number>, lineWidths: Array<number>}}} Text metrics.
 */ parcelHelpers.export(exports, "getTextDimensions", ()=>getTextDimensions);
/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {number} rotation Rotation.
 * @param {number} offsetX X offset.
 * @param {number} offsetY Y offset.
 */ parcelHelpers.export(exports, "rotateAtOffset", ()=>rotateAtOffset);
/**
 * @param {CanvasRenderingContext2D} context Context.
 * @param {import("../transform.js").Transform|null} transform Transform.
 * @param {number} opacity Opacity.
 * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.
 * @param {number} originX Origin X.
 * @param {number} originY Origin Y.
 * @param {number} w Width.
 * @param {number} h Height.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {import("../size.js").Size} scale Scale.
 */ parcelHelpers.export(exports, "drawImageOrLabel", ()=>drawImageOrLabel);
/**
 * @module ol/render/canvas
 */ var _objectJs = require("../Object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _targetJs = require("../events/Target.js");
var _targetJsDefault = parcelHelpers.interopDefault(_targetJs);
var _hasJs = require("../has.js");
var _objJs = require("../obj.js");
var _domJs = require("../dom.js");
var _cssJs = require("../css.js");
var defaultFont = "10px sans-serif";
var defaultFillStyle = "#000";
var defaultLineCap = "round";
var defaultLineDash = [];
var defaultLineDashOffset = 0;
var defaultLineJoin = "round";
var defaultMiterLimit = 10;
var defaultStrokeStyle = "#000";
var defaultTextAlign = "center";
var defaultTextBaseline = "middle";
var defaultPadding = [
    0,
    0,
    0,
    0
];
var defaultLineWidth = 1;
var checkedFonts = new (0, _objectJsDefault.default)();
var labelCache = new (0, _targetJsDefault.default)();
labelCache.setSize = function() {
    console.warn("labelCache is deprecated."); //eslint-disable-line
};
/**
 * @type {CanvasRenderingContext2D}
 */ var measureContext = null;
/**
 * @type {string}
 */ var measureFont;
var textHeights = {};
var registerFont = function() {
    var retries = 100;
    var size = "32px ";
    var referenceFonts = [
        "monospace",
        "serif"
    ];
    var len = referenceFonts.length;
    var text = "wmytzilWMYTZIL@#/&?$%10\uF013";
    var interval, referenceWidth;
    /**
     * @param {string} fontStyle Css font-style
     * @param {string} fontWeight Css font-weight
     * @param {*} fontFamily Css font-family
     * @return {boolean} Font with style and weight is available
     */ function isAvailable(fontStyle, fontWeight, fontFamily) {
        var available = true;
        for(var i = 0; i < len; ++i){
            var referenceFont = referenceFonts[i];
            referenceWidth = measureTextWidth(fontStyle + " " + fontWeight + " " + size + referenceFont, text);
            if (fontFamily != referenceFont) {
                var width = measureTextWidth(fontStyle + " " + fontWeight + " " + size + fontFamily + "," + referenceFont, text);
                // If width and referenceWidth are the same, then the fallback was used
                // instead of the font we wanted, so the font is not available.
                available = available && width != referenceWidth;
            }
        }
        if (available) return true;
        return false;
    }
    function check() {
        var done = true;
        var fonts = checkedFonts.getKeys();
        for(var i = 0, ii = fonts.length; i < ii; ++i){
            var font = fonts[i];
            if (checkedFonts.get(font) < retries) {
                if (isAvailable.apply(this, font.split("\n"))) {
                    (0, _objJs.clear)(textHeights);
                    // Make sure that loaded fonts are picked up by Safari
                    measureContext = null;
                    measureFont = undefined;
                    checkedFonts.set(font, retries);
                } else {
                    checkedFonts.set(font, checkedFonts.get(font) + 1, true);
                    done = false;
                }
            }
        }
        if (done) {
            clearInterval(interval);
            interval = undefined;
        }
    }
    return function(fontSpec) {
        var font = (0, _cssJs.getFontParameters)(fontSpec);
        if (!font) return;
        var families = font.families;
        for(var i = 0, ii = families.length; i < ii; ++i){
            var family = families[i];
            var key = font.style + "\n" + font.weight + "\n" + family;
            if (checkedFonts.get(key) === undefined) {
                checkedFonts.set(key, retries, true);
                if (!isAvailable(font.style, font.weight, family)) {
                    checkedFonts.set(key, 0, true);
                    if (interval === undefined) interval = setInterval(check, 32);
                }
            }
        }
    };
}();
var measureTextHeight = function() {
    /**
     * @type {HTMLDivElement}
     */ var measureElement;
    return function(fontSpec) {
        var height = textHeights[fontSpec];
        if (height == undefined) {
            if (0, _hasJs.WORKER_OFFSCREEN_CANVAS) {
                var font = (0, _cssJs.getFontParameters)(fontSpec);
                var metrics = measureText(fontSpec, "\u017Dg");
                var lineHeight = isNaN(Number(font.lineHeight)) ? 1.2 : Number(font.lineHeight);
                height = lineHeight * (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);
            } else {
                if (!measureElement) {
                    measureElement = document.createElement("div");
                    measureElement.innerHTML = "M";
                    measureElement.style.minHeight = "0";
                    measureElement.style.maxHeight = "none";
                    measureElement.style.height = "auto";
                    measureElement.style.padding = "0";
                    measureElement.style.border = "none";
                    measureElement.style.position = "absolute";
                    measureElement.style.display = "block";
                    measureElement.style.left = "-99999px";
                }
                measureElement.style.font = fontSpec;
                document.body.appendChild(measureElement);
                height = measureElement.offsetHeight;
                document.body.removeChild(measureElement);
            }
            textHeights[fontSpec] = height;
        }
        return height;
    };
}();
/**
 * @param {string} font Font.
 * @param {string} text Text.
 * @return {TextMetrics} Text metrics.
 */ function measureText(font, text) {
    if (!measureContext) measureContext = (0, _domJs.createCanvasContext2D)(1, 1);
    if (font != measureFont) {
        measureContext.font = font;
        measureFont = measureContext.font;
    }
    return measureContext.measureText(text);
}
function measureTextWidth(font, text) {
    return measureText(font, text).width;
}
function measureAndCacheTextWidth(font, text, cache) {
    if (text in cache) return cache[text];
    var width = measureTextWidth(font, text);
    cache[text] = width;
    return width;
}
function getTextDimensions(baseStyle, chunks) {
    var widths = [];
    var heights = [];
    var lineWidths = [];
    var width = 0;
    var lineWidth = 0;
    var height = 0;
    var lineHeight = 0;
    for(var i = 0, ii = chunks.length; i <= ii; i += 2){
        var text = chunks[i];
        if (text === "\n" || i === ii) {
            width = Math.max(width, lineWidth);
            lineWidths.push(lineWidth);
            lineWidth = 0;
            height += lineHeight;
            continue;
        }
        var font = chunks[i + 1] || baseStyle.font;
        var currentWidth = measureTextWidth(font, text);
        widths.push(currentWidth);
        lineWidth += currentWidth;
        var currentHeight = measureTextHeight(font);
        heights.push(currentHeight);
        lineHeight = Math.max(lineHeight, currentHeight);
    }
    return {
        width: width,
        height: height,
        widths: widths,
        heights: heights,
        lineWidths: lineWidths
    };
}
function rotateAtOffset(context, rotation, offsetX, offsetY) {
    if (rotation !== 0) {
        context.translate(offsetX, offsetY);
        context.rotate(rotation);
        context.translate(-offsetX, -offsetY);
    }
}
function drawImageOrLabel(context, transform, opacity, labelOrImage, originX, originY, w, h, x, y, scale) {
    context.save();
    if (opacity !== 1) context.globalAlpha *= opacity;
    if (transform) context.setTransform.apply(context, transform);
    if (/** @type {*} */ labelOrImage.contextInstructions) {
        // label
        context.translate(x, y);
        context.scale(scale[0], scale[1]);
        executeLabelInstructions(labelOrImage, context);
    } else if (scale[0] < 0 || scale[1] < 0) {
        // flipped image
        context.translate(x, y);
        context.scale(scale[0], scale[1]);
        context.drawImage(labelOrImage, originX, originY, w, h, 0, 0, w, h);
    } else // if image not flipped translate and scale can be avoided
    context.drawImage(labelOrImage, originX, originY, w, h, x, y, w * scale[0], h * scale[1]);
    context.restore();
}
/**
 * @param {Label} label Label.
 * @param {CanvasRenderingContext2D} context Context.
 */ function executeLabelInstructions(label, context) {
    var contextInstructions = label.contextInstructions;
    for(var i = 0, ii = contextInstructions.length; i < ii; i += 2)if (Array.isArray(contextInstructions[i + 1])) context[contextInstructions[i]].apply(context, contextInstructions[i + 1]);
    else context[contextInstructions[i]] = contextInstructions[i + 1];
}

},{"../Object.js":"1zG8z","../events/Target.js":"7T5Yi","../has.js":"6BDNi","../obj.js":"3ssAG","../dom.js":"84QzQ","../css.js":"lDlNi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j72Wp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/Overlay
 */ var _objectJs = require("./Object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _mapEventTypeJs = require("./MapEventType.js");
var _mapEventTypeJsDefault = parcelHelpers.interopDefault(_mapEventTypeJs);
var _overlayPositioningJs = require("./OverlayPositioning.js");
var _overlayPositioningJsDefault = parcelHelpers.interopDefault(_overlayPositioningJs);
var _cssJs = require("./css.js");
var _extentJs = require("./extent.js");
var _eventsJs = require("./events.js");
var _domJs = require("./dom.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {number|string} [id] Set the overlay id. The overlay id can be used
 * with the {@link module:ol/Map~Map#getOverlayById} method.
 * @property {HTMLElement} [element] The overlay element.
 * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning
 * the overlay. The first element in the
 * array is the horizontal offset. A positive value shifts the overlay right.
 * The second element in the array is the vertical offset. A positive value
 * shifts the overlay down.
 * @property {import("./coordinate.js").Coordinate} [position] The overlay position
 * in map projection.
 * @property {import("./OverlayPositioning.js").default} [positioning='top-left'] Defines how
 * the overlay is actually positioned with respect to its `position` property.
 * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,
 * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
 * `'top-center'`, and `'top-right'`.
 * @property {boolean} [stopEvent=true] Whether event propagation to the map
 * viewport should be stopped. If `true` the overlay is placed in the same
 * container as that of the controls (CSS class name
 * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container
 * with CSS class name specified by the `className` property.
 * @property {boolean} [insertFirst=true] Whether the overlay is inserted first
 * in the overlay container, or appended. If the overlay is placed in the same
 * container as that of the controls (see the `stopEvent` option) you will
 * probably set `insertFirst` to `true` so the overlay is displayed below the
 * controls.
 * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling
 * `setPosition`, so that the overlay is entirely visible in the current viewport?
 * If `true` (deprecated), then `autoPanAnimation` and `autoPanMargin` will be
 * used to determine the panning parameters; if an object is supplied then other
 * parameters are ignored.
 * @property {PanOptions} [autoPanAnimation] The animation options used to pan
 * the overlay into view. This animation is only used when `autoPan` is enabled.
 * A `duration` and `easing` may be provided to customize the animation.
 * Deprecated and ignored if `autoPan` is supplied as an object.
 * @property {number} [autoPanMargin=20] The margin (in pixels) between the
 * overlay and the borders of the map when autopanning. Deprecated and ignored
 * if `autoPan` is supplied as an object.
 * @property {PanIntoViewOptions} [autoPanOptions] The options to use for the
 * autoPan. This is only used when `autoPan` is enabled and has preference over
 * the individual `autoPanMargin` and `autoPanOptions`.
 * @property {string} [className='ol-overlay-container ol-selectable'] CSS class
 * name.
 */ /**
 * @typedef {Object} PanOptions
 * @property {number} [duration=1000] The duration of the animation in
 * milliseconds.
 * @property {function(number):number} [easing] The easing function to use. Can
 * be one from {@link module:ol/easing} or a custom function.
 * Default is {@link module:ol/easing.inAndOut}.
 */ /**
 * @typedef {Object} PanIntoViewOptions
 * @property {PanOptions} [animation={}] The animation parameters for the pan
 * @property {number} [margin=20] The margin (in pixels) between the
 * overlay and the borders of the map when panning into view.
 */ /**
 * @enum {string}
 * @protected
 */ var Property = {
    ELEMENT: "element",
    MAP: "map",
    OFFSET: "offset",
    POSITION: "position",
    POSITIONING: "positioning"
};
/**
 * @typedef {import("./ObjectEventType").Types|'change:element'|'change:map'|'change:offset'|'change:position'|
 *   'change:positioning'} OverlayObjectEventTypes
 */ /***
 * @template Return
 * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
 *   import("./Observable").OnSignature<OverlayObjectEventTypes, import("./Object").ObjectEvent, Return> &
 *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature
 */ /**
 * @classdesc
 * An element to be displayed over the map and attached to a single map
 * location.  Like {@link module:ol/control/Control~Control}, Overlays are
 * visible widgets. Unlike Controls, they are not in a fixed position on the
 * screen, but are tied to a geographical coordinate, so panning the map will
 * move an Overlay but not a Control.
 *
 * Example:
 *
 *     import Overlay from 'ol/Overlay';
 *
 *     var popup = new Overlay({
 *       element: document.getElementById('popup')
 *     });
 *     popup.setPosition(coordinate);
 *     map.addOverlay(popup);
 *
 * @api
 */ var Overlay = /** @class */ function(_super) {
    __extends(Overlay1, _super);
    /**
     * @param {Options} options Overlay options.
     */ function Overlay1(options) {
        var _this = _super.call(this) || this;
        /***
         * @type {OverlayOnSignature<import("./events").EventsKey>}
         */ _this.on;
        /***
         * @type {OverlayOnSignature<import("./events").EventsKey>}
         */ _this.once;
        /***
         * @type {OverlayOnSignature<void>}
         */ _this.un;
        /**
         * @protected
         * @type {Options}
         */ _this.options = options;
        /**
         * @protected
         * @type {number|string|undefined}
         */ _this.id = options.id;
        /**
         * @protected
         * @type {boolean}
         */ _this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;
        /**
         * @protected
         * @type {boolean}
         */ _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;
        /**
         * @protected
         * @type {HTMLElement}
         */ _this.element = document.createElement("div");
        _this.element.className = options.className !== undefined ? options.className : "ol-overlay-container " + (0, _cssJs.CLASS_SELECTABLE);
        _this.element.style.position = "absolute";
        _this.element.style.pointerEvents = "auto";
        var autoPan = options.autoPan;
        if (autoPan && "object" !== typeof autoPan) autoPan = {
            animation: options.autoPanAnimation,
            margin: options.autoPanMargin
        };
        /**
         * @protected
         * @type {PanIntoViewOptions|false}
         */ _this.autoPan = /** @type {PanIntoViewOptions} */ autoPan || false;
        /**
         * @protected
         * @type {{transform_: string,
         *         visible: boolean}}
         */ _this.rendered = {
            transform_: "",
            visible: true
        };
        /**
         * @protected
         * @type {?import("./events.js").EventsKey}
         */ _this.mapPostrenderListenerKey = null;
        _this.addChangeListener(Property.ELEMENT, _this.handleElementChanged);
        _this.addChangeListener(Property.MAP, _this.handleMapChanged);
        _this.addChangeListener(Property.OFFSET, _this.handleOffsetChanged);
        _this.addChangeListener(Property.POSITION, _this.handlePositionChanged);
        _this.addChangeListener(Property.POSITIONING, _this.handlePositioningChanged);
        if (options.element !== undefined) _this.setElement(options.element);
        _this.setOffset(options.offset !== undefined ? options.offset : [
            0,
            0
        ]);
        _this.setPositioning(options.positioning !== undefined ? options.positioning : (0, _overlayPositioningJsDefault.default).TOP_LEFT);
        if (options.position !== undefined) _this.setPosition(options.position);
        return _this;
    }
    /**
     * Get the DOM element of this overlay.
     * @return {HTMLElement|undefined} The Element containing the overlay.
     * @observable
     * @api
     */ Overlay1.prototype.getElement = function() {
        return /** @type {HTMLElement|undefined} */ this.get(Property.ELEMENT);
    };
    /**
     * Get the overlay identifier which is set on constructor.
     * @return {number|string|undefined} Id.
     * @api
     */ Overlay1.prototype.getId = function() {
        return this.id;
    };
    /**
     * Get the map associated with this overlay.
     * @return {import("./PluggableMap.js").default|null} The map that the
     * overlay is part of.
     * @observable
     * @api
     */ Overlay1.prototype.getMap = function() {
        return this.get(Property.MAP) || null;
    };
    /**
     * Get the offset of this overlay.
     * @return {Array<number>} The offset.
     * @observable
     * @api
     */ Overlay1.prototype.getOffset = function() {
        return /** @type {Array<number>} */ this.get(Property.OFFSET);
    };
    /**
     * Get the current position of this overlay.
     * @return {import("./coordinate.js").Coordinate|undefined} The spatial point that the overlay is
     *     anchored at.
     * @observable
     * @api
     */ Overlay1.prototype.getPosition = function() {
        return /** @type {import("./coordinate.js").Coordinate|undefined} */ this.get(Property.POSITION);
    };
    /**
     * Get the current positioning of this overlay.
     * @return {import("./OverlayPositioning.js").default} How the overlay is positioned
     *     relative to its point on the map.
     * @observable
     * @api
     */ Overlay1.prototype.getPositioning = function() {
        return /** @type {import("./OverlayPositioning.js").default} */ this.get(Property.POSITIONING);
    };
    /**
     * @protected
     */ Overlay1.prototype.handleElementChanged = function() {
        (0, _domJs.removeChildren)(this.element);
        var element = this.getElement();
        if (element) this.element.appendChild(element);
    };
    /**
     * @protected
     */ Overlay1.prototype.handleMapChanged = function() {
        if (this.mapPostrenderListenerKey) {
            (0, _domJs.removeNode)(this.element);
            (0, _eventsJs.unlistenByKey)(this.mapPostrenderListenerKey);
            this.mapPostrenderListenerKey = null;
        }
        var map = this.getMap();
        if (map) {
            this.mapPostrenderListenerKey = (0, _eventsJs.listen)(map, (0, _mapEventTypeJsDefault.default).POSTRENDER, this.render, this);
            this.updatePixelPosition();
            var container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();
            if (this.insertFirst) container.insertBefore(this.element, container.childNodes[0] || null);
            else container.appendChild(this.element);
            this.performAutoPan();
        }
    };
    /**
     * @protected
     */ Overlay1.prototype.render = function() {
        this.updatePixelPosition();
    };
    /**
     * @protected
     */ Overlay1.prototype.handleOffsetChanged = function() {
        this.updatePixelPosition();
    };
    /**
     * @protected
     */ Overlay1.prototype.handlePositionChanged = function() {
        this.updatePixelPosition();
        this.performAutoPan();
    };
    /**
     * @protected
     */ Overlay1.prototype.handlePositioningChanged = function() {
        this.updatePixelPosition();
    };
    /**
     * Set the DOM element to be associated with this overlay.
     * @param {HTMLElement|undefined} element The Element containing the overlay.
     * @observable
     * @api
     */ Overlay1.prototype.setElement = function(element) {
        this.set(Property.ELEMENT, element);
    };
    /**
     * Set the map to be associated with this overlay.
     * @param {import("./PluggableMap.js").default|null} map The map that the
     * overlay is part of. Pass `null` to just remove the overlay from the current map.
     * @observable
     * @api
     */ Overlay1.prototype.setMap = function(map) {
        this.set(Property.MAP, map);
    };
    /**
     * Set the offset for this overlay.
     * @param {Array<number>} offset Offset.
     * @observable
     * @api
     */ Overlay1.prototype.setOffset = function(offset) {
        this.set(Property.OFFSET, offset);
    };
    /**
     * Set the position for this overlay. If the position is `undefined` the
     * overlay is hidden.
     * @param {import("./coordinate.js").Coordinate|undefined} position The spatial point that the overlay
     *     is anchored at.
     * @observable
     * @api
     */ Overlay1.prototype.setPosition = function(position) {
        this.set(Property.POSITION, position);
    };
    /**
     * Pan the map so that the overlay is entirely visible in the current viewport
     * (if necessary) using the configured autoPan parameters
     * @protected
     */ Overlay1.prototype.performAutoPan = function() {
        if (this.autoPan) this.panIntoView(this.autoPan);
    };
    /**
     * Pan the map so that the overlay is entirely visible in the current viewport
     * (if necessary).
     * @param {PanIntoViewOptions} [opt_panIntoViewOptions] Options for the pan action
     * @api
     */ Overlay1.prototype.panIntoView = function(opt_panIntoViewOptions) {
        var map = this.getMap();
        if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) return;
        var mapRect = this.getRect(map.getTargetElement(), map.getSize());
        var element = this.getElement();
        var overlayRect = this.getRect(element, [
            (0, _domJs.outerWidth)(element),
            (0, _domJs.outerHeight)(element), 
        ]);
        var panIntoViewOptions = opt_panIntoViewOptions || {};
        var myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;
        if (!(0, _extentJs.containsExtent)(mapRect, overlayRect)) {
            // the overlay is not completely inside the viewport, so pan the map
            var offsetLeft = overlayRect[0] - mapRect[0];
            var offsetRight = mapRect[2] - overlayRect[2];
            var offsetTop = overlayRect[1] - mapRect[1];
            var offsetBottom = mapRect[3] - overlayRect[3];
            var delta = [
                0,
                0
            ];
            if (offsetLeft < 0) // move map to the left
            delta[0] = offsetLeft - myMargin;
            else if (offsetRight < 0) // move map to the right
            delta[0] = Math.abs(offsetRight) + myMargin;
            if (offsetTop < 0) // move map up
            delta[1] = offsetTop - myMargin;
            else if (offsetBottom < 0) // move map down
            delta[1] = Math.abs(offsetBottom) + myMargin;
            if (delta[0] !== 0 || delta[1] !== 0) {
                var center = /** @type {import("./coordinate.js").Coordinate} */ map.getView().getCenterInternal();
                var centerPx = map.getPixelFromCoordinateInternal(center);
                if (!centerPx) return;
                var newCenterPx = [
                    centerPx[0] + delta[0],
                    centerPx[1] + delta[1]
                ];
                var panOptions = panIntoViewOptions.animation || {};
                map.getView().animateInternal({
                    center: map.getCoordinateFromPixelInternal(newCenterPx),
                    duration: panOptions.duration,
                    easing: panOptions.easing
                });
            }
        }
    };
    /**
     * Get the extent of an element relative to the document
     * @param {HTMLElement} element The element.
     * @param {import("./size.js").Size} size The size of the element.
     * @return {import("./extent.js").Extent} The extent.
     * @protected
     */ Overlay1.prototype.getRect = function(element, size) {
        var box = element.getBoundingClientRect();
        var offsetX = box.left + window.pageXOffset;
        var offsetY = box.top + window.pageYOffset;
        return [
            offsetX,
            offsetY,
            offsetX + size[0],
            offsetY + size[1]
        ];
    };
    /**
     * Set the positioning for this overlay.
     * @param {import("./OverlayPositioning.js").default} positioning how the overlay is
     *     positioned relative to its point on the map.
     * @observable
     * @api
     */ Overlay1.prototype.setPositioning = function(positioning) {
        this.set(Property.POSITIONING, positioning);
    };
    /**
     * Modify the visibility of the element.
     * @param {boolean} visible Element visibility.
     * @protected
     */ Overlay1.prototype.setVisible = function(visible) {
        if (this.rendered.visible !== visible) {
            this.element.style.display = visible ? "" : "none";
            this.rendered.visible = visible;
        }
    };
    /**
     * Update pixel position.
     * @protected
     */ Overlay1.prototype.updatePixelPosition = function() {
        var map = this.getMap();
        var position = this.getPosition();
        if (!map || !map.isRendered() || !position) {
            this.setVisible(false);
            return;
        }
        var pixel = map.getPixelFromCoordinate(position);
        var mapSize = map.getSize();
        this.updateRenderedPosition(pixel, mapSize);
    };
    /**
     * @param {import("./pixel.js").Pixel} pixel The pixel location.
     * @param {import("./size.js").Size|undefined} mapSize The map size.
     * @protected
     */ Overlay1.prototype.updateRenderedPosition = function(pixel, mapSize) {
        var style = this.element.style;
        var offset = this.getOffset();
        var positioning = this.getPositioning();
        this.setVisible(true);
        var x = Math.round(pixel[0] + offset[0]) + "px";
        var y = Math.round(pixel[1] + offset[1]) + "px";
        var posX = "0%";
        var posY = "0%";
        if (positioning == (0, _overlayPositioningJsDefault.default).BOTTOM_RIGHT || positioning == (0, _overlayPositioningJsDefault.default).CENTER_RIGHT || positioning == (0, _overlayPositioningJsDefault.default).TOP_RIGHT) posX = "-100%";
        else if (positioning == (0, _overlayPositioningJsDefault.default).BOTTOM_CENTER || positioning == (0, _overlayPositioningJsDefault.default).CENTER_CENTER || positioning == (0, _overlayPositioningJsDefault.default).TOP_CENTER) posX = "-50%";
        if (positioning == (0, _overlayPositioningJsDefault.default).BOTTOM_LEFT || positioning == (0, _overlayPositioningJsDefault.default).BOTTOM_CENTER || positioning == (0, _overlayPositioningJsDefault.default).BOTTOM_RIGHT) posY = "-100%";
        else if (positioning == (0, _overlayPositioningJsDefault.default).CENTER_LEFT || positioning == (0, _overlayPositioningJsDefault.default).CENTER_CENTER || positioning == (0, _overlayPositioningJsDefault.default).CENTER_RIGHT) posY = "-50%";
        var transform = "translate(".concat(posX, ", ").concat(posY, ") translate(").concat(x, ", ").concat(y, ")");
        if (this.rendered.transform_ != transform) {
            this.rendered.transform_ = transform;
            style.transform = transform;
            // @ts-ignore IE9
            style.msTransform = transform;
        }
    };
    /**
     * returns the options this Overlay has been created with
     * @return {Options} overlay options
     */ Overlay1.prototype.getOptions = function() {
        return this.options;
    };
    return Overlay1;
}((0, _objectJsDefault.default));
exports.default = Overlay;

},{"./Object.js":"1zG8z","./MapEventType.js":"1cFF9","./OverlayPositioning.js":"iHqu7","./css.js":"lDlNi","./extent.js":"6YrVc","./events.js":"dcspA","./dom.js":"84QzQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iHqu7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/OverlayPositioning
 */ /**
 * Overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,
 * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
 * `'top-center'`, `'top-right'`
 * @enum {string}
 */ exports.default = {
    BOTTOM_LEFT: "bottom-left",
    BOTTOM_CENTER: "bottom-center",
    BOTTOM_RIGHT: "bottom-right",
    CENTER_LEFT: "center-left",
    CENTER_CENTER: "center-center",
    CENTER_RIGHT: "center-right",
    TOP_LEFT: "top-left",
    TOP_CENTER: "top-center",
    TOP_RIGHT: "top-right"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"75npf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/PluggableMap
 */ var _objectJs = require("./Object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _collectionJs = require("./Collection.js");
var _collectionJsDefault = parcelHelpers.interopDefault(_collectionJs);
var _collectionEventTypeJs = require("./CollectionEventType.js");
var _collectionEventTypeJsDefault = parcelHelpers.interopDefault(_collectionEventTypeJs);
var _eventTypeJs = require("./events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _layerJs = require("./layer/Layer.js");
var _layerJsDefault = parcelHelpers.interopDefault(_layerJs);
var _groupJs = require("./layer/Group.js");
var _groupJsDefault = parcelHelpers.interopDefault(_groupJs);
var _mapBrowserEventJs = require("./MapBrowserEvent.js");
var _mapBrowserEventJsDefault = parcelHelpers.interopDefault(_mapBrowserEventJs);
var _mapBrowserEventHandlerJs = require("./MapBrowserEventHandler.js");
var _mapBrowserEventHandlerJsDefault = parcelHelpers.interopDefault(_mapBrowserEventHandlerJs);
var _mapBrowserEventTypeJs = require("./MapBrowserEventType.js");
var _mapBrowserEventTypeJsDefault = parcelHelpers.interopDefault(_mapBrowserEventTypeJs);
var _mapEventJs = require("./MapEvent.js");
var _mapEventJsDefault = parcelHelpers.interopDefault(_mapEventJs);
var _mapEventTypeJs = require("./MapEventType.js");
var _mapEventTypeJsDefault = parcelHelpers.interopDefault(_mapEventTypeJs);
var _mapPropertyJs = require("./MapProperty.js");
var _mapPropertyJsDefault = parcelHelpers.interopDefault(_mapPropertyJs);
var _objectEventTypeJs = require("./ObjectEventType.js");
var _objectEventTypeJsDefault = parcelHelpers.interopDefault(_objectEventTypeJs);
var _eventTypeJs1 = require("./pointer/EventType.js");
var _eventTypeJsDefault1 = parcelHelpers.interopDefault(_eventTypeJs1);
var _eventTypeJs2 = require("./render/EventType.js");
var _eventTypeJsDefault2 = parcelHelpers.interopDefault(_eventTypeJs2);
var _tileQueueJs = require("./TileQueue.js");
var _tileQueueJsDefault = parcelHelpers.interopDefault(_tileQueueJs);
var _viewJs = require("./View.js");
var _viewJsDefault = parcelHelpers.interopDefault(_viewJs);
var _viewHintJs = require("./ViewHint.js");
var _viewHintJsDefault = parcelHelpers.interopDefault(_viewHintJs);
var _hasJs = require("./has.js");
var _functionsJs = require("./functions.js");
var _transformJs = require("./transform.js");
var _assertsJs = require("./asserts.js");
var _extentJs = require("./extent.js");
var _projJs = require("./proj.js");
var _utilJs = require("./util.js");
var _sizeJs = require("./size.js");
var _eventsJs = require("./events.js");
var _domJs = require("./dom.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * State of the current frame. Only `pixelRatio`, `time` and `viewState` should
 * be used in applications.
 * @typedef {Object} FrameState
 * @property {number} pixelRatio The pixel ratio of the frame.
 * @property {number} time The time when rendering of the frame was requested.
 * @property {import("./View.js").State} viewState The state of the current view.
 * @property {boolean} animate Animate.
 * @property {import("./transform.js").Transform} coordinateToPixelTransform CoordinateToPixelTransform.
 * @property {import("rbush").default} declutterTree DeclutterTree.
 * @property {null|import("./extent.js").Extent} extent Extent.
 * @property {import("./extent.js").Extent} [nextExtent] Next extent during an animation series.
 * @property {number} index Index.
 * @property {Array<import("./layer/Layer.js").State>} layerStatesArray LayerStatesArray.
 * @property {number} layerIndex LayerIndex.
 * @property {import("./transform.js").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.
 * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.
 * @property {import("./size.js").Size} size Size.
 * @property {TileQueue} tileQueue TileQueue.
 * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.
 * @property {Array<number>} viewHints ViewHints.
 * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.
 * @property {string} mapId The id of the map.
 * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.
 */ /**
 * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction
 */ /**
 * @typedef {Object} AtPixelOptions
 * @property {undefined|function(import("./layer/Layer.js").default<import("./source/Source").default>): boolean} [layerFilter] Layer filter
 * function. The filter function will receive one argument, the
 * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.
 * Only layers which are visible and for which this function returns `true`
 * will be tested for features. By default, all visible layers will be tested.
 * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels
 * inside the radius around the given position will be checked for features.
 * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of
 *   +/- 1 world width. Works only if a projection is used that can be wrapped.
 */ /**
 * @typedef {Object} MapOptionsInternal
 * @property {Collection<import("./control/Control.js").default>} [controls] Controls.
 * @property {Collection<import("./interaction/Interaction.js").default>} [interactions] Interactions.
 * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.
 * @property {Collection<import("./Overlay.js").default>} overlays Overlays.
 * @property {Object<string, *>} values Values.
 */ /**
 * @typedef {import("./ObjectEventType").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes
 */ /***
 * @template Return
 * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
 *    import("./Observable").OnSignature<MapObjectEventTypes, import("./Object").ObjectEvent, Return> &
 *    import("./Observable").OnSignature<import("./MapBrowserEventType").Types, import("./MapBrowserEvent").default, Return> &
 *    import("./Observable").OnSignature<import("./MapEventType").Types, import("./MapEvent").default, Return> &
 *    import("./Observable").OnSignature<import("./render/EventType").MapRenderEventTypes, import("./render/Event").default, Return> &
 *    import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|MapObjectEventTypes|
 *      import("./MapBrowserEventType").Types|import("./MapEventType").Types|
 *      import("./render/EventType").MapRenderEventTypes, Return>} PluggableMapOnSignature
 */ /**
 * Object literal with config options for the map.
 * @typedef {Object} MapOptions
 * @property {Collection<import("./control/Control.js").default>|Array<import("./control/Control.js").default>} [controls]
 * Controls initially added to the map. If not specified,
 * {@link module:ol/control.defaults} is used.
 * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between
 * physical pixels and device-independent pixels (dips) on the device.
 * @property {Collection<import("./interaction/Interaction.js").default>|Array<import("./interaction/Interaction.js").default>} [interactions]
 * Interactions that are initially added to the map. If not specified,
 * {@link module:ol/interaction.defaults} is used.
 * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to
 * listen to keyboard events on. This determines when the `KeyboardPan` and
 * `KeyboardZoom` interactions trigger. For example, if this option is set to
 * `document` the keyboard interactions will always trigger. If this option is
 * not specified, the element the library listens to keyboard events on is the
 * map target (i.e. the user-provided div for the map). If this is not
 * `document`, the target element needs to be focused for key events to be
 * emitted, requiring that the target element has a `tabindex` attribute.
 * @property {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>|LayerGroup} [layers]
 * Layers. If this is not defined, a map with no layers will be rendered. Note
 * that layers are rendered in the order supplied, so if you want, for example,
 * a vector layer to appear on top of a tile layer, it must come after the tile
 * layer.
 * @property {number} [maxTilesLoading=16] Maximum number tiles to load
 * simultaneously.
 * @property {number} [moveTolerance=1] The minimum distance in pixels the
 * cursor must move to be detected as a map move event instead of a click.
 * Increasing this value can make it easier to click on the map.
 * @property {Collection<import("./Overlay.js").default>|Array<import("./Overlay.js").default>} [overlays]
 * Overlays initially added to the map. By default, no overlays are added.
 * @property {HTMLElement|string} [target] The container for the map, either the
 * element itself or the `id` of the element. If not specified at construction
 * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be
 * rendered. If passed by element, the container can be in a secondary document.
 * @property {View|Promise<import("./View.js").ViewOptions>} [view] The map's view.  No layer sources will be
 * fetched unless this is specified at construction time or through
 * {@link module:ol/Map~Map#setView}.
 */ /**
 * @param {import("./layer/Base.js").default} layer Layer.
 */ function removeLayerMapProperty(layer) {
    if (layer instanceof (0, _layerJsDefault.default)) {
        layer.setMapInternal(null);
        return;
    }
    if (layer instanceof (0, _groupJsDefault.default)) layer.getLayers().forEach(removeLayerMapProperty);
}
/**
 * @param {import("./layer/Base.js").default} layer Layer.
 * @param {PluggableMap} map Map.
 */ function setLayerMapProperty(layer, map) {
    if (layer instanceof (0, _layerJsDefault.default)) {
        layer.setMapInternal(map);
        return;
    }
    if (layer instanceof (0, _groupJsDefault.default)) {
        var layers = layer.getLayers().getArray();
        for(var i = 0, ii = layers.length; i < ii; ++i)setLayerMapProperty(layers[i], map);
    }
}
/**
 * @fires import("./MapBrowserEvent.js").MapBrowserEvent
 * @fires import("./MapEvent.js").MapEvent
 * @fires import("./render/Event.js").default#precompose
 * @fires import("./render/Event.js").default#postcompose
 * @fires import("./render/Event.js").default#rendercomplete
 * @api
 */ var PluggableMap = /** @class */ function(_super) {
    __extends(PluggableMap1, _super);
    /**
     * @param {MapOptions} options Map options.
     */ function PluggableMap1(options) {
        var _this = _super.call(this) || this;
        /***
         * @type {PluggableMapOnSignature<import("./events").EventsKey>}
         */ _this.on;
        /***
         * @type {PluggableMapOnSignature<import("./events").EventsKey>}
         */ _this.once;
        /***
         * @type {PluggableMapOnSignature<void>}
         */ _this.un;
        var optionsInternal = createOptionsInternal(options);
        /**
         * @private
         * @type {boolean|undefined}
         */ _this.renderComplete_;
        /**
         * @private
         * @type {boolean}
         */ _this.loaded_ = true;
        /** @private */ _this.boundHandleBrowserEvent_ = _this.handleBrowserEvent.bind(_this);
        /**
         * @type {number}
         * @private
         */ _this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;
        /**
         * @private
         * @type {number}
         */ _this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : (0, _hasJs.DEVICE_PIXEL_RATIO);
        /**
         * @private
         * @type {*}
         */ _this.postRenderTimeoutHandle_;
        /**
         * @private
         * @type {number|undefined}
         */ _this.animationDelayKey_;
        /**
         * @private
         */ _this.animationDelay_ = /** @this {PluggableMap} */ (function() {
            this.animationDelayKey_ = undefined;
            this.renderFrame_(Date.now());
        }).bind(_this);
        /**
         * @private
         * @type {import("./transform.js").Transform}
         */ _this.coordinateToPixelTransform_ = (0, _transformJs.create)();
        /**
         * @private
         * @type {import("./transform.js").Transform}
         */ _this.pixelToCoordinateTransform_ = (0, _transformJs.create)();
        /**
         * @private
         * @type {number}
         */ _this.frameIndex_ = 0;
        /**
         * @private
         * @type {?FrameState}
         */ _this.frameState_ = null;
        /**
         * The extent at the previous 'moveend' event.
         * @private
         * @type {import("./extent.js").Extent}
         */ _this.previousExtent_ = null;
        /**
         * @private
         * @type {?import("./events.js").EventsKey}
         */ _this.viewPropertyListenerKey_ = null;
        /**
         * @private
         * @type {?import("./events.js").EventsKey}
         */ _this.viewChangeListenerKey_ = null;
        /**
         * @private
         * @type {?Array<import("./events.js").EventsKey>}
         */ _this.layerGroupPropertyListenerKeys_ = null;
        /**
         * @private
         * @type {!HTMLElement}
         */ _this.viewport_ = document.createElement("div");
        _this.viewport_.className = "ol-viewport" + ("ontouchstart" in window ? " ol-touch" : "");
        _this.viewport_.style.position = "relative";
        _this.viewport_.style.overflow = "hidden";
        _this.viewport_.style.width = "100%";
        _this.viewport_.style.height = "100%";
        /**
         * @private
         * @type {!HTMLElement}
         */ _this.overlayContainer_ = document.createElement("div");
        _this.overlayContainer_.style.position = "absolute";
        _this.overlayContainer_.style.zIndex = "0";
        _this.overlayContainer_.style.width = "100%";
        _this.overlayContainer_.style.height = "100%";
        _this.overlayContainer_.style.pointerEvents = "none";
        _this.overlayContainer_.className = "ol-overlaycontainer";
        _this.viewport_.appendChild(_this.overlayContainer_);
        /**
         * @private
         * @type {!HTMLElement}
         */ _this.overlayContainerStopEvent_ = document.createElement("div");
        _this.overlayContainerStopEvent_.style.position = "absolute";
        _this.overlayContainerStopEvent_.style.zIndex = "0";
        _this.overlayContainerStopEvent_.style.width = "100%";
        _this.overlayContainerStopEvent_.style.height = "100%";
        _this.overlayContainerStopEvent_.style.pointerEvents = "none";
        _this.overlayContainerStopEvent_.className = "ol-overlaycontainer-stopevent";
        _this.viewport_.appendChild(_this.overlayContainerStopEvent_);
        /**
         * @private
         * @type {MapBrowserEventHandler}
         */ _this.mapBrowserEventHandler_ = null;
        /**
         * @private
         * @type {number}
         */ _this.moveTolerance_ = options.moveTolerance;
        /**
         * @private
         * @type {HTMLElement|Document}
         */ _this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;
        /**
         * @private
         * @type {?Array<import("./events.js").EventsKey>}
         */ _this.targetChangeHandlerKeys_ = null;
        /**
         * @type {Collection<import("./control/Control.js").default>}
         * @protected
         */ _this.controls = optionsInternal.controls || new (0, _collectionJsDefault.default)();
        /**
         * @type {Collection<import("./interaction/Interaction.js").default>}
         * @protected
         */ _this.interactions = optionsInternal.interactions || new (0, _collectionJsDefault.default)();
        /**
         * @type {Collection<import("./Overlay.js").default>}
         * @private
         */ _this.overlays_ = optionsInternal.overlays;
        /**
         * A lookup of overlays by id.
         * @private
         * @type {Object<string, import("./Overlay.js").default>}
         */ _this.overlayIdIndex_ = {};
        /**
         * @type {import("./renderer/Map.js").default|null}
         * @private
         */ _this.renderer_ = null;
        /**
         * @private
         * @type {!Array<PostRenderFunction>}
         */ _this.postRenderFunctions_ = [];
        /**
         * @private
         * @type {TileQueue}
         */ _this.tileQueue_ = new (0, _tileQueueJsDefault.default)(_this.getTilePriority.bind(_this), _this.handleTileChange_.bind(_this));
        _this.addChangeListener((0, _mapPropertyJsDefault.default).LAYERGROUP, _this.handleLayerGroupChanged_);
        _this.addChangeListener((0, _mapPropertyJsDefault.default).VIEW, _this.handleViewChanged_);
        _this.addChangeListener((0, _mapPropertyJsDefault.default).SIZE, _this.handleSizeChanged_);
        _this.addChangeListener((0, _mapPropertyJsDefault.default).TARGET, _this.handleTargetChanged_);
        // setProperties will trigger the rendering of the map if the map
        // is "defined" already.
        _this.setProperties(optionsInternal.values);
        var map = _this;
        if (options.view && !(options.view instanceof (0, _viewJsDefault.default))) options.view.then(function(viewOptions) {
            map.setView(new (0, _viewJsDefault.default)(viewOptions));
        });
        _this.controls.addEventListener((0, _collectionEventTypeJsDefault.default).ADD, /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */ (function(event) {
            event.element.setMap(this);
        }).bind(_this));
        _this.controls.addEventListener((0, _collectionEventTypeJsDefault.default).REMOVE, /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */ (function(event) {
            event.element.setMap(null);
        }).bind(_this));
        _this.interactions.addEventListener((0, _collectionEventTypeJsDefault.default).ADD, /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */ (function(event) {
            event.element.setMap(this);
        }).bind(_this));
        _this.interactions.addEventListener((0, _collectionEventTypeJsDefault.default).REMOVE, /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */ (function(event) {
            event.element.setMap(null);
        }).bind(_this));
        _this.overlays_.addEventListener((0, _collectionEventTypeJsDefault.default).ADD, /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */ (function(event) {
            this.addOverlayInternal_(event.element);
        }).bind(_this));
        _this.overlays_.addEventListener((0, _collectionEventTypeJsDefault.default).REMOVE, /**
         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
         */ (function(event) {
            var overlay = event.element;
            var id = overlay.getId();
            if (id !== undefined) delete this.overlayIdIndex_[id.toString()];
            event.element.setMap(null);
        }).bind(_this));
        _this.controls.forEach(/**
         * @param {import("./control/Control.js").default} control Control.
         * @this {PluggableMap}
         */ (function(control) {
            control.setMap(this);
        }).bind(_this));
        _this.interactions.forEach(/**
         * @param {import("./interaction/Interaction.js").default} interaction Interaction.
         * @this {PluggableMap}
         */ (function(interaction) {
            interaction.setMap(this);
        }).bind(_this));
        _this.overlays_.forEach(_this.addOverlayInternal_.bind(_this));
        return _this;
    }
    /**
     * @abstract
     * @return {import("./renderer/Map.js").default} The map renderer
     */ PluggableMap1.prototype.createRenderer = function() {
        throw new Error("Use a map type that has a createRenderer method");
    };
    /**
     * Add the given control to the map.
     * @param {import("./control/Control.js").default} control Control.
     * @api
     */ PluggableMap1.prototype.addControl = function(control) {
        this.getControls().push(control);
    };
    /**
     * Add the given interaction to the map. If you want to add an interaction
     * at another point of the collection use `getInteraction()` and the methods
     * available on {@link module:ol/Collection~Collection}. This can be used to
     * stop the event propagation from the handleEvent function. The interactions
     * get to handle the events in the reverse order of this collection.
     * @param {import("./interaction/Interaction.js").default} interaction Interaction to add.
     * @api
     */ PluggableMap1.prototype.addInteraction = function(interaction) {
        this.getInteractions().push(interaction);
    };
    /**
     * Adds the given layer to the top of this map. If you want to add a layer
     * elsewhere in the stack, use `getLayers()` and the methods available on
     * {@link module:ol/Collection~Collection}.
     * @param {import("./layer/Base.js").default} layer Layer.
     * @api
     */ PluggableMap1.prototype.addLayer = function(layer) {
        var layers = this.getLayerGroup().getLayers();
        layers.push(layer);
    };
    /**
     * @param {import("./layer/Group.js").GroupEvent} event The layer add event.
     * @private
     */ PluggableMap1.prototype.handleLayerAdd_ = function(event) {
        setLayerMapProperty(event.layer, this);
    };
    /**
     * Add the given overlay to the map.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @api
     */ PluggableMap1.prototype.addOverlay = function(overlay) {
        this.getOverlays().push(overlay);
    };
    /**
     * This deals with map's overlay collection changes.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @private
     */ PluggableMap1.prototype.addOverlayInternal_ = function(overlay) {
        var id = overlay.getId();
        if (id !== undefined) this.overlayIdIndex_[id.toString()] = overlay;
        overlay.setMap(this);
    };
    /**
     *
     * Clean up.
     */ PluggableMap1.prototype.disposeInternal = function() {
        this.setTarget(null);
        _super.prototype.disposeInternal.call(this);
    };
    /**
     * Detect features that intersect a pixel on the viewport, and execute a
     * callback with each intersecting feature. Layers included in the detection can
     * be configured through the `layerFilter` option in `opt_options`.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {function(import("./Feature.js").FeatureLike, import("./layer/Layer.js").default<import("./source/Source").default>, import("./geom/SimpleGeometry.js").default): T} callback Feature callback. The callback will be
     *     called with two arguments. The first argument is one
     *     {@link module:ol/Feature~Feature feature} or
     *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is
     *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for
     *     unmanaged layers. To stop detection, callback functions can return a
     *     truthy value.
     * @param {AtPixelOptions} [opt_options] Optional options.
     * @return {T|undefined} Callback result, i.e. the return value of last
     * callback execution, or the first truthy callback return value.
     * @template T
     * @api
     */ PluggableMap1.prototype.forEachFeatureAtPixel = function(pixel, callback, opt_options) {
        if (!this.frameState_ || !this.renderer_) return;
        var coordinate = this.getCoordinateFromPixelInternal(pixel);
        opt_options = opt_options !== undefined ? opt_options : {};
        var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;
        var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : (0, _functionsJs.TRUE);
        var checkWrapped = opt_options.checkWrapped !== false;
        return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);
    };
    /**
     * Get all features that intersect a pixel on the viewport.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {AtPixelOptions} [opt_options] Optional options.
     * @return {Array<import("./Feature.js").FeatureLike>} The detected features or
     * an empty array if none were found.
     * @api
     */ PluggableMap1.prototype.getFeaturesAtPixel = function(pixel, opt_options) {
        var features = [];
        this.forEachFeatureAtPixel(pixel, function(feature) {
            features.push(feature);
        }, opt_options);
        return features;
    };
    /**
     * Get all layers from all layer groups.
     * @return {Array<import("./layer/Layer.js").default>} Layers.
     * @api
     */ PluggableMap1.prototype.getAllLayers = function() {
        var layers = [];
        function addLayersFrom(layerGroup) {
            layerGroup.forEach(function(layer) {
                if (layer instanceof (0, _groupJsDefault.default)) addLayersFrom(layer.getLayers());
                else layers.push(layer);
            });
        }
        addLayersFrom(this.getLayers());
        return layers;
    };
    /**
     * Please the `layer.getData()` method for {@link module:ol/layer/Tile~TileLayer#getData tile layers} or
     * {@link module:ol/layer/Image~ImageLayer#getData image layers} instead of using this method.
     *
     * Detect layers that have a color value at a pixel on the viewport, and
     * execute a callback with each matching layer. Layers included in the
     * detection can be configured through `opt_layerFilter`.
     *
     * Note: In maps with more than one layer, this method will typically return pixel data
     * representing the composed image of all layers visible at the given pixel – because layers
     * will generally share the same rendering context.  To force layers to render separately, and
     * to get pixel data representing only one layer at a time, you can assign each layer a unique
     * `className` in its constructor.
     *
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {function(this: S, import("./layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback
     *     Layer callback. This callback will receive two arguments: first is the
     *     {@link module:ol/layer/Layer~Layer layer}, second argument is an array representing
     *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types
     *     that do not currently support this argument. To stop detection, callback
     *     functions can return a truthy value.
     * @param {AtPixelOptions} [opt_options] Configuration options.
     * @return {T|undefined} Callback result, i.e. the return value of last
     * callback execution, or the first truthy callback return value.
     * @template S,T
     * @api
     * @deprecated
     */ PluggableMap1.prototype.forEachLayerAtPixel = function(pixel, callback, opt_options) {
        if (!this.frameState_ || !this.renderer_) return;
        var options = opt_options || {};
        var hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;
        var layerFilter = options.layerFilter || (0, _functionsJs.TRUE);
        return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);
    };
    /**
     * Detect if features intersect a pixel on the viewport. Layers included in the
     * detection can be configured through `opt_layerFilter`.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {AtPixelOptions} [opt_options] Optional options.
     * @return {boolean} Is there a feature at the given pixel?
     * @api
     */ PluggableMap1.prototype.hasFeatureAtPixel = function(pixel, opt_options) {
        if (!this.frameState_ || !this.renderer_) return false;
        var coordinate = this.getCoordinateFromPixelInternal(pixel);
        opt_options = opt_options !== undefined ? opt_options : {};
        var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : (0, _functionsJs.TRUE);
        var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;
        var checkWrapped = opt_options.checkWrapped !== false;
        return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);
    };
    /**
     * Returns the coordinate in user projection for a browser event.
     * @param {MouseEvent} event Event.
     * @return {import("./coordinate.js").Coordinate} Coordinate.
     * @api
     */ PluggableMap1.prototype.getEventCoordinate = function(event) {
        return this.getCoordinateFromPixel(this.getEventPixel(event));
    };
    /**
     * Returns the coordinate in view projection for a browser event.
     * @param {MouseEvent} event Event.
     * @return {import("./coordinate.js").Coordinate} Coordinate.
     */ PluggableMap1.prototype.getEventCoordinateInternal = function(event) {
        return this.getCoordinateFromPixelInternal(this.getEventPixel(event));
    };
    /**
     * Returns the map pixel position for a browser event relative to the viewport.
     * @param {UIEvent} event Event.
     * @return {import("./pixel.js").Pixel} Pixel.
     * @api
     */ PluggableMap1.prototype.getEventPixel = function(event) {
        var viewportPosition = this.viewport_.getBoundingClientRect();
        var eventPosition = //FIXME Are we really calling this with a TouchEvent anywhere?
        "changedTouches" in event ? /** @type {TouchEvent} */ event.changedTouches[0] : event;
        return [
            eventPosition.clientX - viewportPosition.left,
            eventPosition.clientY - viewportPosition.top, 
        ];
    };
    /**
     * Get the target in which this map is rendered.
     * Note that this returns what is entered as an option or in setTarget:
     * if that was an element, it returns an element; if a string, it returns that.
     * @return {HTMLElement|string|undefined} The Element or id of the Element that the
     *     map is rendered in.
     * @observable
     * @api
     */ PluggableMap1.prototype.getTarget = function() {
        return /** @type {HTMLElement|string|undefined} */ this.get((0, _mapPropertyJsDefault.default).TARGET);
    };
    /**
     * Get the DOM element into which this map is rendered. In contrast to
     * `getTarget` this method always return an `Element`, or `null` if the
     * map has no target.
     * @return {HTMLElement} The element that the map is rendered in.
     * @api
     */ PluggableMap1.prototype.getTargetElement = function() {
        var target = this.getTarget();
        if (target !== undefined) return typeof target === "string" ? document.getElementById(target) : target;
        else return null;
    };
    /**
     * Get the coordinate for a given pixel.  This returns a coordinate in the
     * user projection.
     * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
     * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
     * @api
     */ PluggableMap1.prototype.getCoordinateFromPixel = function(pixel) {
        return (0, _projJs.toUserCoordinate)(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());
    };
    /**
     * Get the coordinate for a given pixel.  This returns a coordinate in the
     * map view projection.
     * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
     * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
     */ PluggableMap1.prototype.getCoordinateFromPixelInternal = function(pixel) {
        var frameState = this.frameState_;
        if (!frameState) return null;
        else return (0, _transformJs.apply)(frameState.pixelToCoordinateTransform, pixel.slice());
    };
    /**
     * Get the map controls. Modifying this collection changes the controls
     * associated with the map.
     * @return {Collection<import("./control/Control.js").default>} Controls.
     * @api
     */ PluggableMap1.prototype.getControls = function() {
        return this.controls;
    };
    /**
     * Get the map overlays. Modifying this collection changes the overlays
     * associated with the map.
     * @return {Collection<import("./Overlay.js").default>} Overlays.
     * @api
     */ PluggableMap1.prototype.getOverlays = function() {
        return this.overlays_;
    };
    /**
     * Get an overlay by its identifier (the value returned by overlay.getId()).
     * Note that the index treats string and numeric identifiers as the same. So
     * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
     * @param {string|number} id Overlay identifier.
     * @return {import("./Overlay.js").default} Overlay.
     * @api
     */ PluggableMap1.prototype.getOverlayById = function(id) {
        var overlay = this.overlayIdIndex_[id.toString()];
        return overlay !== undefined ? overlay : null;
    };
    /**
     * Get the map interactions. Modifying this collection changes the interactions
     * associated with the map.
     *
     * Interactions are used for e.g. pan, zoom and rotate.
     * @return {Collection<import("./interaction/Interaction.js").default>} Interactions.
     * @api
     */ PluggableMap1.prototype.getInteractions = function() {
        return this.interactions;
    };
    /**
     * Get the layergroup associated with this map.
     * @return {LayerGroup} A layer group containing the layers in this map.
     * @observable
     * @api
     */ PluggableMap1.prototype.getLayerGroup = function() {
        return /** @type {LayerGroup} */ this.get((0, _mapPropertyJsDefault.default).LAYERGROUP);
    };
    /**
     * Clear any existing layers and add layers to the map.
     * @param {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>} layers The layers to be added to the map.
     * @api
     */ PluggableMap1.prototype.setLayers = function(layers) {
        var group = this.getLayerGroup();
        if (layers instanceof (0, _collectionJsDefault.default)) {
            group.setLayers(layers);
            return;
        }
        var collection = group.getLayers();
        collection.clear();
        collection.extend(layers);
    };
    /**
     * Get the collection of layers associated with this map.
     * @return {!Collection<import("./layer/Base.js").default>} Layers.
     * @api
     */ PluggableMap1.prototype.getLayers = function() {
        var layers = this.getLayerGroup().getLayers();
        return layers;
    };
    /**
     * @return {boolean} Layers have sources that are still loading.
     */ PluggableMap1.prototype.getLoadingOrNotReady = function() {
        var layerStatesArray = this.getLayerGroup().getLayerStatesArray();
        for(var i = 0, ii = layerStatesArray.length; i < ii; ++i){
            var state = layerStatesArray[i];
            if (!state.visible) continue;
            var renderer = state.layer.getRenderer();
            if (renderer && !renderer.ready) return true;
            var source = /** @type {import("./layer/Layer.js").default} */ state.layer.getSource();
            if (source && source.loading) return true;
        }
        return false;
    };
    /**
     * Get the pixel for a coordinate.  This takes a coordinate in the user
     * projection and returns the corresponding pixel.
     * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
     * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
     * @api
     */ PluggableMap1.prototype.getPixelFromCoordinate = function(coordinate) {
        var viewCoordinate = (0, _projJs.fromUserCoordinate)(coordinate, this.getView().getProjection());
        return this.getPixelFromCoordinateInternal(viewCoordinate);
    };
    /**
     * Get the pixel for a coordinate.  This takes a coordinate in the map view
     * projection and returns the corresponding pixel.
     * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
     * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
     */ PluggableMap1.prototype.getPixelFromCoordinateInternal = function(coordinate) {
        var frameState = this.frameState_;
        if (!frameState) return null;
        else return (0, _transformJs.apply)(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));
    };
    /**
     * Get the map renderer.
     * @return {import("./renderer/Map.js").default|null} Renderer
     */ PluggableMap1.prototype.getRenderer = function() {
        return this.renderer_;
    };
    /**
     * Get the size of this map.
     * @return {import("./size.js").Size|undefined} The size in pixels of the map in the DOM.
     * @observable
     * @api
     */ PluggableMap1.prototype.getSize = function() {
        return /** @type {import("./size.js").Size|undefined} */ this.get((0, _mapPropertyJsDefault.default).SIZE);
    };
    /**
     * Get the view associated with this map. A view manages properties such as
     * center and resolution.
     * @return {View} The view that controls this map.
     * @observable
     * @api
     */ PluggableMap1.prototype.getView = function() {
        return /** @type {View} */ this.get((0, _mapPropertyJsDefault.default).VIEW);
    };
    /**
     * Get the element that serves as the map viewport.
     * @return {HTMLElement} Viewport.
     * @api
     */ PluggableMap1.prototype.getViewport = function() {
        return this.viewport_;
    };
    /**
     * Get the element that serves as the container for overlays.  Elements added to
     * this container will let mousedown and touchstart events through to the map,
     * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
     * events.
     * @return {!HTMLElement} The map's overlay container.
     */ PluggableMap1.prototype.getOverlayContainer = function() {
        return this.overlayContainer_;
    };
    /**
     * Get the element that serves as a container for overlays that don't allow
     * event propagation. Elements added to this container won't let mousedown and
     * touchstart events through to the map, so clicks and gestures on an overlay
     * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
     * @return {!HTMLElement} The map's overlay container that stops events.
     */ PluggableMap1.prototype.getOverlayContainerStopEvent = function() {
        return this.overlayContainerStopEvent_;
    };
    /**
     * @return {!Document} The document where the map is displayed.
     */ PluggableMap1.prototype.getOwnerDocument = function() {
        var targetElement = this.getTargetElement();
        return targetElement ? targetElement.ownerDocument : document;
    };
    /**
     * @param {import("./Tile.js").default} tile Tile.
     * @param {string} tileSourceKey Tile source key.
     * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
     * @param {number} tileResolution Tile resolution.
     * @return {number} Tile priority.
     */ PluggableMap1.prototype.getTilePriority = function(tile, tileSourceKey, tileCenter, tileResolution) {
        return (0, _tileQueueJs.getTilePriority)(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);
    };
    /**
     * @param {UIEvent} browserEvent Browser event.
     * @param {string} [opt_type] Type.
     */ PluggableMap1.prototype.handleBrowserEvent = function(browserEvent, opt_type) {
        var type = opt_type || browserEvent.type;
        var mapBrowserEvent = new (0, _mapBrowserEventJsDefault.default)(type, this, browserEvent);
        this.handleMapBrowserEvent(mapBrowserEvent);
    };
    /**
     * @param {MapBrowserEvent} mapBrowserEvent The event to handle.
     */ PluggableMap1.prototype.handleMapBrowserEvent = function(mapBrowserEvent) {
        if (!this.frameState_) // With no view defined, we cannot translate pixels into geographical
        // coordinates so interactions cannot be used.
        return;
        var originalEvent = mapBrowserEvent.originalEvent;
        var eventType = originalEvent.type;
        if (eventType === (0, _eventTypeJsDefault1.default).POINTERDOWN || eventType === (0, _eventTypeJsDefault.default).WHEEL || eventType === (0, _eventTypeJsDefault.default).KEYDOWN) {
            var doc = this.getOwnerDocument();
            var rootNode = this.viewport_.getRootNode ? this.viewport_.getRootNode() : doc;
            var target = originalEvent.target;
            if (// Abort if the target is a child of the container for elements whose events are not meant
            // to be handled by map interactions.
            this.overlayContainerStopEvent_.contains(target) || // Abort if the event target is a child of the container that is no longer in the page.
            // It's possible for the target to no longer be in the page if it has been removed in an
            // event listener, this might happen in a Control that recreates it's content based on
            // user interaction either manually or via a render in something like https://reactjs.org/
            !(rootNode === doc ? doc.documentElement : rootNode).contains(target)) return;
        }
        mapBrowserEvent.frameState = this.frameState_;
        if (this.dispatchEvent(mapBrowserEvent) !== false) {
            var interactionsArray = this.getInteractions().getArray().slice();
            for(var i = interactionsArray.length - 1; i >= 0; i--){
                var interaction = interactionsArray[i];
                if (interaction.getMap() !== this || !interaction.getActive() || !this.getTargetElement()) continue;
                var cont = interaction.handleEvent(mapBrowserEvent);
                if (!cont || mapBrowserEvent.propagationStopped) break;
            }
        }
    };
    /**
     * @protected
     */ PluggableMap1.prototype.handlePostRender = function() {
        var frameState = this.frameState_;
        // Manage the tile queue
        // Image loads are expensive and a limited resource, so try to use them
        // efficiently:
        // * When the view is static we allow a large number of parallel tile loads
        //   to complete the frame as quickly as possible.
        // * When animating or interacting, image loads can cause janks, so we reduce
        //   the maximum number of loads per frame and limit the number of parallel
        //   tile loads to remain reactive to view changes and to reduce the chance of
        //   loading tiles that will quickly disappear from view.
        var tileQueue = this.tileQueue_;
        if (!tileQueue.isEmpty()) {
            var maxTotalLoading = this.maxTilesLoading_;
            var maxNewLoads = maxTotalLoading;
            if (frameState) {
                var hints = frameState.viewHints;
                if (hints[(0, _viewHintJsDefault.default).ANIMATING] || hints[(0, _viewHintJsDefault.default).INTERACTING]) {
                    var lowOnFrameBudget = Date.now() - frameState.time > 8;
                    maxTotalLoading = lowOnFrameBudget ? 0 : 8;
                    maxNewLoads = lowOnFrameBudget ? 0 : 2;
                }
            }
            if (tileQueue.getTilesLoading() < maxTotalLoading) {
                tileQueue.reprioritize(); // FIXME only call if view has changed
                tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);
            }
        }
        if (frameState && this.renderer_ && !frameState.animate) {
            if (this.renderComplete_ === true) {
                if (this.hasListener((0, _eventTypeJsDefault2.default).RENDERCOMPLETE)) this.renderer_.dispatchRenderEvent((0, _eventTypeJsDefault2.default).RENDERCOMPLETE, frameState);
                if (this.loaded_ === false) {
                    this.loaded_ = true;
                    this.dispatchEvent(new (0, _mapEventJsDefault.default)((0, _mapEventTypeJsDefault.default).LOADEND, this, frameState));
                }
            } else if (this.loaded_ === true) {
                this.loaded_ = false;
                this.dispatchEvent(new (0, _mapEventJsDefault.default)((0, _mapEventTypeJsDefault.default).LOADSTART, this, frameState));
            }
        }
        var postRenderFunctions = this.postRenderFunctions_;
        for(var i = 0, ii = postRenderFunctions.length; i < ii; ++i)postRenderFunctions[i](this, frameState);
        postRenderFunctions.length = 0;
    };
    /**
     * @private
     */ PluggableMap1.prototype.handleSizeChanged_ = function() {
        if (this.getView() && !this.getView().getAnimating()) this.getView().resolveConstraints(0);
        this.render();
    };
    /**
     * @private
     */ PluggableMap1.prototype.handleTargetChanged_ = function() {
        if (this.mapBrowserEventHandler_) {
            for(var i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i)(0, _eventsJs.unlistenByKey)(this.targetChangeHandlerKeys_[i]);
            this.targetChangeHandlerKeys_ = null;
            this.viewport_.removeEventListener((0, _eventTypeJsDefault.default).CONTEXTMENU, this.boundHandleBrowserEvent_);
            this.viewport_.removeEventListener((0, _eventTypeJsDefault.default).WHEEL, this.boundHandleBrowserEvent_);
            this.mapBrowserEventHandler_.dispose();
            this.mapBrowserEventHandler_ = null;
            (0, _domJs.removeNode)(this.viewport_);
        }
        // target may be undefined, null, a string or an Element.
        // If it's a string we convert it to an Element before proceeding.
        // If it's not now an Element we remove the viewport from the DOM.
        // If it's an Element we append the viewport element to it.
        var targetElement = this.getTargetElement();
        if (!targetElement) {
            if (this.renderer_) {
                clearTimeout(this.postRenderTimeoutHandle_);
                this.postRenderTimeoutHandle_ = undefined;
                this.postRenderFunctions_.length = 0;
                this.renderer_.dispose();
                this.renderer_ = null;
            }
            if (this.animationDelayKey_) {
                cancelAnimationFrame(this.animationDelayKey_);
                this.animationDelayKey_ = undefined;
            }
        } else {
            targetElement.appendChild(this.viewport_);
            if (!this.renderer_) this.renderer_ = this.createRenderer();
            this.mapBrowserEventHandler_ = new (0, _mapBrowserEventHandlerJsDefault.default)(this, this.moveTolerance_);
            for(var key in 0, _mapBrowserEventTypeJsDefault.default)this.mapBrowserEventHandler_.addEventListener((0, _mapBrowserEventTypeJsDefault.default)[key], this.handleMapBrowserEvent.bind(this));
            this.viewport_.addEventListener((0, _eventTypeJsDefault.default).CONTEXTMENU, this.boundHandleBrowserEvent_, false);
            this.viewport_.addEventListener((0, _eventTypeJsDefault.default).WHEEL, this.boundHandleBrowserEvent_, (0, _hasJs.PASSIVE_EVENT_LISTENERS) ? {
                passive: false
            } : false);
            var defaultView = this.getOwnerDocument().defaultView;
            var keyboardEventTarget = !this.keyboardEventTarget_ ? targetElement : this.keyboardEventTarget_;
            this.targetChangeHandlerKeys_ = [
                (0, _eventsJs.listen)(keyboardEventTarget, (0, _eventTypeJsDefault.default).KEYDOWN, this.handleBrowserEvent, this),
                (0, _eventsJs.listen)(keyboardEventTarget, (0, _eventTypeJsDefault.default).KEYPRESS, this.handleBrowserEvent, this),
                (0, _eventsJs.listen)(defaultView, (0, _eventTypeJsDefault.default).RESIZE, this.updateSize, this), 
            ];
        }
        this.updateSize();
    // updateSize calls setSize, so no need to call this.render
    // ourselves here.
    };
    /**
     * @private
     */ PluggableMap1.prototype.handleTileChange_ = function() {
        this.render();
    };
    /**
     * @private
     */ PluggableMap1.prototype.handleViewPropertyChanged_ = function() {
        this.render();
    };
    /**
     * @private
     */ PluggableMap1.prototype.handleViewChanged_ = function() {
        if (this.viewPropertyListenerKey_) {
            (0, _eventsJs.unlistenByKey)(this.viewPropertyListenerKey_);
            this.viewPropertyListenerKey_ = null;
        }
        if (this.viewChangeListenerKey_) {
            (0, _eventsJs.unlistenByKey)(this.viewChangeListenerKey_);
            this.viewChangeListenerKey_ = null;
        }
        var view = this.getView();
        if (view) {
            this.updateViewportSize_();
            this.viewPropertyListenerKey_ = (0, _eventsJs.listen)(view, (0, _objectEventTypeJsDefault.default).PROPERTYCHANGE, this.handleViewPropertyChanged_, this);
            this.viewChangeListenerKey_ = (0, _eventsJs.listen)(view, (0, _eventTypeJsDefault.default).CHANGE, this.handleViewPropertyChanged_, this);
            view.resolveConstraints(0);
        }
        this.render();
    };
    /**
     * @private
     */ PluggableMap1.prototype.handleLayerGroupChanged_ = function() {
        if (this.layerGroupPropertyListenerKeys_) {
            this.layerGroupPropertyListenerKeys_.forEach((0, _eventsJs.unlistenByKey));
            this.layerGroupPropertyListenerKeys_ = null;
        }
        var layerGroup = this.getLayerGroup();
        if (layerGroup) {
            this.handleLayerAdd_(new (0, _groupJs.GroupEvent)("addlayer", layerGroup));
            this.layerGroupPropertyListenerKeys_ = [
                (0, _eventsJs.listen)(layerGroup, (0, _objectEventTypeJsDefault.default).PROPERTYCHANGE, this.render, this),
                (0, _eventsJs.listen)(layerGroup, (0, _eventTypeJsDefault.default).CHANGE, this.render, this),
                (0, _eventsJs.listen)(layerGroup, "addlayer", this.handleLayerAdd_, this),
                (0, _eventsJs.listen)(layerGroup, "removelayer", this.handleLayerRemove_, this), 
            ];
        }
        this.render();
    };
    /**
     * @return {boolean} Is rendered.
     */ PluggableMap1.prototype.isRendered = function() {
        return !!this.frameState_;
    };
    /**
     * Requests an immediate render in a synchronous manner.
     * @api
     */ PluggableMap1.prototype.renderSync = function() {
        if (this.animationDelayKey_) cancelAnimationFrame(this.animationDelayKey_);
        this.animationDelay_();
    };
    /**
     * Redraws all text after new fonts have loaded
     */ PluggableMap1.prototype.redrawText = function() {
        var layerStates = this.getLayerGroup().getLayerStatesArray();
        for(var i = 0, ii = layerStates.length; i < ii; ++i){
            var layer = layerStates[i].layer;
            if (layer.hasRenderer()) layer.getRenderer().handleFontsChanged();
        }
    };
    /**
     * Request a map rendering (at the next animation frame).
     * @api
     */ PluggableMap1.prototype.render = function() {
        if (this.renderer_ && this.animationDelayKey_ === undefined) this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);
    };
    /**
     * Remove the given control from the map.
     * @param {import("./control/Control.js").default} control Control.
     * @return {import("./control/Control.js").default|undefined} The removed control (or undefined
     *     if the control was not found).
     * @api
     */ PluggableMap1.prototype.removeControl = function(control) {
        return this.getControls().remove(control);
    };
    /**
     * Remove the given interaction from the map.
     * @param {import("./interaction/Interaction.js").default} interaction Interaction to remove.
     * @return {import("./interaction/Interaction.js").default|undefined} The removed interaction (or
     *     undefined if the interaction was not found).
     * @api
     */ PluggableMap1.prototype.removeInteraction = function(interaction) {
        return this.getInteractions().remove(interaction);
    };
    /**
     * Removes the given layer from the map.
     * @param {import("./layer/Base.js").default} layer Layer.
     * @return {import("./layer/Base.js").default|undefined} The removed layer (or undefined if the
     *     layer was not found).
     * @api
     */ PluggableMap1.prototype.removeLayer = function(layer) {
        var layers = this.getLayerGroup().getLayers();
        return layers.remove(layer);
    };
    /**
     * @param {import("./layer/Group.js").GroupEvent} event The layer remove event.
     * @private
     */ PluggableMap1.prototype.handleLayerRemove_ = function(event) {
        removeLayerMapProperty(event.layer);
    };
    /**
     * Remove the given overlay from the map.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @return {import("./Overlay.js").default|undefined} The removed overlay (or undefined
     *     if the overlay was not found).
     * @api
     */ PluggableMap1.prototype.removeOverlay = function(overlay) {
        return this.getOverlays().remove(overlay);
    };
    /**
     * @param {number} time Time.
     * @private
     */ PluggableMap1.prototype.renderFrame_ = function(time) {
        var _this = this;
        var size = this.getSize();
        var view = this.getView();
        var previousFrameState = this.frameState_;
        /** @type {?FrameState} */ var frameState = null;
        if (size !== undefined && (0, _sizeJs.hasArea)(size) && view && view.isDef()) {
            var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);
            var viewState = view.getState();
            frameState = {
                animate: false,
                coordinateToPixelTransform: this.coordinateToPixelTransform_,
                declutterTree: null,
                extent: (0, _extentJs.getForViewAndSize)(viewState.center, viewState.resolution, viewState.rotation, size),
                index: this.frameIndex_++,
                layerIndex: 0,
                layerStatesArray: this.getLayerGroup().getLayerStatesArray(),
                pixelRatio: this.pixelRatio_,
                pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
                postRenderFunctions: [],
                size: size,
                tileQueue: this.tileQueue_,
                time: time,
                usedTiles: {},
                viewState: viewState,
                viewHints: viewHints,
                wantedTiles: {},
                mapId: (0, _utilJs.getUid)(this),
                renderTargets: {}
            };
            if (viewState.nextCenter && viewState.nextResolution) {
                var rotation = isNaN(viewState.nextRotation) ? viewState.rotation : viewState.nextRotation;
                frameState.nextExtent = (0, _extentJs.getForViewAndSize)(viewState.nextCenter, viewState.nextResolution, rotation, size);
            }
        }
        this.frameState_ = frameState;
        /** @type {import("./renderer/Map.js").default} */ this.renderer_.renderFrame(frameState);
        if (frameState) {
            if (frameState.animate) this.render();
            Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);
            if (previousFrameState) {
                var moveStart = !this.previousExtent_ || !(0, _extentJs.isEmpty)(this.previousExtent_) && !(0, _extentJs.equals)(frameState.extent, this.previousExtent_);
                if (moveStart) {
                    this.dispatchEvent(new (0, _mapEventJsDefault.default)((0, _mapEventTypeJsDefault.default).MOVESTART, this, previousFrameState));
                    this.previousExtent_ = (0, _extentJs.createOrUpdateEmpty)(this.previousExtent_);
                }
            }
            var idle = this.previousExtent_ && !frameState.viewHints[(0, _viewHintJsDefault.default).ANIMATING] && !frameState.viewHints[(0, _viewHintJsDefault.default).INTERACTING] && !(0, _extentJs.equals)(frameState.extent, this.previousExtent_);
            if (idle) {
                this.dispatchEvent(new (0, _mapEventJsDefault.default)((0, _mapEventTypeJsDefault.default).MOVEEND, this, frameState));
                (0, _extentJs.clone)(frameState.extent, this.previousExtent_);
            }
        }
        this.dispatchEvent(new (0, _mapEventJsDefault.default)((0, _mapEventTypeJsDefault.default).POSTRENDER, this, frameState));
        this.renderComplete_ = this.hasListener((0, _mapEventTypeJsDefault.default).LOADSTART) || this.hasListener((0, _mapEventTypeJsDefault.default).LOADEND) || this.hasListener((0, _eventTypeJsDefault2.default).RENDERCOMPLETE) ? !this.tileQueue_.getTilesLoading() && !this.tileQueue_.getCount() && !this.getLoadingOrNotReady() : undefined;
        if (!this.postRenderTimeoutHandle_) this.postRenderTimeoutHandle_ = setTimeout(function() {
            _this.postRenderTimeoutHandle_ = undefined;
            _this.handlePostRender();
        }, 0);
    };
    /**
     * Sets the layergroup of this map.
     * @param {LayerGroup} layerGroup A layer group containing the layers in this map.
     * @observable
     * @api
     */ PluggableMap1.prototype.setLayerGroup = function(layerGroup) {
        var oldLayerGroup = this.getLayerGroup();
        if (oldLayerGroup) this.handleLayerRemove_(new (0, _groupJs.GroupEvent)("removelayer", oldLayerGroup));
        this.set((0, _mapPropertyJsDefault.default).LAYERGROUP, layerGroup);
    };
    /**
     * Set the size of this map.
     * @param {import("./size.js").Size|undefined} size The size in pixels of the map in the DOM.
     * @observable
     * @api
     */ PluggableMap1.prototype.setSize = function(size) {
        this.set((0, _mapPropertyJsDefault.default).SIZE, size);
    };
    /**
     * Set the target element to render this map into.
     * @param {HTMLElement|string} [target] The Element or id of the Element
     *     that the map is rendered in.
     * @observable
     * @api
     */ PluggableMap1.prototype.setTarget = function(target) {
        this.set((0, _mapPropertyJsDefault.default).TARGET, target);
    };
    /**
     * Set the view for this map.
     * @param {View|Promise<import("./View.js").ViewOptions>} view The view that controls this map.
     * It is also possible to pass a promise that resolves to options for constructing a view.  This
     * alternative allows view properties to be resolved by sources or other components that load
     * view-related metadata.
     * @observable
     * @api
     */ PluggableMap1.prototype.setView = function(view) {
        if (!view || view instanceof (0, _viewJsDefault.default)) {
            this.set((0, _mapPropertyJsDefault.default).VIEW, view);
            return;
        }
        this.set((0, _mapPropertyJsDefault.default).VIEW, new (0, _viewJsDefault.default)());
        var map = this;
        view.then(function(viewOptions) {
            map.setView(new (0, _viewJsDefault.default)(viewOptions));
        });
    };
    /**
     * Force a recalculation of the map viewport size.  This should be called when
     * third-party code changes the size of the map viewport.
     * @api
     */ PluggableMap1.prototype.updateSize = function() {
        var targetElement = this.getTargetElement();
        var size = undefined;
        if (targetElement) {
            var computedStyle = getComputedStyle(targetElement);
            var width = targetElement.offsetWidth - parseFloat(computedStyle["borderLeftWidth"]) - parseFloat(computedStyle["paddingLeft"]) - parseFloat(computedStyle["paddingRight"]) - parseFloat(computedStyle["borderRightWidth"]);
            var height = targetElement.offsetHeight - parseFloat(computedStyle["borderTopWidth"]) - parseFloat(computedStyle["paddingTop"]) - parseFloat(computedStyle["paddingBottom"]) - parseFloat(computedStyle["borderBottomWidth"]);
            if (!isNaN(width) && !isNaN(height)) {
                size = [
                    width,
                    height
                ];
                if (!(0, _sizeJs.hasArea)(size) && !!(targetElement.offsetWidth || targetElement.offsetHeight || targetElement.getClientRects().length)) // eslint-disable-next-line
                console.warn("No map visible because the map container's width or height are 0.");
            }
        }
        this.setSize(size);
        this.updateViewportSize_();
    };
    /**
     * Recomputes the viewport size and save it on the view object (if any)
     * @private
     */ PluggableMap1.prototype.updateViewportSize_ = function() {
        var view = this.getView();
        if (view) {
            var size = undefined;
            var computedStyle = getComputedStyle(this.viewport_);
            if (computedStyle.width && computedStyle.height) size = [
                parseInt(computedStyle.width, 10),
                parseInt(computedStyle.height, 10), 
            ];
            view.setViewportSize(size);
        }
    };
    return PluggableMap1;
}((0, _objectJsDefault.default));
/**
 * @param {MapOptions} options Map options.
 * @return {MapOptionsInternal} Internal map options.
 */ function createOptionsInternal(options) {
    /**
     * @type {HTMLElement|Document}
     */ var keyboardEventTarget = null;
    if (options.keyboardEventTarget !== undefined) keyboardEventTarget = typeof options.keyboardEventTarget === "string" ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;
    /**
     * @type {Object<string, *>}
     */ var values = {};
    var layerGroup = options.layers && typeof /** @type {?} */ options.layers.getLayers === "function" ? options.layers : new (0, _groupJsDefault.default)({
        layers: options.layers
    });
    values[(0, _mapPropertyJsDefault.default).LAYERGROUP] = layerGroup;
    values[(0, _mapPropertyJsDefault.default).TARGET] = options.target;
    values[(0, _mapPropertyJsDefault.default).VIEW] = options.view instanceof (0, _viewJsDefault.default) ? options.view : new (0, _viewJsDefault.default)();
    var controls;
    if (options.controls !== undefined) {
        if (Array.isArray(options.controls)) controls = new (0, _collectionJsDefault.default)(options.controls.slice());
        else {
            (0, _assertsJs.assert)(typeof /** @type {?} */ options.controls.getArray === "function", 47); // Expected `controls` to be an array or an `import("./Collection.js").Collection`
            controls = options.controls;
        }
    }
    var interactions;
    if (options.interactions !== undefined) {
        if (Array.isArray(options.interactions)) interactions = new (0, _collectionJsDefault.default)(options.interactions.slice());
        else {
            (0, _assertsJs.assert)(typeof /** @type {?} */ options.interactions.getArray === "function", 48); // Expected `interactions` to be an array or an `import("./Collection.js").Collection`
            interactions = options.interactions;
        }
    }
    var overlays;
    if (options.overlays !== undefined) {
        if (Array.isArray(options.overlays)) overlays = new (0, _collectionJsDefault.default)(options.overlays.slice());
        else {
            (0, _assertsJs.assert)(typeof /** @type {?} */ options.overlays.getArray === "function", 49); // Expected `overlays` to be an array or an `import("./Collection.js").Collection`
            overlays = options.overlays;
        }
    } else overlays = new (0, _collectionJsDefault.default)();
    return {
        controls: controls,
        interactions: interactions,
        keyboardEventTarget: keyboardEventTarget,
        overlays: overlays,
        values: values
    };
}
exports.default = PluggableMap;

},{"./Object.js":"1zG8z","./Collection.js":"gReoh","./CollectionEventType.js":"82Ksf","./events/EventType.js":"hrQJ6","./layer/Layer.js":"8J9Kf","./layer/Group.js":"h4ZNC","./MapBrowserEvent.js":"32Can","./MapBrowserEventHandler.js":"b2FtY","./MapBrowserEventType.js":"fB9ae","./MapEvent.js":"1APU6","./MapEventType.js":"1cFF9","./MapProperty.js":"jMfsr","./ObjectEventType.js":"f2U6i","./pointer/EventType.js":"cVfVH","./render/EventType.js":"5G9JA","./TileQueue.js":"iKkF5","./View.js":"8xbkS","./ViewHint.js":"6THmF","./has.js":"6BDNi","./functions.js":"iqv8I","./transform.js":"1BqUf","./asserts.js":"e4TiF","./extent.js":"6YrVc","./proj.js":"SznqC","./util.js":"pLBjQ","./size.js":"lKEPe","./events.js":"dcspA","./dom.js":"84QzQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h4ZNC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GroupEvent", ()=>GroupEvent);
/**
 * @module ol/layer/Group
 */ var _baseJs = require("./Base.js");
var _baseJsDefault = parcelHelpers.interopDefault(_baseJs);
var _collectionJs = require("../Collection.js");
var _collectionJsDefault = parcelHelpers.interopDefault(_collectionJs);
var _collectionEventTypeJs = require("../CollectionEventType.js");
var _collectionEventTypeJsDefault = parcelHelpers.interopDefault(_collectionEventTypeJs);
var _eventJs = require("../events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _objectEventTypeJs = require("../ObjectEventType.js");
var _objectEventTypeJsDefault = parcelHelpers.interopDefault(_objectEventTypeJs);
var _stateJs = require("../source/State.js");
var _stateJsDefault = parcelHelpers.interopDefault(_stateJs);
var _assertsJs = require("../asserts.js");
var _objJs = require("../obj.js");
var _extentJs = require("../extent.js");
var _utilJs = require("../util.js");
var _eventsJs = require("../events.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {'addlayer'|'removelayer'} EventType
 */ /**
 * @classdesc
 * A layer group triggers 'addlayer' and 'removelayer' events when layers are added to or removed from
 * the group or one of its child groups.  When a layer group is added to or removed from another layer group,
 * a single event will be triggered (instead of one per layer in the group added or removed).
 */ var GroupEvent = /** @class */ function(_super) {
    __extends(GroupEvent1, _super);
    /**
     * @param {EventType} type The event type.
     * @param {BaseLayer} layer The layer.
     */ function GroupEvent1(type, layer) {
        var _this = _super.call(this, type) || this;
        /**
         * The added or removed layer.
         * @type {BaseLayer}
         * @api
         */ _this.layer = layer;
        return _this;
    }
    return GroupEvent1;
}((0, _eventJsDefault.default));
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("./Base").BaseLayerObjectEventTypes|
 *     'change:layers', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("./Base").BaseLayerObjectEventTypes|'change:layers', Return>} GroupOnSignature
 */ /**
 * @typedef {Object} Options
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
 * method was used.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
 * visible.
 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
 * be visible.
 * @property {Array<import("./Base.js").default>|import("../Collection.js").default<import("./Base.js").default>} [layers] Child layers.
 * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
 */ /**
 * @enum {string}
 * @private
 */ var Property = {
    LAYERS: "layers"
};
/**
 * @classdesc
 * A {@link module:ol/Collection~Collection} of layers that are handled together.
 *
 * A generic `change` event is triggered when the group/Collection changes.
 *
 * @api
 */ var LayerGroup = /** @class */ function(_super) {
    __extends(LayerGroup1, _super);
    /**
     * @param {Options} [opt_options] Layer options.
     */ function LayerGroup1(opt_options) {
        var _this = this;
        var options = opt_options || {};
        var baseOptions = /** @type {Options} */ (0, _objJs.assign)({}, options);
        delete baseOptions.layers;
        var layers = options.layers;
        _this = _super.call(this, baseOptions) || this;
        /***
         * @type {GroupOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {GroupOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {GroupOnSignature<void>}
         */ _this.un;
        /**
         * @private
         * @type {Array<import("../events.js").EventsKey>}
         */ _this.layersListenerKeys_ = [];
        /**
         * @private
         * @type {Object<string, Array<import("../events.js").EventsKey>>}
         */ _this.listenerKeys_ = {};
        _this.addChangeListener(Property.LAYERS, _this.handleLayersChanged_);
        if (layers) {
            if (Array.isArray(layers)) layers = new (0, _collectionJsDefault.default)(layers.slice(), {
                unique: true
            });
            else (0, _assertsJs.assert)(typeof /** @type {?} */ layers.getArray === "function", 43); // Expected `layers` to be an array or a `Collection`
        } else layers = new (0, _collectionJsDefault.default)(undefined, {
            unique: true
        });
        _this.setLayers(layers);
        return _this;
    }
    /**
     * @private
     */ LayerGroup1.prototype.handleLayerChange_ = function() {
        this.changed();
    };
    /**
     * @private
     */ LayerGroup1.prototype.handleLayersChanged_ = function() {
        this.layersListenerKeys_.forEach((0, _eventsJs.unlistenByKey));
        this.layersListenerKeys_.length = 0;
        var layers = this.getLayers();
        this.layersListenerKeys_.push((0, _eventsJs.listen)(layers, (0, _collectionEventTypeJsDefault.default).ADD, this.handleLayersAdd_, this), (0, _eventsJs.listen)(layers, (0, _collectionEventTypeJsDefault.default).REMOVE, this.handleLayersRemove_, this));
        for(var id in this.listenerKeys_)this.listenerKeys_[id].forEach((0, _eventsJs.unlistenByKey));
        (0, _objJs.clear)(this.listenerKeys_);
        var layersArray = layers.getArray();
        for(var i = 0, ii = layersArray.length; i < ii; i++){
            var layer = layersArray[i];
            this.registerLayerListeners_(layer);
            this.dispatchEvent(new GroupEvent("addlayer", layer));
        }
        this.changed();
    };
    /**
     * @param {BaseLayer} layer The layer.
     */ LayerGroup1.prototype.registerLayerListeners_ = function(layer) {
        var listenerKeys = [
            (0, _eventsJs.listen)(layer, (0, _objectEventTypeJsDefault.default).PROPERTYCHANGE, this.handleLayerChange_, this),
            (0, _eventsJs.listen)(layer, (0, _eventTypeJsDefault.default).CHANGE, this.handleLayerChange_, this), 
        ];
        if (layer instanceof LayerGroup1) listenerKeys.push((0, _eventsJs.listen)(layer, "addlayer", this.handleLayerGroupAdd_, this), (0, _eventsJs.listen)(layer, "removelayer", this.handleLayerGroupRemove_, this));
        this.listenerKeys_[(0, _utilJs.getUid)(layer)] = listenerKeys;
    };
    /**
     * @param {GroupEvent} event The layer group event.
     */ LayerGroup1.prototype.handleLayerGroupAdd_ = function(event) {
        this.dispatchEvent(new GroupEvent("addlayer", event.layer));
    };
    /**
     * @param {GroupEvent} event The layer group event.
     */ LayerGroup1.prototype.handleLayerGroupRemove_ = function(event) {
        this.dispatchEvent(new GroupEvent("removelayer", event.layer));
    };
    /**
     * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
     * @private
     */ LayerGroup1.prototype.handleLayersAdd_ = function(collectionEvent) {
        var layer = collectionEvent.element;
        this.registerLayerListeners_(layer);
        this.dispatchEvent(new GroupEvent("addlayer", layer));
        this.changed();
    };
    /**
     * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
     * @private
     */ LayerGroup1.prototype.handleLayersRemove_ = function(collectionEvent) {
        var layer = collectionEvent.element;
        var key = (0, _utilJs.getUid)(layer);
        this.listenerKeys_[key].forEach((0, _eventsJs.unlistenByKey));
        delete this.listenerKeys_[key];
        this.dispatchEvent(new GroupEvent("removelayer", layer));
        this.changed();
    };
    /**
     * Returns the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}
     * in this group.
     * @return {!import("../Collection.js").default<import("./Base.js").default>} Collection of
     *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.
     * @observable
     * @api
     */ LayerGroup1.prototype.getLayers = function() {
        return /** @type {!import("../Collection.js").default<import("./Base.js").default>} */ this.get(Property.LAYERS);
    };
    /**
     * Set the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}
     * in this group.
     * @param {!import("../Collection.js").default<import("./Base.js").default>} layers Collection of
     *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.
     * @observable
     * @api
     */ LayerGroup1.prototype.setLayers = function(layers) {
        var collection = this.getLayers();
        if (collection) {
            var currentLayers = collection.getArray();
            for(var i = 0, ii = currentLayers.length; i < ii; ++i)this.dispatchEvent(new GroupEvent("removelayer", currentLayers[i]));
        }
        this.set(Property.LAYERS, layers);
    };
    /**
     * @param {Array<import("./Layer.js").default>} [opt_array] Array of layers (to be modified in place).
     * @return {Array<import("./Layer.js").default>} Array of layers.
     */ LayerGroup1.prototype.getLayersArray = function(opt_array) {
        var array = opt_array !== undefined ? opt_array : [];
        this.getLayers().forEach(function(layer) {
            layer.getLayersArray(array);
        });
        return array;
    };
    /**
     * Get the layer states list and use this groups z-index as the default
     * for all layers in this and nested groups, if it is unset at this point.
     * If opt_states is not provided and this group's z-index is undefined
     * 0 is used a the default z-index.
     * @param {Array<import("./Layer.js").State>} [opt_states] Optional list
     * of layer states (to be modified in place).
     * @return {Array<import("./Layer.js").State>} List of layer states.
     */ LayerGroup1.prototype.getLayerStatesArray = function(opt_states) {
        var states = opt_states !== undefined ? opt_states : [];
        var pos = states.length;
        this.getLayers().forEach(function(layer) {
            layer.getLayerStatesArray(states);
        });
        var ownLayerState = this.getLayerState();
        var defaultZIndex = ownLayerState.zIndex;
        if (!opt_states && ownLayerState.zIndex === undefined) defaultZIndex = 0;
        for(var i = pos, ii = states.length; i < ii; i++){
            var layerState = states[i];
            layerState.opacity *= ownLayerState.opacity;
            layerState.visible = layerState.visible && ownLayerState.visible;
            layerState.maxResolution = Math.min(layerState.maxResolution, ownLayerState.maxResolution);
            layerState.minResolution = Math.max(layerState.minResolution, ownLayerState.minResolution);
            layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);
            layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);
            if (ownLayerState.extent !== undefined) {
                if (layerState.extent !== undefined) layerState.extent = (0, _extentJs.getIntersection)(layerState.extent, ownLayerState.extent);
                else layerState.extent = ownLayerState.extent;
            }
            if (layerState.zIndex === undefined) layerState.zIndex = defaultZIndex;
        }
        return states;
    };
    /**
     * @return {import("../source/State.js").default} Source state.
     */ LayerGroup1.prototype.getSourceState = function() {
        return (0, _stateJsDefault.default).READY;
    };
    return LayerGroup1;
}((0, _baseJsDefault.default));
exports.default = LayerGroup;

},{"./Base.js":"ag0tc","../Collection.js":"gReoh","../CollectionEventType.js":"82Ksf","../events/Event.js":"hwXQP","../events/EventType.js":"hrQJ6","../ObjectEventType.js":"f2U6i","../source/State.js":"gW573","../asserts.js":"e4TiF","../obj.js":"3ssAG","../extent.js":"6YrVc","../util.js":"pLBjQ","../events.js":"dcspA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"32Can":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/MapBrowserEvent
 */ var _mapEventJs = require("./MapEvent.js");
var _mapEventJsDefault = parcelHelpers.interopDefault(_mapEventJs);
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Events emitted as map browser events are instances of this type.
 * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.
 * @template {UIEvent} EVENT
 */ var MapBrowserEvent = /** @class */ function(_super) {
    __extends(MapBrowserEvent1, _super);
    /**
     * @param {string} type Event type.
     * @param {import("./PluggableMap.js").default} map Map.
     * @param {EVENT} originalEvent Original event.
     * @param {boolean} [opt_dragging] Is the map currently being dragged?
     * @param {?import("./PluggableMap.js").FrameState} [opt_frameState] Frame state.
     */ function MapBrowserEvent1(type, map, originalEvent, opt_dragging, opt_frameState) {
        var _this = _super.call(this, type, map, opt_frameState) || this;
        /**
         * The original browser event.
         * @const
         * @type {EVENT}
         * @api
         */ _this.originalEvent = originalEvent;
        /**
         * The map pixel relative to the viewport corresponding to the original browser event.
         * @type {?import("./pixel.js").Pixel}
         */ _this.pixel_ = null;
        /**
         * The coordinate in the user projection corresponding to the original browser event.
         * @type {?import("./coordinate.js").Coordinate}
         */ _this.coordinate_ = null;
        /**
         * Indicates if the map is currently being dragged. Only set for
         * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
         *
         * @type {boolean}
         * @api
         */ _this.dragging = opt_dragging !== undefined ? opt_dragging : false;
        return _this;
    }
    Object.defineProperty(MapBrowserEvent1.prototype, "pixel", {
        /**
         * The map pixel relative to the viewport corresponding to the original event.
         * @type {import("./pixel.js").Pixel}
         * @api
         */ get: function() {
            if (!this.pixel_) this.pixel_ = this.map.getEventPixel(this.originalEvent);
            return this.pixel_;
        },
        set: function(pixel) {
            this.pixel_ = pixel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MapBrowserEvent1.prototype, "coordinate", {
        /**
         * The coordinate corresponding to the original browser event.  This will be in the user
         * projection if one is set.  Otherwise it will be in the view projection.
         * @type {import("./coordinate.js").Coordinate}
         * @api
         */ get: function() {
            if (!this.coordinate_) this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);
            return this.coordinate_;
        },
        set: function(coordinate) {
            this.coordinate_ = coordinate;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Prevents the default browser action.
     * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.
     * @api
     */ MapBrowserEvent1.prototype.preventDefault = function() {
        _super.prototype.preventDefault.call(this);
        if ("preventDefault" in this.originalEvent) /** @type {UIEvent} */ this.originalEvent.preventDefault();
    };
    /**
     * Prevents further propagation of the current event.
     * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.
     * @api
     */ MapBrowserEvent1.prototype.stopPropagation = function() {
        _super.prototype.stopPropagation.call(this);
        if ("stopPropagation" in this.originalEvent) /** @type {UIEvent} */ this.originalEvent.stopPropagation();
    };
    return MapBrowserEvent1;
}((0, _mapEventJsDefault.default));
exports.default = MapBrowserEvent;

},{"./MapEvent.js":"1APU6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1APU6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/MapEvent
 */ var _eventJs = require("./events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Events emitted as map events are instances of this type.
 * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map event.
 */ var MapEvent = /** @class */ function(_super) {
    __extends(MapEvent1, _super);
    /**
     * @param {string} type Event type.
     * @param {import("./PluggableMap.js").default} map Map.
     * @param {?import("./PluggableMap.js").FrameState} [opt_frameState] Frame state.
     */ function MapEvent1(type, map, opt_frameState) {
        var _this = _super.call(this, type) || this;
        /**
         * The map where the event occurred.
         * @type {import("./PluggableMap.js").default}
         * @api
         */ _this.map = map;
        /**
         * The frame state at the time of the event.
         * @type {?import("./PluggableMap.js").FrameState}
         * @api
         */ _this.frameState = opt_frameState !== undefined ? opt_frameState : null;
        return _this;
    }
    return MapEvent1;
}((0, _eventJsDefault.default));
exports.default = MapEvent;

},{"./events/Event.js":"hwXQP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b2FtY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventTypeJs = require("./events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _mapBrowserEventJs = require("./MapBrowserEvent.js");
var _mapBrowserEventJsDefault = parcelHelpers.interopDefault(_mapBrowserEventJs);
var _mapBrowserEventTypeJs = require("./MapBrowserEventType.js");
var _mapBrowserEventTypeJsDefault = parcelHelpers.interopDefault(_mapBrowserEventTypeJs);
var _eventTypeJs1 = require("./pointer/EventType.js");
var _eventTypeJsDefault1 = parcelHelpers.interopDefault(_eventTypeJs1);
var _targetJs = require("./events/Target.js");
var _targetJsDefault = parcelHelpers.interopDefault(_targetJs);
var _hasJs = require("./has.js");
var _functionsJs = require("./functions.js");
var _eventsJs = require("./events.js");
/**
 * @module ol/MapBrowserEventHandler
 */ var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var MapBrowserEventHandler = /** @class */ function(_super) {
    __extends(MapBrowserEventHandler1, _super);
    /**
     * @param {import("./PluggableMap.js").default} map The map with the viewport to listen to events on.
     * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.
     */ function MapBrowserEventHandler1(map, moveTolerance) {
        var _this = _super.call(this, map) || this;
        /**
         * This is the element that we will listen to the real events on.
         * @type {import("./PluggableMap.js").default}
         * @private
         */ _this.map_ = map;
        /**
         * @type {any}
         * @private
         */ _this.clickTimeoutId_;
        /**
         * Emulate dblclick and singleclick. Will be true when only one pointer is active.
         * @type {boolean}
         */ _this.emulateClicks_ = false;
        /**
         * @type {boolean}
         * @private
         */ _this.dragging_ = false;
        /**
         * @type {!Array<import("./events.js").EventsKey>}
         * @private
         */ _this.dragListenerKeys_ = [];
        /**
         * @type {number}
         * @private
         */ _this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;
        /**
         * The most recent "down" type event (or null if none have occurred).
         * Set on pointerdown.
         * @type {PointerEvent|null}
         * @private
         */ _this.down_ = null;
        var element = _this.map_.getViewport();
        /**
         * @type {number}
         * @private
         */ _this.activePointers_ = 0;
        /**
         * @type {!Object<number, boolean>}
         * @private
         */ _this.trackedTouches_ = {};
        _this.element_ = element;
        /**
         * @type {?import("./events.js").EventsKey}
         * @private
         */ _this.pointerdownListenerKey_ = (0, _eventsJs.listen)(element, (0, _eventTypeJsDefault1.default).POINTERDOWN, _this.handlePointerDown_, _this);
        /**
         * @type {PointerEvent}
         * @private
         */ _this.originalPointerMoveEvent_;
        /**
         * @type {?import("./events.js").EventsKey}
         * @private
         */ _this.relayedListenerKey_ = (0, _eventsJs.listen)(element, (0, _eventTypeJsDefault1.default).POINTERMOVE, _this.relayEvent_, _this);
        /**
         * @private
         */ _this.boundHandleTouchMove_ = _this.handleTouchMove_.bind(_this);
        _this.element_.addEventListener((0, _eventTypeJsDefault.default).TOUCHMOVE, _this.boundHandleTouchMove_, (0, _hasJs.PASSIVE_EVENT_LISTENERS) ? {
            passive: false
        } : false);
        return _this;
    }
    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */ MapBrowserEventHandler1.prototype.emulateClick_ = function(pointerEvent) {
        var newEvent1 = new (0, _mapBrowserEventJsDefault.default)((0, _mapBrowserEventTypeJsDefault.default).CLICK, this.map_, pointerEvent);
        this.dispatchEvent(newEvent1);
        if (this.clickTimeoutId_ !== undefined) {
            // double-click
            clearTimeout(this.clickTimeoutId_);
            this.clickTimeoutId_ = undefined;
            newEvent1 = new (0, _mapBrowserEventJsDefault.default)((0, _mapBrowserEventTypeJsDefault.default).DBLCLICK, this.map_, pointerEvent);
            this.dispatchEvent(newEvent1);
        } else // click
        this.clickTimeoutId_ = setTimeout(/** @this {MapBrowserEventHandler} */ (function() {
            this.clickTimeoutId_ = undefined;
            var newEvent = new (0, _mapBrowserEventJsDefault.default)((0, _mapBrowserEventTypeJsDefault.default).SINGLECLICK, this.map_, pointerEvent);
            this.dispatchEvent(newEvent);
        }).bind(this), 250);
    };
    /**
     * Keeps track on how many pointers are currently active.
     *
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */ MapBrowserEventHandler1.prototype.updateActivePointers_ = function(pointerEvent) {
        var event = pointerEvent;
        if (event.type == (0, _mapBrowserEventTypeJsDefault.default).POINTERUP || event.type == (0, _mapBrowserEventTypeJsDefault.default).POINTERCANCEL) delete this.trackedTouches_[event.pointerId];
        else if (event.type == (0, _mapBrowserEventTypeJsDefault.default).POINTERDOWN) this.trackedTouches_[event.pointerId] = true;
        this.activePointers_ = Object.keys(this.trackedTouches_).length;
    };
    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */ MapBrowserEventHandler1.prototype.handlePointerUp_ = function(pointerEvent) {
        this.updateActivePointers_(pointerEvent);
        var newEvent = new (0, _mapBrowserEventJsDefault.default)((0, _mapBrowserEventTypeJsDefault.default).POINTERUP, this.map_, pointerEvent);
        this.dispatchEvent(newEvent);
        // We emulate click events on left mouse button click, touch contact, and pen
        // contact. isMouseActionButton returns true in these cases (evt.button is set
        // to 0).
        // See http://www.w3.org/TR/pointerevents/#button-states
        // We only fire click, singleclick, and doubleclick if nobody has called
        // event.preventDefault().
        if (this.emulateClicks_ && !newEvent.defaultPrevented && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) this.emulateClick_(this.down_);
        if (this.activePointers_ === 0) {
            this.dragListenerKeys_.forEach((0, _eventsJs.unlistenByKey));
            this.dragListenerKeys_.length = 0;
            this.dragging_ = false;
            this.down_ = null;
        }
    };
    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @return {boolean} If the left mouse button was pressed.
     * @private
     */ MapBrowserEventHandler1.prototype.isMouseActionButton_ = function(pointerEvent) {
        return pointerEvent.button === 0;
    };
    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */ MapBrowserEventHandler1.prototype.handlePointerDown_ = function(pointerEvent) {
        this.emulateClicks_ = this.activePointers_ === 0;
        this.updateActivePointers_(pointerEvent);
        var newEvent = new (0, _mapBrowserEventJsDefault.default)((0, _mapBrowserEventTypeJsDefault.default).POINTERDOWN, this.map_, pointerEvent);
        this.dispatchEvent(newEvent);
        // Store a copy of the down event
        this.down_ = {};
        for(var property in pointerEvent){
            var value = pointerEvent[property];
            this.down_[property] = typeof value === "function" ? (0, _functionsJs.VOID) : value;
        }
        if (this.dragListenerKeys_.length === 0) {
            var doc = this.map_.getOwnerDocument();
            this.dragListenerKeys_.push((0, _eventsJs.listen)(doc, (0, _mapBrowserEventTypeJsDefault.default).POINTERMOVE, this.handlePointerMove_, this), (0, _eventsJs.listen)(doc, (0, _mapBrowserEventTypeJsDefault.default).POINTERUP, this.handlePointerUp_, this), /* Note that the listener for `pointercancel is set up on
             * `pointerEventHandler_` and not `documentPointerEventHandler_` like
             * the `pointerup` and `pointermove` listeners.
             *
             * The reason for this is the following: `TouchSource.vacuumTouches_()`
             * issues `pointercancel` events, when there was no `touchend` for a
             * `touchstart`. Now, let's say a first `touchstart` is registered on
             * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
             * But `documentPointerEventHandler_` doesn't know about the first
             * `touchstart`. If there is no `touchend` for the `touchstart`, we can
             * only receive a `touchcancel` from `pointerEventHandler_`, because it is
             * only registered there.
             */ (0, _eventsJs.listen)(this.element_, (0, _mapBrowserEventTypeJsDefault.default).POINTERCANCEL, this.handlePointerUp_, this));
            if (this.element_.getRootNode && this.element_.getRootNode() !== doc) this.dragListenerKeys_.push((0, _eventsJs.listen)(this.element_.getRootNode(), (0, _mapBrowserEventTypeJsDefault.default).POINTERUP, this.handlePointerUp_, this));
        }
    };
    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */ MapBrowserEventHandler1.prototype.handlePointerMove_ = function(pointerEvent) {
        // Between pointerdown and pointerup, pointermove events are triggered.
        // To avoid a 'false' touchmove event to be dispatched, we test if the pointer
        // moved a significant distance.
        if (this.isMoving_(pointerEvent)) {
            this.dragging_ = true;
            var newEvent = new (0, _mapBrowserEventJsDefault.default)((0, _mapBrowserEventTypeJsDefault.default).POINTERDRAG, this.map_, pointerEvent, this.dragging_);
            this.dispatchEvent(newEvent);
        }
    };
    /**
     * Wrap and relay a pointer event.  Note that this requires that the type
     * string for the MapBrowserEvent matches the PointerEvent type.
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */ MapBrowserEventHandler1.prototype.relayEvent_ = function(pointerEvent) {
        this.originalPointerMoveEvent_ = pointerEvent;
        var dragging = !!(this.down_ && this.isMoving_(pointerEvent));
        this.dispatchEvent(new (0, _mapBrowserEventJsDefault.default)(pointerEvent.type, this.map_, pointerEvent, dragging));
    };
    /**
     * Flexible handling of a `touch-action: none` css equivalent: because calling
     * `preventDefault()` on a `pointermove` event does not stop native page scrolling
     * and zooming, we also listen for `touchmove` and call `preventDefault()` on it
     * when an interaction (currently `DragPan` handles the event.
     * @param {TouchEvent} event Event.
     * @private
     */ MapBrowserEventHandler1.prototype.handleTouchMove_ = function(event) {
        // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`
        // may not be initialized yet when we get here on a platform without native pointer events.
        var originalEvent = this.originalPointerMoveEvent_;
        if ((!originalEvent || originalEvent.defaultPrevented) && (typeof event.cancelable !== "boolean" || event.cancelable === true)) event.preventDefault();
    };
    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @return {boolean} Is moving.
     * @private
     */ MapBrowserEventHandler1.prototype.isMoving_ = function(pointerEvent) {
        return this.dragging_ || Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ || Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;
    };
    /**
     * Clean up.
     */ MapBrowserEventHandler1.prototype.disposeInternal = function() {
        if (this.relayedListenerKey_) {
            (0, _eventsJs.unlistenByKey)(this.relayedListenerKey_);
            this.relayedListenerKey_ = null;
        }
        this.element_.removeEventListener((0, _eventTypeJsDefault.default).TOUCHMOVE, this.boundHandleTouchMove_);
        if (this.pointerdownListenerKey_) {
            (0, _eventsJs.unlistenByKey)(this.pointerdownListenerKey_);
            this.pointerdownListenerKey_ = null;
        }
        this.dragListenerKeys_.forEach((0, _eventsJs.unlistenByKey));
        this.dragListenerKeys_.length = 0;
        this.element_ = null;
        _super.prototype.disposeInternal.call(this);
    };
    return MapBrowserEventHandler1;
}((0, _targetJsDefault.default));
exports.default = MapBrowserEventHandler;

},{"./events/EventType.js":"hrQJ6","./MapBrowserEvent.js":"32Can","./MapBrowserEventType.js":"fB9ae","./pointer/EventType.js":"cVfVH","./events/Target.js":"7T5Yi","./has.js":"6BDNi","./functions.js":"iqv8I","./events.js":"dcspA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fB9ae":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/MapBrowserEventType
 */ var _eventTypeJs = require("./events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
/**
 * Constants for event names.
 * @enum {string}
 */ exports.default = {
    /**
     * A true single click with no dragging and no double click. Note that this
     * event is delayed by 250 ms to ensure that it is not a double click.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
     * @api
     */ SINGLECLICK: "singleclick",
    /**
     * A click with no dragging. A double click will fire two of this.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
     * @api
     */ CLICK: (0, _eventTypeJsDefault.default).CLICK,
    /**
     * A true double click, with no dragging.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
     * @api
     */ DBLCLICK: (0, _eventTypeJsDefault.default).DBLCLICK,
    /**
     * Triggered when a pointer is dragged.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
     * @api
     */ POINTERDRAG: "pointerdrag",
    /**
     * Triggered when a pointer is moved. Note that on touch devices this is
     * triggered when the map is panned, so is not the same as mousemove.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
     * @api
     */ POINTERMOVE: "pointermove",
    POINTERDOWN: "pointerdown",
    POINTERUP: "pointerup",
    POINTEROVER: "pointerover",
    POINTEROUT: "pointerout",
    POINTERENTER: "pointerenter",
    POINTERLEAVE: "pointerleave",
    POINTERCANCEL: "pointercancel"
}; /***
 * @typedef {'singleclick'|'click'|'dblclick'|'pointerdrag'|'pointermove'} Types
 */ 

},{"./events/EventType.js":"hrQJ6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iKkF5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {import('./PluggableMap.js').FrameState} frameState Frame state.
 * @param {import("./Tile.js").default} tile Tile.
 * @param {string} tileSourceKey Tile source key.
 * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
 * @param {number} tileResolution Tile resolution.
 * @return {number} Tile priority.
 */ parcelHelpers.export(exports, "getTilePriority", ()=>getTilePriority);
/**
 * @module ol/TileQueue
 */ var _eventTypeJs = require("./events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _priorityQueueJs = require("./structs/PriorityQueue.js");
var _priorityQueueJsDefault = parcelHelpers.interopDefault(_priorityQueueJs);
var _tileStateJs = require("./TileState.js");
var _tileStateJsDefault = parcelHelpers.interopDefault(_tileStateJs);
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {function(import("./Tile.js").default, string, import("./coordinate.js").Coordinate, number): number} PriorityFunction
 */ var TileQueue = /** @class */ function(_super) {
    __extends(TileQueue1, _super);
    /**
     * @param {PriorityFunction} tilePriorityFunction Tile priority function.
     * @param {function(): ?} tileChangeCallback Function called on each tile change event.
     */ function TileQueue1(tilePriorityFunction, tileChangeCallback) {
        var _this = _super.call(this, /**
         * @param {Array} element Element.
         * @return {number} Priority.
         */ function(element) {
            return tilePriorityFunction.apply(null, element);
        }, /**
         * @param {Array} element Element.
         * @return {string} Key.
         */ function(element) {
            return /** @type {import("./Tile.js").default} */ element[0].getKey();
        }) || this;
        /** @private */ _this.boundHandleTileChange_ = _this.handleTileChange.bind(_this);
        /**
         * @private
         * @type {function(): ?}
         */ _this.tileChangeCallback_ = tileChangeCallback;
        /**
         * @private
         * @type {number}
         */ _this.tilesLoading_ = 0;
        /**
         * @private
         * @type {!Object<string,boolean>}
         */ _this.tilesLoadingKeys_ = {};
        return _this;
    }
    /**
     * @param {Array} element Element.
     * @return {boolean} The element was added to the queue.
     */ TileQueue1.prototype.enqueue = function(element) {
        var added = _super.prototype.enqueue.call(this, element);
        if (added) {
            var tile = element[0];
            tile.addEventListener((0, _eventTypeJsDefault.default).CHANGE, this.boundHandleTileChange_);
        }
        return added;
    };
    /**
     * @return {number} Number of tiles loading.
     */ TileQueue1.prototype.getTilesLoading = function() {
        return this.tilesLoading_;
    };
    /**
     * @param {import("./events/Event.js").default} event Event.
     * @protected
     */ TileQueue1.prototype.handleTileChange = function(event) {
        var tile = event.target;
        var state = tile.getState();
        if (state === (0, _tileStateJsDefault.default).LOADED || state === (0, _tileStateJsDefault.default).ERROR || state === (0, _tileStateJsDefault.default).EMPTY) {
            tile.removeEventListener((0, _eventTypeJsDefault.default).CHANGE, this.boundHandleTileChange_);
            var tileKey = tile.getKey();
            if (tileKey in this.tilesLoadingKeys_) {
                delete this.tilesLoadingKeys_[tileKey];
                --this.tilesLoading_;
            }
            this.tileChangeCallback_();
        }
    };
    /**
     * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
     * @param {number} maxNewLoads Maximum number of new tiles to load.
     */ TileQueue1.prototype.loadMoreTiles = function(maxTotalLoading, maxNewLoads) {
        var newLoads = 0;
        var state, tile, tileKey;
        while(this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads && this.getCount() > 0){
            tile = this.dequeue()[0];
            tileKey = tile.getKey();
            state = tile.getState();
            if (state === (0, _tileStateJsDefault.default).IDLE && !(tileKey in this.tilesLoadingKeys_)) {
                this.tilesLoadingKeys_[tileKey] = true;
                ++this.tilesLoading_;
                ++newLoads;
                tile.load();
            }
        }
    };
    return TileQueue1;
}((0, _priorityQueueJsDefault.default));
exports.default = TileQueue;
function getTilePriority(frameState, tile, tileSourceKey, tileCenter, tileResolution) {
    // Filter out tiles at higher zoom levels than the current zoom level, or that
    // are outside the visible extent.
    if (!frameState || !(tileSourceKey in frameState.wantedTiles)) return 0, _priorityQueueJs.DROP;
    if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) return 0, _priorityQueueJs.DROP;
    // Prioritize the highest zoom level tiles closest to the focus.
    // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).
    // Within a zoom level, tiles are prioritized by the distance in pixels between
    // the center of the tile and the center of the viewport.  The factor of 65536
    // means that the prioritization should behave as desired for tiles up to
    // 65536 * Math.log(2) = 45426 pixels from the focus.
    var center = frameState.viewState.center;
    var deltaX = tileCenter[0] - center[0];
    var deltaY = tileCenter[1] - center[1];
    return 65536 * Math.log(tileResolution) + Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;
}

},{"./events/EventType.js":"hrQJ6","./structs/PriorityQueue.js":"jDGXE","./TileState.js":"2fodI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jDGXE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DROP", ()=>DROP);
/**
 * @module ol/structs/PriorityQueue
 */ var _assertsJs = require("../asserts.js");
var _objJs = require("../obj.js");
var DROP = Infinity;
/**
 * @classdesc
 * Priority queue.
 *
 * The implementation is inspired from the Closure Library's Heap class and
 * Python's heapq module.
 *
 * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js
 * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.
 *
 * @template T
 */ var PriorityQueue = /** @class */ function() {
    /**
     * @param {function(T): number} priorityFunction Priority function.
     * @param {function(T): string} keyFunction Key function.
     */ function PriorityQueue1(priorityFunction, keyFunction) {
        /**
         * @type {function(T): number}
         * @private
         */ this.priorityFunction_ = priorityFunction;
        /**
         * @type {function(T): string}
         * @private
         */ this.keyFunction_ = keyFunction;
        /**
         * @type {Array<T>}
         * @private
         */ this.elements_ = [];
        /**
         * @type {Array<number>}
         * @private
         */ this.priorities_ = [];
        /**
         * @type {!Object<string, boolean>}
         * @private
         */ this.queuedElements_ = {};
    }
    /**
     * FIXME empty description for jsdoc
     */ PriorityQueue1.prototype.clear = function() {
        this.elements_.length = 0;
        this.priorities_.length = 0;
        (0, _objJs.clear)(this.queuedElements_);
    };
    /**
     * Remove and return the highest-priority element. O(log N).
     * @return {T} Element.
     */ PriorityQueue1.prototype.dequeue = function() {
        var elements = this.elements_;
        var priorities = this.priorities_;
        var element = elements[0];
        if (elements.length == 1) {
            elements.length = 0;
            priorities.length = 0;
        } else {
            elements[0] = elements.pop();
            priorities[0] = priorities.pop();
            this.siftUp_(0);
        }
        var elementKey = this.keyFunction_(element);
        delete this.queuedElements_[elementKey];
        return element;
    };
    /**
     * Enqueue an element. O(log N).
     * @param {T} element Element.
     * @return {boolean} The element was added to the queue.
     */ PriorityQueue1.prototype.enqueue = function(element) {
        (0, _assertsJs.assert)(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue
        var priority = this.priorityFunction_(element);
        if (priority != DROP) {
            this.elements_.push(element);
            this.priorities_.push(priority);
            this.queuedElements_[this.keyFunction_(element)] = true;
            this.siftDown_(0, this.elements_.length - 1);
            return true;
        }
        return false;
    };
    /**
     * @return {number} Count.
     */ PriorityQueue1.prototype.getCount = function() {
        return this.elements_.length;
    };
    /**
     * Gets the index of the left child of the node at the given index.
     * @param {number} index The index of the node to get the left child for.
     * @return {number} The index of the left child.
     * @private
     */ PriorityQueue1.prototype.getLeftChildIndex_ = function(index) {
        return index * 2 + 1;
    };
    /**
     * Gets the index of the right child of the node at the given index.
     * @param {number} index The index of the node to get the right child for.
     * @return {number} The index of the right child.
     * @private
     */ PriorityQueue1.prototype.getRightChildIndex_ = function(index) {
        return index * 2 + 2;
    };
    /**
     * Gets the index of the parent of the node at the given index.
     * @param {number} index The index of the node to get the parent for.
     * @return {number} The index of the parent.
     * @private
     */ PriorityQueue1.prototype.getParentIndex_ = function(index) {
        return index - 1 >> 1;
    };
    /**
     * Make this a heap. O(N).
     * @private
     */ PriorityQueue1.prototype.heapify_ = function() {
        var i;
        for(i = (this.elements_.length >> 1) - 1; i >= 0; i--)this.siftUp_(i);
    };
    /**
     * @return {boolean} Is empty.
     */ PriorityQueue1.prototype.isEmpty = function() {
        return this.elements_.length === 0;
    };
    /**
     * @param {string} key Key.
     * @return {boolean} Is key queued.
     */ PriorityQueue1.prototype.isKeyQueued = function(key) {
        return key in this.queuedElements_;
    };
    /**
     * @param {T} element Element.
     * @return {boolean} Is queued.
     */ PriorityQueue1.prototype.isQueued = function(element) {
        return this.isKeyQueued(this.keyFunction_(element));
    };
    /**
     * @param {number} index The index of the node to move down.
     * @private
     */ PriorityQueue1.prototype.siftUp_ = function(index) {
        var elements = this.elements_;
        var priorities = this.priorities_;
        var count = elements.length;
        var element = elements[index];
        var priority = priorities[index];
        var startIndex = index;
        while(index < count >> 1){
            var lIndex = this.getLeftChildIndex_(index);
            var rIndex = this.getRightChildIndex_(index);
            var smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex] ? rIndex : lIndex;
            elements[index] = elements[smallerChildIndex];
            priorities[index] = priorities[smallerChildIndex];
            index = smallerChildIndex;
        }
        elements[index] = element;
        priorities[index] = priority;
        this.siftDown_(startIndex, index);
    };
    /**
     * @param {number} startIndex The index of the root.
     * @param {number} index The index of the node to move up.
     * @private
     */ PriorityQueue1.prototype.siftDown_ = function(startIndex, index) {
        var elements = this.elements_;
        var priorities = this.priorities_;
        var element = elements[index];
        var priority = priorities[index];
        while(index > startIndex){
            var parentIndex = this.getParentIndex_(index);
            if (priorities[parentIndex] > priority) {
                elements[index] = elements[parentIndex];
                priorities[index] = priorities[parentIndex];
                index = parentIndex;
            } else break;
        }
        elements[index] = element;
        priorities[index] = priority;
    };
    /**
     * FIXME empty description for jsdoc
     */ PriorityQueue1.prototype.reprioritize = function() {
        var priorityFunction = this.priorityFunction_;
        var elements = this.elements_;
        var priorities = this.priorities_;
        var index = 0;
        var n = elements.length;
        var element, i, priority;
        for(i = 0; i < n; ++i){
            element = elements[i];
            priority = priorityFunction(element);
            if (priority == DROP) delete this.queuedElements_[this.keyFunction_(element)];
            else {
                priorities[index] = priority;
                elements[index++] = element;
            }
        }
        elements.length = index;
        priorities.length = index;
        this.heapify_();
    };
    return PriorityQueue1;
}();
exports.default = PriorityQueue;

},{"../asserts.js":"e4TiF","../obj.js":"3ssAG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2fodI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/TileState
 */ /**
 * @enum {number}
 */ exports.default = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    /**
     * Indicates that tile loading failed
     * @type {number}
     */ ERROR: 3,
    EMPTY: 4
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8xbkS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {ViewOptions} options View options.
 * @return {import("./centerconstraint.js").Type} The constraint.
 */ parcelHelpers.export(exports, "createCenterConstraint", ()=>createCenterConstraint);
/**
 * @param {ViewOptions} options View options.
 * @return {{constraint: import("./resolutionconstraint.js").Type, maxResolution: number,
 *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.
 */ parcelHelpers.export(exports, "createResolutionConstraint", ()=>createResolutionConstraint);
/**
 * @param {ViewOptions} options View options.
 * @return {import("./rotationconstraint.js").Type} Rotation constraint.
 */ parcelHelpers.export(exports, "createRotationConstraint", ()=>createRotationConstraint);
/**
 * Determine if an animation involves no view change.
 * @param {Animation} animation The animation.
 * @return {boolean} The animation involves no view change.
 */ parcelHelpers.export(exports, "isNoopAnimation", ()=>isNoopAnimation);
/**
 * @module ol/View
 */ var _objectJs = require("./Object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _geometryTypeJs = require("./geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _unitsJs = require("./proj/Units.js");
var _unitsJsDefault = parcelHelpers.interopDefault(_unitsJs);
var _viewHintJs = require("./ViewHint.js");
var _viewHintJsDefault = parcelHelpers.interopDefault(_viewHintJs);
var _viewPropertyJs = require("./ViewProperty.js");
var _viewPropertyJsDefault = parcelHelpers.interopDefault(_viewPropertyJs);
var _commonJs = require("./tilegrid/common.js");
var _projJs = require("./proj.js");
var _functionsJs = require("./functions.js");
var _coordinateJs = require("./coordinate.js");
var _assertsJs = require("./asserts.js");
var _objJs = require("./obj.js");
var _centerconstraintJs = require("./centerconstraint.js");
var _mathJs = require("./math.js");
var _resolutionconstraintJs = require("./resolutionconstraint.js");
var _rotationconstraintJs = require("./rotationconstraint.js");
var _easingJs = require("./easing.js");
var _extentJs = require("./extent.js");
var _arrayJs = require("./array.js");
var _polygonJs = require("./geom/Polygon.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * An animation configuration
 *
 * @typedef {Object} Animation
 * @property {import("./coordinate.js").Coordinate} [sourceCenter] Source center.
 * @property {import("./coordinate.js").Coordinate} [targetCenter] Target center.
 * @property {number} [sourceResolution] Source resolution.
 * @property {number} [targetResolution] Target resolution.
 * @property {number} [sourceRotation] Source rotation.
 * @property {number} [targetRotation] Target rotation.
 * @property {import("./coordinate.js").Coordinate} [anchor] Anchor.
 * @property {number} start Start.
 * @property {number} duration Duration.
 * @property {boolean} complete Complete.
 * @property {function(number):number} easing Easing.
 * @property {function(boolean):void} callback Callback.
 */ /**
 * @typedef {Object} Constraints
 * @property {import("./centerconstraint.js").Type} center Center.
 * @property {import("./resolutionconstraint.js").Type} resolution Resolution.
 * @property {import("./rotationconstraint.js").Type} rotation Rotation.
 */ /**
 * @typedef {Object} FitOptions
 * @property {import("./size.js").Size} [size] The size in pixels of the box to fit
 * the extent into. Default is the current size of the first map in the DOM that
 * uses this view, or `[100, 100]` if no such map is found.
 * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be
 * cleared inside the view. Values in the array are top, right, bottom and left
 * padding.
 * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,
 * get the nearest extent instead of the closest that actually fits the view.
 * @property {number} [minResolution=0] Minimum resolution that we zoom to.
 * @property {number} [maxZoom] Maximum zoom level that we zoom to. If
 * `minResolution` is given, this property is ignored.
 * @property {number} [duration] The duration of the animation in milliseconds.
 * By default, there is no animation to the target extent.
 * @property {function(number):number} [easing] The easing function used during
 * the animation (defaults to {@link module:ol/easing.inAndOut}).
 * The function will be called for each frame with a number representing a
 * fraction of the animation's duration.  The function should return a number
 * between 0 and 1 representing the progress toward the destination state.
 * @property {function(boolean):void} [callback] Function called when the view is in
 * its final position. The callback will be called with `true` if the animation
 * series completed on its own or `false` if it was cancelled.
 */ /**
 * @typedef {Object} ViewOptions
 * @property {import("./coordinate.js").Coordinate} [center] The initial center for
 * the view. If a user projection is not set, the coordinate system for the center is
 * specified with the `projection` option. Layer sources will not be fetched if this
 * is not set, but the center can be set later with {@link #setCenter}.
 * @property {boolean|number} [constrainRotation=true] Rotation constraint.
 * `false` means no constraint. `true` means no constraint, but snap to zero
 * near zero. A number constrains the rotation to that number of values. For
 * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.
 * @property {boolean} [enableRotation=true] Enable rotation.
 * If `false`, a rotation constraint that always sets the rotation to zero is
 * used. The `constrainRotation` option has no effect if `enableRotation` is
 * `false`.
 * @property {import("./extent.js").Extent} [extent] The extent that constrains the
 * view, in other words, nothing outside of this extent can be visible on the map.
 * @property {boolean} [constrainOnlyCenter=false] If true, the extent
 * constraint will only apply to the view center and not the whole extent.
 * @property {boolean} [smoothExtentConstraint=true] If true, the extent
 * constraint will be applied smoothly, i.e. allow the view to go slightly outside
 * of the given `extent`.
 * @property {number} [maxResolution] The maximum resolution used to determine
 * the resolution constraint. It is used together with `minResolution` (or
 * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way
 * that the projection's validity extent fits in a 256x256 px tile. If the
 * projection is Spherical Mercator (the default) then `maxResolution` defaults
 * to `40075016.68557849 / 256 = 156543.03392804097`.
 * @property {number} [minResolution] The minimum resolution used to determine
 * the resolution constraint.  It is used together with `maxResolution` (or
 * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29
 * zoom levels (with a factor of 2). If the projection is Spherical Mercator
 * (the default) then `minResolution` defaults to
 * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.
 * @property {number} [maxZoom=28] The maximum zoom level used to determine the
 * resolution constraint. It is used together with `minZoom` (or
 * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also
 * provided, it is given precedence over `maxZoom`.
 * @property {number} [minZoom=0] The minimum zoom level used to determine the
 * resolution constraint. It is used together with `maxZoom` (or
 * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also
 * provided, it is given precedence over `minZoom`.
 * @property {boolean} [multiWorld=false] If `false` the view is constrained so
 * only one world is visible, and you cannot pan off the edge.  If `true` the map
 * may show multiple worlds at low zoom levels.  Only used if the `projection` is
 * global.  Note that if `extent` is also provided it is given precedence.
 * @property {boolean} [constrainResolution=false] If true, the view will always
 * animate to the closest zoom level after an interaction; false means
 * intermediary zoom levels are allowed.
 * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution
 * min/max values will be applied smoothly, i. e. allow the view to exceed slightly
 * the given resolution or zoom bounds.
 * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to
 * show the full configured extent. By default, when a view is configured with an
 * extent, users will not be able to zoom out so the viewport exceeds the extent in
 * either dimension. This means the full extent may not be visible if the viewport
 * is taller or wider than the aspect ratio of the configured extent. If
 * showFullExtent is true, the user will be able to zoom out so that the viewport
 * exceeds the height or width of the configured extent, but not both, allowing the
 * full extent to be shown.
 * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857'] The
 * projection. The default is Spherical Mercator.
 * @property {number} [resolution] The initial resolution for the view. The
 * units are `projection` units per pixel (e.g. meters per pixel). An
 * alternative to setting this is to set `zoom`. Layer sources will not be
 * fetched if neither this nor `zoom` are defined, but they can be set later
 * with {@link #setZoom} or {@link #setResolution}.
 * @property {Array<number>} [resolutions] Resolutions that determine the
 * zoom levels if specified. The index in the array corresponds to the zoom level,
 * therefore the resolution values have to be in descending order. It also constrains
 * the resolution by the minimum and maximum value. If set the `maxResolution`,
 * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.
 * @property {number} [rotation=0] The initial rotation for the view in radians
 * (positive rotation clockwise, 0 means North).
 * @property {number} [zoom] Only used if `resolution` is not defined. Zoom
 * level used to calculate the initial resolution for the view.
 * @property {number} [zoomFactor=2] The zoom factor used to compute the
 * corresponding resolution.
 * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).
 * If the map viewport is partially covered with other content (overlays) along
 * its edges, this setting allows to shift the center of the viewport away from
 * that content. The order of the values is top, right, bottom, left.
 */ /**
 * @typedef {Object} AnimationOptions
 * @property {import("./coordinate.js").Coordinate} [center] The center of the view at the end of
 * the animation.
 * @property {number} [zoom] The zoom level of the view at the end of the
 * animation. This takes precedence over `resolution`.
 * @property {number} [resolution] The resolution of the view at the end
 * of the animation.  If `zoom` is also provided, this option will be ignored.
 * @property {number} [rotation] The rotation of the view at the end of
 * the animation.
 * @property {import("./coordinate.js").Coordinate} [anchor] Optional anchor to remain fixed
 * during a rotation or resolution animation.
 * @property {number} [duration=1000] The duration of the animation in milliseconds.
 * @property {function(number):number} [easing] The easing function used
 * during the animation (defaults to {@link module:ol/easing.inAndOut}).
 * The function will be called for each frame with a number representing a
 * fraction of the animation's duration.  The function should return a number
 * between 0 and 1 representing the progress toward the destination state.
 */ /**
 * @typedef {Object} State
 * @property {import("./coordinate.js").Coordinate} center Center.
 * @property {import("./proj/Projection.js").default} projection Projection.
 * @property {number} resolution Resolution.
 * @property {import("./coordinate.js").Coordinate} [nextCenter] The next center during an animation series.
 * @property {number} [nextResolution] The next resolution during an animation series.
 * @property {number} [nextRotation] The next rotation during an animation series.
 * @property {number} rotation Rotation.
 * @property {number} zoom Zoom.
 */ /**
 * Default min zoom level for the map view.
 * @type {number}
 */ var DEFAULT_MIN_ZOOM = 0;
/**
 * @typedef {import("./ObjectEventType").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes
 */ /***
 * @template Return
 * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
 *   import("./Observable").OnSignature<ViewObjectEventTypes, import("./Object").ObjectEvent, Return> &
 *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature
 */ /**
 * @classdesc
 * A View object represents a simple 2D view of the map.
 *
 * This is the object to act upon to change the center, resolution,
 * and rotation of the map.
 *
 * A View has a `projection`. The projection determines the
 * coordinate system of the center, and its units determine the units of the
 * resolution (projection units per pixel). The default projection is
 * Web Mercator (EPSG:3857).
 *
 * ### The view states
 *
 * A View is determined by three states: `center`, `resolution`,
 * and `rotation`. Each state has a corresponding getter and setter, e.g.
 * `getCenter` and `setCenter` for the `center` state.
 *
 * The `zoom` state is actually not saved on the view: all computations
 * internally use the `resolution` state. Still, the `setZoom` and `getZoom`
 * methods are available, as well as `getResolutionForZoom` and
 * `getZoomForResolution` to switch from one system to the other.
 *
 * ### The constraints
 *
 * `setCenter`, `setResolution` and `setRotation` can be used to change the
 * states of the view, but any constraint defined in the constructor will
 * be applied along the way.
 *
 * A View object can have a *resolution constraint*, a *rotation constraint*
 * and a *center constraint*.
 *
 * The *resolution constraint* typically restricts min/max values and
 * snaps to specific resolutions. It is determined by the following
 * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.
 * If `resolutions` is set, the other three options are ignored. See
 * documentation for each option for more information. By default, the view
 * only has a min/max restriction and allow intermediary zoom levels when
 * pinch-zooming for example.
 *
 * The *rotation constraint* snaps to specific angles. It is determined
 * by the following options: `enableRotation` and `constrainRotation`.
 * By default rotation is allowed and its value is snapped to zero when approaching the
 * horizontal.
 *
 * The *center constraint* is determined by the `extent` option. By
 * default the view center is not constrained at all.
 *
 * ### Changing the view state
 *
 * It is important to note that `setZoom`, `setResolution`, `setCenter` and
 * `setRotation` are subject to the above mentioned constraints. As such, it
 * may sometimes not be possible to know in advance the resulting state of the
 * View. For example, calling `setResolution(10)` does not guarantee that
 * `getResolution()` will return `10`.
 *
 * A consequence of this is that, when applying a delta on the view state, one
 * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`
 * rather than the corresponding setters. This will let view do its internal
 * computations. Besides, the `adjust*` methods also take an `opt_anchor`
 * argument which allows specifying an origin for the transformation.
 *
 * ### Interacting with the view
 *
 * View constraints are usually only applied when the view is *at rest*, meaning that
 * no interaction or animation is ongoing. As such, if the user puts the view in a
 * state that is not equivalent to a constrained one (e.g. rotating the view when
 * the snap angle is 0), an animation will be triggered at the interaction end to
 * put back the view to a stable state;
 *
 * @api
 */ var View = /** @class */ function(_super) {
    __extends(View1, _super);
    /**
     * @param {ViewOptions} [opt_options] View options.
     */ function View1(opt_options) {
        var _this = _super.call(this) || this;
        /***
         * @type {ViewOnSignature<import("./events").EventsKey>}
         */ _this.on;
        /***
         * @type {ViewOnSignature<import("./events").EventsKey>}
         */ _this.once;
        /***
         * @type {ViewOnSignature<void>}
         */ _this.un;
        var options = (0, _objJs.assign)({}, opt_options);
        /**
         * @private
         * @type {Array<number>}
         */ _this.hints_ = [
            0,
            0
        ];
        /**
         * @private
         * @type {Array<Array<Animation>>}
         */ _this.animations_ = [];
        /**
         * @private
         * @type {number|undefined}
         */ _this.updateAnimationKey_;
        /**
         * @private
         * @const
         * @type {import("./proj/Projection.js").default}
         */ _this.projection_ = (0, _projJs.createProjection)(options.projection, "EPSG:3857");
        /**
         * @private
         * @type {import("./size.js").Size}
         */ _this.viewportSize_ = [
            100,
            100
        ];
        /**
         * @private
         * @type {import("./coordinate.js").Coordinate|undefined}
         */ _this.targetCenter_ = null;
        /**
         * @private
         * @type {number|undefined}
         */ _this.targetResolution_;
        /**
         * @private
         * @type {number|undefined}
         */ _this.targetRotation_;
        /**
         * @private
         * @type {import("./coordinate.js").Coordinate}
         */ _this.nextCenter_ = null;
        /**
         * @private
         * @type {number}
         */ _this.nextResolution_;
        /**
         * @private
         * @type {number}
         */ _this.nextRotation_;
        /**
         * @private
         * @type {import("./coordinate.js").Coordinate|undefined}
         */ _this.cancelAnchor_ = undefined;
        if (options.projection) (0, _projJs.disableCoordinateWarning)();
        if (options.center) options.center = (0, _projJs.fromUserCoordinate)(options.center, _this.projection_);
        if (options.extent) options.extent = (0, _projJs.fromUserExtent)(options.extent, _this.projection_);
        _this.applyOptions_(options);
        return _this;
    }
    /**
     * Set up the view with the given options.
     * @param {ViewOptions} options View options.
     */ View1.prototype.applyOptions_ = function(options) {
        var properties = (0, _objJs.assign)({}, options);
        for(var key in 0, _viewPropertyJsDefault.default)delete properties[key];
        this.setProperties(properties, true);
        var resolutionConstraintInfo = createResolutionConstraint(options);
        /**
         * @private
         * @type {number}
         */ this.maxResolution_ = resolutionConstraintInfo.maxResolution;
        /**
         * @private
         * @type {number}
         */ this.minResolution_ = resolutionConstraintInfo.minResolution;
        /**
         * @private
         * @type {number}
         */ this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;
        /**
         * @private
         * @type {Array<number>|undefined}
         */ this.resolutions_ = options.resolutions;
        /**
         * @type {Array<number>|undefined}
         * @private
         */ this.padding_ = options.padding;
        /**
         * @private
         * @type {number}
         */ this.minZoom_ = resolutionConstraintInfo.minZoom;
        var centerConstraint = createCenterConstraint(options);
        var resolutionConstraint = resolutionConstraintInfo.constraint;
        var rotationConstraint = createRotationConstraint(options);
        /**
         * @private
         * @type {Constraints}
         */ this.constraints_ = {
            center: centerConstraint,
            resolution: resolutionConstraint,
            rotation: rotationConstraint
        };
        this.setRotation(options.rotation !== undefined ? options.rotation : 0);
        this.setCenterInternal(options.center !== undefined ? options.center : null);
        if (options.resolution !== undefined) this.setResolution(options.resolution);
        else if (options.zoom !== undefined) this.setZoom(options.zoom);
    };
    Object.defineProperty(View1.prototype, "padding", {
        /**
         * Padding (in css pixels).
         * If the map viewport is partially covered with other content (overlays) along
         * its edges, this setting allows to shift the center of the viewport away from that
         * content. The order of the values in the array is top, right, bottom, left.
         * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.
         * @type {Array<number>|undefined}
         * @api
         */ get: function() {
            return this.padding_;
        },
        set: function(padding) {
            var oldPadding = this.padding_;
            this.padding_ = padding;
            var center = this.getCenter();
            if (center) {
                var newPadding = padding || [
                    0,
                    0,
                    0,
                    0
                ];
                oldPadding = oldPadding || [
                    0,
                    0,
                    0,
                    0
                ];
                var resolution = this.getResolution();
                var offsetX = resolution / 2 * (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);
                var offsetY = resolution / 2 * (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);
                this.setCenterInternal([
                    center[0] + offsetX,
                    center[1] - offsetY
                ]);
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Get an updated version of the view options used to construct the view.  The
     * current resolution (or zoom), center, and rotation are applied to any stored
     * options.  The provided options can be used to apply new min/max zoom or
     * resolution limits.
     * @param {ViewOptions} newOptions New options to be applied.
     * @return {ViewOptions} New options updated with the current view state.
     */ View1.prototype.getUpdatedOptions_ = function(newOptions) {
        var options = this.getProperties();
        // preserve resolution (or zoom)
        if (options.resolution !== undefined) options.resolution = this.getResolution();
        else options.zoom = this.getZoom();
        // preserve center
        options.center = this.getCenterInternal();
        // preserve rotation
        options.rotation = this.getRotation();
        return (0, _objJs.assign)({}, options, newOptions);
    };
    /**
     * Animate the view.  The view's center, zoom (or resolution), and rotation
     * can be animated for smooth transitions between view states.  For example,
     * to animate the view to a new zoom level:
     *
     *     view.animate({zoom: view.getZoom() + 1});
     *
     * By default, the animation lasts one second and uses in-and-out easing.  You
     * can customize this behavior by including `duration` (in milliseconds) and
     * `easing` options (see {@link module:ol/easing}).
     *
     * To chain together multiple animations, call the method with multiple
     * animation objects.  For example, to first zoom and then pan:
     *
     *     view.animate({zoom: 10}, {center: [0, 0]});
     *
     * If you provide a function as the last argument to the animate method, it
     * will get called at the end of an animation series.  The callback will be
     * called with `true` if the animation series completed on its own or `false`
     * if it was cancelled.
     *
     * Animations are cancelled by user interactions (e.g. dragging the map) or by
     * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
     * (or another method that calls one of these).
     *
     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation
     *     options.  Multiple animations can be run in series by passing multiple
     *     options objects.  To run multiple animations in parallel, call the method
     *     multiple times.  An optional callback can be provided as a final
     *     argument.  The callback will be called with a boolean indicating whether
     *     the animation completed without being cancelled.
     * @api
     */ View1.prototype.animate = function(var_args) {
        if (this.isDef() && !this.getAnimating()) this.resolveConstraints(0);
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; ++i){
            var options = arguments[i];
            if (options.center) {
                options = (0, _objJs.assign)({}, options);
                options.center = (0, _projJs.fromUserCoordinate)(options.center, this.getProjection());
            }
            if (options.anchor) {
                options = (0, _objJs.assign)({}, options);
                options.anchor = (0, _projJs.fromUserCoordinate)(options.anchor, this.getProjection());
            }
            args[i] = options;
        }
        this.animateInternal.apply(this, args);
    };
    /**
     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.
     */ View1.prototype.animateInternal = function(var_args) {
        var animationCount = arguments.length;
        var callback;
        if (animationCount > 1 && typeof arguments[animationCount - 1] === "function") {
            callback = arguments[animationCount - 1];
            --animationCount;
        }
        var i = 0;
        for(; i < animationCount && !this.isDef(); ++i){
            // if view properties are not yet set, shortcut to the final state
            var state = arguments[i];
            if (state.center) this.setCenterInternal(state.center);
            if (state.zoom !== undefined) this.setZoom(state.zoom);
            else if (state.resolution) this.setResolution(state.resolution);
            if (state.rotation !== undefined) this.setRotation(state.rotation);
        }
        if (i === animationCount) {
            if (callback) animationCallback(callback, true);
            return;
        }
        var start = Date.now();
        var center = this.targetCenter_.slice();
        var resolution = this.targetResolution_;
        var rotation = this.targetRotation_;
        var series = [];
        for(; i < animationCount; ++i){
            var options = arguments[i];
            var animation = {
                start: start,
                complete: false,
                anchor: options.anchor,
                duration: options.duration !== undefined ? options.duration : 1000,
                easing: options.easing || (0, _easingJs.inAndOut),
                callback: callback
            };
            if (options.center) {
                animation.sourceCenter = center;
                animation.targetCenter = options.center.slice();
                center = animation.targetCenter;
            }
            if (options.zoom !== undefined) {
                animation.sourceResolution = resolution;
                animation.targetResolution = this.getResolutionForZoom(options.zoom);
                resolution = animation.targetResolution;
            } else if (options.resolution) {
                animation.sourceResolution = resolution;
                animation.targetResolution = options.resolution;
                resolution = animation.targetResolution;
            }
            if (options.rotation !== undefined) {
                animation.sourceRotation = rotation;
                var delta = (0, _mathJs.modulo)(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
                animation.targetRotation = rotation + delta;
                rotation = animation.targetRotation;
            }
            // check if animation is a no-op
            if (isNoopAnimation(animation)) animation.complete = true;
            else start += animation.duration;
            series.push(animation);
        }
        this.animations_.push(series);
        this.setHint((0, _viewHintJsDefault.default).ANIMATING, 1);
        this.updateAnimations_();
    };
    /**
     * Determine if the view is being animated.
     * @return {boolean} The view is being animated.
     * @api
     */ View1.prototype.getAnimating = function() {
        return this.hints_[(0, _viewHintJsDefault.default).ANIMATING] > 0;
    };
    /**
     * Determine if the user is interacting with the view, such as panning or zooming.
     * @return {boolean} The view is being interacted with.
     * @api
     */ View1.prototype.getInteracting = function() {
        return this.hints_[(0, _viewHintJsDefault.default).INTERACTING] > 0;
    };
    /**
     * Cancel any ongoing animations.
     * @api
     */ View1.prototype.cancelAnimations = function() {
        this.setHint((0, _viewHintJsDefault.default).ANIMATING, -this.hints_[(0, _viewHintJsDefault.default).ANIMATING]);
        var anchor;
        for(var i = 0, ii = this.animations_.length; i < ii; ++i){
            var series = this.animations_[i];
            if (series[0].callback) animationCallback(series[0].callback, false);
            if (!anchor) for(var j = 0, jj = series.length; j < jj; ++j){
                var animation = series[j];
                if (!animation.complete) {
                    anchor = animation.anchor;
                    break;
                }
            }
        }
        this.animations_.length = 0;
        this.cancelAnchor_ = anchor;
        this.nextCenter_ = null;
        this.nextResolution_ = NaN;
        this.nextRotation_ = NaN;
    };
    /**
     * Update all animations.
     */ View1.prototype.updateAnimations_ = function() {
        if (this.updateAnimationKey_ !== undefined) {
            cancelAnimationFrame(this.updateAnimationKey_);
            this.updateAnimationKey_ = undefined;
        }
        if (!this.getAnimating()) return;
        var now = Date.now();
        var more = false;
        for(var i = this.animations_.length - 1; i >= 0; --i){
            var series = this.animations_[i];
            var seriesComplete = true;
            for(var j = 0, jj = series.length; j < jj; ++j){
                var animation = series[j];
                if (animation.complete) continue;
                var elapsed = now - animation.start;
                var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;
                if (fraction >= 1) {
                    animation.complete = true;
                    fraction = 1;
                } else seriesComplete = false;
                var progress = animation.easing(fraction);
                if (animation.sourceCenter) {
                    var x0 = animation.sourceCenter[0];
                    var y0 = animation.sourceCenter[1];
                    var x1 = animation.targetCenter[0];
                    var y1 = animation.targetCenter[1];
                    this.nextCenter_ = animation.targetCenter;
                    var x = x0 + progress * (x1 - x0);
                    var y = y0 + progress * (y1 - y0);
                    this.targetCenter_ = [
                        x,
                        y
                    ];
                }
                if (animation.sourceResolution && animation.targetResolution) {
                    var resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);
                    if (animation.anchor) {
                        var size = this.getViewportSize_(this.getRotation());
                        var constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);
                        this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);
                    }
                    this.nextResolution_ = animation.targetResolution;
                    this.targetResolution_ = resolution;
                    this.applyTargetState_(true);
                }
                if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {
                    var rotation = progress === 1 ? (0, _mathJs.modulo)(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);
                    if (animation.anchor) {
                        var constrainedRotation = this.constraints_.rotation(rotation, true);
                        this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);
                    }
                    this.nextRotation_ = animation.targetRotation;
                    this.targetRotation_ = rotation;
                }
                this.applyTargetState_(true);
                more = true;
                if (!animation.complete) break;
            }
            if (seriesComplete) {
                this.animations_[i] = null;
                this.setHint((0, _viewHintJsDefault.default).ANIMATING, -1);
                this.nextCenter_ = null;
                this.nextResolution_ = NaN;
                this.nextRotation_ = NaN;
                var callback = series[0].callback;
                if (callback) animationCallback(callback, true);
            }
        }
        // prune completed series
        this.animations_ = this.animations_.filter(Boolean);
        if (more && this.updateAnimationKey_ === undefined) this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));
    };
    /**
     * @param {number} rotation Target rotation.
     * @param {import("./coordinate.js").Coordinate} anchor Rotation anchor.
     * @return {import("./coordinate.js").Coordinate|undefined} Center for rotation and anchor.
     */ View1.prototype.calculateCenterRotate = function(rotation, anchor) {
        var center;
        var currentCenter = this.getCenterInternal();
        if (currentCenter !== undefined) {
            center = [
                currentCenter[0] - anchor[0],
                currentCenter[1] - anchor[1]
            ];
            (0, _coordinateJs.rotate)(center, rotation - this.getRotation());
            (0, _coordinateJs.add)(center, anchor);
        }
        return center;
    };
    /**
     * @param {number} resolution Target resolution.
     * @param {import("./coordinate.js").Coordinate} anchor Zoom anchor.
     * @return {import("./coordinate.js").Coordinate|undefined} Center for resolution and anchor.
     */ View1.prototype.calculateCenterZoom = function(resolution, anchor) {
        var center;
        var currentCenter = this.getCenterInternal();
        var currentResolution = this.getResolution();
        if (currentCenter !== undefined && currentResolution !== undefined) {
            var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;
            var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;
            center = [
                x,
                y
            ];
        }
        return center;
    };
    /**
     * Returns the current viewport size.
     * @private
     * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size
     * @return {import("./size.js").Size} Viewport size or `[100, 100]` when no viewport is found.
     */ View1.prototype.getViewportSize_ = function(opt_rotation) {
        var size = this.viewportSize_;
        if (opt_rotation) {
            var w = size[0];
            var h = size[1];
            return [
                Math.abs(w * Math.cos(opt_rotation)) + Math.abs(h * Math.sin(opt_rotation)),
                Math.abs(w * Math.sin(opt_rotation)) + Math.abs(h * Math.cos(opt_rotation)), 
            ];
        } else return size;
    };
    /**
     * Stores the viewport size on the view. The viewport size is not read every time from the DOM
     * to avoid performance hit and layout reflow.
     * This should be done on map size change.
     * Note: the constraints are not resolved during an animation to avoid stopping it
     * @param {import("./size.js").Size} [opt_size] Viewport size; if undefined, [100, 100] is assumed
     */ View1.prototype.setViewportSize = function(opt_size) {
        this.viewportSize_ = Array.isArray(opt_size) ? opt_size.slice() : [
            100,
            100
        ];
        if (!this.getAnimating()) this.resolveConstraints(0);
    };
    /**
     * Get the view center.
     * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
     * @observable
     * @api
     */ View1.prototype.getCenter = function() {
        var center = this.getCenterInternal();
        if (!center) return center;
        return (0, _projJs.toUserCoordinate)(center, this.getProjection());
    };
    /**
     * Get the view center without transforming to user projection.
     * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
     */ View1.prototype.getCenterInternal = function() {
        return /** @type {import("./coordinate.js").Coordinate|undefined} */ this.get((0, _viewPropertyJsDefault.default).CENTER);
    };
    /**
     * @return {Constraints} Constraints.
     */ View1.prototype.getConstraints = function() {
        return this.constraints_;
    };
    /**
     * @return {boolean} Resolution constraint is set
     */ View1.prototype.getConstrainResolution = function() {
        return this.get("constrainResolution");
    };
    /**
     * @param {Array<number>} [opt_hints] Destination array.
     * @return {Array<number>} Hint.
     */ View1.prototype.getHints = function(opt_hints) {
        if (opt_hints !== undefined) {
            opt_hints[0] = this.hints_[0];
            opt_hints[1] = this.hints_[1];
            return opt_hints;
        } else return this.hints_.slice();
    };
    /**
     * Calculate the extent for the current view state and the passed size.
     * The size is the pixel dimensions of the box into which the calculated extent
     * should fit. In most cases you want to get the extent of the entire map,
     * that is `map.getSize()`.
     * @param {import("./size.js").Size} [opt_size] Box pixel size. If not provided, the size
     * of the map that uses this view will be used.
     * @return {import("./extent.js").Extent} Extent.
     * @api
     */ View1.prototype.calculateExtent = function(opt_size) {
        var extent = this.calculateExtentInternal(opt_size);
        return (0, _projJs.toUserExtent)(extent, this.getProjection());
    };
    /**
     * @param {import("./size.js").Size} [opt_size] Box pixel size. If not provided,
     * the map's last known viewport size will be used.
     * @return {import("./extent.js").Extent} Extent.
     */ View1.prototype.calculateExtentInternal = function(opt_size) {
        var size = opt_size || this.getViewportSizeMinusPadding_();
        var center = /** @type {!import("./coordinate.js").Coordinate} */ this.getCenterInternal();
        (0, _assertsJs.assert)(center, 1); // The view center is not defined
        var resolution = /** @type {!number} */ this.getResolution();
        (0, _assertsJs.assert)(resolution !== undefined, 2); // The view resolution is not defined
        var rotation = /** @type {!number} */ this.getRotation();
        (0, _assertsJs.assert)(rotation !== undefined, 3); // The view rotation is not defined
        return (0, _extentJs.getForViewAndSize)(center, resolution, rotation, size);
    };
    /**
     * Get the maximum resolution of the view.
     * @return {number} The maximum resolution of the view.
     * @api
     */ View1.prototype.getMaxResolution = function() {
        return this.maxResolution_;
    };
    /**
     * Get the minimum resolution of the view.
     * @return {number} The minimum resolution of the view.
     * @api
     */ View1.prototype.getMinResolution = function() {
        return this.minResolution_;
    };
    /**
     * Get the maximum zoom level for the view.
     * @return {number} The maximum zoom level.
     * @api
     */ View1.prototype.getMaxZoom = function() {
        return /** @type {number} */ this.getZoomForResolution(this.minResolution_);
    };
    /**
     * Set a new maximum zoom level for the view.
     * @param {number} zoom The maximum zoom level.
     * @api
     */ View1.prototype.setMaxZoom = function(zoom) {
        this.applyOptions_(this.getUpdatedOptions_({
            maxZoom: zoom
        }));
    };
    /**
     * Get the minimum zoom level for the view.
     * @return {number} The minimum zoom level.
     * @api
     */ View1.prototype.getMinZoom = function() {
        return /** @type {number} */ this.getZoomForResolution(this.maxResolution_);
    };
    /**
     * Set a new minimum zoom level for the view.
     * @param {number} zoom The minimum zoom level.
     * @api
     */ View1.prototype.setMinZoom = function(zoom) {
        this.applyOptions_(this.getUpdatedOptions_({
            minZoom: zoom
        }));
    };
    /**
     * Set whether the view should allow intermediary zoom levels.
     * @param {boolean} enabled Whether the resolution is constrained.
     * @api
     */ View1.prototype.setConstrainResolution = function(enabled) {
        this.applyOptions_(this.getUpdatedOptions_({
            constrainResolution: enabled
        }));
    };
    /**
     * Get the view projection.
     * @return {import("./proj/Projection.js").default} The projection of the view.
     * @api
     */ View1.prototype.getProjection = function() {
        return this.projection_;
    };
    /**
     * Get the view resolution.
     * @return {number|undefined} The resolution of the view.
     * @observable
     * @api
     */ View1.prototype.getResolution = function() {
        return /** @type {number|undefined} */ this.get((0, _viewPropertyJsDefault.default).RESOLUTION);
    };
    /**
     * Get the resolutions for the view. This returns the array of resolutions
     * passed to the constructor of the View, or undefined if none were given.
     * @return {Array<number>|undefined} The resolutions of the view.
     * @api
     */ View1.prototype.getResolutions = function() {
        return this.resolutions_;
    };
    /**
     * Get the resolution for a provided extent (in map units) and size (in pixels).
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {import("./size.js").Size} [opt_size] Box pixel size.
     * @return {number} The resolution at which the provided extent will render at
     *     the given size.
     * @api
     */ View1.prototype.getResolutionForExtent = function(extent, opt_size) {
        return this.getResolutionForExtentInternal((0, _projJs.fromUserExtent)(extent, this.getProjection()), opt_size);
    };
    /**
     * Get the resolution for a provided extent (in map units) and size (in pixels).
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {import("./size.js").Size} [opt_size] Box pixel size.
     * @return {number} The resolution at which the provided extent will render at
     *     the given size.
     */ View1.prototype.getResolutionForExtentInternal = function(extent, opt_size) {
        var size = opt_size || this.getViewportSizeMinusPadding_();
        var xResolution = (0, _extentJs.getWidth)(extent) / size[0];
        var yResolution = (0, _extentJs.getHeight)(extent) / size[1];
        return Math.max(xResolution, yResolution);
    };
    /**
     * Return a function that returns a value between 0 and 1 for a
     * resolution. Exponential scaling is assumed.
     * @param {number} [opt_power] Power.
     * @return {function(number): number} Resolution for value function.
     */ View1.prototype.getResolutionForValueFunction = function(opt_power) {
        var power = opt_power || 2;
        var maxResolution = this.getConstrainedResolution(this.maxResolution_);
        var minResolution = this.minResolution_;
        var max = Math.log(maxResolution / minResolution) / Math.log(power);
        return(/**
         * @param {number} value Value.
         * @return {number} Resolution.
         */ function(value) {
            var resolution = maxResolution / Math.pow(power, value * max);
            return resolution;
        });
    };
    /**
     * Get the view rotation.
     * @return {number} The rotation of the view in radians.
     * @observable
     * @api
     */ View1.prototype.getRotation = function() {
        return /** @type {number} */ this.get((0, _viewPropertyJsDefault.default).ROTATION);
    };
    /**
     * Return a function that returns a resolution for a value between
     * 0 and 1. Exponential scaling is assumed.
     * @param {number} [opt_power] Power.
     * @return {function(number): number} Value for resolution function.
     */ View1.prototype.getValueForResolutionFunction = function(opt_power) {
        var logPower = Math.log(opt_power || 2);
        var maxResolution = this.getConstrainedResolution(this.maxResolution_);
        var minResolution = this.minResolution_;
        var max = Math.log(maxResolution / minResolution) / logPower;
        return(/**
         * @param {number} resolution Resolution.
         * @return {number} Value.
         */ function(resolution) {
            var value = Math.log(maxResolution / resolution) / logPower / max;
            return value;
        });
    };
    /**
     * Returns the size of the viewport minus padding.
     * @private
     * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size
     * @return {import("./size.js").Size} Viewport size reduced by the padding.
     */ View1.prototype.getViewportSizeMinusPadding_ = function(opt_rotation) {
        var size = this.getViewportSize_(opt_rotation);
        var padding = this.padding_;
        if (padding) size = [
            size[0] - padding[1] - padding[3],
            size[1] - padding[0] - padding[2], 
        ];
        return size;
    };
    /**
     * @return {State} View state.
     */ View1.prototype.getState = function() {
        var projection = this.getProjection();
        var resolution = this.getResolution();
        var rotation = this.getRotation();
        var center = /** @type {import("./coordinate.js").Coordinate} */ this.getCenterInternal();
        var padding = this.padding_;
        if (padding) {
            var reducedSize = this.getViewportSizeMinusPadding_();
            center = calculateCenterOn(center, this.getViewportSize_(), [
                reducedSize[0] / 2 + padding[3],
                reducedSize[1] / 2 + padding[0]
            ], resolution, rotation);
        }
        return {
            center: center.slice(0),
            projection: projection !== undefined ? projection : null,
            resolution: resolution,
            nextCenter: this.nextCenter_,
            nextResolution: this.nextResolution_,
            nextRotation: this.nextRotation_,
            rotation: rotation,
            zoom: this.getZoom()
        };
    };
    /**
     * Get the current zoom level. This method may return non-integer zoom levels
     * if the view does not constrain the resolution, or if an interaction or
     * animation is underway.
     * @return {number|undefined} Zoom.
     * @api
     */ View1.prototype.getZoom = function() {
        var zoom;
        var resolution = this.getResolution();
        if (resolution !== undefined) zoom = this.getZoomForResolution(resolution);
        return zoom;
    };
    /**
     * Get the zoom level for a resolution.
     * @param {number} resolution The resolution.
     * @return {number|undefined} The zoom level for the provided resolution.
     * @api
     */ View1.prototype.getZoomForResolution = function(resolution) {
        var offset = this.minZoom_ || 0;
        var max, zoomFactor;
        if (this.resolutions_) {
            var nearest = (0, _arrayJs.linearFindNearest)(this.resolutions_, resolution, 1);
            offset = nearest;
            max = this.resolutions_[nearest];
            if (nearest == this.resolutions_.length - 1) zoomFactor = 2;
            else zoomFactor = max / this.resolutions_[nearest + 1];
        } else {
            max = this.maxResolution_;
            zoomFactor = this.zoomFactor_;
        }
        return offset + Math.log(max / resolution) / Math.log(zoomFactor);
    };
    /**
     * Get the resolution for a zoom level.
     * @param {number} zoom Zoom level.
     * @return {number} The view resolution for the provided zoom level.
     * @api
     */ View1.prototype.getResolutionForZoom = function(zoom) {
        if (this.resolutions_) {
            if (this.resolutions_.length <= 1) return 0;
            var baseLevel = (0, _mathJs.clamp)(Math.floor(zoom), 0, this.resolutions_.length - 2);
            var zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];
            return this.resolutions_[baseLevel] / Math.pow(zoomFactor, (0, _mathJs.clamp)(zoom - baseLevel, 0, 1));
        } else return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);
    };
    /**
     * Fit the given geometry or extent based on the given map size and border.
     * The size is pixel dimensions of the box to fit the extent into.
     * In most cases you will want to use the map size, that is `map.getSize()`.
     * Takes care of the map angle.
     * @param {import("./geom/SimpleGeometry.js").default|import("./extent.js").Extent} geometryOrExtent The geometry or
     *     extent to fit the view to.
     * @param {FitOptions} [opt_options] Options.
     * @api
     */ View1.prototype.fit = function(geometryOrExtent, opt_options) {
        /** @type {import("./geom/SimpleGeometry.js").default} */ var geometry;
        (0, _assertsJs.assert)(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ geometryOrExtent.getSimplifiedGeometry === "function", 24); // Invalid extent or geometry provided as `geometry`
        if (Array.isArray(geometryOrExtent)) {
            (0, _assertsJs.assert)(!(0, _extentJs.isEmpty)(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`
            var extent = (0, _projJs.fromUserExtent)(geometryOrExtent, this.getProjection());
            geometry = (0, _polygonJs.fromExtent)(extent);
        } else if (geometryOrExtent.getType() === (0, _geometryTypeJsDefault.default).CIRCLE) {
            var extent = (0, _projJs.fromUserExtent)(geometryOrExtent.getExtent(), this.getProjection());
            geometry = (0, _polygonJs.fromExtent)(extent);
            geometry.rotate(this.getRotation(), (0, _extentJs.getCenter)(extent));
        } else {
            var userProjection = (0, _projJs.getUserProjection)();
            if (userProjection) geometry = /** @type {import("./geom/SimpleGeometry.js").default} */ geometryOrExtent.clone().transform(userProjection, this.getProjection());
            else geometry = geometryOrExtent;
        }
        this.fitInternal(geometry, opt_options);
    };
    /**
     * Calculate rotated extent
     * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
     * @return {import("./extent").Extent} The rotated extent for the geometry.
     */ View1.prototype.rotatedExtentForGeometry = function(geometry) {
        var rotation = this.getRotation();
        var cosAngle = Math.cos(rotation);
        var sinAngle = Math.sin(-rotation);
        var coords = geometry.getFlatCoordinates();
        var stride = geometry.getStride();
        var minRotX = Infinity;
        var minRotY = Infinity;
        var maxRotX = -Infinity;
        var maxRotY = -Infinity;
        for(var i = 0, ii = coords.length; i < ii; i += stride){
            var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;
            var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;
            minRotX = Math.min(minRotX, rotX);
            minRotY = Math.min(minRotY, rotY);
            maxRotX = Math.max(maxRotX, rotX);
            maxRotY = Math.max(maxRotY, rotY);
        }
        return [
            minRotX,
            minRotY,
            maxRotX,
            maxRotY
        ];
    };
    /**
     * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
     * @param {FitOptions} [opt_options] Options.
     */ View1.prototype.fitInternal = function(geometry, opt_options) {
        var options = opt_options || {};
        var size = options.size;
        if (!size) size = this.getViewportSizeMinusPadding_();
        var padding = options.padding !== undefined ? options.padding : [
            0,
            0,
            0,
            0
        ];
        var nearest = options.nearest !== undefined ? options.nearest : false;
        var minResolution;
        if (options.minResolution !== undefined) minResolution = options.minResolution;
        else if (options.maxZoom !== undefined) minResolution = this.getResolutionForZoom(options.maxZoom);
        else minResolution = 0;
        var rotatedExtent = this.rotatedExtentForGeometry(geometry);
        // calculate resolution
        var resolution = this.getResolutionForExtentInternal(rotatedExtent, [
            size[0] - padding[1] - padding[3],
            size[1] - padding[0] - padding[2], 
        ]);
        resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);
        resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);
        // calculate center
        var rotation = this.getRotation();
        var sinAngle = Math.sin(rotation);
        var cosAngle = Math.cos(rotation);
        var centerRot = (0, _extentJs.getCenter)(rotatedExtent);
        centerRot[0] += (padding[1] - padding[3]) / 2 * resolution;
        centerRot[1] += (padding[0] - padding[2]) / 2 * resolution;
        var centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;
        var centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;
        var center = this.getConstrainedCenter([
            centerX,
            centerY
        ], resolution);
        var callback = options.callback ? options.callback : (0, _functionsJs.VOID);
        if (options.duration !== undefined) this.animateInternal({
            resolution: resolution,
            center: center,
            duration: options.duration,
            easing: options.easing
        }, callback);
        else {
            this.targetResolution_ = resolution;
            this.targetCenter_ = center;
            this.applyTargetState_(false, true);
            animationCallback(callback, true);
        }
    };
    /**
     * Center on coordinate and view position.
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("./size.js").Size} size Box pixel size.
     * @param {import("./pixel.js").Pixel} position Position on the view to center on.
     * @api
     */ View1.prototype.centerOn = function(coordinate, size, position) {
        this.centerOnInternal((0, _projJs.fromUserCoordinate)(coordinate, this.getProjection()), size, position);
    };
    /**
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("./size.js").Size} size Box pixel size.
     * @param {import("./pixel.js").Pixel} position Position on the view to center on.
     */ View1.prototype.centerOnInternal = function(coordinate, size, position) {
        this.setCenterInternal(calculateCenterOn(coordinate, size, position, this.getResolution(), this.getRotation()));
    };
    /**
     * Calculates the shift between map and viewport center.
     * @param {import("./coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("./size.js").Size} size Size.
     * @return {Array<number>|undefined} Center shift.
     */ View1.prototype.calculateCenterShift = function(center, resolution, rotation, size) {
        var centerShift;
        var padding = this.padding_;
        if (padding && center) {
            var reducedSize = this.getViewportSizeMinusPadding_(-rotation);
            var shiftedCenter = calculateCenterOn(center, size, [
                reducedSize[0] / 2 + padding[3],
                reducedSize[1] / 2 + padding[0]
            ], resolution, rotation);
            centerShift = [
                center[0] - shiftedCenter[0],
                center[1] - shiftedCenter[1], 
            ];
        }
        return centerShift;
    };
    /**
     * @return {boolean} Is defined.
     */ View1.prototype.isDef = function() {
        return !!this.getCenterInternal() && this.getResolution() !== undefined;
    };
    /**
     * Adds relative coordinates to the center of the view. Any extent constraint will apply.
     * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
     * @api
     */ View1.prototype.adjustCenter = function(deltaCoordinates) {
        var center = (0, _projJs.toUserCoordinate)(this.targetCenter_, this.getProjection());
        this.setCenter([
            center[0] + deltaCoordinates[0],
            center[1] + deltaCoordinates[1], 
        ]);
    };
    /**
     * Adds relative coordinates to the center of the view. Any extent constraint will apply.
     * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
     */ View1.prototype.adjustCenterInternal = function(deltaCoordinates) {
        var center = this.targetCenter_;
        this.setCenterInternal([
            center[0] + deltaCoordinates[0],
            center[1] + deltaCoordinates[1], 
        ]);
    };
    /**
     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
     * constraint will apply.
     * @param {number} ratio The ratio to apply on the view resolution.
     * @param {import("./coordinate.js").Coordinate} [opt_anchor] The origin of the transformation.
     * @api
     */ View1.prototype.adjustResolution = function(ratio, opt_anchor) {
        var anchor = opt_anchor && (0, _projJs.fromUserCoordinate)(opt_anchor, this.getProjection());
        this.adjustResolutionInternal(ratio, anchor);
    };
    /**
     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
     * constraint will apply.
     * @param {number} ratio The ratio to apply on the view resolution.
     * @param {import("./coordinate.js").Coordinate} [opt_anchor] The origin of the transformation.
     */ View1.prototype.adjustResolutionInternal = function(ratio, opt_anchor) {
        var isMoving = this.getAnimating() || this.getInteracting();
        var size = this.getViewportSize_(this.getRotation());
        var newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);
        if (opt_anchor) this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);
        this.targetResolution_ *= ratio;
        this.applyTargetState_();
    };
    /**
     * Adds a value to the view zoom level, optionally using an anchor. Any resolution
     * constraint will apply.
     * @param {number} delta Relative value to add to the zoom level.
     * @param {import("./coordinate.js").Coordinate} [opt_anchor] The origin of the transformation.
     * @api
     */ View1.prototype.adjustZoom = function(delta, opt_anchor) {
        this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);
    };
    /**
     * Adds a value to the view rotation, optionally using an anchor. Any rotation
     * constraint will apply.
     * @param {number} delta Relative value to add to the zoom rotation, in radians.
     * @param {import("./coordinate.js").Coordinate} [opt_anchor] The rotation center.
     * @api
     */ View1.prototype.adjustRotation = function(delta, opt_anchor) {
        if (opt_anchor) opt_anchor = (0, _projJs.fromUserCoordinate)(opt_anchor, this.getProjection());
        this.adjustRotationInternal(delta, opt_anchor);
    };
    /**
     * @param {number} delta Relative value to add to the zoom rotation, in radians.
     * @param {import("./coordinate.js").Coordinate} [opt_anchor] The rotation center.
     */ View1.prototype.adjustRotationInternal = function(delta, opt_anchor) {
        var isMoving = this.getAnimating() || this.getInteracting();
        var newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);
        if (opt_anchor) this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);
        this.targetRotation_ += delta;
        this.applyTargetState_();
    };
    /**
     * Set the center of the current view. Any extent constraint will apply.
     * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
     * @observable
     * @api
     */ View1.prototype.setCenter = function(center) {
        this.setCenterInternal(center ? (0, _projJs.fromUserCoordinate)(center, this.getProjection()) : center);
    };
    /**
     * Set the center using the view projection (not the user projection).
     * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
     */ View1.prototype.setCenterInternal = function(center) {
        this.targetCenter_ = center;
        this.applyTargetState_();
    };
    /**
     * @param {import("./ViewHint.js").default} hint Hint.
     * @param {number} delta Delta.
     * @return {number} New value.
     */ View1.prototype.setHint = function(hint, delta) {
        this.hints_[hint] += delta;
        this.changed();
        return this.hints_[hint];
    };
    /**
     * Set the resolution for this view. Any resolution constraint will apply.
     * @param {number|undefined} resolution The resolution of the view.
     * @observable
     * @api
     */ View1.prototype.setResolution = function(resolution) {
        this.targetResolution_ = resolution;
        this.applyTargetState_();
    };
    /**
     * Set the rotation for this view. Any rotation constraint will apply.
     * @param {number} rotation The rotation of the view in radians.
     * @observable
     * @api
     */ View1.prototype.setRotation = function(rotation) {
        this.targetRotation_ = rotation;
        this.applyTargetState_();
    };
    /**
     * Zoom to a specific zoom level. Any resolution constrain will apply.
     * @param {number} zoom Zoom level.
     * @api
     */ View1.prototype.setZoom = function(zoom) {
        this.setResolution(this.getResolutionForZoom(zoom));
    };
    /**
     * Recompute rotation/resolution/center based on target values.
     * Note: we have to compute rotation first, then resolution and center considering that
     * parameters can influence one another in case a view extent constraint is present.
     * @param {boolean} [opt_doNotCancelAnims] Do not cancel animations.
     * @param {boolean} [opt_forceMoving] Apply constraints as if the view is moving.
     * @private
     */ View1.prototype.applyTargetState_ = function(opt_doNotCancelAnims, opt_forceMoving) {
        var isMoving = this.getAnimating() || this.getInteracting() || opt_forceMoving;
        // compute rotation
        var newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);
        var size = this.getViewportSize_(newRotation);
        var newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);
        var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));
        if (this.get((0, _viewPropertyJsDefault.default).ROTATION) !== newRotation) this.set((0, _viewPropertyJsDefault.default).ROTATION, newRotation);
        if (this.get((0, _viewPropertyJsDefault.default).RESOLUTION) !== newResolution) {
            this.set((0, _viewPropertyJsDefault.default).RESOLUTION, newResolution);
            this.set("zoom", this.getZoom(), true);
        }
        if (!newCenter || !this.get((0, _viewPropertyJsDefault.default).CENTER) || !(0, _coordinateJs.equals)(this.get((0, _viewPropertyJsDefault.default).CENTER), newCenter)) this.set((0, _viewPropertyJsDefault.default).CENTER, newCenter);
        if (this.getAnimating() && !opt_doNotCancelAnims) this.cancelAnimations();
        this.cancelAnchor_ = undefined;
    };
    /**
     * If any constraints need to be applied, an animation will be triggered.
     * This is typically done on interaction end.
     * Note: calling this with a duration of 0 will apply the constrained values straight away,
     * without animation.
     * @param {number} [opt_duration] The animation duration in ms.
     * @param {number} [opt_resolutionDirection] Which direction to zoom.
     * @param {import("./coordinate.js").Coordinate} [opt_anchor] The origin of the transformation.
     */ View1.prototype.resolveConstraints = function(opt_duration, opt_resolutionDirection, opt_anchor) {
        var duration = opt_duration !== undefined ? opt_duration : 200;
        var direction = opt_resolutionDirection || 0;
        var newRotation = this.constraints_.rotation(this.targetRotation_);
        var size = this.getViewportSize_(newRotation);
        var newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);
        var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, false, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));
        if (duration === 0 && !this.cancelAnchor_) {
            this.targetResolution_ = newResolution;
            this.targetRotation_ = newRotation;
            this.targetCenter_ = newCenter;
            this.applyTargetState_();
            return;
        }
        var anchor = opt_anchor || (duration === 0 ? this.cancelAnchor_ : undefined);
        this.cancelAnchor_ = undefined;
        if (this.getResolution() !== newResolution || this.getRotation() !== newRotation || !this.getCenterInternal() || !(0, _coordinateJs.equals)(this.getCenterInternal(), newCenter)) {
            if (this.getAnimating()) this.cancelAnimations();
            this.animateInternal({
                rotation: newRotation,
                center: newCenter,
                resolution: newResolution,
                duration: duration,
                easing: (0, _easingJs.easeOut),
                anchor: anchor
            });
        }
    };
    /**
     * Notify the View that an interaction has started.
     * The view state will be resolved to a stable one if needed
     * (depending on its constraints).
     * @api
     */ View1.prototype.beginInteraction = function() {
        this.resolveConstraints(0);
        this.setHint((0, _viewHintJsDefault.default).INTERACTING, 1);
    };
    /**
     * Notify the View that an interaction has ended. The view state will be resolved
     * to a stable one if needed (depending on its constraints).
     * @param {number} [opt_duration] Animation duration in ms.
     * @param {number} [opt_resolutionDirection] Which direction to zoom.
     * @param {import("./coordinate.js").Coordinate} [opt_anchor] The origin of the transformation.
     * @api
     */ View1.prototype.endInteraction = function(opt_duration, opt_resolutionDirection, opt_anchor) {
        var anchor = opt_anchor && (0, _projJs.fromUserCoordinate)(opt_anchor, this.getProjection());
        this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);
    };
    /**
     * Notify the View that an interaction has ended. The view state will be resolved
     * to a stable one if needed (depending on its constraints).
     * @param {number} [opt_duration] Animation duration in ms.
     * @param {number} [opt_resolutionDirection] Which direction to zoom.
     * @param {import("./coordinate.js").Coordinate} [opt_anchor] The origin of the transformation.
     */ View1.prototype.endInteractionInternal = function(opt_duration, opt_resolutionDirection, opt_anchor) {
        this.setHint((0, _viewHintJsDefault.default).INTERACTING, -1);
        this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);
    };
    /**
     * Get a valid position for the view center according to the current constraints.
     * @param {import("./coordinate.js").Coordinate|undefined} targetCenter Target center position.
     * @param {number} [opt_targetResolution] Target resolution. If not supplied, the current one will be used.
     * This is useful to guess a valid center position at a different zoom level.
     * @return {import("./coordinate.js").Coordinate|undefined} Valid center position.
     */ View1.prototype.getConstrainedCenter = function(targetCenter, opt_targetResolution) {
        var size = this.getViewportSize_(this.getRotation());
        return this.constraints_.center(targetCenter, opt_targetResolution || this.getResolution(), size);
    };
    /**
     * Get a valid zoom level according to the current view constraints.
     * @param {number|undefined} targetZoom Target zoom.
     * @param {number} [opt_direction=0] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     * @return {number|undefined} Valid zoom level.
     */ View1.prototype.getConstrainedZoom = function(targetZoom, opt_direction) {
        var targetRes = this.getResolutionForZoom(targetZoom);
        return this.getZoomForResolution(this.getConstrainedResolution(targetRes, opt_direction));
    };
    /**
     * Get a valid resolution according to the current view constraints.
     * @param {number|undefined} targetResolution Target resolution.
     * @param {number} [opt_direction=0] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     * @return {number|undefined} Valid resolution.
     */ View1.prototype.getConstrainedResolution = function(targetResolution, opt_direction) {
        var direction = opt_direction || 0;
        var size = this.getViewportSize_(this.getRotation());
        return this.constraints_.resolution(targetResolution, direction, size);
    };
    return View1;
}((0, _objectJsDefault.default));
/**
 * @param {Function} callback Callback.
 * @param {*} returnValue Return value.
 */ function animationCallback(callback, returnValue) {
    setTimeout(function() {
        callback(returnValue);
    }, 0);
}
function createCenterConstraint(options) {
    if (options.extent !== undefined) {
        var smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;
        return (0, _centerconstraintJs.createExtent)(options.extent, options.constrainOnlyCenter, smooth);
    }
    var projection = (0, _projJs.createProjection)(options.projection, "EPSG:3857");
    if (options.multiWorld !== true && projection.isGlobal()) {
        var extent = projection.getExtent().slice();
        extent[0] = -Infinity;
        extent[2] = Infinity;
        return (0, _centerconstraintJs.createExtent)(extent, false, false);
    }
    return 0, _centerconstraintJs.none;
}
function createResolutionConstraint(options) {
    var resolutionConstraint;
    var maxResolution;
    var minResolution;
    // TODO: move these to be ol constants
    // see https://github.com/openlayers/openlayers/issues/2076
    var defaultMaxZoom = 28;
    var defaultZoomFactor = 2;
    var minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;
    var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;
    var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;
    var multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;
    var smooth = options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;
    var showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;
    var projection = (0, _projJs.createProjection)(options.projection, "EPSG:3857");
    var projExtent = projection.getExtent();
    var constrainOnlyCenter = options.constrainOnlyCenter;
    var extent = options.extent;
    if (!multiWorld && !extent && projection.isGlobal()) {
        constrainOnlyCenter = false;
        extent = projExtent;
    }
    if (options.resolutions !== undefined) {
        var resolutions = options.resolutions;
        maxResolution = resolutions[minZoom];
        minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];
        if (options.constrainResolution) resolutionConstraint = (0, _resolutionconstraintJs.createSnapToResolutions)(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);
        else resolutionConstraint = (0, _resolutionconstraintJs.createMinMaxResolution)(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
    } else {
        // calculate the default min and max resolution
        var size = !projExtent ? 360 * (0, _projJs.METERS_PER_UNIT)[(0, _unitsJsDefault.default).DEGREES] / projection.getMetersPerUnit() : Math.max((0, _extentJs.getWidth)(projExtent), (0, _extentJs.getHeight)(projExtent));
        var defaultMaxResolution = size / (0, _commonJs.DEFAULT_TILE_SIZE) / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);
        var defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);
        // user provided maxResolution takes precedence
        maxResolution = options.maxResolution;
        if (maxResolution !== undefined) minZoom = 0;
        else maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);
        // user provided minResolution takes precedence
        minResolution = options.minResolution;
        if (minResolution === undefined) {
            if (options.maxZoom !== undefined) {
                if (options.maxResolution !== undefined) minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);
                else minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);
            } else minResolution = defaultMinResolution;
        }
        // given discrete zoom levels, minResolution may be different than provided
        maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));
        minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);
        if (options.constrainResolution) resolutionConstraint = (0, _resolutionconstraintJs.createSnapToPower)(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
        else resolutionConstraint = (0, _resolutionconstraintJs.createMinMaxResolution)(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
    }
    return {
        constraint: resolutionConstraint,
        maxResolution: maxResolution,
        minResolution: minResolution,
        minZoom: minZoom,
        zoomFactor: zoomFactor
    };
}
function createRotationConstraint(options) {
    var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;
    if (enableRotation) {
        var constrainRotation = options.constrainRotation;
        if (constrainRotation === undefined || constrainRotation === true) return (0, _rotationconstraintJs.createSnapToZero)();
        else if (constrainRotation === false) return 0, _rotationconstraintJs.none;
        else if (typeof constrainRotation === "number") return (0, _rotationconstraintJs.createSnapToN)(constrainRotation);
        else return 0, _rotationconstraintJs.none;
    } else return 0, _rotationconstraintJs.disable;
}
function isNoopAnimation(animation) {
    if (animation.sourceCenter && animation.targetCenter) {
        if (!(0, _coordinateJs.equals)(animation.sourceCenter, animation.targetCenter)) return false;
    }
    if (animation.sourceResolution !== animation.targetResolution) return false;
    if (animation.sourceRotation !== animation.targetRotation) return false;
    return true;
}
/**
 * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
 * @param {import("./size.js").Size} size Box pixel size.
 * @param {import("./pixel.js").Pixel} position Position on the view to center on.
 * @param {number} resolution Resolution.
 * @param {number} rotation Rotation.
 * @return {import("./coordinate.js").Coordinate} Shifted center.
 */ function calculateCenterOn(coordinate, size, position, resolution, rotation) {
    // calculate rotated position
    var cosAngle = Math.cos(-rotation);
    var sinAngle = Math.sin(-rotation);
    var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
    var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
    rotX += (size[0] / 2 - position[0]) * resolution;
    rotY += (position[1] - size[1] / 2) * resolution;
    // go back to original angle
    sinAngle = -sinAngle; // go back to original rotation
    var centerX = rotX * cosAngle - rotY * sinAngle;
    var centerY = rotY * cosAngle + rotX * sinAngle;
    return [
        centerX,
        centerY
    ];
}
exports.default = View;

},{"./Object.js":"1zG8z","./geom/GeometryType.js":"j6daa","./proj/Units.js":"gOgy6","./ViewHint.js":"6THmF","./ViewProperty.js":"lWCek","./tilegrid/common.js":"bxYGl","./proj.js":"SznqC","./functions.js":"iqv8I","./coordinate.js":"85Vu7","./asserts.js":"e4TiF","./obj.js":"3ssAG","./centerconstraint.js":"g3NLx","./math.js":"5jEFr","./resolutionconstraint.js":"j8WKZ","./rotationconstraint.js":"hSWd8","./easing.js":"fYITA","./extent.js":"6YrVc","./array.js":"1Fbic","./geom/Polygon.js":"cJuQF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6THmF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/ViewHint
 */ /**
 * @enum {number}
 */ exports.default = {
    ANIMATING: 0,
    INTERACTING: 1
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lWCek":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/ViewProperty
 */ /**
 * @enum {string}
 */ exports.default = {
    CENTER: "center",
    RESOLUTION: "resolution",
    ROTATION: "rotation"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bxYGl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_MAX_ZOOM", ()=>DEFAULT_MAX_ZOOM);
parcelHelpers.export(exports, "DEFAULT_TILE_SIZE", ()=>DEFAULT_TILE_SIZE);
var DEFAULT_MAX_ZOOM = 42;
var DEFAULT_TILE_SIZE = 256;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g3NLx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @typedef {function((import("./coordinate.js").Coordinate|undefined), number, import("./size.js").Size, boolean=, Array<number>=): (import("./coordinate.js").Coordinate|undefined)} Type
 */ /**
 * @param {import("./extent.js").Extent} extent Extent.
 * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.
 * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent
 * (only during interaction and animation).
 * @return {Type} The constraint.
 */ parcelHelpers.export(exports, "createExtent", ()=>createExtent);
/**
 * @param {import("./coordinate.js").Coordinate} [center] Center.
 * @return {import("./coordinate.js").Coordinate|undefined} Center.
 */ parcelHelpers.export(exports, "none", ()=>none);
/**
 * @module ol/centerconstraint
 */ var _mathJs = require("./math.js");
function createExtent(extent, onlyCenter, smooth) {
    return(/**
     * @param {import("./coordinate.js").Coordinate|undefined} center Center.
     * @param {number|undefined} resolution Resolution.
     * @param {import("./size.js").Size} size Viewport size; unused if `onlyCenter` was specified.
     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.
     * @param {Array<number>} [opt_centerShift] Shift between map center and viewport center.
     * @return {import("./coordinate.js").Coordinate|undefined} Center.
     */ function(center, resolution, size, opt_isMoving, opt_centerShift) {
        if (!center) return undefined;
        if (!resolution && !onlyCenter) return center;
        var viewWidth = onlyCenter ? 0 : size[0] * resolution;
        var viewHeight = onlyCenter ? 0 : size[1] * resolution;
        var shiftX = opt_centerShift ? opt_centerShift[0] : 0;
        var shiftY = opt_centerShift ? opt_centerShift[1] : 0;
        var minX = extent[0] + viewWidth / 2 + shiftX;
        var maxX = extent[2] - viewWidth / 2 + shiftX;
        var minY = extent[1] + viewHeight / 2 + shiftY;
        var maxY = extent[3] - viewHeight / 2 + shiftY;
        // note: when zooming out of bounds, min and max values for x and y may
        // end up inverted (min > max); this has to be accounted for
        if (minX > maxX) {
            minX = (maxX + minX) / 2;
            maxX = minX;
        }
        if (minY > maxY) {
            minY = (maxY + minY) / 2;
            maxY = minY;
        }
        var x = (0, _mathJs.clamp)(center[0], minX, maxX);
        var y = (0, _mathJs.clamp)(center[1], minY, maxY);
        // during an interaction, allow some overscroll
        if (opt_isMoving && smooth && resolution) {
            var ratio = 30 * resolution;
            x += -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) + ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);
            y += -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) + ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);
        }
        return [
            x,
            y
        ];
    });
}
function none(center) {
    return center;
}

},{"./math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j8WKZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {Array<number>} resolutions Resolutions.
 * @param {boolean} [opt_smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.
 * @param {import("./extent.js").Extent} [opt_maxExtent] Maximum allowed extent.
 * @param {boolean} [opt_showFullExtent] If true, allows us to show the full extent. Default: false.
 * @return {Type} Zoom function.
 */ parcelHelpers.export(exports, "createSnapToResolutions", ()=>createSnapToResolutions);
/**
 * @param {number} power Power.
 * @param {number} maxResolution Maximum resolution.
 * @param {number} [opt_minResolution] Minimum resolution.
 * @param {boolean} [opt_smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.
 * @param {import("./extent.js").Extent} [opt_maxExtent] Maximum allowed extent.
 * @param {boolean} [opt_showFullExtent] If true, allows us to show the full extent. Default: false.
 * @return {Type} Zoom function.
 */ parcelHelpers.export(exports, "createSnapToPower", ()=>createSnapToPower);
/**
 * @param {number} maxResolution Max resolution.
 * @param {number} minResolution Min resolution.
 * @param {boolean} [opt_smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.
 * @param {import("./extent.js").Extent} [opt_maxExtent] Maximum allowed extent.
 * @param {boolean} [opt_showFullExtent] If true, allows us to show the full extent. Default: false.
 * @return {Type} Zoom function.
 */ parcelHelpers.export(exports, "createMinMaxResolution", ()=>createMinMaxResolution);
/**
 * @module ol/resolutionconstraint
 */ var _mathJs = require("./math.js");
var _extentJs = require("./extent.js");
var _arrayJs = require("./array.js");
/**
 * @typedef {function((number|undefined), number, import("./size.js").Size, boolean=): (number|undefined)} Type
 */ /**
 * Returns a modified resolution taking into account the viewport size and maximum
 * allowed extent.
 * @param {number} resolution Resolution
 * @param {import("./extent.js").Extent} maxExtent Maximum allowed extent.
 * @param {import("./size.js").Size} viewportSize Viewport size.
 * @param {boolean} showFullExtent Whether to show the full extent.
 * @return {number} Capped resolution.
 */ function getViewportClampedResolution(resolution, maxExtent, viewportSize, showFullExtent) {
    var xResolution = (0, _extentJs.getWidth)(maxExtent) / viewportSize[0];
    var yResolution = (0, _extentJs.getHeight)(maxExtent) / viewportSize[1];
    if (showFullExtent) return Math.min(resolution, Math.max(xResolution, yResolution));
    return Math.min(resolution, Math.min(xResolution, yResolution));
}
/**
 * Returns a modified resolution to be between maxResolution and minResolution while
 * still allowing the value to be slightly out of bounds.
 * Note: the computation is based on the logarithm function (ln):
 *  - at 1, ln(x) is 0
 *  - above 1, ln(x) keeps increasing but at a much slower pace than x
 * The final result is clamped to prevent getting too far away from bounds.
 * @param {number} resolution Resolution.
 * @param {number} maxResolution Max resolution.
 * @param {number} minResolution Min resolution.
 * @return {number} Smoothed resolution.
 */ function getSmoothClampedResolution(resolution, maxResolution, minResolution) {
    var result = Math.min(resolution, maxResolution);
    var ratio = 50;
    result *= Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio + 1;
    if (minResolution) {
        result = Math.max(result, minResolution);
        result /= Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) / ratio + 1;
    }
    return (0, _mathJs.clamp)(result, minResolution / 2, maxResolution * 2);
}
function createSnapToResolutions(resolutions, opt_smooth, opt_maxExtent, opt_showFullExtent) {
    return(/**
     * @param {number|undefined} resolution Resolution.
     * @param {number} direction Direction.
     * @param {import("./size.js").Size} size Viewport size.
     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.
     * @return {number|undefined} Resolution.
     */ function(resolution, direction, size, opt_isMoving) {
        if (resolution !== undefined) {
            var maxResolution = resolutions[0];
            var minResolution = resolutions[resolutions.length - 1];
            var cappedMaxRes = opt_maxExtent ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent) : maxResolution;
            // during interacting or animating, allow intermediary values
            if (opt_isMoving) {
                var smooth = opt_smooth !== undefined ? opt_smooth : true;
                if (!smooth) return (0, _mathJs.clamp)(resolution, minResolution, cappedMaxRes);
                return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
            }
            var capped = Math.min(cappedMaxRes, resolution);
            var z = Math.floor((0, _arrayJs.linearFindNearest)(resolutions, capped, direction));
            if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) return resolutions[z + 1];
            return resolutions[z];
        } else return undefined;
    });
}
function createSnapToPower(power, maxResolution, opt_minResolution, opt_smooth, opt_maxExtent, opt_showFullExtent) {
    return(/**
     * @param {number|undefined} resolution Resolution.
     * @param {number} direction Direction.
     * @param {import("./size.js").Size} size Viewport size.
     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.
     * @return {number|undefined} Resolution.
     */ function(resolution, direction, size, opt_isMoving) {
        if (resolution !== undefined) {
            var cappedMaxRes = opt_maxExtent ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent) : maxResolution;
            var minResolution = opt_minResolution !== undefined ? opt_minResolution : 0;
            // during interacting or animating, allow intermediary values
            if (opt_isMoving) {
                var smooth = opt_smooth !== undefined ? opt_smooth : true;
                if (!smooth) return (0, _mathJs.clamp)(resolution, minResolution, cappedMaxRes);
                return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
            }
            var tolerance = 1e-9;
            var minZoomLevel = Math.ceil(Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance);
            var offset = -direction * (0.5 - tolerance) + 0.5;
            var capped = Math.min(cappedMaxRes, resolution);
            var cappedZoomLevel = Math.floor(Math.log(maxResolution / capped) / Math.log(power) + offset);
            var zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);
            var newResolution = maxResolution / Math.pow(power, zoomLevel);
            return (0, _mathJs.clamp)(newResolution, minResolution, cappedMaxRes);
        } else return undefined;
    });
}
function createMinMaxResolution(maxResolution, minResolution, opt_smooth, opt_maxExtent, opt_showFullExtent) {
    return(/**
     * @param {number|undefined} resolution Resolution.
     * @param {number} direction Direction.
     * @param {import("./size.js").Size} size Viewport size.
     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.
     * @return {number|undefined} Resolution.
     */ function(resolution, direction, size, opt_isMoving) {
        if (resolution !== undefined) {
            var cappedMaxRes = opt_maxExtent ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent) : maxResolution;
            var smooth = opt_smooth !== undefined ? opt_smooth : true;
            if (!smooth || !opt_isMoving) return (0, _mathJs.clamp)(resolution, minResolution, cappedMaxRes);
            return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
        } else return undefined;
    });
}

},{"./math.js":"5jEFr","./extent.js":"6YrVc","./array.js":"1Fbic","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hSWd8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @typedef {function((number|undefined), boolean=): (number|undefined)} Type
 */ /**
 * @param {number|undefined} rotation Rotation.
 * @return {number|undefined} Rotation.
 */ parcelHelpers.export(exports, "disable", ()=>disable);
/**
 * @param {number|undefined} rotation Rotation.
 * @return {number|undefined} Rotation.
 */ parcelHelpers.export(exports, "none", ()=>none);
/**
 * @param {number} n N.
 * @return {Type} Rotation constraint.
 */ parcelHelpers.export(exports, "createSnapToN", ()=>createSnapToN);
/**
 * @param {number} [opt_tolerance] Tolerance.
 * @return {Type} Rotation constraint.
 */ parcelHelpers.export(exports, "createSnapToZero", ()=>createSnapToZero);
/**
 * @module ol/rotationconstraint
 */ var _mathJs = require("./math.js");
function disable(rotation) {
    if (rotation !== undefined) return 0;
    else return undefined;
}
function none(rotation) {
    if (rotation !== undefined) return rotation;
    else return undefined;
}
function createSnapToN(n) {
    var theta = 2 * Math.PI / n;
    return(/**
     * @param {number|undefined} rotation Rotation.
     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.
     * @return {number|undefined} Rotation.
     */ function(rotation, opt_isMoving) {
        if (opt_isMoving) return rotation;
        if (rotation !== undefined) {
            rotation = Math.floor(rotation / theta + 0.5) * theta;
            return rotation;
        } else return undefined;
    });
}
function createSnapToZero(opt_tolerance) {
    var tolerance = opt_tolerance || (0, _mathJs.toRadians)(5);
    return(/**
     * @param {number|undefined} rotation Rotation.
     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.
     * @return {number|undefined} Rotation.
     */ function(rotation, opt_isMoving) {
        if (opt_isMoving) return rotation;
        if (rotation !== undefined) {
            if (Math.abs(rotation) <= tolerance) return 0;
            else return rotation;
        } else return undefined;
    });
}

},{"./math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cJuQF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create an approximation of a circle on the surface of a sphere.
 * @param {import("../coordinate.js").Coordinate} center Center (`[lon, lat]` in degrees).
 * @param {number} radius The great-circle distance from the center to
 *     the polygon vertices in meters.
 * @param {number} [opt_n] Optional number of vertices for the resulting
 *     polygon. Default is `32`.
 * @param {number} [opt_sphereRadius] Optional radius for the sphere (defaults to
 *     the Earth's mean radius using the WGS84 ellipsoid).
 * @return {Polygon} The "circular" polygon.
 * @api
 */ parcelHelpers.export(exports, "circular", ()=>circular);
/**
 * Create a polygon from an extent. The layout used is `XY`.
 * @param {import("../extent.js").Extent} extent The extent.
 * @return {Polygon} The polygon.
 * @api
 */ parcelHelpers.export(exports, "fromExtent", ()=>fromExtent);
/**
 * Create a regular polygon from a circle.
 * @param {import("./Circle.js").default} circle Circle geometry.
 * @param {number} [opt_sides] Number of sides of the polygon. Default is 32.
 * @param {number} [opt_angle] Start angle for the first vertex of the polygon in
 *     counter-clockwise radians. 0 means East. Default is 0.
 * @return {Polygon} Polygon geometry.
 * @api
 */ parcelHelpers.export(exports, "fromCircle", ()=>fromCircle);
/**
 * Modify the coordinates of a polygon to make it a regular polygon.
 * @param {Polygon} polygon Polygon geometry.
 * @param {import("../coordinate.js").Coordinate} center Center of the regular polygon.
 * @param {number} radius Radius of the regular polygon.
 * @param {number} [opt_angle] Start angle for the first vertex of the polygon in
 *     counter-clockwise radians. 0 means East. Default is 0.
 */ parcelHelpers.export(exports, "makeRegular", ()=>makeRegular);
/**
 * @module ol/geom/Polygon
 */ var _geometryLayoutJs = require("./GeometryLayout.js");
var _geometryLayoutJsDefault = parcelHelpers.interopDefault(_geometryLayoutJs);
var _geometryTypeJs = require("./GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _linearRingJs = require("./LinearRing.js");
var _linearRingJsDefault = parcelHelpers.interopDefault(_linearRingJs);
var _pointJs = require("./Point.js");
var _pointJsDefault = parcelHelpers.interopDefault(_pointJs);
var _simpleGeometryJs = require("./SimpleGeometry.js");
var _simpleGeometryJsDefault = parcelHelpers.interopDefault(_simpleGeometryJs);
var _closestJs = require("./flat/closest.js");
var _extentJs = require("../extent.js");
var _deflateJs = require("./flat/deflate.js");
var _arrayJs = require("../array.js");
var _interiorpointJs = require("./flat/interiorpoint.js");
var _inflateJs = require("./flat/inflate.js");
var _intersectsextentJs = require("./flat/intersectsextent.js");
var _orientJs = require("./flat/orient.js");
var _areaJs = require("./flat/area.js");
var _containsJs = require("./flat/contains.js");
var _mathJs = require("../math.js");
var _simplifyJs = require("./flat/simplify.js");
var _sphereJs = require("../sphere.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Polygon geometry.
 *
 * @api
 */ var Polygon = /** @class */ function(_super) {
    __extends(Polygon1, _super);
    /**
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>|!Array<number>} coordinates
     *     Array of linear rings that define the polygon. The first linear ring of the
     *     array defines the outer-boundary or surface of the polygon. Each subsequent
     *     linear ring defines a hole in the surface of the polygon. A linear ring is
     *     an array of vertices' coordinates where the first coordinate and the last are
     *     equivalent. (For internal use, flat coordinates in combination with
     *     `opt_layout` and `opt_ends` are also accepted.)
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     * @param {Array<number>} [opt_ends] Ends (for internal use with flat coordinates).
     */ function Polygon1(coordinates, opt_layout, opt_ends) {
        var _this = _super.call(this) || this;
        /**
         * @type {Array<number>}
         * @private
         */ _this.ends_ = [];
        /**
         * @private
         * @type {number}
         */ _this.flatInteriorPointRevision_ = -1;
        /**
         * @private
         * @type {import("../coordinate.js").Coordinate}
         */ _this.flatInteriorPoint_ = null;
        /**
         * @private
         * @type {number}
         */ _this.maxDelta_ = -1;
        /**
         * @private
         * @type {number}
         */ _this.maxDeltaRevision_ = -1;
        /**
         * @private
         * @type {number}
         */ _this.orientedRevision_ = -1;
        /**
         * @private
         * @type {Array<number>}
         */ _this.orientedFlatCoordinates_ = null;
        if (opt_layout !== undefined && opt_ends) {
            _this.setFlatCoordinates(opt_layout, coordinates);
            _this.ends_ = opt_ends;
        } else _this.setCoordinates(coordinates, opt_layout);
        return _this;
    }
    /**
     * Append the passed linear ring to this polygon.
     * @param {LinearRing} linearRing Linear ring.
     * @api
     */ Polygon1.prototype.appendLinearRing = function(linearRing) {
        if (!this.flatCoordinates) this.flatCoordinates = linearRing.getFlatCoordinates().slice();
        else (0, _arrayJs.extend)(this.flatCoordinates, linearRing.getFlatCoordinates());
        this.ends_.push(this.flatCoordinates.length);
        this.changed();
    };
    /**
     * Make a complete copy of the geometry.
     * @return {!Polygon} Clone.
     * @api
     */ Polygon1.prototype.clone = function() {
        var polygon = new Polygon1(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
        polygon.applyProperties(this);
        return polygon;
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */ Polygon1.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
        if (minSquaredDistance < (0, _extentJs.closestSquaredDistanceXY)(this.getExtent(), x, y)) return minSquaredDistance;
        if (this.maxDeltaRevision_ != this.getRevision()) {
            this.maxDelta_ = Math.sqrt((0, _closestJs.arrayMaxSquaredDelta)(this.flatCoordinates, 0, this.ends_, this.stride, 0));
            this.maxDeltaRevision_ = this.getRevision();
        }
        return (0, _closestJs.assignClosestArrayPoint)(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */ Polygon1.prototype.containsXY = function(x, y) {
        return (0, _containsJs.linearRingsContainsXY)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);
    };
    /**
     * Return the area of the polygon on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */ Polygon1.prototype.getArea = function() {
        return (0, _areaJs.linearRings)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);
    };
    /**
     * Get the coordinate array for this geometry.  This array has the structure
     * of a GeoJSON coordinate array for polygons.
     *
     * @param {boolean} [opt_right] Orient coordinates according to the right-hand
     *     rule (counter-clockwise for exterior and clockwise for interior rings).
     *     If `false`, coordinates will be oriented according to the left-hand rule
     *     (clockwise for exterior and counter-clockwise for interior rings).
     *     By default, coordinate orientation will depend on how the geometry was
     *     constructed.
     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
     * @api
     */ Polygon1.prototype.getCoordinates = function(opt_right) {
        var flatCoordinates;
        if (opt_right !== undefined) {
            flatCoordinates = this.getOrientedFlatCoordinates().slice();
            (0, _orientJs.orientLinearRings)(flatCoordinates, 0, this.ends_, this.stride, opt_right);
        } else flatCoordinates = this.flatCoordinates;
        return (0, _inflateJs.inflateCoordinatesArray)(flatCoordinates, 0, this.ends_, this.stride);
    };
    /**
     * @return {Array<number>} Ends.
     */ Polygon1.prototype.getEnds = function() {
        return this.ends_;
    };
    /**
     * @return {Array<number>} Interior point.
     */ Polygon1.prototype.getFlatInteriorPoint = function() {
        if (this.flatInteriorPointRevision_ != this.getRevision()) {
            var flatCenter = (0, _extentJs.getCenter)(this.getExtent());
            this.flatInteriorPoint_ = (0, _interiorpointJs.getInteriorPointOfArray)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);
            this.flatInteriorPointRevision_ = this.getRevision();
        }
        return this.flatInteriorPoint_;
    };
    /**
     * Return an interior point of the polygon.
     * @return {Point} Interior point as XYM coordinate, where M is the
     * length of the horizontal intersection that the point belongs to.
     * @api
     */ Polygon1.prototype.getInteriorPoint = function() {
        return new (0, _pointJsDefault.default)(this.getFlatInteriorPoint(), (0, _geometryLayoutJsDefault.default).XYM);
    };
    /**
     * Return the number of rings of the polygon,  this includes the exterior
     * ring and any interior rings.
     *
     * @return {number} Number of rings.
     * @api
     */ Polygon1.prototype.getLinearRingCount = function() {
        return this.ends_.length;
    };
    /**
     * Return the Nth linear ring of the polygon geometry. Return `null` if the
     * given index is out of range.
     * The exterior linear ring is available at index `0` and the interior rings
     * at index `1` and beyond.
     *
     * @param {number} index Index.
     * @return {LinearRing|null} Linear ring.
     * @api
     */ Polygon1.prototype.getLinearRing = function(index) {
        if (index < 0 || this.ends_.length <= index) return null;
        return new (0, _linearRingJsDefault.default)(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
    };
    /**
     * Return the linear rings of the polygon.
     * @return {Array<LinearRing>} Linear rings.
     * @api
     */ Polygon1.prototype.getLinearRings = function() {
        var layout = this.layout;
        var flatCoordinates = this.flatCoordinates;
        var ends = this.ends_;
        var linearRings = [];
        var offset = 0;
        for(var i = 0, ii = ends.length; i < ii; ++i){
            var end = ends[i];
            var linearRing = new (0, _linearRingJsDefault.default)(flatCoordinates.slice(offset, end), layout);
            linearRings.push(linearRing);
            offset = end;
        }
        return linearRings;
    };
    /**
     * @return {Array<number>} Oriented flat coordinates.
     */ Polygon1.prototype.getOrientedFlatCoordinates = function() {
        if (this.orientedRevision_ != this.getRevision()) {
            var flatCoordinates = this.flatCoordinates;
            if ((0, _orientJs.linearRingsAreOriented)(flatCoordinates, 0, this.ends_, this.stride)) this.orientedFlatCoordinates_ = flatCoordinates;
            else {
                this.orientedFlatCoordinates_ = flatCoordinates.slice();
                this.orientedFlatCoordinates_.length = (0, _orientJs.orientLinearRings)(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);
            }
            this.orientedRevision_ = this.getRevision();
        }
        return this.orientedFlatCoordinates_;
    };
    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {Polygon} Simplified Polygon.
     * @protected
     */ Polygon1.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {
        var simplifiedFlatCoordinates = [];
        var simplifiedEnds = [];
        simplifiedFlatCoordinates.length = (0, _simplifyJs.quantizeArray)(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);
        return new Polygon1(simplifiedFlatCoordinates, (0, _geometryLayoutJsDefault.default).XY, simplifiedEnds);
    };
    /**
     * Get the type of this geometry.
     * @return {import("./GeometryType.js").default} Geometry type.
     * @api
     */ Polygon1.prototype.getType = function() {
        return (0, _geometryTypeJsDefault.default).POLYGON;
    };
    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */ Polygon1.prototype.intersectsExtent = function(extent) {
        return (0, _intersectsextentJs.intersectsLinearRingArray)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);
    };
    /**
     * Set the coordinates of the polygon.
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     * @api
     */ Polygon1.prototype.setCoordinates = function(coordinates, opt_layout) {
        this.setLayout(opt_layout, coordinates, 2);
        if (!this.flatCoordinates) this.flatCoordinates = [];
        var ends = (0, _deflateJs.deflateCoordinatesArray)(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
        this.changed();
    };
    return Polygon1;
}((0, _simpleGeometryJsDefault.default));
exports.default = Polygon;
function circular(center, radius, opt_n, opt_sphereRadius) {
    var n = opt_n ? opt_n : 32;
    /** @type {Array<number>} */ var flatCoordinates = [];
    for(var i = 0; i < n; ++i)(0, _arrayJs.extend)(flatCoordinates, (0, _sphereJs.offset)(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));
    flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);
    return new Polygon(flatCoordinates, (0, _geometryLayoutJsDefault.default).XY, [
        flatCoordinates.length, 
    ]);
}
function fromExtent(extent) {
    var minX = extent[0];
    var minY = extent[1];
    var maxX = extent[2];
    var maxY = extent[3];
    var flatCoordinates = [
        minX,
        minY,
        minX,
        maxY,
        maxX,
        maxY,
        maxX,
        minY,
        minX,
        minY, 
    ];
    return new Polygon(flatCoordinates, (0, _geometryLayoutJsDefault.default).XY, [
        flatCoordinates.length, 
    ]);
}
function fromCircle(circle, opt_sides, opt_angle) {
    var sides = opt_sides ? opt_sides : 32;
    var stride = circle.getStride();
    var layout = circle.getLayout();
    var center = circle.getCenter();
    var arrayLength = stride * (sides + 1);
    var flatCoordinates = new Array(arrayLength);
    for(var i = 0; i < arrayLength; i += stride){
        flatCoordinates[i] = 0;
        flatCoordinates[i + 1] = 0;
        for(var j = 2; j < stride; j++)flatCoordinates[i + j] = center[j];
    }
    var ends = [
        flatCoordinates.length
    ];
    var polygon = new Polygon(flatCoordinates, layout, ends);
    makeRegular(polygon, center, circle.getRadius(), opt_angle);
    return polygon;
}
function makeRegular(polygon, center, radius, opt_angle) {
    var flatCoordinates = polygon.getFlatCoordinates();
    var stride = polygon.getStride();
    var sides = flatCoordinates.length / stride - 1;
    var startAngle = opt_angle ? opt_angle : 0;
    for(var i = 0; i <= sides; ++i){
        var offset = i * stride;
        var angle = startAngle + (0, _mathJs.modulo)(i, sides) * 2 * Math.PI / sides;
        flatCoordinates[offset] = center[0] + radius * Math.cos(angle);
        flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);
    }
    polygon.changed();
}

},{"./GeometryLayout.js":"hDCgS","./GeometryType.js":"j6daa","./LinearRing.js":"jg1hj","./Point.js":"hx2Ar","./SimpleGeometry.js":"hLwk3","./flat/closest.js":"fi6H5","../extent.js":"6YrVc","./flat/deflate.js":"3TE5l","../array.js":"1Fbic","./flat/interiorpoint.js":"59VP9","./flat/inflate.js":"4Rpju","./flat/intersectsextent.js":"7x08H","./flat/orient.js":"btd6s","./flat/area.js":"7fT8A","./flat/contains.js":"eArlN","../math.js":"5jEFr","./flat/simplify.js":"jsqc5","../sphere.js":"eJjHw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hDCgS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/GeometryLayout
 */ /**
 * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
 * or measure ('M') coordinate is available. Supported values are `'XY'`,
 * `'XYZ'`, `'XYM'`, `'XYZM'`.
 * @enum {string}
 */ exports.default = {
    XY: "XY",
    XYZ: "XYZ",
    XYM: "XYM",
    XYZM: "XYZM"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jg1hj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/LinearRing
 */ var _geometryLayoutJs = require("./GeometryLayout.js");
var _geometryLayoutJsDefault = parcelHelpers.interopDefault(_geometryLayoutJs);
var _geometryTypeJs = require("./GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _simpleGeometryJs = require("./SimpleGeometry.js");
var _simpleGeometryJsDefault = parcelHelpers.interopDefault(_simpleGeometryJs);
var _closestJs = require("./flat/closest.js");
var _extentJs = require("../extent.js");
var _deflateJs = require("./flat/deflate.js");
var _simplifyJs = require("./flat/simplify.js");
var _inflateJs = require("./flat/inflate.js");
var _areaJs = require("./flat/area.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Linear ring geometry. Only used as part of polygon; cannot be rendered
 * on its own.
 *
 * @api
 */ var LinearRing = /** @class */ function(_super) {
    __extends(LinearRing1, _super);
    /**
     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     */ function LinearRing1(coordinates, opt_layout) {
        var _this = _super.call(this) || this;
        /**
         * @private
         * @type {number}
         */ _this.maxDelta_ = -1;
        /**
         * @private
         * @type {number}
         */ _this.maxDeltaRevision_ = -1;
        if (opt_layout !== undefined && !Array.isArray(coordinates[0])) _this.setFlatCoordinates(opt_layout, coordinates);
        else _this.setCoordinates(coordinates, opt_layout);
        return _this;
    }
    /**
     * Make a complete copy of the geometry.
     * @return {!LinearRing} Clone.
     * @api
     */ LinearRing1.prototype.clone = function() {
        return new LinearRing1(this.flatCoordinates.slice(), this.layout);
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */ LinearRing1.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
        if (minSquaredDistance < (0, _extentJs.closestSquaredDistanceXY)(this.getExtent(), x, y)) return minSquaredDistance;
        if (this.maxDeltaRevision_ != this.getRevision()) {
            this.maxDelta_ = Math.sqrt((0, _closestJs.maxSquaredDelta)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
            this.maxDeltaRevision_ = this.getRevision();
        }
        return (0, _closestJs.assignClosestPoint)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    };
    /**
     * Return the area of the linear ring on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */ LinearRing1.prototype.getArea = function() {
        return (0, _areaJs.linearRing)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };
    /**
     * Return the coordinates of the linear ring.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @api
     */ LinearRing1.prototype.getCoordinates = function() {
        return (0, _inflateJs.inflateCoordinates)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };
    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {LinearRing} Simplified LinearRing.
     * @protected
     */ LinearRing1.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {
        var simplifiedFlatCoordinates = [];
        simplifiedFlatCoordinates.length = (0, _simplifyJs.douglasPeucker)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
        return new LinearRing1(simplifiedFlatCoordinates, (0, _geometryLayoutJsDefault.default).XY);
    };
    /**
     * Get the type of this geometry.
     * @return {import("./GeometryType.js").default} Geometry type.
     * @api
     */ LinearRing1.prototype.getType = function() {
        return (0, _geometryTypeJsDefault.default).LINEAR_RING;
    };
    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */ LinearRing1.prototype.intersectsExtent = function(extent) {
        return false;
    };
    /**
     * Set the coordinates of the linear ring.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     * @api
     */ LinearRing1.prototype.setCoordinates = function(coordinates, opt_layout) {
        this.setLayout(opt_layout, coordinates, 1);
        if (!this.flatCoordinates) this.flatCoordinates = [];
        this.flatCoordinates.length = (0, _deflateJs.deflateCoordinates)(this.flatCoordinates, 0, coordinates, this.stride);
        this.changed();
    };
    return LinearRing1;
}((0, _simpleGeometryJsDefault.default));
exports.default = LinearRing;

},{"./GeometryLayout.js":"hDCgS","./GeometryType.js":"j6daa","./SimpleGeometry.js":"hLwk3","./flat/closest.js":"fi6H5","../extent.js":"6YrVc","./flat/deflate.js":"3TE5l","./flat/simplify.js":"jsqc5","./flat/inflate.js":"4Rpju","./flat/area.js":"7fT8A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hLwk3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {import("./GeometryLayout.js").default} layout Layout.
 * @return {number} Stride.
 */ parcelHelpers.export(exports, "getStrideForLayout", ()=>getStrideForLayout);
/**
 * @param {SimpleGeometry} simpleGeometry Simple geometry.
 * @param {import("../transform.js").Transform} transform Transform.
 * @param {Array<number>} [opt_dest] Destination.
 * @return {Array<number>} Transformed flat coordinates.
 */ parcelHelpers.export(exports, "transformGeom2D", ()=>transformGeom2D);
/**
 * @module ol/geom/SimpleGeometry
 */ var _geometryJs = require("./Geometry.js");
var _geometryJsDefault = parcelHelpers.interopDefault(_geometryJs);
var _geometryLayoutJs = require("./GeometryLayout.js");
var _geometryLayoutJsDefault = parcelHelpers.interopDefault(_geometryLayoutJs);
var _utilJs = require("../util.js");
var _extentJs = require("../extent.js");
var _transformJs = require("./flat/transform.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Abstract base class; only used for creating subclasses; do not instantiate
 * in apps, as cannot be rendered.
 *
 * @abstract
 * @api
 */ var SimpleGeometry = /** @class */ function(_super) {
    __extends(SimpleGeometry1, _super);
    function SimpleGeometry1() {
        var _this = _super.call(this) || this;
        /**
         * @protected
         * @type {import("./GeometryLayout.js").default}
         */ _this.layout = (0, _geometryLayoutJsDefault.default).XY;
        /**
         * @protected
         * @type {number}
         */ _this.stride = 2;
        /**
         * @protected
         * @type {Array<number>}
         */ _this.flatCoordinates = null;
        return _this;
    }
    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */ SimpleGeometry1.prototype.computeExtent = function(extent) {
        return (0, _extentJs.createOrUpdateFromFlatCoordinates)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);
    };
    /**
     * @abstract
     * @return {Array<*> | null} Coordinates.
     */ SimpleGeometry1.prototype.getCoordinates = function() {
        return (0, _utilJs.abstract)();
    };
    /**
     * Return the first coordinate of the geometry.
     * @return {import("../coordinate.js").Coordinate} First coordinate.
     * @api
     */ SimpleGeometry1.prototype.getFirstCoordinate = function() {
        return this.flatCoordinates.slice(0, this.stride);
    };
    /**
     * @return {Array<number>} Flat coordinates.
     */ SimpleGeometry1.prototype.getFlatCoordinates = function() {
        return this.flatCoordinates;
    };
    /**
     * Return the last coordinate of the geometry.
     * @return {import("../coordinate.js").Coordinate} Last point.
     * @api
     */ SimpleGeometry1.prototype.getLastCoordinate = function() {
        return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);
    };
    /**
     * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.
     * @return {import("./GeometryLayout.js").default} Layout.
     * @api
     */ SimpleGeometry1.prototype.getLayout = function() {
        return this.layout;
    };
    /**
     * Create a simplified version of this geometry using the Douglas Peucker algorithm.
     * @param {number} squaredTolerance Squared tolerance.
     * @return {SimpleGeometry} Simplified geometry.
     */ SimpleGeometry1.prototype.getSimplifiedGeometry = function(squaredTolerance) {
        if (this.simplifiedGeometryRevision !== this.getRevision()) {
            this.simplifiedGeometryMaxMinSquaredTolerance = 0;
            this.simplifiedGeometryRevision = this.getRevision();
        }
        // If squaredTolerance is negative or if we know that simplification will not
        // have any effect then just return this.
        if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) return this;
        var simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);
        var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();
        if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) return simplifiedGeometry;
        else {
            // Simplification did not actually remove any coordinates.  We now know
            // that any calls to getSimplifiedGeometry with a squaredTolerance less
            // than or equal to the current squaredTolerance will also not have any
            // effect.  This allows us to short circuit simplification (saving CPU
            // cycles) and prevents the cache of simplified geometries from filling
            // up with useless identical copies of this geometry (saving memory).
            this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
            return this;
        }
    };
    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {SimpleGeometry} Simplified geometry.
     * @protected
     */ SimpleGeometry1.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {
        return this;
    };
    /**
     * @return {number} Stride.
     */ SimpleGeometry1.prototype.getStride = function() {
        return this.stride;
    };
    /**
     * @param {import("./GeometryLayout.js").default} layout Layout.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     */ SimpleGeometry1.prototype.setFlatCoordinates = function(layout, flatCoordinates) {
        this.stride = getStrideForLayout(layout);
        this.layout = layout;
        this.flatCoordinates = flatCoordinates;
    };
    /**
     * @abstract
     * @param {!Array<*>} coordinates Coordinates.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     */ SimpleGeometry1.prototype.setCoordinates = function(coordinates, opt_layout) {
        (0, _utilJs.abstract)();
    };
    /**
     * @param {import("./GeometryLayout.js").default|undefined} layout Layout.
     * @param {Array<*>} coordinates Coordinates.
     * @param {number} nesting Nesting.
     * @protected
     */ SimpleGeometry1.prototype.setLayout = function(layout, coordinates, nesting) {
        /** @type {number} */ var stride;
        if (layout) stride = getStrideForLayout(layout);
        else {
            for(var i = 0; i < nesting; ++i)if (coordinates.length === 0) {
                this.layout = (0, _geometryLayoutJsDefault.default).XY;
                this.stride = 2;
                return;
            } else coordinates = coordinates[0];
            stride = coordinates.length;
            layout = getLayoutForStride(stride);
        }
        this.layout = layout;
        this.stride = stride;
    };
    /**
     * Apply a transform function to the coordinates of the geometry.
     * The geometry is modified in place.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     * @param {import("../proj.js").TransformFunction} transformFn Transform function.
     * Called with a flat array of geometry coordinates.
     * @api
     */ SimpleGeometry1.prototype.applyTransform = function(transformFn) {
        if (this.flatCoordinates) {
            transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);
            this.changed();
        }
    };
    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @param {number} angle Rotation angle in counter-clockwise radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     */ SimpleGeometry1.prototype.rotate = function(angle, anchor) {
        var flatCoordinates = this.getFlatCoordinates();
        if (flatCoordinates) {
            var stride = this.getStride();
            (0, _transformJs.rotate)(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);
            this.changed();
        }
    };
    /**
     * Scale the geometry (with an optional origin).  This modifies the geometry
     * coordinates in place.
     * @param {number} sx The scaling factor in the x-direction.
     * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).
     * @param {import("../coordinate.js").Coordinate} [opt_anchor] The scale origin (defaults to the center
     *     of the geometry extent).
     * @api
     */ SimpleGeometry1.prototype.scale = function(sx, opt_sy, opt_anchor) {
        var sy = opt_sy;
        if (sy === undefined) sy = sx;
        var anchor = opt_anchor;
        if (!anchor) anchor = (0, _extentJs.getCenter)(this.getExtent());
        var flatCoordinates = this.getFlatCoordinates();
        if (flatCoordinates) {
            var stride = this.getStride();
            (0, _transformJs.scale)(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);
            this.changed();
        }
    };
    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     */ SimpleGeometry1.prototype.translate = function(deltaX, deltaY) {
        var flatCoordinates = this.getFlatCoordinates();
        if (flatCoordinates) {
            var stride = this.getStride();
            (0, _transformJs.translate)(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);
            this.changed();
        }
    };
    return SimpleGeometry1;
}((0, _geometryJsDefault.default));
/**
 * @param {number} stride Stride.
 * @return {import("./GeometryLayout.js").default} layout Layout.
 */ function getLayoutForStride(stride) {
    var layout;
    if (stride == 2) layout = (0, _geometryLayoutJsDefault.default).XY;
    else if (stride == 3) layout = (0, _geometryLayoutJsDefault.default).XYZ;
    else if (stride == 4) layout = (0, _geometryLayoutJsDefault.default).XYZM;
    return layout;
}
function getStrideForLayout(layout) {
    var stride;
    if (layout == (0, _geometryLayoutJsDefault.default).XY) stride = 2;
    else if (layout == (0, _geometryLayoutJsDefault.default).XYZ || layout == (0, _geometryLayoutJsDefault.default).XYM) stride = 3;
    else if (layout == (0, _geometryLayoutJsDefault.default).XYZM) stride = 4;
    return stride;
}
function transformGeom2D(simpleGeometry, transform, opt_dest) {
    var flatCoordinates = simpleGeometry.getFlatCoordinates();
    if (!flatCoordinates) return null;
    else {
        var stride = simpleGeometry.getStride();
        return (0, _transformJs.transform2D)(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);
    }
}
exports.default = SimpleGeometry;

},{"./Geometry.js":"4ya62","./GeometryLayout.js":"hDCgS","../util.js":"pLBjQ","../extent.js":"6YrVc","./flat/transform.js":"cDA2L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ya62":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/Geometry
 */ var _objectJs = require("../Object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _unitsJs = require("../proj/Units.js");
var _unitsJsDefault = parcelHelpers.interopDefault(_unitsJs);
var _utilJs = require("../util.js");
var _transformJs = require("../transform.js");
var _extentJs = require("../extent.js");
var _projJs = require("../proj.js");
var _functionsJs = require("../functions.js");
var _transformJs1 = require("./flat/transform.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @type {import("../transform.js").Transform}
 */ var tmpTransform = (0, _transformJs.create)();
/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for vector geometries.
 *
 * To get notified of changes to the geometry, register a listener for the
 * generic `change` event on your geometry instance.
 *
 * @abstract
 * @api
 */ var Geometry = /** @class */ function(_super) {
    __extends(Geometry1, _super);
    function Geometry1() {
        var _this = _super.call(this) || this;
        /**
         * @private
         * @type {import("../extent.js").Extent}
         */ _this.extent_ = (0, _extentJs.createEmpty)();
        /**
         * @private
         * @type {number}
         */ _this.extentRevision_ = -1;
        /**
         * @protected
         * @type {number}
         */ _this.simplifiedGeometryMaxMinSquaredTolerance = 0;
        /**
         * @protected
         * @type {number}
         */ _this.simplifiedGeometryRevision = 0;
        /**
         * Get a transformed and simplified version of the geometry.
         * @abstract
         * @param {number} revision The geometry revision.
         * @param {number} squaredTolerance Squared tolerance.
         * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
         * @return {Geometry} Simplified geometry.
         */ _this.simplifyTransformedInternal = (0, _functionsJs.memoizeOne)(function(revision, squaredTolerance, opt_transform) {
            if (!opt_transform) return this.getSimplifiedGeometry(squaredTolerance);
            var clone = this.clone();
            clone.applyTransform(opt_transform);
            return clone.getSimplifiedGeometry(squaredTolerance);
        });
        return _this;
    }
    /**
     * Get a transformed and simplified version of the geometry.
     * @abstract
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
     * @return {Geometry} Simplified geometry.
     */ Geometry1.prototype.simplifyTransformed = function(squaredTolerance, opt_transform) {
        return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, opt_transform);
    };
    /**
     * Make a complete copy of the geometry.
     * @abstract
     * @return {!Geometry} Clone.
     */ Geometry1.prototype.clone = function() {
        return (0, _utilJs.abstract)();
    };
    /**
     * @abstract
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */ Geometry1.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
        return (0, _utilJs.abstract)();
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */ Geometry1.prototype.containsXY = function(x, y) {
        var coord = this.getClosestPoint([
            x,
            y
        ]);
        return coord[0] === x && coord[1] === y;
    };
    /**
     * Return the closest point of the geometry to the passed point as
     * {@link module:ol/coordinate~Coordinate coordinate}.
     * @param {import("../coordinate.js").Coordinate} point Point.
     * @param {import("../coordinate.js").Coordinate} [opt_closestPoint] Closest point.
     * @return {import("../coordinate.js").Coordinate} Closest point.
     * @api
     */ Geometry1.prototype.getClosestPoint = function(point, opt_closestPoint) {
        var closestPoint = opt_closestPoint ? opt_closestPoint : [
            NaN,
            NaN
        ];
        this.closestPointXY(point[0], point[1], closestPoint, Infinity);
        return closestPoint;
    };
    /**
     * Returns true if this geometry includes the specified coordinate. If the
     * coordinate is on the boundary of the geometry, returns false.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {boolean} Contains coordinate.
     * @api
     */ Geometry1.prototype.intersectsCoordinate = function(coordinate) {
        return this.containsXY(coordinate[0], coordinate[1]);
    };
    /**
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */ Geometry1.prototype.computeExtent = function(extent) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Get the extent of the geometry.
     * @param {import("../extent.js").Extent} [opt_extent] Extent.
     * @return {import("../extent.js").Extent} extent Extent.
     * @api
     */ Geometry1.prototype.getExtent = function(opt_extent) {
        if (this.extentRevision_ != this.getRevision()) {
            var extent = this.computeExtent(this.extent_);
            if (isNaN(extent[0]) || isNaN(extent[1])) (0, _extentJs.createOrUpdateEmpty)(extent);
            this.extentRevision_ = this.getRevision();
        }
        return (0, _extentJs.returnOrUpdate)(this.extent_, opt_extent);
    };
    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} angle Rotation angle in radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     */ Geometry1.prototype.rotate = function(angle, anchor) {
        (0, _utilJs.abstract)();
    };
    /**
     * Scale the geometry (with an optional origin).  This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} sx The scaling factor in the x-direction.
     * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).
     * @param {import("../coordinate.js").Coordinate} [opt_anchor] The scale origin (defaults to the center
     *     of the geometry extent).
     * @api
     */ Geometry1.prototype.scale = function(sx, opt_sy, opt_anchor) {
        (0, _utilJs.abstract)();
    };
    /**
     * Create a simplified version of this geometry.  For linestrings, this uses
     * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)
     * algorithm.  For polygons, a quantization-based
     * simplification is used to preserve topology.
     * @param {number} tolerance The tolerance distance for simplification.
     * @return {Geometry} A new, simplified version of the original geometry.
     * @api
     */ Geometry1.prototype.simplify = function(tolerance) {
        return this.getSimplifiedGeometry(tolerance * tolerance);
    };
    /**
     * Create a simplified version of this geometry using the Douglas Peucker
     * algorithm.
     * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.
     * @abstract
     * @param {number} squaredTolerance Squared tolerance.
     * @return {Geometry} Simplified geometry.
     */ Geometry1.prototype.getSimplifiedGeometry = function(squaredTolerance) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Get the type of this geometry.
     * @abstract
     * @return {import("./GeometryType.js").default} Geometry type.
     */ Geometry1.prototype.getType = function() {
        return (0, _utilJs.abstract)();
    };
    /**
     * Apply a transform function to the coordinates of the geometry.
     * The geometry is modified in place.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     * @abstract
     * @param {import("../proj.js").TransformFunction} transformFn Transform function.
     * Called with a flat array of geometry coordinates.
     */ Geometry1.prototype.applyTransform = function(transformFn) {
        (0, _utilJs.abstract)();
    };
    /**
     * Test if the geometry and the passed extent intersect.
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     */ Geometry1.prototype.intersectsExtent = function(extent) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @abstract
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     */ Geometry1.prototype.translate = function(deltaX, deltaY) {
        (0, _utilJs.abstract)();
    };
    /**
     * Transform each coordinate of the geometry from one coordinate reference
     * system to another. The geometry is modified in place.
     * For example, a line will be transformed to a line and a circle to a circle.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     *
     * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @return {Geometry} This geometry.  Note that original geometry is
     *     modified in place.
     * @api
     */ Geometry1.prototype.transform = function(source, destination) {
        /** @type {import("../proj/Projection.js").default} */ var sourceProj = (0, _projJs.get)(source);
        var transformFn = sourceProj.getUnits() == (0, _unitsJsDefault.default).TILE_PIXELS ? function(inCoordinates, outCoordinates, stride) {
            var pixelExtent = sourceProj.getExtent();
            var projectedExtent = sourceProj.getWorldExtent();
            var scale = (0, _extentJs.getHeight)(projectedExtent) / (0, _extentJs.getHeight)(pixelExtent);
            (0, _transformJs.compose)(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);
            (0, _transformJs1.transform2D)(inCoordinates, 0, inCoordinates.length, stride, tmpTransform, outCoordinates);
            return (0, _projJs.getTransform)(sourceProj, destination)(inCoordinates, outCoordinates, stride);
        } : (0, _projJs.getTransform)(sourceProj, destination);
        this.applyTransform(transformFn);
        return this;
    };
    return Geometry1;
}((0, _objectJsDefault.default));
exports.default = Geometry;

},{"../Object.js":"1zG8z","../proj/Units.js":"gOgy6","../util.js":"pLBjQ","../transform.js":"1BqUf","../extent.js":"6YrVc","../proj.js":"SznqC","../functions.js":"iqv8I","./flat/transform.js":"cDA2L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cDA2L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/flat/transform
 */ /**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {import("../../transform.js").Transform} transform Transform.
 * @param {Array<number>} [opt_dest] Destination.
 * @return {Array<number>} Transformed coordinates.
 */ parcelHelpers.export(exports, "transform2D", ()=>transform2D);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} angle Angle.
 * @param {Array<number>} anchor Rotation anchor point.
 * @param {Array<number>} [opt_dest] Destination.
 * @return {Array<number>} Transformed coordinates.
 */ parcelHelpers.export(exports, "rotate", ()=>rotate);
/**
 * Scale the coordinates.
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} sx Scale factor in the x-direction.
 * @param {number} sy Scale factor in the y-direction.
 * @param {Array<number>} anchor Scale anchor point.
 * @param {Array<number>} [opt_dest] Destination.
 * @return {Array<number>} Transformed coordinates.
 */ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} deltaX Delta X.
 * @param {number} deltaY Delta Y.
 * @param {Array<number>} [opt_dest] Destination.
 * @return {Array<number>} Transformed coordinates.
 */ parcelHelpers.export(exports, "translate", ()=>translate);
function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {
    var dest = opt_dest ? opt_dest : [];
    var i = 0;
    for(var j = offset; j < end; j += stride){
        var x = flatCoordinates[j];
        var y = flatCoordinates[j + 1];
        dest[i++] = transform[0] * x + transform[2] * y + transform[4];
        dest[i++] = transform[1] * x + transform[3] * y + transform[5];
    }
    if (opt_dest && dest.length != i) dest.length = i;
    return dest;
}
function rotate(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {
    var dest = opt_dest ? opt_dest : [];
    var cos = Math.cos(angle);
    var sin = Math.sin(angle);
    var anchorX = anchor[0];
    var anchorY = anchor[1];
    var i = 0;
    for(var j = offset; j < end; j += stride){
        var deltaX = flatCoordinates[j] - anchorX;
        var deltaY = flatCoordinates[j + 1] - anchorY;
        dest[i++] = anchorX + deltaX * cos - deltaY * sin;
        dest[i++] = anchorY + deltaX * sin + deltaY * cos;
        for(var k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];
    }
    if (opt_dest && dest.length != i) dest.length = i;
    return dest;
}
function scale(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {
    var dest = opt_dest ? opt_dest : [];
    var anchorX = anchor[0];
    var anchorY = anchor[1];
    var i = 0;
    for(var j = offset; j < end; j += stride){
        var deltaX = flatCoordinates[j] - anchorX;
        var deltaY = flatCoordinates[j + 1] - anchorY;
        dest[i++] = anchorX + sx * deltaX;
        dest[i++] = anchorY + sy * deltaY;
        for(var k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];
    }
    if (opt_dest && dest.length != i) dest.length = i;
    return dest;
}
function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {
    var dest = opt_dest ? opt_dest : [];
    var i = 0;
    for(var j = offset; j < end; j += stride){
        dest[i++] = flatCoordinates[j] + deltaX;
        dest[i++] = flatCoordinates[j + 1] + deltaY;
        for(var k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];
    }
    if (opt_dest && dest.length != i) dest.length = i;
    return dest;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fi6H5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Return the squared of the largest distance between any pair of consecutive
 * coordinates.
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} max Max squared delta.
 * @return {number} Max squared delta.
 */ parcelHelpers.export(exports, "maxSquaredDelta", ()=>maxSquaredDelta);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {number} max Max squared delta.
 * @return {number} Max squared delta.
 */ parcelHelpers.export(exports, "arrayMaxSquaredDelta", ()=>arrayMaxSquaredDelta);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {number} max Max squared delta.
 * @return {number} Max squared delta.
 */ parcelHelpers.export(exports, "multiArrayMaxSquaredDelta", ()=>multiArrayMaxSquaredDelta);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} maxDelta Max delta.
 * @param {boolean} isRing Is ring.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {Array<number>} closestPoint Closest point.
 * @param {number} minSquaredDistance Minimum squared distance.
 * @param {Array<number>} [opt_tmpPoint] Temporary point object.
 * @return {number} Minimum squared distance.
 */ parcelHelpers.export(exports, "assignClosestPoint", ()=>assignClosestPoint);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {number} maxDelta Max delta.
 * @param {boolean} isRing Is ring.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {Array<number>} closestPoint Closest point.
 * @param {number} minSquaredDistance Minimum squared distance.
 * @param {Array<number>} [opt_tmpPoint] Temporary point object.
 * @return {number} Minimum squared distance.
 */ parcelHelpers.export(exports, "assignClosestArrayPoint", ()=>assignClosestArrayPoint);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {number} maxDelta Max delta.
 * @param {boolean} isRing Is ring.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {Array<number>} closestPoint Closest point.
 * @param {number} minSquaredDistance Minimum squared distance.
 * @param {Array<number>} [opt_tmpPoint] Temporary point object.
 * @return {number} Minimum squared distance.
 */ parcelHelpers.export(exports, "assignClosestMultiArrayPoint", ()=>assignClosestMultiArrayPoint);
/**
 * @module ol/geom/flat/closest
 */ var _mathJs = require("../../math.js");
/**
 * Returns the point on the 2D line segment flatCoordinates[offset1] to
 * flatCoordinates[offset2] that is closest to the point (x, y).  Extra
 * dimensions are linearly interpolated.
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset1 Offset 1.
 * @param {number} offset2 Offset 2.
 * @param {number} stride Stride.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {Array<number>} closestPoint Closest point.
 */ function assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {
    var x1 = flatCoordinates[offset1];
    var y1 = flatCoordinates[offset1 + 1];
    var dx = flatCoordinates[offset2] - x1;
    var dy = flatCoordinates[offset2 + 1] - y1;
    var offset;
    if (dx === 0 && dy === 0) offset = offset1;
    else {
        var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
        if (t > 1) offset = offset2;
        else if (t > 0) {
            for(var i = 0; i < stride; ++i)closestPoint[i] = (0, _mathJs.lerp)(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);
            closestPoint.length = stride;
            return;
        } else offset = offset1;
    }
    for(var i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[offset + i];
    closestPoint.length = stride;
}
function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {
    var x1 = flatCoordinates[offset];
    var y1 = flatCoordinates[offset + 1];
    for(offset += stride; offset < end; offset += stride){
        var x2 = flatCoordinates[offset];
        var y2 = flatCoordinates[offset + 1];
        var squaredDelta = (0, _mathJs.squaredDistance)(x1, y1, x2, y2);
        if (squaredDelta > max) max = squaredDelta;
        x1 = x2;
        y1 = y2;
    }
    return max;
}
function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {
    for(var i = 0, ii = ends.length; i < ii; ++i){
        var end = ends[i];
        max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);
        offset = end;
    }
    return max;
}
function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {
    for(var i = 0, ii = endss.length; i < ii; ++i){
        var ends = endss[i];
        max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);
        offset = ends[ends.length - 1];
    }
    return max;
}
function assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
    if (offset == end) return minSquaredDistance;
    var i, squaredDistance;
    if (maxDelta === 0) {
        // All points are identical, so just test the first point.
        squaredDistance = (0, _mathJs.squaredDistance)(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);
        if (squaredDistance < minSquaredDistance) {
            for(i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[offset + i];
            closestPoint.length = stride;
            return squaredDistance;
        } else return minSquaredDistance;
    }
    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [
        NaN,
        NaN
    ];
    var index = offset + stride;
    while(index < end){
        assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);
        squaredDistance = (0, _mathJs.squaredDistance)(x, y, tmpPoint[0], tmpPoint[1]);
        if (squaredDistance < minSquaredDistance) {
            minSquaredDistance = squaredDistance;
            for(i = 0; i < stride; ++i)closestPoint[i] = tmpPoint[i];
            closestPoint.length = stride;
            index += stride;
        } else // Skip ahead multiple points, because we know that all the skipped
        // points cannot be any closer than the closest point we have found so
        // far.  We know this because we know how close the current point is, how
        // close the closest point we have found so far is, and the maximum
        // distance between consecutive points.  For example, if we're currently
        // at distance 10, the best we've found so far is 3, and that the maximum
        // distance between consecutive points is 2, then we'll need to skip at
        // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of
        // finding a closer point.  We use Math.max(..., 1) to ensure that we
        // always advance at least one point, to avoid an infinite loop.
        index += stride * Math.max((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) / maxDelta | 0, 1);
    }
    if (isRing) {
        // Check the closing segment.
        assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);
        squaredDistance = (0, _mathJs.squaredDistance)(x, y, tmpPoint[0], tmpPoint[1]);
        if (squaredDistance < minSquaredDistance) {
            minSquaredDistance = squaredDistance;
            for(i = 0; i < stride; ++i)closestPoint[i] = tmpPoint[i];
            closestPoint.length = stride;
        }
    }
    return minSquaredDistance;
}
function assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [
        NaN,
        NaN
    ];
    for(var i = 0, ii = ends.length; i < ii; ++i){
        var end = ends[i];
        minSquaredDistance = assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
        offset = end;
    }
    return minSquaredDistance;
}
function assignClosestMultiArrayPoint(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [
        NaN,
        NaN
    ];
    for(var i = 0, ii = endss.length; i < ii; ++i){
        var ends = endss[i];
        minSquaredDistance = assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
        offset = ends[ends.length - 1];
    }
    return minSquaredDistance;
}

},{"../../math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3TE5l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/flat/deflate
 */ /**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
 * @param {number} stride Stride.
 * @return {number} offset Offset.
 */ parcelHelpers.export(exports, "deflateCoordinate", ()=>deflateCoordinate);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<import("../../coordinate.js").Coordinate>} coordinates Coordinates.
 * @param {number} stride Stride.
 * @return {number} offset Offset.
 */ parcelHelpers.export(exports, "deflateCoordinates", ()=>deflateCoordinates);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<import("../../coordinate.js").Coordinate>>} coordinatess Coordinatess.
 * @param {number} stride Stride.
 * @param {Array<number>} [opt_ends] Ends.
 * @return {Array<number>} Ends.
 */ parcelHelpers.export(exports, "deflateCoordinatesArray", ()=>deflateCoordinatesArray);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} coordinatesss Coordinatesss.
 * @param {number} stride Stride.
 * @param {Array<Array<number>>} [opt_endss] Endss.
 * @return {Array<Array<number>>} Endss.
 */ parcelHelpers.export(exports, "deflateMultiCoordinatesArray", ()=>deflateMultiCoordinatesArray);
function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {
    for(var i = 0, ii = coordinate.length; i < ii; ++i)flatCoordinates[offset++] = coordinate[i];
    return offset;
}
function deflateCoordinates(flatCoordinates, offset, coordinates, stride) {
    for(var i = 0, ii = coordinates.length; i < ii; ++i){
        var coordinate = coordinates[i];
        for(var j = 0; j < stride; ++j)flatCoordinates[offset++] = coordinate[j];
    }
    return offset;
}
function deflateCoordinatesArray(flatCoordinates, offset, coordinatess, stride, opt_ends) {
    var ends = opt_ends ? opt_ends : [];
    var i = 0;
    for(var j = 0, jj = coordinatess.length; j < jj; ++j){
        var end = deflateCoordinates(flatCoordinates, offset, coordinatess[j], stride);
        ends[i++] = end;
        offset = end;
    }
    ends.length = i;
    return ends;
}
function deflateMultiCoordinatesArray(flatCoordinates, offset, coordinatesss, stride, opt_endss) {
    var endss = opt_endss ? opt_endss : [];
    var i = 0;
    for(var j = 0, jj = coordinatesss.length; j < jj; ++j){
        var ends = deflateCoordinatesArray(flatCoordinates, offset, coordinatesss[j], stride, endss[i]);
        endss[i++] = ends;
        offset = ends[ends.length - 1];
    }
    endss.length = i;
    return endss;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jsqc5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {boolean} highQuality Highest quality.
 * @param {Array<number>} [opt_simplifiedFlatCoordinates] Simplified flat
 *     coordinates.
 * @return {Array<number>} Simplified line string.
 */ parcelHelpers.export(exports, "simplifyLineString", ()=>simplifyLineString);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @return {number} Simplified offset.
 */ parcelHelpers.export(exports, "douglasPeucker", ()=>douglasPeucker);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @param {Array<number>} simplifiedEnds Simplified ends.
 * @return {number} Simplified offset.
 */ parcelHelpers.export(exports, "douglasPeuckerArray", ()=>douglasPeuckerArray);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @param {Array<Array<number>>} simplifiedEndss Simplified endss.
 * @return {number} Simplified offset.
 */ parcelHelpers.export(exports, "douglasPeuckerMultiArray", ()=>douglasPeuckerMultiArray);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @return {number} Simplified offset.
 */ parcelHelpers.export(exports, "radialDistance", ()=>radialDistance);
/**
 * @param {number} value Value.
 * @param {number} tolerance Tolerance.
 * @return {number} Rounded value.
 */ parcelHelpers.export(exports, "snap", ()=>snap);
/**
 * Simplifies a line string using an algorithm designed by Tim Schaub.
 * Coordinates are snapped to the nearest value in a virtual grid and
 * consecutive duplicate coordinates are discarded.  This effectively preserves
 * topology as the simplification of any subsection of a line string is
 * independent of the rest of the line string.  This means that, for examples,
 * the common edge between two polygons will be simplified to the same line
 * string independently in both polygons.  This implementation uses a single
 * pass over the coordinates and eliminates intermediate collinear points.
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} tolerance Tolerance.
 * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @return {number} Simplified offset.
 */ parcelHelpers.export(exports, "quantize", ()=>quantize);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {number} tolerance Tolerance.
 * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @param {Array<number>} simplifiedEnds Simplified ends.
 * @return {number} Simplified offset.
 */ parcelHelpers.export(exports, "quantizeArray", ()=>quantizeArray);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {number} tolerance Tolerance.
 * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
 *     coordinates.
 * @param {number} simplifiedOffset Simplified offset.
 * @param {Array<Array<number>>} simplifiedEndss Simplified endss.
 * @return {number} Simplified offset.
 */ parcelHelpers.export(exports, "quantizeMultiArray", ()=>quantizeMultiArray);
/**
 * @module ol/geom/flat/simplify
 */ // Based on simplify-js https://github.com/mourner/simplify-js
// Copyright (c) 2012, Vladimir Agafonkin
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//    1. Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimer.
//
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
var _mathJs = require("../../math.js");
function simplifyLineString(flatCoordinates, offset, end, stride, squaredTolerance, highQuality, opt_simplifiedFlatCoordinates) {
    var simplifiedFlatCoordinates = opt_simplifiedFlatCoordinates !== undefined ? opt_simplifiedFlatCoordinates : [];
    if (!highQuality) {
        end = radialDistance(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);
        flatCoordinates = simplifiedFlatCoordinates;
        offset = 0;
        stride = 2;
    }
    simplifiedFlatCoordinates.length = douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);
    return simplifiedFlatCoordinates;
}
function douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
    var n = (end - offset) / stride;
    if (n < 3) {
        for(; offset < end; offset += stride){
            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];
            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];
        }
        return simplifiedOffset;
    }
    /** @type {Array<number>} */ var markers = new Array(n);
    markers[0] = 1;
    markers[n - 1] = 1;
    /** @type {Array<number>} */ var stack = [
        offset,
        end - stride
    ];
    var index = 0;
    while(stack.length > 0){
        var last = stack.pop();
        var first = stack.pop();
        var maxSquaredDistance = 0;
        var x1 = flatCoordinates[first];
        var y1 = flatCoordinates[first + 1];
        var x2 = flatCoordinates[last];
        var y2 = flatCoordinates[last + 1];
        for(var i = first + stride; i < last; i += stride){
            var x = flatCoordinates[i];
            var y = flatCoordinates[i + 1];
            var squaredDistance_1 = (0, _mathJs.squaredSegmentDistance)(x, y, x1, y1, x2, y2);
            if (squaredDistance_1 > maxSquaredDistance) {
                index = i;
                maxSquaredDistance = squaredDistance_1;
            }
        }
        if (maxSquaredDistance > squaredTolerance) {
            markers[(index - offset) / stride] = 1;
            if (first + stride < index) stack.push(first, index);
            if (index + stride < last) stack.push(index, last);
        }
    }
    for(var i = 0; i < n; ++i)if (markers[i]) {
        simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride];
        simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride + 1];
    }
    return simplifiedOffset;
}
function douglasPeuckerArray(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
    for(var i = 0, ii = ends.length; i < ii; ++i){
        var end = ends[i];
        simplifiedOffset = douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset);
        simplifiedEnds.push(simplifiedOffset);
        offset = end;
    }
    return simplifiedOffset;
}
function douglasPeuckerMultiArray(flatCoordinates, offset, endss, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {
    for(var i = 0, ii = endss.length; i < ii; ++i){
        var ends = endss[i];
        var simplifiedEnds = [];
        simplifiedOffset = douglasPeuckerArray(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);
        simplifiedEndss.push(simplifiedEnds);
        offset = ends[ends.length - 1];
    }
    return simplifiedOffset;
}
function radialDistance(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
    if (end <= offset + stride) {
        // zero or one point, no simplification possible, so copy and return
        for(; offset < end; offset += stride){
            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];
            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];
        }
        return simplifiedOffset;
    }
    var x1 = flatCoordinates[offset];
    var y1 = flatCoordinates[offset + 1];
    // copy first point
    simplifiedFlatCoordinates[simplifiedOffset++] = x1;
    simplifiedFlatCoordinates[simplifiedOffset++] = y1;
    var x2 = x1;
    var y2 = y1;
    for(offset += stride; offset < end; offset += stride){
        x2 = flatCoordinates[offset];
        y2 = flatCoordinates[offset + 1];
        if ((0, _mathJs.squaredDistance)(x1, y1, x2, y2) > squaredTolerance) {
            // copy point at offset
            simplifiedFlatCoordinates[simplifiedOffset++] = x2;
            simplifiedFlatCoordinates[simplifiedOffset++] = y2;
            x1 = x2;
            y1 = y2;
        }
    }
    if (x2 != x1 || y2 != y1) {
        // copy last point
        simplifiedFlatCoordinates[simplifiedOffset++] = x2;
        simplifiedFlatCoordinates[simplifiedOffset++] = y2;
    }
    return simplifiedOffset;
}
function snap(value, tolerance) {
    return tolerance * Math.round(value / tolerance);
}
function quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset) {
    // do nothing if the line is empty
    if (offset == end) return simplifiedOffset;
    // snap the first coordinate (P1)
    var x1 = snap(flatCoordinates[offset], tolerance);
    var y1 = snap(flatCoordinates[offset + 1], tolerance);
    offset += stride;
    // add the first coordinate to the output
    simplifiedFlatCoordinates[simplifiedOffset++] = x1;
    simplifiedFlatCoordinates[simplifiedOffset++] = y1;
    // find the next coordinate that does not snap to the same value as the first
    // coordinate (P2)
    var x2, y2;
    do {
        x2 = snap(flatCoordinates[offset], tolerance);
        y2 = snap(flatCoordinates[offset + 1], tolerance);
        offset += stride;
        if (offset == end) {
            // all coordinates snap to the same value, the line collapses to a point
            // push the last snapped value anyway to ensure that the output contains
            // at least two points
            // FIXME should we really return at least two points anyway?
            simplifiedFlatCoordinates[simplifiedOffset++] = x2;
            simplifiedFlatCoordinates[simplifiedOffset++] = y2;
            return simplifiedOffset;
        }
    }while (x2 == x1 && y2 == y1);
    while(offset < end){
        // snap the next coordinate (P3)
        var x3 = snap(flatCoordinates[offset], tolerance);
        var y3 = snap(flatCoordinates[offset + 1], tolerance);
        offset += stride;
        // skip P3 if it is equal to P2
        if (x3 == x2 && y3 == y2) continue;
        // calculate the delta between P1 and P2
        var dx1 = x2 - x1;
        var dy1 = y2 - y1;
        // calculate the delta between P3 and P1
        var dx2 = x3 - x1;
        var dy2 = y3 - y1;
        // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from
        // P1 in the same direction then P2 is on the straight line between P1 and
        // P3
        if (dx1 * dy2 == dy1 * dx2 && (dx1 < 0 && dx2 < dx1 || dx1 == dx2 || dx1 > 0 && dx2 > dx1) && (dy1 < 0 && dy2 < dy1 || dy1 == dy2 || dy1 > 0 && dy2 > dy1)) {
            // discard P2 and set P2 = P3
            x2 = x3;
            y2 = y3;
            continue;
        }
        // either P1, P2, and P3 are not colinear, or they are colinear but P3 is
        // between P3 and P1 or on the opposite half of the line to P2.  add P2,
        // and continue with P1 = P2 and P2 = P3
        simplifiedFlatCoordinates[simplifiedOffset++] = x2;
        simplifiedFlatCoordinates[simplifiedOffset++] = y2;
        x1 = x2;
        y1 = y2;
        x2 = x3;
        y2 = y3;
    }
    // add the last point (P2)
    simplifiedFlatCoordinates[simplifiedOffset++] = x2;
    simplifiedFlatCoordinates[simplifiedOffset++] = y2;
    return simplifiedOffset;
}
function quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
    for(var i = 0, ii = ends.length; i < ii; ++i){
        var end = ends[i];
        simplifiedOffset = quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset);
        simplifiedEnds.push(simplifiedOffset);
        offset = end;
    }
    return simplifiedOffset;
}
function quantizeMultiArray(flatCoordinates, offset, endss, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {
    for(var i = 0, ii = endss.length; i < ii; ++i){
        var ends = endss[i];
        var simplifiedEnds = [];
        simplifiedOffset = quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);
        simplifiedEndss.push(simplifiedEnds);
        offset = ends[ends.length - 1];
    }
    return simplifiedOffset;
}

},{"../../math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Rpju":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/flat/inflate
 */ /**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {Array<import("../../coordinate.js").Coordinate>} [opt_coordinates] Coordinates.
 * @return {Array<import("../../coordinate.js").Coordinate>} Coordinates.
 */ parcelHelpers.export(exports, "inflateCoordinates", ()=>inflateCoordinates);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {Array<Array<import("../../coordinate.js").Coordinate>>} [opt_coordinatess] Coordinatess.
 * @return {Array<Array<import("../../coordinate.js").Coordinate>>} Coordinatess.
 */ parcelHelpers.export(exports, "inflateCoordinatesArray", ()=>inflateCoordinatesArray);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} [opt_coordinatesss]
 *     Coordinatesss.
 * @return {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} Coordinatesss.
 */ parcelHelpers.export(exports, "inflateMultiCoordinatesArray", ()=>inflateMultiCoordinatesArray);
function inflateCoordinates(flatCoordinates, offset, end, stride, opt_coordinates) {
    var coordinates = opt_coordinates !== undefined ? opt_coordinates : [];
    var i = 0;
    for(var j = offset; j < end; j += stride)coordinates[i++] = flatCoordinates.slice(j, j + stride);
    coordinates.length = i;
    return coordinates;
}
function inflateCoordinatesArray(flatCoordinates, offset, ends, stride, opt_coordinatess) {
    var coordinatess = opt_coordinatess !== undefined ? opt_coordinatess : [];
    var i = 0;
    for(var j = 0, jj = ends.length; j < jj; ++j){
        var end = ends[j];
        coordinatess[i++] = inflateCoordinates(flatCoordinates, offset, end, stride, coordinatess[i]);
        offset = end;
    }
    coordinatess.length = i;
    return coordinatess;
}
function inflateMultiCoordinatesArray(flatCoordinates, offset, endss, stride, opt_coordinatesss) {
    var coordinatesss = opt_coordinatesss !== undefined ? opt_coordinatesss : [];
    var i = 0;
    for(var j = 0, jj = endss.length; j < jj; ++j){
        var ends = endss[j];
        coordinatesss[i++] = inflateCoordinatesArray(flatCoordinates, offset, ends, stride, coordinatesss[i]);
        offset = ends[ends.length - 1];
    }
    coordinatesss.length = i;
    return coordinatesss;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7fT8A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/flat/area
 */ /**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {number} Area.
 */ parcelHelpers.export(exports, "linearRing", ()=>linearRing);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<number>} ends Ends.
 * @param {number} stride Stride.
 * @return {number} Area.
 */ parcelHelpers.export(exports, "linearRings", ()=>linearRings);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<number>>} endss Endss.
 * @param {number} stride Stride.
 * @return {number} Area.
 */ parcelHelpers.export(exports, "linearRingss", ()=>linearRingss);
function linearRing(flatCoordinates, offset, end, stride) {
    var twiceArea = 0;
    var x1 = flatCoordinates[end - stride];
    var y1 = flatCoordinates[end - stride + 1];
    for(; offset < end; offset += stride){
        var x2 = flatCoordinates[offset];
        var y2 = flatCoordinates[offset + 1];
        twiceArea += y1 * x2 - x1 * y2;
        x1 = x2;
        y1 = y2;
    }
    return twiceArea / 2;
}
function linearRings(flatCoordinates, offset, ends, stride) {
    var area = 0;
    for(var i = 0, ii = ends.length; i < ii; ++i){
        var end = ends[i];
        area += linearRing(flatCoordinates, offset, end, stride);
        offset = end;
    }
    return area;
}
function linearRingss(flatCoordinates, offset, endss, stride) {
    var area = 0;
    for(var i = 0, ii = endss.length; i < ii; ++i){
        var ends = endss[i];
        area += linearRings(flatCoordinates, offset, ends, stride);
        offset = ends[ends.length - 1];
    }
    return area;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hx2Ar":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/Point
 */ var _geometryTypeJs = require("./GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _simpleGeometryJs = require("./SimpleGeometry.js");
var _simpleGeometryJsDefault = parcelHelpers.interopDefault(_simpleGeometryJs);
var _extentJs = require("../extent.js");
var _deflateJs = require("./flat/deflate.js");
var _mathJs = require("../math.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Point geometry.
 *
 * @api
 */ var Point = /** @class */ function(_super) {
    __extends(Point1, _super);
    /**
     * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     */ function Point1(coordinates, opt_layout) {
        var _this = _super.call(this) || this;
        _this.setCoordinates(coordinates, opt_layout);
        return _this;
    }
    /**
     * Make a complete copy of the geometry.
     * @return {!Point} Clone.
     * @api
     */ Point1.prototype.clone = function() {
        var point = new Point1(this.flatCoordinates.slice(), this.layout);
        point.applyProperties(this);
        return point;
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */ Point1.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
        var flatCoordinates = this.flatCoordinates;
        var squaredDistance = (0, _mathJs.squaredDistance)(x, y, flatCoordinates[0], flatCoordinates[1]);
        if (squaredDistance < minSquaredDistance) {
            var stride = this.stride;
            for(var i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[i];
            closestPoint.length = stride;
            return squaredDistance;
        } else return minSquaredDistance;
    };
    /**
     * Return the coordinate of the point.
     * @return {import("../coordinate.js").Coordinate} Coordinates.
     * @api
     */ Point1.prototype.getCoordinates = function() {
        return !this.flatCoordinates ? [] : this.flatCoordinates.slice();
    };
    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */ Point1.prototype.computeExtent = function(extent) {
        return (0, _extentJs.createOrUpdateFromCoordinate)(this.flatCoordinates, extent);
    };
    /**
     * Get the type of this geometry.
     * @return {import("./GeometryType.js").default} Geometry type.
     * @api
     */ Point1.prototype.getType = function() {
        return (0, _geometryTypeJsDefault.default).POINT;
    };
    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */ Point1.prototype.intersectsExtent = function(extent) {
        return (0, _extentJs.containsXY)(extent, this.flatCoordinates[0], this.flatCoordinates[1]);
    };
    /**
     * @param {!Array<*>} coordinates Coordinates.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     * @api
     */ Point1.prototype.setCoordinates = function(coordinates, opt_layout) {
        this.setLayout(opt_layout, coordinates, 0);
        if (!this.flatCoordinates) this.flatCoordinates = [];
        this.flatCoordinates.length = (0, _deflateJs.deflateCoordinate)(this.flatCoordinates, 0, coordinates, this.stride);
        this.changed();
    };
    return Point1;
}((0, _simpleGeometryJsDefault.default));
exports.default = Point;

},{"./GeometryType.js":"j6daa","./SimpleGeometry.js":"hLwk3","../extent.js":"6YrVc","./flat/deflate.js":"3TE5l","../math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59VP9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Calculates a point that is likely to lie in the interior of the linear rings.
 * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {Array<number>} flatCenters Flat centers.
 * @param {number} flatCentersOffset Flat center offset.
 * @param {Array<number>} [opt_dest] Destination.
 * @return {Array<number>} Destination point as XYM coordinate, where M is the
 * length of the horizontal intersection that the point belongs to.
 */ parcelHelpers.export(exports, "getInteriorPointOfArray", ()=>getInteriorPointOfArray);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {Array<number>} flatCenters Flat centers.
 * @return {Array<number>} Interior points as XYM coordinates, where M is the
 * length of the horizontal intersection that the point belongs to.
 */ parcelHelpers.export(exports, "getInteriorPointsOfMultiArray", ()=>getInteriorPointsOfMultiArray);
/**
 * @module ol/geom/flat/interiorpoint
 */ var _containsJs = require("./contains.js");
var _arrayJs = require("../../array.js");
function getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, opt_dest) {
    var i, ii, x, x1, x2, y1, y2;
    var y = flatCenters[flatCentersOffset + 1];
    /** @type {Array<number>} */ var intersections = [];
    // Calculate intersections with the horizontal line
    for(var r = 0, rr = ends.length; r < rr; ++r){
        var end = ends[r];
        x1 = flatCoordinates[end - stride];
        y1 = flatCoordinates[end - stride + 1];
        for(i = offset; i < end; i += stride){
            x2 = flatCoordinates[i];
            y2 = flatCoordinates[i + 1];
            if (y <= y1 && y2 <= y || y1 <= y && y <= y2) {
                x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;
                intersections.push(x);
            }
            x1 = x2;
            y1 = y2;
        }
    }
    // Find the longest segment of the horizontal line that has its center point
    // inside the linear ring.
    var pointX = NaN;
    var maxSegmentLength = -Infinity;
    intersections.sort((0, _arrayJs.numberSafeCompareFunction));
    x1 = intersections[0];
    for(i = 1, ii = intersections.length; i < ii; ++i){
        x2 = intersections[i];
        var segmentLength = Math.abs(x2 - x1);
        if (segmentLength > maxSegmentLength) {
            x = (x1 + x2) / 2;
            if ((0, _containsJs.linearRingsContainsXY)(flatCoordinates, offset, ends, stride, x, y)) {
                pointX = x;
                maxSegmentLength = segmentLength;
            }
        }
        x1 = x2;
    }
    if (isNaN(pointX)) // There is no horizontal line that has its center point inside the linear
    // ring.  Use the center of the the linear ring's extent.
    pointX = flatCenters[flatCentersOffset];
    if (opt_dest) {
        opt_dest.push(pointX, y, maxSegmentLength);
        return opt_dest;
    } else return [
        pointX,
        y,
        maxSegmentLength
    ];
}
function getInteriorPointsOfMultiArray(flatCoordinates, offset, endss, stride, flatCenters) {
    var interiorPoints = [];
    for(var i = 0, ii = endss.length; i < ii; ++i){
        var ends = endss[i];
        interiorPoints = getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, 2 * i, interiorPoints);
        offset = ends[ends.length - 1];
    }
    return interiorPoints;
}

},{"./contains.js":"eArlN","../../array.js":"1Fbic","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eArlN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {import("../../extent.js").Extent} extent Extent.
 * @return {boolean} Contains extent.
 */ parcelHelpers.export(exports, "linearRingContainsExtent", ()=>linearRingContainsExtent);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} x X.
 * @param {number} y Y.
 * @return {boolean} Contains (x, y).
 */ parcelHelpers.export(exports, "linearRingContainsXY", ()=>linearRingContainsXY);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {number} x X.
 * @param {number} y Y.
 * @return {boolean} Contains (x, y).
 */ parcelHelpers.export(exports, "linearRingsContainsXY", ()=>linearRingsContainsXY);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {number} x X.
 * @param {number} y Y.
 * @return {boolean} Contains (x, y).
 */ parcelHelpers.export(exports, "linearRingssContainsXY", ()=>linearRingssContainsXY);
/**
 * @module ol/geom/flat/contains
 */ var _extentJs = require("../../extent.js");
function linearRingContainsExtent(flatCoordinates, offset, end, stride, extent) {
    var outside = (0, _extentJs.forEachCorner)(extent, /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {boolean} Contains (x, y).
     */ function(coordinate) {
        return !linearRingContainsXY(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);
    });
    return !outside;
}
function linearRingContainsXY(flatCoordinates, offset, end, stride, x, y) {
    // https://geomalgorithms.com/a03-_inclusion.html
    // Copyright 2000 softSurfer, 2012 Dan Sunday
    // This code may be freely used and modified for any purpose
    // providing that this copyright notice is included with it.
    // SoftSurfer makes no warranty for this code, and cannot be held
    // liable for any real or imagined damage resulting from its use.
    // Users of this code must verify correctness for their application.
    var wn = 0;
    var x1 = flatCoordinates[end - stride];
    var y1 = flatCoordinates[end - stride + 1];
    for(; offset < end; offset += stride){
        var x2 = flatCoordinates[offset];
        var y2 = flatCoordinates[offset + 1];
        if (y1 <= y) {
            if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) wn++;
        } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) wn--;
        x1 = x2;
        y1 = y2;
    }
    return wn !== 0;
}
function linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y) {
    if (ends.length === 0) return false;
    if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) return false;
    for(var i = 1, ii = ends.length; i < ii; ++i){
        if (linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) return false;
    }
    return true;
}
function linearRingssContainsXY(flatCoordinates, offset, endss, stride, x, y) {
    if (endss.length === 0) return false;
    for(var i = 0, ii = endss.length; i < ii; ++i){
        var ends = endss[i];
        if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) return true;
        offset = ends[ends.length - 1];
    }
    return false;
}

},{"../../extent.js":"6YrVc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7x08H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {import("../../extent.js").Extent} extent Extent.
 * @return {boolean} True if the geometry and the extent intersect.
 */ parcelHelpers.export(exports, "intersectsLineString", ()=>intersectsLineString);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {import("../../extent.js").Extent} extent Extent.
 * @return {boolean} True if the geometry and the extent intersect.
 */ parcelHelpers.export(exports, "intersectsLineStringArray", ()=>intersectsLineStringArray);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {import("../../extent.js").Extent} extent Extent.
 * @return {boolean} True if the geometry and the extent intersect.
 */ parcelHelpers.export(exports, "intersectsLinearRing", ()=>intersectsLinearRing);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {import("../../extent.js").Extent} extent Extent.
 * @return {boolean} True if the geometry and the extent intersect.
 */ parcelHelpers.export(exports, "intersectsLinearRingArray", ()=>intersectsLinearRingArray);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<number>>} endss Endss.
 * @param {number} stride Stride.
 * @param {import("../../extent.js").Extent} extent Extent.
 * @return {boolean} True if the geometry and the extent intersect.
 */ parcelHelpers.export(exports, "intersectsLinearRingMultiArray", ()=>intersectsLinearRingMultiArray);
/**
 * @module ol/geom/flat/intersectsextent
 */ var _extentJs = require("../../extent.js");
var _segmentsJs = require("./segments.js");
var _containsJs = require("./contains.js");
function intersectsLineString(flatCoordinates, offset, end, stride, extent) {
    var coordinatesExtent = (0, _extentJs.extendFlatCoordinates)((0, _extentJs.createEmpty)(), flatCoordinates, offset, end, stride);
    if (!(0, _extentJs.intersects)(extent, coordinatesExtent)) return false;
    if ((0, _extentJs.containsExtent)(extent, coordinatesExtent)) return true;
    if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) return true;
    if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) return true;
    return (0, _segmentsJs.forEach)(flatCoordinates, offset, end, stride, /**
     * @param {import("../../coordinate.js").Coordinate} point1 Start point.
     * @param {import("../../coordinate.js").Coordinate} point2 End point.
     * @return {boolean} `true` if the segment and the extent intersect,
     *     `false` otherwise.
     */ function(point1, point2) {
        return (0, _extentJs.intersectsSegment)(extent, point1, point2);
    });
}
function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {
    for(var i = 0, ii = ends.length; i < ii; ++i){
        if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) return true;
        offset = ends[i];
    }
    return false;
}
function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {
    if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) return true;
    if ((0, _containsJs.linearRingContainsXY)(flatCoordinates, offset, end, stride, extent[0], extent[1])) return true;
    if ((0, _containsJs.linearRingContainsXY)(flatCoordinates, offset, end, stride, extent[0], extent[3])) return true;
    if ((0, _containsJs.linearRingContainsXY)(flatCoordinates, offset, end, stride, extent[2], extent[1])) return true;
    if ((0, _containsJs.linearRingContainsXY)(flatCoordinates, offset, end, stride, extent[2], extent[3])) return true;
    return false;
}
function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {
    if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) return false;
    if (ends.length === 1) return true;
    for(var i = 1, ii = ends.length; i < ii; ++i)if ((0, _containsJs.linearRingContainsExtent)(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
        if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) return false;
    }
    return true;
}
function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {
    for(var i = 0, ii = endss.length; i < ii; ++i){
        var ends = endss[i];
        if (intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)) return true;
        offset = ends[ends.length - 1];
    }
    return false;
}

},{"../../extent.js":"6YrVc","./segments.js":"e7gWa","./contains.js":"eArlN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e7gWa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/flat/segments
 */ /**
 * This function calls `callback` for each segment of the flat coordinates
 * array. If the callback returns a truthy value the function returns that
 * value immediately. Otherwise the function returns `false`.
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {function(import("../../coordinate.js").Coordinate, import("../../coordinate.js").Coordinate): T} callback Function
 *     called for each segment.
 * @return {T|boolean} Value.
 * @template T
 */ parcelHelpers.export(exports, "forEach", ()=>forEach);
function forEach(flatCoordinates, offset, end, stride, callback) {
    var ret;
    offset += stride;
    for(; offset < end; offset += stride){
        ret = callback(flatCoordinates.slice(offset - stride, offset), flatCoordinates.slice(offset, offset + stride));
        if (ret) return ret;
    }
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"btd6s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Is the linear ring oriented clockwise in a coordinate system with a bottom-left
 * coordinate origin? For a coordinate system with a top-left coordinate origin,
 * the ring's orientation is clockwise when this function returns false.
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {boolean} Is clockwise.
 */ parcelHelpers.export(exports, "linearRingIsClockwise", ()=>linearRingIsClockwise);
/**
 * Determines if linear rings are oriented.  By default, left-hand orientation
 * is tested (first ring must be clockwise, remaining rings counter-clockwise).
 * To test for right-hand orientation, use the `opt_right` argument.
 *
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<number>} ends Array of end indexes.
 * @param {number} stride Stride.
 * @param {boolean} [opt_right] Test for right-hand orientation
 *     (counter-clockwise exterior ring and clockwise interior rings).
 * @return {boolean} Rings are correctly oriented.
 */ parcelHelpers.export(exports, "linearRingsAreOriented", ()=>linearRingsAreOriented);
/**
 * Determines if linear rings are oriented.  By default, left-hand orientation
 * is tested (first ring must be clockwise, remaining rings counter-clockwise).
 * To test for right-hand orientation, use the `opt_right` argument.
 *
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<number>>} endss Array of array of end indexes.
 * @param {number} stride Stride.
 * @param {boolean} [opt_right] Test for right-hand orientation
 *     (counter-clockwise exterior ring and clockwise interior rings).
 * @return {boolean} Rings are correctly oriented.
 */ parcelHelpers.export(exports, "linearRingssAreOriented", ()=>linearRingssAreOriented);
/**
 * Orient coordinates in a flat array of linear rings.  By default, rings
 * are oriented following the left-hand rule (clockwise for exterior and
 * counter-clockwise for interior rings).  To orient according to the
 * right-hand rule, use the `opt_right` argument.
 *
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {boolean} [opt_right] Follow the right-hand rule for orientation.
 * @return {number} End.
 */ parcelHelpers.export(exports, "orientLinearRings", ()=>orientLinearRings);
/**
 * Orient coordinates in a flat array of linear rings.  By default, rings
 * are oriented following the left-hand rule (clockwise for exterior and
 * counter-clockwise for interior rings).  To orient according to the
 * right-hand rule, use the `opt_right` argument.
 *
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<number>>} endss Array of array of end indexes.
 * @param {number} stride Stride.
 * @param {boolean} [opt_right] Follow the right-hand rule for orientation.
 * @return {number} End.
 */ parcelHelpers.export(exports, "orientLinearRingsArray", ()=>orientLinearRingsArray);
/**
 * Return a two-dimensional endss
 * @param {Array<number>} flatCoordinates Flat coordinates
 * @param {Array<number>} ends Linear ring end indexes
 * @return {Array<Array<number>>} Two dimensional endss array that can
 * be used to contruct a MultiPolygon
 */ parcelHelpers.export(exports, "inflateEnds", ()=>inflateEnds);
/**
 * @module ol/geom/flat/orient
 */ var _reverseJs = require("./reverse.js");
function linearRingIsClockwise(flatCoordinates, offset, end, stride) {
    // https://stackoverflow.com/q/1165647/clockwise-method#1165943
    // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp
    var edge = 0;
    var x1 = flatCoordinates[end - stride];
    var y1 = flatCoordinates[end - stride + 1];
    for(; offset < end; offset += stride){
        var x2 = flatCoordinates[offset];
        var y2 = flatCoordinates[offset + 1];
        edge += (x2 - x1) * (y2 + y1);
        x1 = x2;
        y1 = y2;
    }
    return edge === 0 ? undefined : edge > 0;
}
function linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right) {
    var right = opt_right !== undefined ? opt_right : false;
    for(var i = 0, ii = ends.length; i < ii; ++i){
        var end = ends[i];
        var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);
        if (i === 0) {
            if (right && isClockwise || !right && !isClockwise) return false;
        } else {
            if (right && !isClockwise || !right && isClockwise) return false;
        }
        offset = end;
    }
    return true;
}
function linearRingssAreOriented(flatCoordinates, offset, endss, stride, opt_right) {
    for(var i = 0, ii = endss.length; i < ii; ++i){
        var ends = endss[i];
        if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right)) return false;
        if (ends.length) offset = ends[ends.length - 1];
    }
    return true;
}
function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {
    var right = opt_right !== undefined ? opt_right : false;
    for(var i = 0, ii = ends.length; i < ii; ++i){
        var end = ends[i];
        var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);
        var reverse = i === 0 ? right && isClockwise || !right && !isClockwise : right && !isClockwise || !right && isClockwise;
        if (reverse) (0, _reverseJs.coordinates)(flatCoordinates, offset, end, stride);
        offset = end;
    }
    return offset;
}
function orientLinearRingsArray(flatCoordinates, offset, endss, stride, opt_right) {
    for(var i = 0, ii = endss.length; i < ii; ++i)offset = orientLinearRings(flatCoordinates, offset, endss[i], stride, opt_right);
    return offset;
}
function inflateEnds(flatCoordinates, ends) {
    var endss = [];
    var offset = 0;
    var prevEndIndex = 0;
    for(var i = 0, ii = ends.length; i < ii; ++i){
        var end = ends[i];
        // classifies an array of rings into polygons with outer rings and holes
        if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) endss.push(ends.slice(prevEndIndex, i + 1));
        else {
            if (endss.length === 0) continue;
            endss[endss.length - 1].push(ends[prevEndIndex]);
        }
        prevEndIndex = i + 1;
        offset = end;
    }
    return endss;
}

},{"./reverse.js":"hksTe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hksTe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/flat/reverse
 */ /**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 */ parcelHelpers.export(exports, "coordinates", ()=>coordinates);
function coordinates(flatCoordinates, offset, end, stride) {
    while(offset < end - stride){
        for(var i = 0; i < stride; ++i){
            var tmp = flatCoordinates[offset + i];
            flatCoordinates[offset + i] = flatCoordinates[end - stride + i];
            flatCoordinates[end - stride + i] = tmp;
        }
        offset += stride;
        end -= stride;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lKEPe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/size
 */ /**
 * An array of numbers representing a size: `[width, height]`.
 * @typedef {Array<number>} Size
 * @api
 */ /**
 * Returns a buffered size.
 * @param {Size} size Size.
 * @param {number} num The amount by which to buffer.
 * @param {Size} [opt_size] Optional reusable size array.
 * @return {Size} The buffered size.
 */ parcelHelpers.export(exports, "buffer", ()=>buffer);
/**
 * Determines if a size has a positive area.
 * @param {Size} size The size to test.
 * @return {boolean} The size has a positive area.
 */ parcelHelpers.export(exports, "hasArea", ()=>hasArea);
/**
 * Returns a size scaled by a ratio. The result will be an array of integers.
 * @param {Size} size Size.
 * @param {number} ratio Ratio.
 * @param {Size} [opt_size] Optional reusable size array.
 * @return {Size} The scaled size.
 */ parcelHelpers.export(exports, "scale", ()=>scale);
/**
 * Returns an `Size` array for the passed in number (meaning: square) or
 * `Size` array.
 * (meaning: non-square),
 * @param {number|Size} size Width and height.
 * @param {Size} [opt_size] Optional reusable size array.
 * @return {Size} Size.
 * @api
 */ parcelHelpers.export(exports, "toSize", ()=>toSize);
function buffer(size, num, opt_size) {
    if (opt_size === undefined) opt_size = [
        0,
        0
    ];
    opt_size[0] = size[0] + 2 * num;
    opt_size[1] = size[1] + 2 * num;
    return opt_size;
}
function hasArea(size) {
    return size[0] > 0 && size[1] > 0;
}
function scale(size, ratio, opt_size) {
    if (opt_size === undefined) opt_size = [
        0,
        0
    ];
    opt_size[0] = size[0] * ratio + 0.5 | 0;
    opt_size[1] = size[1] * ratio + 0.5 | 0;
    return opt_size;
}
function toSize(size, opt_size) {
    if (Array.isArray(size)) return size;
    else {
        if (opt_size === undefined) opt_size = [
            size,
            size
        ];
        else {
            opt_size[0] = size;
            opt_size[1] = size;
        }
        return opt_size;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4aXFi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Units", ()=>Units);
/**
 * @module ol/control/ScaleLine
 */ var _controlJs = require("./Control.js");
var _controlJsDefault = parcelHelpers.interopDefault(_controlJs);
var _unitsJs = require("../proj/Units.js");
var _unitsJsDefault = parcelHelpers.interopDefault(_unitsJs);
var _cssJs = require("../css.js");
var _projJs = require("../proj.js");
var _assertsJs = require("../asserts.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @type {string}
 */ var UNITS_PROP = "units";
var Units = {
    DEGREES: "degrees",
    IMPERIAL: "imperial",
    NAUTICAL: "nautical",
    METRIC: "metric",
    US: "us"
};
/**
 * @const
 * @type {Array<number>}
 */ var LEADING_DIGITS = [
    1,
    2,
    5
];
/**
 * @const
 * @type {number}
 */ var DEFAULT_DPI = 25.4 / 0.28;
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
 *     'change:units', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types
 *     |'change:units', Return>} ScaleLineOnSignature
 */ /**
 * @typedef {Object} Options
 * @property {string} [className='ol-scale-line'] CSS Class name.
 * @property {number} [minWidth=64] Minimum width in pixels at the OGC default dpi. The width will be
 * adjusted to match the dpi used.
 * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control
 * should be re-rendered. This is called in a `requestAnimationFrame` callback.
 * @property {HTMLElement|string} [target] Specify a target if you want the control
 * to be rendered outside of the map's viewport.
 * @property {import("./ScaleLine.js").Units|string} [units='metric'] Units.
 * @property {boolean} [bar=false] Render scalebars instead of a line.
 * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers
 * for best results. Only applies when `bar` is `true`.
 * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies
 * when `bar` is `true`.
 * @property {number|undefined} [dpi=undefined] dpi of output device such as printer. Only applies
 * when `bar` is `true`. If undefined the OGC default screen pixel size of 0.28mm will be assumed.
 */ /**
 * @classdesc
 * A control displaying rough y-axis distances, calculated for the center of the
 * viewport. For conformal projections (e.g. EPSG:3857, the default view
 * projection in OpenLayers), the scale is valid for all directions.
 * No scale line will be shown when the y-axis distance of a pixel at the
 * viewport center cannot be calculated in the view projection.
 * By default the scale line will show in the bottom left portion of the map,
 * but this can be changed by using the css selector `.ol-scale-line`.
 * When specifying `bar` as `true`, a scalebar will be rendered instead
 * of a scaleline.
 *
 * @api
 */ var ScaleLine = /** @class */ function(_super) {
    __extends(ScaleLine1, _super);
    /**
     * @param {Options} [opt_options] Scale line options.
     */ function ScaleLine1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        var className = options.className !== undefined ? options.className : options.bar ? "ol-scale-bar" : "ol-scale-line";
        _this = _super.call(this, {
            element: document.createElement("div"),
            render: options.render,
            target: options.target
        }) || this;
        /***
         * @type {ScaleLineOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {ScaleLineOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {ScaleLineOnSignature<void>}
         */ _this.un;
        /**
         * @private
         * @type {HTMLElement}
         */ _this.innerElement_ = document.createElement("div");
        _this.innerElement_.className = className + "-inner";
        _this.element.className = className + " " + (0, _cssJs.CLASS_UNSELECTABLE);
        _this.element.appendChild(_this.innerElement_);
        /**
         * @private
         * @type {?import("../View.js").State}
         */ _this.viewState_ = null;
        /**
         * @private
         * @type {number}
         */ _this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;
        /**
         * @private
         * @type {boolean}
         */ _this.renderedVisible_ = false;
        /**
         * @private
         * @type {number|undefined}
         */ _this.renderedWidth_ = undefined;
        /**
         * @private
         * @type {string}
         */ _this.renderedHTML_ = "";
        _this.addChangeListener(UNITS_PROP, _this.handleUnitsChanged_);
        _this.setUnits(options.units || Units.METRIC);
        /**
         * @private
         * @type {boolean}
         */ _this.scaleBar_ = options.bar || false;
        /**
         * @private
         * @type {number}
         */ _this.scaleBarSteps_ = options.steps || 4;
        /**
         * @private
         * @type {boolean}
         */ _this.scaleBarText_ = options.text || false;
        /**
         * @private
         * @type {number|undefined}
         */ _this.dpi_ = options.dpi || undefined;
        return _this;
    }
    /**
     * Return the units to use in the scale line.
     * @return {import("./ScaleLine.js").Units} The units
     * to use in the scale line.
     * @observable
     * @api
     */ ScaleLine1.prototype.getUnits = function() {
        return this.get(UNITS_PROP);
    };
    /**
     * @private
     */ ScaleLine1.prototype.handleUnitsChanged_ = function() {
        this.updateElement_();
    };
    /**
     * Set the units to use in the scale line.
     * @param {import("./ScaleLine.js").Units} units The units to use in the scale line.
     * @observable
     * @api
     */ ScaleLine1.prototype.setUnits = function(units) {
        this.set(UNITS_PROP, units);
    };
    /**
     * Specify the dpi of output device such as printer.
     * @param {number|undefined} dpi The dpi of output device.
     * @api
     */ ScaleLine1.prototype.setDpi = function(dpi) {
        this.dpi_ = dpi;
    };
    /**
     * @private
     */ ScaleLine1.prototype.updateElement_ = function() {
        var viewState = this.viewState_;
        if (!viewState) {
            if (this.renderedVisible_) {
                this.element.style.display = "none";
                this.renderedVisible_ = false;
            }
            return;
        }
        var center = viewState.center;
        var projection = viewState.projection;
        var units = this.getUnits();
        var pointResolutionUnits = units == Units.DEGREES ? (0, _unitsJsDefault.default).DEGREES : (0, _unitsJsDefault.default).METERS;
        var pointResolution = (0, _projJs.getPointResolution)(projection, viewState.resolution, center, pointResolutionUnits);
        var minWidth = this.minWidth_ * (this.dpi_ || DEFAULT_DPI) / DEFAULT_DPI;
        var nominalCount = minWidth * pointResolution;
        var suffix = "";
        if (units == Units.DEGREES) {
            var metersPerDegree = (0, _projJs.METERS_PER_UNIT)[(0, _unitsJsDefault.default).DEGREES];
            nominalCount *= metersPerDegree;
            if (nominalCount < metersPerDegree / 60) {
                suffix = "\u2033"; // seconds
                pointResolution *= 3600;
            } else if (nominalCount < metersPerDegree) {
                suffix = "\u2032"; // minutes
                pointResolution *= 60;
            } else suffix = "\xb0"; // degrees
        } else if (units == Units.IMPERIAL) {
            if (nominalCount < 0.9144) {
                suffix = "in";
                pointResolution /= 0.0254;
            } else if (nominalCount < 1609.344) {
                suffix = "ft";
                pointResolution /= 0.3048;
            } else {
                suffix = "mi";
                pointResolution /= 1609.344;
            }
        } else if (units == Units.NAUTICAL) {
            pointResolution /= 1852;
            suffix = "nm";
        } else if (units == Units.METRIC) {
            if (nominalCount < 0.001) {
                suffix = "\u03BCm";
                pointResolution *= 1000000;
            } else if (nominalCount < 1) {
                suffix = "mm";
                pointResolution *= 1000;
            } else if (nominalCount < 1000) suffix = "m";
            else {
                suffix = "km";
                pointResolution /= 1000;
            }
        } else if (units == Units.US) {
            if (nominalCount < 0.9144) {
                suffix = "in";
                pointResolution *= 39.37;
            } else if (nominalCount < 1609.344) {
                suffix = "ft";
                pointResolution /= 0.30480061;
            } else {
                suffix = "mi";
                pointResolution /= 1609.3472;
            }
        } else (0, _assertsJs.assert)(false, 33); // Invalid units
        var i = 3 * Math.floor(Math.log(minWidth * pointResolution) / Math.log(10));
        var count, width, decimalCount;
        while(true){
            decimalCount = Math.floor(i / 3);
            var decimal = Math.pow(10, decimalCount);
            count = LEADING_DIGITS[(i % 3 + 3) % 3] * decimal;
            width = Math.round(count / pointResolution);
            if (isNaN(width)) {
                this.element.style.display = "none";
                this.renderedVisible_ = false;
                return;
            } else if (width >= minWidth) break;
            ++i;
        }
        var html;
        if (this.scaleBar_) html = this.createScaleBar(width, count, suffix);
        else html = count.toFixed(decimalCount < 0 ? -decimalCount : 0) + " " + suffix;
        if (this.renderedHTML_ != html) {
            this.innerElement_.innerHTML = html;
            this.renderedHTML_ = html;
        }
        if (this.renderedWidth_ != width) {
            this.innerElement_.style.width = width + "px";
            this.renderedWidth_ = width;
        }
        if (!this.renderedVisible_) {
            this.element.style.display = "";
            this.renderedVisible_ = true;
        }
    };
    /**
     * @private
     * @param {number} width The current width of the scalebar.
     * @param {number} scale The current scale.
     * @param {string} suffix The suffix to append to the scale text.
     * @return {string} The stringified HTML of the scalebar.
     */ ScaleLine1.prototype.createScaleBar = function(width, scale, suffix) {
        var mapScale = "1 : " + Math.round(this.getScaleForResolution()).toLocaleString();
        var scaleSteps = [];
        var stepWidth = width / this.scaleBarSteps_;
        var backgroundColor = "#ffffff";
        for(var i = 0; i < this.scaleBarSteps_; i++){
            if (i === 0) // create the first marker at position 0
            scaleSteps.push(this.createMarker("absolute", i));
            scaleSteps.push('<div><div class="ol-scale-singlebar" style="width: ' + stepWidth + "px;" + "background-color: " + backgroundColor + ';"' + ">" + "</div>" + this.createMarker("relative", i) + (i % 2 === 0 || this.scaleBarSteps_ === 2 ? this.createStepText(i, width, false, scale, suffix) : "") + "</div>");
            if (i === this.scaleBarSteps_ - 1) scaleSteps.push(this.createStepText(i + 1, width, true, scale, suffix));
            // switch colors of steps between black and white
            if (backgroundColor === "#ffffff") backgroundColor = "#000000";
            else backgroundColor = "#ffffff";
        }
        var scaleBarText;
        if (this.scaleBarText_) scaleBarText = '<div class="ol-scale-text" style="width: ' + width + 'px;">' + mapScale + "</div>";
        else scaleBarText = "";
        var container = '<div style="display: flex;">' + scaleBarText + scaleSteps.join("") + "</div>";
        return container;
    };
    /**
     * Creates a marker at given position
     * @param {string} position The position, absolute or relative
     * @param {number} i The iterator
     * @return {string} The stringified div containing the marker
     */ ScaleLine1.prototype.createMarker = function(position, i) {
        var top = position === "absolute" ? 3 : -10;
        return '<div class="ol-scale-step-marker" style="position: ' + position + ";" + "top: " + top + 'px;"' + "></div>";
    };
    /**
     * Creates the label for a marker marker at given position
     * @param {number} i The iterator
     * @param {number} width The width the scalebar will currently use
     * @param {boolean} isLast Flag indicating if we add the last step text
     * @param {number} scale The current scale for the whole scalebar
     * @param {string} suffix The suffix for the scale
     * @return {string} The stringified div containing the step text
     */ ScaleLine1.prototype.createStepText = function(i, width, isLast, scale, suffix) {
        var length = i === 0 ? 0 : Math.round(scale / this.scaleBarSteps_ * i * 100) / 100;
        var lengthString = length + (i === 0 ? "" : " " + suffix);
        var margin = i === 0 ? -3 : width / this.scaleBarSteps_ * -1;
        var minWidth = i === 0 ? 0 : width / this.scaleBarSteps_ * 2;
        return '<div class="ol-scale-step-text" style="margin-left: ' + margin + "px;" + "text-align: " + (i === 0 ? "left" : "center") + "; " + "min-width: " + minWidth + "px;" + "left: " + (isLast ? width + "px" : "unset") + ';"' + ">" + lengthString + "</div>";
    };
    /**
     * Returns the appropriate scale for the given resolution and units.
     * @return {number} The appropriate scale.
     */ ScaleLine1.prototype.getScaleForResolution = function() {
        var resolution = (0, _projJs.getPointResolution)(this.viewState_.projection, this.viewState_.resolution, this.viewState_.center, (0, _unitsJsDefault.default).METERS);
        var dpi = this.dpi_ || DEFAULT_DPI;
        var inchesPerMeter = 1000 / 25.4;
        return parseFloat(resolution.toString()) * inchesPerMeter * dpi;
    };
    /**
     * Update the scale line element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */ ScaleLine1.prototype.render = function(mapEvent) {
        var frameState = mapEvent.frameState;
        if (!frameState) this.viewState_ = null;
        else this.viewState_ = frameState.viewState;
        this.updateElement_();
    };
    return ScaleLine1;
}((0, _controlJsDefault.default));
exports.default = ScaleLine;

},{"./Control.js":"a2mnq","../proj/Units.js":"gOgy6","../css.js":"lDlNi","../proj.js":"SznqC","../asserts.js":"e4TiF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9lbTD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _controlJs = require("./Control.js");
var _controlJsDefault = parcelHelpers.interopDefault(_controlJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _eventTypeJs1 = require("../pointer/EventType.js");
var _eventTypeJsDefault1 = parcelHelpers.interopDefault(_eventTypeJs1);
var _cssJs = require("../css.js");
var _mathJs = require("../math.js");
var _easingJs = require("../easing.js");
var _eventsJs = require("../events.js");
var _eventJs = require("../events/Event.js");
/**
 * @module ol/control/ZoomSlider
 */ var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * The enum for available directions.
 *
 * @enum {number}
 */ var Direction = {
    VERTICAL: 0,
    HORIZONTAL: 1
};
/**
 * @typedef {Object} Options
 * @property {string} [className='ol-zoomslider'] CSS class name.
 * @property {number} [duration=200] Animation duration in milliseconds.
 * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control
 * should be re-rendered. This is called in a `requestAnimationFrame` callback.
 */ /**
 * @classdesc
 * A slider type of control for zooming.
 *
 * Example:
 *
 *     map.addControl(new ZoomSlider());
 *
 * @api
 */ var ZoomSlider = /** @class */ function(_super) {
    __extends(ZoomSlider1, _super);
    /**
     * @param {Options} [opt_options] Zoom slider options.
     */ function ZoomSlider1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this, {
            element: document.createElement("div"),
            render: options.render
        }) || this;
        /**
         * @type {!Array<import("../events.js").EventsKey>}
         * @private
         */ _this.dragListenerKeys_ = [];
        /**
         * Will hold the current resolution of the view.
         *
         * @type {number|undefined}
         * @private
         */ _this.currentResolution_ = undefined;
        /**
         * The direction of the slider. Will be determined from actual display of the
         * container and defaults to Direction.VERTICAL.
         *
         * @type {Direction}
         * @private
         */ _this.direction_ = Direction.VERTICAL;
        /**
         * @type {boolean}
         * @private
         */ _this.dragging_;
        /**
         * @type {number}
         * @private
         */ _this.heightLimit_ = 0;
        /**
         * @type {number}
         * @private
         */ _this.widthLimit_ = 0;
        /**
         * @type {number|undefined}
         * @private
         */ _this.startX_;
        /**
         * @type {number|undefined}
         * @private
         */ _this.startY_;
        /**
         * The calculated thumb size (border box plus margins).  Set when initSlider_
         * is called.
         * @type {import("../size.js").Size}
         * @private
         */ _this.thumbSize_ = null;
        /**
         * Whether the slider is initialized.
         * @type {boolean}
         * @private
         */ _this.sliderInitialized_ = false;
        /**
         * @type {number}
         * @private
         */ _this.duration_ = options.duration !== undefined ? options.duration : 200;
        var className = options.className !== undefined ? options.className : "ol-zoomslider";
        var thumbElement = document.createElement("button");
        thumbElement.setAttribute("type", "button");
        thumbElement.className = className + "-thumb " + (0, _cssJs.CLASS_UNSELECTABLE);
        var containerElement = _this.element;
        containerElement.className = className + " " + (0, _cssJs.CLASS_UNSELECTABLE) + " " + (0, _cssJs.CLASS_CONTROL);
        containerElement.appendChild(thumbElement);
        containerElement.addEventListener((0, _eventTypeJsDefault1.default).POINTERDOWN, _this.handleDraggerStart_.bind(_this), false);
        containerElement.addEventListener((0, _eventTypeJsDefault1.default).POINTERMOVE, _this.handleDraggerDrag_.bind(_this), false);
        containerElement.addEventListener((0, _eventTypeJsDefault1.default).POINTERUP, _this.handleDraggerEnd_.bind(_this), false);
        containerElement.addEventListener((0, _eventTypeJsDefault.default).CLICK, _this.handleContainerClick_.bind(_this), false);
        thumbElement.addEventListener((0, _eventTypeJsDefault.default).CLICK, (0, _eventJs.stopPropagation), false);
        return _this;
    }
    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default|null} map Map.
     * @api
     */ ZoomSlider1.prototype.setMap = function(map) {
        _super.prototype.setMap.call(this, map);
        if (map) map.render();
    };
    /**
     * Initializes the slider element. This will determine and set this controls
     * direction_ and also constrain the dragging of the thumb to always be within
     * the bounds of the container.
     *
     * @return {boolean} Initialization successful
     * @private
     */ ZoomSlider1.prototype.initSlider_ = function() {
        var container = this.element;
        var containerWidth = container.offsetWidth;
        var containerHeight = container.offsetHeight;
        if (containerWidth === 0 && containerHeight === 0) return this.sliderInitialized_ = false;
        var containerStyle = getComputedStyle(container);
        containerWidth -= parseFloat(containerStyle["paddingRight"]) + parseFloat(containerStyle["paddingLeft"]);
        containerHeight -= parseFloat(containerStyle["paddingTop"]) + parseFloat(containerStyle["paddingBottom"]);
        var thumb = container.firstElementChild;
        var thumbStyle = getComputedStyle(thumb);
        var thumbWidth = thumb.offsetWidth + parseFloat(thumbStyle["marginRight"]) + parseFloat(thumbStyle["marginLeft"]);
        var thumbHeight = thumb.offsetHeight + parseFloat(thumbStyle["marginTop"]) + parseFloat(thumbStyle["marginBottom"]);
        this.thumbSize_ = [
            thumbWidth,
            thumbHeight
        ];
        if (containerWidth > containerHeight) {
            this.direction_ = Direction.HORIZONTAL;
            this.widthLimit_ = containerWidth - thumbWidth;
        } else {
            this.direction_ = Direction.VERTICAL;
            this.heightLimit_ = containerHeight - thumbHeight;
        }
        return this.sliderInitialized_ = true;
    };
    /**
     * @param {PointerEvent} event The browser event to handle.
     * @private
     */ ZoomSlider1.prototype.handleContainerClick_ = function(event) {
        var view = this.getMap().getView();
        var relativePosition = this.getRelativePosition_(event.offsetX - this.thumbSize_[0] / 2, event.offsetY - this.thumbSize_[1] / 2);
        var resolution = this.getResolutionForPosition_(relativePosition);
        var zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));
        view.animateInternal({
            zoom: zoom,
            duration: this.duration_,
            easing: (0, _easingJs.easeOut)
        });
    };
    /**
     * Handle dragger start events.
     * @param {PointerEvent} event The drag event.
     * @private
     */ ZoomSlider1.prototype.handleDraggerStart_ = function(event) {
        if (!this.dragging_ && event.target === this.element.firstElementChild) {
            var element = this.element.firstElementChild;
            this.getMap().getView().beginInteraction();
            this.startX_ = event.clientX - parseFloat(element.style.left);
            this.startY_ = event.clientY - parseFloat(element.style.top);
            this.dragging_ = true;
            if (this.dragListenerKeys_.length === 0) {
                var drag = this.handleDraggerDrag_;
                var end = this.handleDraggerEnd_;
                var doc = this.getMap().getOwnerDocument();
                this.dragListenerKeys_.push((0, _eventsJs.listen)(doc, (0, _eventTypeJsDefault1.default).POINTERMOVE, drag, this), (0, _eventsJs.listen)(doc, (0, _eventTypeJsDefault1.default).POINTERUP, end, this));
            }
        }
    };
    /**
     * Handle dragger drag events.
     *
     * @param {PointerEvent} event The drag event.
     * @private
     */ ZoomSlider1.prototype.handleDraggerDrag_ = function(event) {
        if (this.dragging_) {
            var deltaX = event.clientX - this.startX_;
            var deltaY = event.clientY - this.startY_;
            var relativePosition = this.getRelativePosition_(deltaX, deltaY);
            this.currentResolution_ = this.getResolutionForPosition_(relativePosition);
            this.getMap().getView().setResolution(this.currentResolution_);
        }
    };
    /**
     * Handle dragger end events.
     * @param {PointerEvent} event The drag event.
     * @private
     */ ZoomSlider1.prototype.handleDraggerEnd_ = function(event) {
        if (this.dragging_) {
            var view = this.getMap().getView();
            view.endInteraction();
            this.dragging_ = false;
            this.startX_ = undefined;
            this.startY_ = undefined;
            this.dragListenerKeys_.forEach((0, _eventsJs.unlistenByKey));
            this.dragListenerKeys_.length = 0;
        }
    };
    /**
     * Positions the thumb inside its container according to the given resolution.
     *
     * @param {number} res The res.
     * @private
     */ ZoomSlider1.prototype.setThumbPosition_ = function(res) {
        var position = this.getPositionForResolution_(res);
        var thumb = this.element.firstElementChild;
        if (this.direction_ == Direction.HORIZONTAL) thumb.style.left = this.widthLimit_ * position + "px";
        else thumb.style.top = this.heightLimit_ * position + "px";
    };
    /**
     * Calculates the relative position of the thumb given x and y offsets.  The
     * relative position scales from 0 to 1.  The x and y offsets are assumed to be
     * in pixel units within the dragger limits.
     *
     * @param {number} x Pixel position relative to the left of the slider.
     * @param {number} y Pixel position relative to the top of the slider.
     * @return {number} The relative position of the thumb.
     * @private
     */ ZoomSlider1.prototype.getRelativePosition_ = function(x, y) {
        var amount;
        if (this.direction_ === Direction.HORIZONTAL) amount = x / this.widthLimit_;
        else amount = y / this.heightLimit_;
        return (0, _mathJs.clamp)(amount, 0, 1);
    };
    /**
     * Calculates the corresponding resolution of the thumb given its relative
     * position (where 0 is the minimum and 1 is the maximum).
     *
     * @param {number} position The relative position of the thumb.
     * @return {number} The corresponding resolution.
     * @private
     */ ZoomSlider1.prototype.getResolutionForPosition_ = function(position) {
        var fn = this.getMap().getView().getResolutionForValueFunction();
        return fn(1 - position);
    };
    /**
     * Determines the relative position of the slider for the given resolution.  A
     * relative position of 0 corresponds to the minimum view resolution.  A
     * relative position of 1 corresponds to the maximum view resolution.
     *
     * @param {number} res The resolution.
     * @return {number} The relative position value (between 0 and 1).
     * @private
     */ ZoomSlider1.prototype.getPositionForResolution_ = function(res) {
        var fn = this.getMap().getView().getValueForResolutionFunction();
        return (0, _mathJs.clamp)(1 - fn(res), 0, 1);
    };
    /**
     * Update the zoomslider element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */ ZoomSlider1.prototype.render = function(mapEvent) {
        if (!mapEvent.frameState) return;
        if (!this.sliderInitialized_ && !this.initSlider_()) return;
        var res = mapEvent.frameState.viewState.resolution;
        this.currentResolution_ = res;
        this.setThumbPosition_(res);
    };
    return ZoomSlider1;
}((0, _controlJsDefault.default));
exports.default = ZoomSlider;

},{"./Control.js":"a2mnq","../events/EventType.js":"hrQJ6","../pointer/EventType.js":"cVfVH","../css.js":"lDlNi","../math.js":"5jEFr","../easing.js":"fYITA","../events.js":"dcspA","../events/Event.js":"hwXQP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ifceJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/control/ZoomToExtent
 */ var _controlJs = require("./Control.js");
var _controlJsDefault = parcelHelpers.interopDefault(_controlJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _cssJs = require("../css.js");
var _polygonJs = require("../geom/Polygon.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {string} [className='ol-zoom-extent'] Class name.
 * @property {HTMLElement|string} [target] Specify a target if you want the control
 * to be rendered outside of the map's viewport.
 * @property {string|HTMLElement} [label='E'] Text label to use for the button.
 * Instead of text, also an element (e.g. a `span` element) can be used.
 * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.
 * @property {import("../extent.js").Extent} [extent] The extent to zoom to. If undefined the validity
 * extent of the view projection is used.
 */ /**
 * @classdesc
 * A button control which, when pressed, changes the map view to a specific
 * extent. To style this control use the css selector `.ol-zoom-extent`.
 *
 * @api
 */ var ZoomToExtent = /** @class */ function(_super) {
    __extends(ZoomToExtent1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function ZoomToExtent1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this, {
            element: document.createElement("div"),
            target: options.target
        }) || this;
        /**
         * @type {?import("../extent.js").Extent|null}
         * @protected
         */ _this.extent = options.extent ? options.extent : null;
        var className = options.className !== undefined ? options.className : "ol-zoom-extent";
        var label = options.label !== undefined ? options.label : "E";
        var tipLabel = options.tipLabel !== undefined ? options.tipLabel : "Fit to extent";
        var button = document.createElement("button");
        button.setAttribute("type", "button");
        button.title = tipLabel;
        button.appendChild(typeof label === "string" ? document.createTextNode(label) : label);
        button.addEventListener((0, _eventTypeJsDefault.default).CLICK, _this.handleClick_.bind(_this), false);
        var cssClasses = className + " " + (0, _cssJs.CLASS_UNSELECTABLE) + " " + (0, _cssJs.CLASS_CONTROL);
        var element = _this.element;
        element.className = cssClasses;
        element.appendChild(button);
        return _this;
    }
    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */ ZoomToExtent1.prototype.handleClick_ = function(event) {
        event.preventDefault();
        this.handleZoomToExtent();
    };
    /**
     * @protected
     */ ZoomToExtent1.prototype.handleZoomToExtent = function() {
        var map = this.getMap();
        var view = map.getView();
        var extent = !this.extent ? view.getProjection().getExtent() : this.extent;
        view.fitInternal((0, _polygonJs.fromExtent)(extent));
    };
    return ZoomToExtent1;
}((0, _controlJsDefault.default));
exports.default = ZoomToExtent;

},{"./Control.js":"a2mnq","../events/EventType.js":"hrQJ6","../css.js":"lDlNi","../geom/Polygon.js":"cJuQF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1bsdX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _featureJs = require("../Feature.js");
var _featureJsDefault = parcelHelpers.interopDefault(_featureJs);
var _geometryCollectionJs = require("../geom/GeometryCollection.js");
var _geometryCollectionJsDefault = parcelHelpers.interopDefault(_geometryCollectionJs);
var _geometryTypeJs = require("../geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _jsonfeatureJs = require("./JSONFeature.js");
var _jsonfeatureJsDefault = parcelHelpers.interopDefault(_jsonfeatureJs);
var _lineStringJs = require("../geom/LineString.js");
var _lineStringJsDefault = parcelHelpers.interopDefault(_lineStringJs);
var _multiLineStringJs = require("../geom/MultiLineString.js");
var _multiLineStringJsDefault = parcelHelpers.interopDefault(_multiLineStringJs);
var _multiPointJs = require("../geom/MultiPoint.js");
var _multiPointJsDefault = parcelHelpers.interopDefault(_multiPointJs);
var _multiPolygonJs = require("../geom/MultiPolygon.js");
var _multiPolygonJsDefault = parcelHelpers.interopDefault(_multiPolygonJs);
var _pointJs = require("../geom/Point.js");
var _pointJsDefault = parcelHelpers.interopDefault(_pointJs);
var _polygonJs = require("../geom/Polygon.js");
var _polygonJsDefault = parcelHelpers.interopDefault(_polygonJs);
var _assertsJs = require("../asserts.js");
var _objJs = require("../obj.js");
var _projJs = require("../proj.js");
var _featureJs1 = require("./Feature.js");
/**
 * @module ol/format/GeoJSON
 */ var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {import("geojson").GeoJSON} GeoJSONObject
 * @typedef {import("geojson").Feature} GeoJSONFeature
 * @typedef {import("geojson").FeatureCollection} GeoJSONFeatureCollection
 * @typedef {import("geojson").Geometry} GeoJSONGeometry
 * @typedef {import("geojson").Point} GeoJSONPoint
 * @typedef {import("geojson").LineString} GeoJSONLineString
 * @typedef {import("geojson").Polygon} GeoJSONPolygon
 * @typedef {import("geojson").MultiPoint} GeoJSONMultiPoint
 * @typedef {import("geojson").MultiLineString} GeoJSONMultiLineString
 * @typedef {import("geojson").MultiPolygon} GeoJSONMultiPolygon
 * @typedef {import("geojson").GeometryCollection} GeoJSONGeometryCollection
 */ /**
 * @typedef {Object} Options
 * @property {import("../proj.js").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.
 * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection for features read or
 * written by the format.  Options passed to read or write methods will take precedence.
 * @property {string} [geometryName] Geometry name to use when creating features.
 * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include
 * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader
 * will look for that field to set the geometry name. If both this field is set to `true`
 * and a `geometryName` is provided, the `geometryName` will take precedence.
 */ /**
 * @classdesc
 * Feature format for reading and writing data in the GeoJSON format.
 *
 * @api
 */ var GeoJSON = /** @class */ function(_super) {
    __extends(GeoJSON1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function GeoJSON1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this) || this;
        /**
         * @type {import("../proj/Projection.js").default}
         */ _this.dataProjection = (0, _projJs.get)(options.dataProjection ? options.dataProjection : "EPSG:4326");
        if (options.featureProjection) /**
             * @type {import("../proj/Projection.js").default}
             */ _this.defaultFeatureProjection = (0, _projJs.get)(options.featureProjection);
        /**
         * Name of the geometry attribute for features.
         * @type {string|undefined}
         * @private
         */ _this.geometryName_ = options.geometryName;
        /**
         * Look for the geometry name in the feature GeoJSON
         * @type {boolean|undefined}
         * @private
         */ _this.extractGeometryName_ = options.extractGeometryName;
        _this.supportedMediaTypes = [
            "application/geo+json",
            "application/vnd.geo+json", 
        ];
        return _this;
    }
    /**
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [opt_options] Read options.
     * @protected
     * @return {import("../Feature.js").default} Feature.
     */ GeoJSON1.prototype.readFeatureFromObject = function(object, opt_options) {
        /**
         * @type {GeoJSONFeature}
         */ var geoJSONFeature = null;
        if (object["type"] === "Feature") geoJSONFeature = object;
        else geoJSONFeature = {
            "type": "Feature",
            "geometry": object,
            "properties": null
        };
        var geometry = readGeometry(geoJSONFeature["geometry"], opt_options);
        var feature = new (0, _featureJsDefault.default)();
        if (this.geometryName_) feature.setGeometryName(this.geometryName_);
        else if (this.extractGeometryName_ && true) feature.setGeometryName(geoJSONFeature["geometry_name"]);
        feature.setGeometry(geometry);
        if ("id" in geoJSONFeature) feature.setId(geoJSONFeature["id"]);
        if (geoJSONFeature["properties"]) feature.setProperties(geoJSONFeature["properties"], true);
        return feature;
    };
    /**
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [opt_options] Read options.
     * @protected
     * @return {Array<Feature>} Features.
     */ GeoJSON1.prototype.readFeaturesFromObject = function(object, opt_options) {
        var geoJSONObject = object;
        /** @type {Array<import("../Feature.js").default>} */ var features = null;
        if (geoJSONObject["type"] === "FeatureCollection") {
            var geoJSONFeatureCollection = object;
            features = [];
            var geoJSONFeatures = geoJSONFeatureCollection["features"];
            for(var i = 0, ii = geoJSONFeatures.length; i < ii; ++i)features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));
        } else features = [
            this.readFeatureFromObject(object, opt_options)
        ];
        return features;
    };
    /**
     * @param {GeoJSONGeometry} object Object.
     * @param {import("./Feature.js").ReadOptions} [opt_options] Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */ GeoJSON1.prototype.readGeometryFromObject = function(object, opt_options) {
        return readGeometry(object, opt_options);
    };
    /**
     * @param {Object} object Object.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     */ GeoJSON1.prototype.readProjectionFromObject = function(object) {
        var crs = object["crs"];
        var projection;
        if (crs) {
            if (crs["type"] == "name") projection = (0, _projJs.get)(crs["properties"]["name"]);
            else if (crs["type"] === "EPSG") projection = (0, _projJs.get)("EPSG:" + crs["properties"]["code"]);
            else (0, _assertsJs.assert)(false, 36); // Unknown SRS type
        } else projection = this.dataProjection;
        return projection;
    };
    /**
     * Encode a feature as a GeoJSON Feature object.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
     * @return {GeoJSONFeature} Object.
     * @api
     */ GeoJSON1.prototype.writeFeatureObject = function(feature, opt_options) {
        opt_options = this.adaptOptions(opt_options);
        /** @type {GeoJSONFeature} */ var object = {
            "type": "Feature",
            geometry: null,
            properties: null
        };
        var id = feature.getId();
        if (id !== undefined) object.id = id;
        if (!feature.hasProperties()) return object;
        var properties = feature.getProperties();
        var geometry = feature.getGeometry();
        if (geometry) {
            object.geometry = writeGeometry(geometry, opt_options);
            delete properties[feature.getGeometryName()];
        }
        if (!(0, _objJs.isEmpty)(properties)) object.properties = properties;
        return object;
    };
    /**
     * Encode an array of features as a GeoJSON object.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
     * @return {GeoJSONFeatureCollection} GeoJSON Object.
     * @api
     */ GeoJSON1.prototype.writeFeaturesObject = function(features, opt_options) {
        opt_options = this.adaptOptions(opt_options);
        var objects = [];
        for(var i = 0, ii = features.length; i < ii; ++i)objects.push(this.writeFeatureObject(features[i], opt_options));
        return {
            type: "FeatureCollection",
            features: objects
        };
    };
    /**
     * Encode a geometry as a GeoJSON object.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
     * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.
     * @api
     */ GeoJSON1.prototype.writeGeometryObject = function(geometry, opt_options) {
        return writeGeometry(geometry, this.adaptOptions(opt_options));
    };
    return GeoJSON1;
}((0, _jsonfeatureJsDefault.default));
/**
 * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.
 * @param {import("./Feature.js").ReadOptions} [opt_options] Read options.
 * @return {import("../geom/Geometry.js").default} Geometry.
 */ function readGeometry(object, opt_options) {
    if (!object) return null;
    /**
     * @type {import("../geom/Geometry.js").default}
     */ var geometry;
    switch(object["type"]){
        case (0, _geometryTypeJsDefault.default).POINT:
            geometry = readPointGeometry(object);
            break;
        case (0, _geometryTypeJsDefault.default).LINE_STRING:
            geometry = readLineStringGeometry(object);
            break;
        case (0, _geometryTypeJsDefault.default).POLYGON:
            geometry = readPolygonGeometry(object);
            break;
        case (0, _geometryTypeJsDefault.default).MULTI_POINT:
            geometry = readMultiPointGeometry(object);
            break;
        case (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING:
            geometry = readMultiLineStringGeometry(object);
            break;
        case (0, _geometryTypeJsDefault.default).MULTI_POLYGON:
            geometry = readMultiPolygonGeometry(object);
            break;
        case (0, _geometryTypeJsDefault.default).GEOMETRY_COLLECTION:
            geometry = readGeometryCollectionGeometry(object);
            break;
        default:
            throw new Error("Unsupported GeoJSON type: " + object.type);
    }
    return (0, _featureJs1.transformGeometryWithOptions)(geometry, false, opt_options);
}
/**
 * @param {GeoJSONGeometryCollection} object Object.
 * @param {import("./Feature.js").ReadOptions} [opt_options] Read options.
 * @return {GeometryCollection} Geometry collection.
 */ function readGeometryCollectionGeometry(object, opt_options) {
    var geometries = object["geometries"].map(/**
     * @param {GeoJSONGeometry} geometry Geometry.
     * @return {import("../geom/Geometry.js").default} geometry Geometry.
     */ function(geometry) {
        return readGeometry(geometry, opt_options);
    });
    return new (0, _geometryCollectionJsDefault.default)(geometries);
}
/**
 * @param {GeoJSONPoint} object Object.
 * @return {Point} Point.
 */ function readPointGeometry(object) {
    return new (0, _pointJsDefault.default)(object["coordinates"]);
}
/**
 * @param {GeoJSONLineString} object Object.
 * @return {LineString} LineString.
 */ function readLineStringGeometry(object) {
    return new (0, _lineStringJsDefault.default)(object["coordinates"]);
}
/**
 * @param {GeoJSONMultiLineString} object Object.
 * @return {MultiLineString} MultiLineString.
 */ function readMultiLineStringGeometry(object) {
    return new (0, _multiLineStringJsDefault.default)(object["coordinates"]);
}
/**
 * @param {GeoJSONMultiPoint} object Object.
 * @return {MultiPoint} MultiPoint.
 */ function readMultiPointGeometry(object) {
    return new (0, _multiPointJsDefault.default)(object["coordinates"]);
}
/**
 * @param {GeoJSONMultiPolygon} object Object.
 * @return {MultiPolygon} MultiPolygon.
 */ function readMultiPolygonGeometry(object) {
    return new (0, _multiPolygonJsDefault.default)(object["coordinates"]);
}
/**
 * @param {GeoJSONPolygon} object Object.
 * @return {Polygon} Polygon.
 */ function readPolygonGeometry(object) {
    return new (0, _polygonJsDefault.default)(object["coordinates"]);
}
/**
 * @param {import("../geom/Geometry.js").default} geometry Geometry.
 * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
 * @return {GeoJSONGeometry} GeoJSON geometry.
 */ function writeGeometry(geometry, opt_options) {
    geometry = (0, _featureJs1.transformGeometryWithOptions)(geometry, true, opt_options);
    var type = geometry.getType();
    /** @type {GeoJSONGeometry} */ var geoJSON;
    switch(type){
        case (0, _geometryTypeJsDefault.default).POINT:
            geoJSON = writePointGeometry(geometry, opt_options);
            break;
        case (0, _geometryTypeJsDefault.default).LINE_STRING:
            geoJSON = writeLineStringGeometry(geometry, opt_options);
            break;
        case (0, _geometryTypeJsDefault.default).POLYGON:
            geoJSON = writePolygonGeometry(geometry, opt_options);
            break;
        case (0, _geometryTypeJsDefault.default).MULTI_POINT:
            geoJSON = writeMultiPointGeometry(geometry, opt_options);
            break;
        case (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING:
            geoJSON = writeMultiLineStringGeometry(geometry, opt_options);
            break;
        case (0, _geometryTypeJsDefault.default).MULTI_POLYGON:
            geoJSON = writeMultiPolygonGeometry(geometry, opt_options);
            break;
        case (0, _geometryTypeJsDefault.default).GEOMETRY_COLLECTION:
            geoJSON = writeGeometryCollectionGeometry(geometry, opt_options);
            break;
        case (0, _geometryTypeJsDefault.default).CIRCLE:
            geoJSON = {
                type: "GeometryCollection",
                geometries: []
            };
            break;
        default:
            throw new Error("Unsupported geometry type: " + type);
    }
    return geoJSON;
}
/**
 * @param {GeometryCollection} geometry Geometry.
 * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
 * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.
 */ function writeGeometryCollectionGeometry(geometry1, opt_options) {
    var geometries = geometry1.getGeometriesArray().map(function(geometry) {
        var options = (0, _objJs.assign)({}, opt_options);
        delete options.featureProjection;
        return writeGeometry(geometry, options);
    });
    return {
        type: "GeometryCollection",
        geometries: geometries
    };
}
/**
 * @param {LineString} geometry Geometry.
 * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
 * @return {GeoJSONGeometry} GeoJSON geometry.
 */ function writeLineStringGeometry(geometry, opt_options) {
    return {
        type: "LineString",
        coordinates: geometry.getCoordinates()
    };
}
/**
 * @param {MultiLineString} geometry Geometry.
 * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
 * @return {GeoJSONGeometry} GeoJSON geometry.
 */ function writeMultiLineStringGeometry(geometry, opt_options) {
    return {
        type: "MultiLineString",
        coordinates: geometry.getCoordinates()
    };
}
/**
 * @param {MultiPoint} geometry Geometry.
 * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
 * @return {GeoJSONGeometry} GeoJSON geometry.
 */ function writeMultiPointGeometry(geometry, opt_options) {
    return {
        type: "MultiPoint",
        coordinates: geometry.getCoordinates()
    };
}
/**
 * @param {MultiPolygon} geometry Geometry.
 * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
 * @return {GeoJSONGeometry} GeoJSON geometry.
 */ function writeMultiPolygonGeometry(geometry, opt_options) {
    var right;
    if (opt_options) right = opt_options.rightHanded;
    return {
        type: "MultiPolygon",
        coordinates: geometry.getCoordinates(right)
    };
}
/**
 * @param {Point} geometry Geometry.
 * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
 * @return {GeoJSONGeometry} GeoJSON geometry.
 */ function writePointGeometry(geometry, opt_options) {
    return {
        type: "Point",
        coordinates: geometry.getCoordinates()
    };
}
/**
 * @param {Polygon} geometry Geometry.
 * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
 * @return {GeoJSONGeometry} GeoJSON geometry.
 */ function writePolygonGeometry(geometry, opt_options) {
    var right;
    if (opt_options) right = opt_options.rightHanded;
    return {
        type: "Polygon",
        coordinates: geometry.getCoordinates(right)
    };
}
exports.default = GeoJSON;

},{"../Feature.js":"liabO","../geom/GeometryCollection.js":"fDMaj","../geom/GeometryType.js":"j6daa","./JSONFeature.js":"aCFnK","../geom/LineString.js":"jLUiq","../geom/MultiLineString.js":"030lt","../geom/MultiPoint.js":"k4LcJ","../geom/MultiPolygon.js":"2XIqx","../geom/Point.js":"hx2Ar","../geom/Polygon.js":"cJuQF","../asserts.js":"e4TiF","../obj.js":"3ssAG","../proj.js":"SznqC","./Feature.js":"FZbV5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"liabO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Convert the provided object into a feature style function.  Functions passed
 * through unchanged.  Arrays of Style or single style objects wrapped
 * in a new feature style function.
 * @param {!import("./style/Style.js").StyleFunction|!Array<import("./style/Style.js").default>|!import("./style/Style.js").default} obj
 *     A feature style function, a single style, or an array of styles.
 * @return {import("./style/Style.js").StyleFunction} A style function.
 */ parcelHelpers.export(exports, "createStyleFunction", ()=>createStyleFunction);
/**
 * @module ol/Feature
 */ var _objectJs = require("./Object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _eventTypeJs = require("./events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _assertsJs = require("./asserts.js");
var _eventsJs = require("./events.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {typeof Feature|typeof import("./render/Feature.js").default} FeatureClass
 */ /**
 * @typedef {Feature|import("./render/Feature.js").default} FeatureLike
 */ /***
 * @template Return
 * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
 *   import("./Observable").OnSignature<import("./ObjectEventType").Types|'change:geometry', import("./Object").ObjectEvent, Return> &
 *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|import("./ObjectEventType").Types
 *     |'change:geometry', Return>} FeatureOnSignature
 */ /***
 * @template Geometry
 * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry
 */ /**
 * @classdesc
 * A vector object for geographic features with a geometry and other
 * attribute properties, similar to the features in vector file formats like
 * GeoJSON.
 *
 * Features can be styled individually with `setStyle`; otherwise they use the
 * style of their vector layer.
 *
 * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on
 * the feature object, so they are observable, and have get/set accessors.
 *
 * Typically, a feature has a single geometry property. You can set the
 * geometry using the `setGeometry` method and get it with `getGeometry`.
 * It is possible to store more than one geometry on a feature using attribute
 * properties. By default, the geometry used for rendering is identified by
 * the property name `geometry`. If you want to use another geometry property
 * for rendering, use the `setGeometryName` method to change the attribute
 * property associated with the geometry for the feature.  For example:
 *
 * ```js
 *
 * import Feature from 'ol/Feature';
 * import Polygon from 'ol/geom/Polygon';
 * import Point from 'ol/geom/Point';
 *
 * var feature = new Feature({
 *   geometry: new Polygon(polyCoords),
 *   labelPoint: new Point(labelCoords),
 *   name: 'My Polygon'
 * });
 *
 * // get the polygon geometry
 * var poly = feature.getGeometry();
 *
 * // Render the feature as a point using the coordinates from labelPoint
 * feature.setGeometryName('labelPoint');
 *
 * // get the point geometry
 * var point = feature.getGeometry();
 * ```
 *
 * @api
 * @template {import("./geom/Geometry.js").default} [Geometry=import("./geom/Geometry.js").default]
 */ var Feature = /** @class */ function(_super) {
    __extends(Feature1, _super);
    /**
     * @param {Geometry|ObjectWithGeometry<Geometry>} [opt_geometryOrProperties]
     *     You may pass a Geometry object directly, or an object literal containing
     *     properties. If you pass an object literal, you may include a Geometry
     *     associated with a `geometry` key.
     */ function Feature1(opt_geometryOrProperties) {
        var _this = _super.call(this) || this;
        /***
         * @type {FeatureOnSignature<import("./events").EventsKey>}
         */ _this.on;
        /***
         * @type {FeatureOnSignature<import("./events").EventsKey>}
         */ _this.once;
        /***
         * @type {FeatureOnSignature<void>}
         */ _this.un;
        /**
         * @private
         * @type {number|string|undefined}
         */ _this.id_ = undefined;
        /**
         * @type {string}
         * @private
         */ _this.geometryName_ = "geometry";
        /**
         * User provided style.
         * @private
         * @type {import("./style/Style.js").StyleLike}
         */ _this.style_ = null;
        /**
         * @private
         * @type {import("./style/Style.js").StyleFunction|undefined}
         */ _this.styleFunction_ = undefined;
        /**
         * @private
         * @type {?import("./events.js").EventsKey}
         */ _this.geometryChangeKey_ = null;
        _this.addChangeListener(_this.geometryName_, _this.handleGeometryChanged_);
        if (opt_geometryOrProperties) {
            if (typeof /** @type {?} */ opt_geometryOrProperties.getSimplifiedGeometry === "function") {
                var geometry = opt_geometryOrProperties;
                _this.setGeometry(geometry);
            } else {
                /** @type {Object<string, *>} */ var properties = opt_geometryOrProperties;
                _this.setProperties(properties);
            }
        }
        return _this;
    }
    /**
     * Clone this feature. If the original feature has a geometry it
     * is also cloned. The feature id is not set in the clone.
     * @return {Feature<Geometry>} The clone.
     * @api
     */ Feature1.prototype.clone = function() {
        var clone = new Feature1(this.hasProperties() ? this.getProperties() : null);
        clone.setGeometryName(this.getGeometryName());
        var geometry = this.getGeometry();
        if (geometry) clone.setGeometry(/** @type {Geometry} */ geometry.clone());
        var style = this.getStyle();
        if (style) clone.setStyle(style);
        return clone;
    };
    /**
     * Get the feature's default geometry.  A feature may have any number of named
     * geometries.  The "default" geometry (the one that is rendered by default) is
     * set when calling {@link module:ol/Feature~Feature#setGeometry}.
     * @return {Geometry|undefined} The default geometry for the feature.
     * @api
     * @observable
     */ Feature1.prototype.getGeometry = function() {
        return /** @type {Geometry|undefined} */ this.get(this.geometryName_);
    };
    /**
     * Get the feature identifier.  This is a stable identifier for the feature and
     * is either set when reading data from a remote source or set explicitly by
     * calling {@link module:ol/Feature~Feature#setId}.
     * @return {number|string|undefined} Id.
     * @api
     */ Feature1.prototype.getId = function() {
        return this.id_;
    };
    /**
     * Get the name of the feature's default geometry.  By default, the default
     * geometry is named `geometry`.
     * @return {string} Get the property name associated with the default geometry
     *     for this feature.
     * @api
     */ Feature1.prototype.getGeometryName = function() {
        return this.geometryName_;
    };
    /**
     * Get the feature's style. Will return what was provided to the
     * {@link module:ol/Feature~Feature#setStyle} method.
     * @return {import("./style/Style.js").StyleLike|undefined} The feature style.
     * @api
     */ Feature1.prototype.getStyle = function() {
        return this.style_;
    };
    /**
     * Get the feature's style function.
     * @return {import("./style/Style.js").StyleFunction|undefined} Return a function
     * representing the current style of this feature.
     * @api
     */ Feature1.prototype.getStyleFunction = function() {
        return this.styleFunction_;
    };
    /**
     * @private
     */ Feature1.prototype.handleGeometryChange_ = function() {
        this.changed();
    };
    /**
     * @private
     */ Feature1.prototype.handleGeometryChanged_ = function() {
        if (this.geometryChangeKey_) {
            (0, _eventsJs.unlistenByKey)(this.geometryChangeKey_);
            this.geometryChangeKey_ = null;
        }
        var geometry = this.getGeometry();
        if (geometry) this.geometryChangeKey_ = (0, _eventsJs.listen)(geometry, (0, _eventTypeJsDefault.default).CHANGE, this.handleGeometryChange_, this);
        this.changed();
    };
    /**
     * Set the default geometry for the feature.  This will update the property
     * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
     * @param {Geometry|undefined} geometry The new geometry.
     * @api
     * @observable
     */ Feature1.prototype.setGeometry = function(geometry) {
        this.set(this.geometryName_, geometry);
    };
    /**
     * Set the style for the feature to override the layer style.  This can be a
     * single style object, an array of styles, or a function that takes a
     * resolution and returns an array of styles. To unset the feature style, call
     * `setStyle()` without arguments or a falsey value.
     * @param {import("./style/Style.js").StyleLike} [opt_style] Style for this feature.
     * @api
     * @fires module:ol/events/Event~BaseEvent#event:change
     */ Feature1.prototype.setStyle = function(opt_style) {
        this.style_ = opt_style;
        this.styleFunction_ = !opt_style ? undefined : createStyleFunction(opt_style);
        this.changed();
    };
    /**
     * Set the feature id.  The feature id is considered stable and may be used when
     * requesting features or comparing identifiers returned from a remote source.
     * The feature id can be used with the
     * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.
     * @param {number|string|undefined} id The feature id.
     * @api
     * @fires module:ol/events/Event~BaseEvent#event:change
     */ Feature1.prototype.setId = function(id) {
        this.id_ = id;
        this.changed();
    };
    /**
     * Set the property name to be used when getting the feature's default geometry.
     * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with
     * this name will be returned.
     * @param {string} name The property name of the default geometry.
     * @api
     */ Feature1.prototype.setGeometryName = function(name) {
        this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);
        this.geometryName_ = name;
        this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);
        this.handleGeometryChanged_();
    };
    return Feature1;
}((0, _objectJsDefault.default));
function createStyleFunction(obj) {
    if (typeof obj === "function") return obj;
    else {
        /**
         * @type {Array<import("./style/Style.js").default>}
         */ var styles_1;
        if (Array.isArray(obj)) styles_1 = obj;
        else {
            (0, _assertsJs.assert)(typeof /** @type {?} */ obj.getZIndex === "function", 41); // Expected an `import("./style/Style.js").Style` or an array of `import("./style/Style.js").Style`
            var style = obj;
            styles_1 = [
                style
            ];
        }
        return function() {
            return styles_1;
        };
    }
}
exports.default = Feature;

},{"./Object.js":"1zG8z","./events/EventType.js":"hrQJ6","./asserts.js":"e4TiF","./events.js":"dcspA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fDMaj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/GeometryCollection
 */ var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _geometryJs = require("./Geometry.js");
var _geometryJsDefault = parcelHelpers.interopDefault(_geometryJs);
var _geometryTypeJs = require("./GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _extentJs = require("../extent.js");
var _eventsJs = require("../events.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * An array of {@link module:ol/geom/Geometry~Geometry} objects.
 *
 * @api
 */ var GeometryCollection = /** @class */ function(_super) {
    __extends(GeometryCollection1, _super);
    /**
     * @param {Array<Geometry>} [opt_geometries] Geometries.
     */ function GeometryCollection1(opt_geometries) {
        var _this = _super.call(this) || this;
        /**
         * @private
         * @type {Array<Geometry>}
         */ _this.geometries_ = opt_geometries ? opt_geometries : null;
        /**
         * @type {Array<import("../events.js").EventsKey>}
         */ _this.changeEventsKeys_ = [];
        _this.listenGeometriesChange_();
        return _this;
    }
    /**
     * @private
     */ GeometryCollection1.prototype.unlistenGeometriesChange_ = function() {
        this.changeEventsKeys_.forEach((0, _eventsJs.unlistenByKey));
        this.changeEventsKeys_.length = 0;
    };
    /**
     * @private
     */ GeometryCollection1.prototype.listenGeometriesChange_ = function() {
        if (!this.geometries_) return;
        for(var i = 0, ii = this.geometries_.length; i < ii; ++i)this.changeEventsKeys_.push((0, _eventsJs.listen)(this.geometries_[i], (0, _eventTypeJsDefault.default).CHANGE, this.changed, this));
    };
    /**
     * Make a complete copy of the geometry.
     * @return {!GeometryCollection} Clone.
     * @api
     */ GeometryCollection1.prototype.clone = function() {
        var geometryCollection = new GeometryCollection1(null);
        geometryCollection.setGeometries(this.geometries_);
        geometryCollection.applyProperties(this);
        return geometryCollection;
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */ GeometryCollection1.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
        if (minSquaredDistance < (0, _extentJs.closestSquaredDistanceXY)(this.getExtent(), x, y)) return minSquaredDistance;
        var geometries = this.geometries_;
        for(var i = 0, ii = geometries.length; i < ii; ++i)minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);
        return minSquaredDistance;
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */ GeometryCollection1.prototype.containsXY = function(x, y) {
        var geometries = this.geometries_;
        for(var i = 0, ii = geometries.length; i < ii; ++i){
            if (geometries[i].containsXY(x, y)) return true;
        }
        return false;
    };
    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */ GeometryCollection1.prototype.computeExtent = function(extent) {
        (0, _extentJs.createOrUpdateEmpty)(extent);
        var geometries = this.geometries_;
        for(var i = 0, ii = geometries.length; i < ii; ++i)(0, _extentJs.extend)(extent, geometries[i].getExtent());
        return extent;
    };
    /**
     * Return the geometries that make up this geometry collection.
     * @return {Array<Geometry>} Geometries.
     * @api
     */ GeometryCollection1.prototype.getGeometries = function() {
        return cloneGeometries(this.geometries_);
    };
    /**
     * @return {Array<Geometry>} Geometries.
     */ GeometryCollection1.prototype.getGeometriesArray = function() {
        return this.geometries_;
    };
    /**
     * @return {Array<Geometry>} Geometries.
     */ GeometryCollection1.prototype.getGeometriesArrayRecursive = function() {
        /** @type {Array<Geometry>} */ var geometriesArray = [];
        var geometries = this.geometries_;
        for(var i = 0, ii = geometries.length; i < ii; ++i)if (geometries[i].getType() === this.getType()) geometriesArray = geometriesArray.concat(/** @type {GeometryCollection} */ geometries[i].getGeometriesArrayRecursive());
        else geometriesArray.push(geometries[i]);
        return geometriesArray;
    };
    /**
     * Create a simplified version of this geometry using the Douglas Peucker algorithm.
     * @param {number} squaredTolerance Squared tolerance.
     * @return {GeometryCollection} Simplified GeometryCollection.
     */ GeometryCollection1.prototype.getSimplifiedGeometry = function(squaredTolerance) {
        if (this.simplifiedGeometryRevision !== this.getRevision()) {
            this.simplifiedGeometryMaxMinSquaredTolerance = 0;
            this.simplifiedGeometryRevision = this.getRevision();
        }
        if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance) return this;
        var simplifiedGeometries = [];
        var geometries = this.geometries_;
        var simplified = false;
        for(var i = 0, ii = geometries.length; i < ii; ++i){
            var geometry = geometries[i];
            var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);
            simplifiedGeometries.push(simplifiedGeometry);
            if (simplifiedGeometry !== geometry) simplified = true;
        }
        if (simplified) {
            var simplifiedGeometryCollection = new GeometryCollection1(null);
            simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);
            return simplifiedGeometryCollection;
        } else {
            this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
            return this;
        }
    };
    /**
     * Get the type of this geometry.
     * @return {import("./GeometryType.js").default} Geometry type.
     * @api
     */ GeometryCollection1.prototype.getType = function() {
        return (0, _geometryTypeJsDefault.default).GEOMETRY_COLLECTION;
    };
    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */ GeometryCollection1.prototype.intersectsExtent = function(extent) {
        var geometries = this.geometries_;
        for(var i = 0, ii = geometries.length; i < ii; ++i){
            if (geometries[i].intersectsExtent(extent)) return true;
        }
        return false;
    };
    /**
     * @return {boolean} Is empty.
     */ GeometryCollection1.prototype.isEmpty = function() {
        return this.geometries_.length === 0;
    };
    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @param {number} angle Rotation angle in radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     */ GeometryCollection1.prototype.rotate = function(angle, anchor) {
        var geometries = this.geometries_;
        for(var i = 0, ii = geometries.length; i < ii; ++i)geometries[i].rotate(angle, anchor);
        this.changed();
    };
    /**
     * Scale the geometry (with an optional origin).  This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} sx The scaling factor in the x-direction.
     * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).
     * @param {import("../coordinate.js").Coordinate} [opt_anchor] The scale origin (defaults to the center
     *     of the geometry extent).
     * @api
     */ GeometryCollection1.prototype.scale = function(sx, opt_sy, opt_anchor) {
        var anchor = opt_anchor;
        if (!anchor) anchor = (0, _extentJs.getCenter)(this.getExtent());
        var geometries = this.geometries_;
        for(var i = 0, ii = geometries.length; i < ii; ++i)geometries[i].scale(sx, opt_sy, anchor);
        this.changed();
    };
    /**
     * Set the geometries that make up this geometry collection.
     * @param {Array<Geometry>} geometries Geometries.
     * @api
     */ GeometryCollection1.prototype.setGeometries = function(geometries) {
        this.setGeometriesArray(cloneGeometries(geometries));
    };
    /**
     * @param {Array<Geometry>} geometries Geometries.
     */ GeometryCollection1.prototype.setGeometriesArray = function(geometries) {
        this.unlistenGeometriesChange_();
        this.geometries_ = geometries;
        this.listenGeometriesChange_();
        this.changed();
    };
    /**
     * Apply a transform function to the coordinates of the geometry.
     * The geometry is modified in place.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     * @param {import("../proj.js").TransformFunction} transformFn Transform function.
     * Called with a flat array of geometry coordinates.
     * @api
     */ GeometryCollection1.prototype.applyTransform = function(transformFn) {
        var geometries = this.geometries_;
        for(var i = 0, ii = geometries.length; i < ii; ++i)geometries[i].applyTransform(transformFn);
        this.changed();
    };
    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     */ GeometryCollection1.prototype.translate = function(deltaX, deltaY) {
        var geometries = this.geometries_;
        for(var i = 0, ii = geometries.length; i < ii; ++i)geometries[i].translate(deltaX, deltaY);
        this.changed();
    };
    /**
     * Clean up.
     */ GeometryCollection1.prototype.disposeInternal = function() {
        this.unlistenGeometriesChange_();
        _super.prototype.disposeInternal.call(this);
    };
    return GeometryCollection1;
}((0, _geometryJsDefault.default));
/**
 * @param {Array<Geometry>} geometries Geometries.
 * @return {Array<Geometry>} Cloned geometries.
 */ function cloneGeometries(geometries) {
    var clonedGeometries = [];
    for(var i = 0, ii = geometries.length; i < ii; ++i)clonedGeometries.push(geometries[i].clone());
    return clonedGeometries;
}
exports.default = GeometryCollection;

},{"../events/EventType.js":"hrQJ6","./Geometry.js":"4ya62","./GeometryType.js":"j6daa","../extent.js":"6YrVc","../events.js":"dcspA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aCFnK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/format/JSONFeature
 */ var _featureJs = require("./Feature.js");
var _featureJsDefault = parcelHelpers.interopDefault(_featureJs);
var _formatTypeJs = require("./FormatType.js");
var _formatTypeJsDefault = parcelHelpers.interopDefault(_formatTypeJs);
var _utilJs = require("../util.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for JSON feature formats.
 *
 * @abstract
 */ var JSONFeature = /** @class */ function(_super) {
    __extends(JSONFeature1, _super);
    function JSONFeature1() {
        return _super.call(this) || this;
    }
    /**
     * @return {import("./FormatType.js").default} Format.
     */ JSONFeature1.prototype.getType = function() {
        return (0, _formatTypeJsDefault.default).JSON;
    };
    /**
     * Read a feature.  Only works for a single feature. Use `readFeatures` to
     * read a feature collection.
     *
     * @param {ArrayBuffer|Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [opt_options] Read options.
     * @return {import("../Feature.js").default} Feature.
     * @api
     */ JSONFeature1.prototype.readFeature = function(source, opt_options) {
        return this.readFeatureFromObject(getObject(source), this.getReadOptions(source, opt_options));
    };
    /**
     * Read all features.  Works with both a single feature and a feature
     * collection.
     *
     * @param {ArrayBuffer|Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [opt_options] Read options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     */ JSONFeature1.prototype.readFeatures = function(source, opt_options) {
        return this.readFeaturesFromObject(getObject(source), this.getReadOptions(source, opt_options));
    };
    /**
     * @abstract
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [opt_options] Read options.
     * @protected
     * @return {import("../Feature.js").default} Feature.
     */ JSONFeature1.prototype.readFeatureFromObject = function(object, opt_options) {
        return (0, _utilJs.abstract)();
    };
    /**
     * @abstract
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [opt_options] Read options.
     * @protected
     * @return {Array<import("../Feature.js").default>} Features.
     */ JSONFeature1.prototype.readFeaturesFromObject = function(object, opt_options) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Read a geometry.
     *
     * @param {ArrayBuffer|Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [opt_options] Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @api
     */ JSONFeature1.prototype.readGeometry = function(source, opt_options) {
        return this.readGeometryFromObject(getObject(source), this.getReadOptions(source, opt_options));
    };
    /**
     * @abstract
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [opt_options] Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */ JSONFeature1.prototype.readGeometryFromObject = function(object, opt_options) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Read the projection.
     *
     * @param {ArrayBuffer|Document|Element|Object|string} source Source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     */ JSONFeature1.prototype.readProjection = function(source) {
        return this.readProjectionFromObject(getObject(source));
    };
    /**
     * @abstract
     * @param {Object} object Object.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     */ JSONFeature1.prototype.readProjectionFromObject = function(object) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Encode a feature as string.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
     * @return {string} Encoded feature.
     * @api
     */ JSONFeature1.prototype.writeFeature = function(feature, opt_options) {
        return JSON.stringify(this.writeFeatureObject(feature, opt_options));
    };
    /**
     * @abstract
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
     * @return {Object} Object.
     */ JSONFeature1.prototype.writeFeatureObject = function(feature, opt_options) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Encode an array of features as string.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
     * @return {string} Encoded features.
     * @api
     */ JSONFeature1.prototype.writeFeatures = function(features, opt_options) {
        return JSON.stringify(this.writeFeaturesObject(features, opt_options));
    };
    /**
     * @abstract
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
     * @return {Object} Object.
     */ JSONFeature1.prototype.writeFeaturesObject = function(features, opt_options) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Encode a geometry as string.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
     * @return {string} Encoded geometry.
     * @api
     */ JSONFeature1.prototype.writeGeometry = function(geometry, opt_options) {
        return JSON.stringify(this.writeGeometryObject(geometry, opt_options));
    };
    /**
     * @abstract
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [opt_options] Write options.
     * @return {Object} Object.
     */ JSONFeature1.prototype.writeGeometryObject = function(geometry, opt_options) {
        return (0, _utilJs.abstract)();
    };
    return JSONFeature1;
}((0, _featureJsDefault.default));
/**
 * @param {Document|Element|Object|string} source Source.
 * @return {Object} Object.
 */ function getObject(source) {
    if (typeof source === "string") {
        var object = JSON.parse(source);
        return object ? object : null;
    } else if (source !== null) return source;
    else return null;
}
exports.default = JSONFeature;

},{"./Feature.js":"FZbV5","./FormatType.js":"cQiMP","../util.js":"pLBjQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"FZbV5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {import("../geom/Geometry.js").default} geometry Geometry.
 * @param {boolean} write Set to true for writing, false for reading.
 * @param {WriteOptions|ReadOptions} [opt_options] Options.
 * @return {import("../geom/Geometry.js").default} Transformed geometry.
 */ parcelHelpers.export(exports, "transformGeometryWithOptions", ()=>transformGeometryWithOptions);
/**
 * @param {import("../extent.js").Extent} extent Extent.
 * @param {ReadOptions} [opt_options] Read options.
 * @return {import("../extent.js").Extent} Transformed extent.
 */ parcelHelpers.export(exports, "transformExtentWithOptions", ()=>transformExtentWithOptions);
/**
 * @module ol/format/Feature
 */ var _unitsJs = require("../proj/Units.js");
var _unitsJsDefault = parcelHelpers.interopDefault(_unitsJs);
var _utilJs = require("../util.js");
var _objJs = require("../obj.js");
var _projJs = require("../proj.js");
/**
 * @typedef {Object} ReadOptions
 * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are reading.
 * If not provided, the projection will be derived from the data (where possible) or
 * the `dataProjection` of the format is assigned (where set). If the projection
 * can not be derived from the data and if no `dataProjection` is set for a format,
 * the features will not be reprojected.
 * @property {import("../extent.js").Extent} [extent] Tile extent in map units of the tile being read.
 * This is only required when reading data with tile pixels as geometry units. When configured,
 * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be
 * provided.
 * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
 * created by the format reader. If not provided, features will be returned in the
 * `dataProjection`.
 */ /**
 * @typedef {Object} WriteOptions
 * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are writing.
 * If not provided, the `dataProjection` of the format is assigned (where set).
 * If no `dataProjection` is set for a format, the features will be returned
 * in the `featureProjection`.
 * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
 * that will be serialized by the format writer. If not provided, geometries are assumed
 * to be in the `dataProjection` if that is set; in other words, they are not transformed.
 * @property {boolean} [rightHanded] When writing geometries, follow the right-hand
 * rule for linear ring orientation.  This means that polygons will have counter-clockwise
 * exterior rings and clockwise interior rings.  By default, coordinates are serialized
 * as they are provided at construction.  If `true`, the right-hand rule will
 * be applied.  If `false`, the left-hand rule will be applied (clockwise for
 * exterior and counter-clockwise for interior rings).  Note that not all
 * formats support this.  The GeoJSON format does use this property when writing
 * geometries.
 * @property {number} [decimals] Maximum number of decimal places for coordinates.
 * Coordinates are stored internally as floats, but floating-point arithmetic can create
 * coordinates with a large number of decimal places, not generally wanted on output.
 * Set a number here to round coordinates. Can also be used to ensure that
 * coordinates read in can be written back out with the same number of decimals.
 * Default is no rounding.
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for feature formats.
 * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode
 * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial
 * file formats.  See the documentation for each format for more details.
 *
 * @abstract
 * @api
 */ var FeatureFormat = /** @class */ function() {
    function FeatureFormat1() {
        /**
         * @protected
         * @type {import("../proj/Projection.js").default|undefined}
         */ this.dataProjection = undefined;
        /**
         * @protected
         * @type {import("../proj/Projection.js").default|undefined}
         */ this.defaultFeatureProjection = undefined;
        /**
         * A list media types supported by the format in descending order of preference.
         * @type {Array<string>}
         */ this.supportedMediaTypes = null;
    }
    /**
     * Adds the data projection to the read options.
     * @param {Document|Element|Object|string} source Source.
     * @param {ReadOptions} [opt_options] Options.
     * @return {ReadOptions|undefined} Options.
     * @protected
     */ FeatureFormat1.prototype.getReadOptions = function(source, opt_options) {
        var options;
        if (opt_options) {
            var dataProjection = opt_options.dataProjection ? (0, _projJs.get)(opt_options.dataProjection) : this.readProjection(source);
            if (opt_options.extent && dataProjection && dataProjection.getUnits() === (0, _unitsJsDefault.default).TILE_PIXELS) {
                dataProjection = (0, _projJs.get)(dataProjection);
                dataProjection.setWorldExtent(opt_options.extent);
            }
            options = {
                dataProjection: dataProjection,
                featureProjection: opt_options.featureProjection
            };
        }
        return this.adaptOptions(options);
    };
    /**
     * Sets the `dataProjection` on the options, if no `dataProjection`
     * is set.
     * @param {WriteOptions|ReadOptions|undefined} options
     *     Options.
     * @protected
     * @return {WriteOptions|ReadOptions|undefined}
     *     Updated options.
     */ FeatureFormat1.prototype.adaptOptions = function(options) {
        return (0, _objJs.assign)({
            dataProjection: this.dataProjection,
            featureProjection: this.defaultFeatureProjection
        }, options);
    };
    /**
     * @abstract
     * @return {import("./FormatType.js").default} Format.
     */ FeatureFormat1.prototype.getType = function() {
        return (0, _utilJs.abstract)();
    };
    /**
     * Read a single feature from a source.
     *
     * @abstract
     * @param {Document|Element|Object|string} source Source.
     * @param {ReadOptions} [opt_options] Read options.
     * @return {import("../Feature.js").FeatureLike} Feature.
     */ FeatureFormat1.prototype.readFeature = function(source, opt_options) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Read all features from a source.
     *
     * @abstract
     * @param {Document|Element|ArrayBuffer|Object|string} source Source.
     * @param {ReadOptions} [opt_options] Read options.
     * @return {Array<import("../Feature.js").FeatureLike>} Features.
     */ FeatureFormat1.prototype.readFeatures = function(source, opt_options) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Read a single geometry from a source.
     *
     * @abstract
     * @param {Document|Element|Object|string} source Source.
     * @param {ReadOptions} [opt_options] Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     */ FeatureFormat1.prototype.readGeometry = function(source, opt_options) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Read the projection from a source.
     *
     * @abstract
     * @param {Document|Element|Object|string} source Source.
     * @return {import("../proj/Projection.js").default|undefined} Projection.
     */ FeatureFormat1.prototype.readProjection = function(source) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Encode a feature in this format.
     *
     * @abstract
     * @param {import("../Feature.js").default} feature Feature.
     * @param {WriteOptions} [opt_options] Write options.
     * @return {string|ArrayBuffer} Result.
     */ FeatureFormat1.prototype.writeFeature = function(feature, opt_options) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Encode an array of features in this format.
     *
     * @abstract
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {WriteOptions} [opt_options] Write options.
     * @return {string|ArrayBuffer} Result.
     */ FeatureFormat1.prototype.writeFeatures = function(features, opt_options) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Write a single geometry in this format.
     *
     * @abstract
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {WriteOptions} [opt_options] Write options.
     * @return {string|ArrayBuffer} Result.
     */ FeatureFormat1.prototype.writeGeometry = function(geometry, opt_options) {
        return (0, _utilJs.abstract)();
    };
    return FeatureFormat1;
}();
exports.default = FeatureFormat;
function transformGeometryWithOptions(geometry, write, opt_options) {
    var featureProjection = opt_options ? (0, _projJs.get)(opt_options.featureProjection) : null;
    var dataProjection = opt_options ? (0, _projJs.get)(opt_options.dataProjection) : null;
    var transformed;
    if (featureProjection && dataProjection && !(0, _projJs.equivalent)(featureProjection, dataProjection)) transformed = (write ? geometry.clone() : geometry).transform(write ? featureProjection : dataProjection, write ? dataProjection : featureProjection);
    else transformed = geometry;
    if (write && opt_options && /** @type {WriteOptions} */ opt_options.decimals !== undefined) {
        var power_1 = Math.pow(10, /** @type {WriteOptions} */ opt_options.decimals);
        // if decimals option on write, round each coordinate appropriately
        /**
         * @param {Array<number>} coordinates Coordinates.
         * @return {Array<number>} Transformed coordinates.
         */ var transform = function(coordinates) {
            for(var i = 0, ii = coordinates.length; i < ii; ++i)coordinates[i] = Math.round(coordinates[i] * power_1) / power_1;
            return coordinates;
        };
        if (transformed === geometry) transformed = geometry.clone();
        transformed.applyTransform(transform);
    }
    return transformed;
}
function transformExtentWithOptions(extent, opt_options) {
    var featureProjection = opt_options ? (0, _projJs.get)(opt_options.featureProjection) : null;
    var dataProjection = opt_options ? (0, _projJs.get)(opt_options.dataProjection) : null;
    if (featureProjection && dataProjection && !(0, _projJs.equivalent)(featureProjection, dataProjection)) return (0, _projJs.transformExtent)(extent, dataProjection, featureProjection);
    else return extent;
}

},{"../proj/Units.js":"gOgy6","../util.js":"pLBjQ","../obj.js":"3ssAG","../proj.js":"SznqC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cQiMP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/format/FormatType
 */ /**
 * @enum {string}
 */ exports.default = {
    ARRAY_BUFFER: "arraybuffer",
    JSON: "json",
    TEXT: "text",
    XML: "xml"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jLUiq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/LineString
 */ var _geometryLayoutJs = require("./GeometryLayout.js");
var _geometryLayoutJsDefault = parcelHelpers.interopDefault(_geometryLayoutJs);
var _geometryTypeJs = require("./GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _simpleGeometryJs = require("./SimpleGeometry.js");
var _simpleGeometryJsDefault = parcelHelpers.interopDefault(_simpleGeometryJs);
var _closestJs = require("./flat/closest.js");
var _extentJs = require("../extent.js");
var _deflateJs = require("./flat/deflate.js");
var _simplifyJs = require("./flat/simplify.js");
var _arrayJs = require("../array.js");
var _segmentsJs = require("./flat/segments.js");
var _inflateJs = require("./flat/inflate.js");
var _interpolateJs = require("./flat/interpolate.js");
var _intersectsextentJs = require("./flat/intersectsextent.js");
var _lengthJs = require("./flat/length.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Linestring geometry.
 *
 * @api
 */ var LineString = /** @class */ function(_super) {
    __extends(LineString1, _super);
    /**
     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     */ function LineString1(coordinates, opt_layout) {
        var _this = _super.call(this) || this;
        /**
         * @private
         * @type {import("../coordinate.js").Coordinate}
         */ _this.flatMidpoint_ = null;
        /**
         * @private
         * @type {number}
         */ _this.flatMidpointRevision_ = -1;
        /**
         * @private
         * @type {number}
         */ _this.maxDelta_ = -1;
        /**
         * @private
         * @type {number}
         */ _this.maxDeltaRevision_ = -1;
        if (opt_layout !== undefined && !Array.isArray(coordinates[0])) _this.setFlatCoordinates(opt_layout, coordinates);
        else _this.setCoordinates(coordinates, opt_layout);
        return _this;
    }
    /**
     * Append the passed coordinate to the coordinates of the linestring.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @api
     */ LineString1.prototype.appendCoordinate = function(coordinate) {
        if (!this.flatCoordinates) this.flatCoordinates = coordinate.slice();
        else (0, _arrayJs.extend)(this.flatCoordinates, coordinate);
        this.changed();
    };
    /**
     * Make a complete copy of the geometry.
     * @return {!LineString} Clone.
     * @api
     */ LineString1.prototype.clone = function() {
        var lineString = new LineString1(this.flatCoordinates.slice(), this.layout);
        lineString.applyProperties(this);
        return lineString;
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */ LineString1.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
        if (minSquaredDistance < (0, _extentJs.closestSquaredDistanceXY)(this.getExtent(), x, y)) return minSquaredDistance;
        if (this.maxDeltaRevision_ != this.getRevision()) {
            this.maxDelta_ = Math.sqrt((0, _closestJs.maxSquaredDelta)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
            this.maxDeltaRevision_ = this.getRevision();
        }
        return (0, _closestJs.assignClosestPoint)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
    };
    /**
     * Iterate over each segment, calling the provided callback.
     * If the callback returns a truthy value the function returns that
     * value immediately. Otherwise the function returns `false`.
     *
     * @param {function(this: S, import("../coordinate.js").Coordinate, import("../coordinate.js").Coordinate): T} callback Function
     *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.
     * @return {T|boolean} Value.
     * @template T,S
     * @api
     */ LineString1.prototype.forEachSegment = function(callback) {
        return (0, _segmentsJs.forEach)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);
    };
    /**
     * Returns the coordinate at `m` using linear interpolation, or `null` if no
     * such coordinate exists.
     *
     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
     * M will return the first coordinate and Ms greater than the last M will
     * return the last coordinate.
     *
     * @param {number} m M.
     * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.
     * @return {import("../coordinate.js").Coordinate|null} Coordinate.
     * @api
     */ LineString1.prototype.getCoordinateAtM = function(m, opt_extrapolate) {
        if (this.layout != (0, _geometryLayoutJsDefault.default).XYM && this.layout != (0, _geometryLayoutJsDefault.default).XYZM) return null;
        var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
        return (0, _interpolateJs.lineStringCoordinateAtM)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);
    };
    /**
     * Return the coordinates of the linestring.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @api
     */ LineString1.prototype.getCoordinates = function() {
        return (0, _inflateJs.inflateCoordinates)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };
    /**
     * Return the coordinate at the provided fraction along the linestring.
     * The `fraction` is a number between 0 and 1, where 0 is the start of the
     * linestring and 1 is the end.
     * @param {number} fraction Fraction.
     * @param {import("../coordinate.js").Coordinate} [opt_dest] Optional coordinate whose values will
     *     be modified. If not provided, a new coordinate will be returned.
     * @return {import("../coordinate.js").Coordinate} Coordinate of the interpolated point.
     * @api
     */ LineString1.prototype.getCoordinateAt = function(fraction, opt_dest) {
        return (0, _interpolateJs.interpolatePoint)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest, this.stride);
    };
    /**
     * Return the length of the linestring on projected plane.
     * @return {number} Length (on projected plane).
     * @api
     */ LineString1.prototype.getLength = function() {
        return (0, _lengthJs.lineStringLength)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };
    /**
     * @return {Array<number>} Flat midpoint.
     */ LineString1.prototype.getFlatMidpoint = function() {
        if (this.flatMidpointRevision_ != this.getRevision()) {
            this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);
            this.flatMidpointRevision_ = this.getRevision();
        }
        return this.flatMidpoint_;
    };
    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {LineString} Simplified LineString.
     * @protected
     */ LineString1.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {
        var simplifiedFlatCoordinates = [];
        simplifiedFlatCoordinates.length = (0, _simplifyJs.douglasPeucker)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
        return new LineString1(simplifiedFlatCoordinates, (0, _geometryLayoutJsDefault.default).XY);
    };
    /**
     * Get the type of this geometry.
     * @return {import("./GeometryType.js").default} Geometry type.
     * @api
     */ LineString1.prototype.getType = function() {
        return (0, _geometryTypeJsDefault.default).LINE_STRING;
    };
    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */ LineString1.prototype.intersectsExtent = function(extent) {
        return (0, _intersectsextentJs.intersectsLineString)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);
    };
    /**
     * Set the coordinates of the linestring.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     * @api
     */ LineString1.prototype.setCoordinates = function(coordinates, opt_layout) {
        this.setLayout(opt_layout, coordinates, 1);
        if (!this.flatCoordinates) this.flatCoordinates = [];
        this.flatCoordinates.length = (0, _deflateJs.deflateCoordinates)(this.flatCoordinates, 0, coordinates, this.stride);
        this.changed();
    };
    return LineString1;
}((0, _simpleGeometryJsDefault.default));
exports.default = LineString;

},{"./GeometryLayout.js":"hDCgS","./GeometryType.js":"j6daa","./SimpleGeometry.js":"hLwk3","./flat/closest.js":"fi6H5","../extent.js":"6YrVc","./flat/deflate.js":"3TE5l","./flat/simplify.js":"jsqc5","../array.js":"1Fbic","./flat/segments.js":"e7gWa","./flat/inflate.js":"4Rpju","./flat/interpolate.js":"dh8ns","./flat/intersectsextent.js":"7x08H","./flat/length.js":"X5sUU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dh8ns":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} fraction Fraction.
 * @param {Array<number>} [opt_dest] Destination.
 * @param {number} [opt_dimension] Destination dimension (default is `2`)
 * @return {Array<number>} Destination.
 */ parcelHelpers.export(exports, "interpolatePoint", ()=>interpolatePoint);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @param {number} m M.
 * @param {boolean} extrapolate Extrapolate.
 * @return {import("../../coordinate.js").Coordinate|null} Coordinate.
 */ parcelHelpers.export(exports, "lineStringCoordinateAtM", ()=>lineStringCoordinateAtM);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<number>} ends Ends.
 * @param {number} stride Stride.
 * @param {number} m M.
 * @param {boolean} extrapolate Extrapolate.
 * @param {boolean} interpolate Interpolate.
 * @return {import("../../coordinate.js").Coordinate|null} Coordinate.
 */ parcelHelpers.export(exports, "lineStringsCoordinateAtM", ()=>lineStringsCoordinateAtM);
/**
 * @module ol/geom/flat/interpolate
 */ var _arrayJs = require("../../array.js");
var _mathJs = require("../../math.js");
function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest, opt_dimension) {
    var o, t;
    var n = (end - offset) / stride;
    if (n === 1) o = offset;
    else if (n === 2) {
        o = offset;
        t = fraction;
    } else if (n !== 0) {
        var x1 = flatCoordinates[offset];
        var y1 = flatCoordinates[offset + 1];
        var length_1 = 0;
        var cumulativeLengths = [
            0
        ];
        for(var i = offset + stride; i < end; i += stride){
            var x2 = flatCoordinates[i];
            var y2 = flatCoordinates[i + 1];
            length_1 += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
            cumulativeLengths.push(length_1);
            x1 = x2;
            y1 = y2;
        }
        var target = fraction * length_1;
        var index = (0, _arrayJs.binarySearch)(cumulativeLengths, target);
        if (index < 0) {
            t = (target - cumulativeLengths[-index - 2]) / (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);
            o = offset + (-index - 2) * stride;
        } else o = offset + index * stride;
    }
    var dimension = opt_dimension > 1 ? opt_dimension : 2;
    var dest = opt_dest ? opt_dest : new Array(dimension);
    for(var i = 0; i < dimension; ++i)dest[i] = o === undefined ? NaN : t === undefined ? flatCoordinates[o + i] : (0, _mathJs.lerp)(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);
    return dest;
}
function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {
    if (end == offset) return null;
    var coordinate;
    if (m < flatCoordinates[offset + stride - 1]) {
        if (extrapolate) {
            coordinate = flatCoordinates.slice(offset, offset + stride);
            coordinate[stride - 1] = m;
            return coordinate;
        } else return null;
    } else if (flatCoordinates[end - 1] < m) {
        if (extrapolate) {
            coordinate = flatCoordinates.slice(end - stride, end);
            coordinate[stride - 1] = m;
            return coordinate;
        } else return null;
    }
    // FIXME use O(1) search
    if (m == flatCoordinates[offset + stride - 1]) return flatCoordinates.slice(offset, offset + stride);
    var lo = offset / stride;
    var hi = end / stride;
    while(lo < hi){
        var mid = lo + hi >> 1;
        if (m < flatCoordinates[(mid + 1) * stride - 1]) hi = mid;
        else lo = mid + 1;
    }
    var m0 = flatCoordinates[lo * stride - 1];
    if (m == m0) return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);
    var m1 = flatCoordinates[(lo + 1) * stride - 1];
    var t = (m - m0) / (m1 - m0);
    coordinate = [];
    for(var i = 0; i < stride - 1; ++i)coordinate.push((0, _mathJs.lerp)(flatCoordinates[(lo - 1) * stride + i], flatCoordinates[lo * stride + i], t));
    coordinate.push(m);
    return coordinate;
}
function lineStringsCoordinateAtM(flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {
    if (interpolate) return lineStringCoordinateAtM(flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);
    var coordinate;
    if (m < flatCoordinates[stride - 1]) {
        if (extrapolate) {
            coordinate = flatCoordinates.slice(0, stride);
            coordinate[stride - 1] = m;
            return coordinate;
        } else return null;
    }
    if (flatCoordinates[flatCoordinates.length - 1] < m) {
        if (extrapolate) {
            coordinate = flatCoordinates.slice(flatCoordinates.length - stride);
            coordinate[stride - 1] = m;
            return coordinate;
        } else return null;
    }
    for(var i = 0, ii = ends.length; i < ii; ++i){
        var end = ends[i];
        if (offset == end) continue;
        if (m < flatCoordinates[offset + stride - 1]) return null;
        else if (m <= flatCoordinates[end - 1]) return lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, false);
        offset = end;
    }
    return null;
}

},{"../../array.js":"1Fbic","../../math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"X5sUU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/flat/length
 */ /**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {number} Length.
 */ parcelHelpers.export(exports, "lineStringLength", ()=>lineStringLength);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {number} Perimeter.
 */ parcelHelpers.export(exports, "linearRingLength", ()=>linearRingLength);
function lineStringLength(flatCoordinates, offset, end, stride) {
    var x1 = flatCoordinates[offset];
    var y1 = flatCoordinates[offset + 1];
    var length = 0;
    for(var i = offset + stride; i < end; i += stride){
        var x2 = flatCoordinates[i];
        var y2 = flatCoordinates[i + 1];
        length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        x1 = x2;
        y1 = y2;
    }
    return length;
}
function linearRingLength(flatCoordinates, offset, end, stride) {
    var perimeter = lineStringLength(flatCoordinates, offset, end, stride);
    var dx = flatCoordinates[end - stride] - flatCoordinates[offset];
    var dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];
    perimeter += Math.sqrt(dx * dx + dy * dy);
    return perimeter;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"030lt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/MultiLineString
 */ var _geometryLayoutJs = require("./GeometryLayout.js");
var _geometryLayoutJsDefault = parcelHelpers.interopDefault(_geometryLayoutJs);
var _geometryTypeJs = require("./GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _lineStringJs = require("./LineString.js");
var _lineStringJsDefault = parcelHelpers.interopDefault(_lineStringJs);
var _simpleGeometryJs = require("./SimpleGeometry.js");
var _simpleGeometryJsDefault = parcelHelpers.interopDefault(_simpleGeometryJs);
var _closestJs = require("./flat/closest.js");
var _extentJs = require("../extent.js");
var _deflateJs = require("./flat/deflate.js");
var _simplifyJs = require("./flat/simplify.js");
var _arrayJs = require("../array.js");
var _inflateJs = require("./flat/inflate.js");
var _interpolateJs = require("./flat/interpolate.js");
var _intersectsextentJs = require("./flat/intersectsextent.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Multi-linestring geometry.
 *
 * @api
 */ var MultiLineString = /** @class */ function(_super) {
    __extends(MultiLineString1, _super);
    /**
     * @param {Array<Array<import("../coordinate.js").Coordinate>|LineString>|Array<number>} coordinates
     *     Coordinates or LineString geometries. (For internal use, flat coordinates in
     *     combination with `opt_layout` and `opt_ends` are also accepted.)
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     * @param {Array<number>} [opt_ends] Flat coordinate ends for internal use.
     */ function MultiLineString1(coordinates, opt_layout, opt_ends) {
        var _this = _super.call(this) || this;
        /**
         * @type {Array<number>}
         * @private
         */ _this.ends_ = [];
        /**
         * @private
         * @type {number}
         */ _this.maxDelta_ = -1;
        /**
         * @private
         * @type {number}
         */ _this.maxDeltaRevision_ = -1;
        if (Array.isArray(coordinates[0])) _this.setCoordinates(coordinates, opt_layout);
        else if (opt_layout !== undefined && opt_ends) {
            _this.setFlatCoordinates(opt_layout, coordinates);
            _this.ends_ = opt_ends;
        } else {
            var layout = _this.getLayout();
            var lineStrings = coordinates;
            var flatCoordinates = [];
            var ends = [];
            for(var i = 0, ii = lineStrings.length; i < ii; ++i){
                var lineString = lineStrings[i];
                if (i === 0) layout = lineString.getLayout();
                (0, _arrayJs.extend)(flatCoordinates, lineString.getFlatCoordinates());
                ends.push(flatCoordinates.length);
            }
            _this.setFlatCoordinates(layout, flatCoordinates);
            _this.ends_ = ends;
        }
        return _this;
    }
    /**
     * Append the passed linestring to the multilinestring.
     * @param {LineString} lineString LineString.
     * @api
     */ MultiLineString1.prototype.appendLineString = function(lineString) {
        if (!this.flatCoordinates) this.flatCoordinates = lineString.getFlatCoordinates().slice();
        else (0, _arrayJs.extend)(this.flatCoordinates, lineString.getFlatCoordinates().slice());
        this.ends_.push(this.flatCoordinates.length);
        this.changed();
    };
    /**
     * Make a complete copy of the geometry.
     * @return {!MultiLineString} Clone.
     * @api
     */ MultiLineString1.prototype.clone = function() {
        var multiLineString = new MultiLineString1(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
        multiLineString.applyProperties(this);
        return multiLineString;
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */ MultiLineString1.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
        if (minSquaredDistance < (0, _extentJs.closestSquaredDistanceXY)(this.getExtent(), x, y)) return minSquaredDistance;
        if (this.maxDeltaRevision_ != this.getRevision()) {
            this.maxDelta_ = Math.sqrt((0, _closestJs.arrayMaxSquaredDelta)(this.flatCoordinates, 0, this.ends_, this.stride, 0));
            this.maxDeltaRevision_ = this.getRevision();
        }
        return (0, _closestJs.assignClosestArrayPoint)(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
    };
    /**
     * Returns the coordinate at `m` using linear interpolation, or `null` if no
     * such coordinate exists.
     *
     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
     * M will return the first coordinate and Ms greater than the last M will
     * return the last coordinate.
     *
     * `opt_interpolate` controls interpolation between consecutive LineStrings
     * within the MultiLineString. If `opt_interpolate` is `true` the coordinates
     * will be linearly interpolated between the last coordinate of one LineString
     * and the first coordinate of the next LineString.  If `opt_interpolate` is
     * `false` then the function will return `null` for Ms falling between
     * LineStrings.
     *
     * @param {number} m M.
     * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.
     * @param {boolean} [opt_interpolate] Interpolate. Default is `false`.
     * @return {import("../coordinate.js").Coordinate|null} Coordinate.
     * @api
     */ MultiLineString1.prototype.getCoordinateAtM = function(m, opt_extrapolate, opt_interpolate) {
        if (this.layout != (0, _geometryLayoutJsDefault.default).XYM && this.layout != (0, _geometryLayoutJsDefault.default).XYZM || this.flatCoordinates.length === 0) return null;
        var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
        var interpolate = opt_interpolate !== undefined ? opt_interpolate : false;
        return (0, _interpolateJs.lineStringsCoordinateAtM)(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);
    };
    /**
     * Return the coordinates of the multilinestring.
     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
     * @api
     */ MultiLineString1.prototype.getCoordinates = function() {
        return (0, _inflateJs.inflateCoordinatesArray)(this.flatCoordinates, 0, this.ends_, this.stride);
    };
    /**
     * @return {Array<number>} Ends.
     */ MultiLineString1.prototype.getEnds = function() {
        return this.ends_;
    };
    /**
     * Return the linestring at the specified index.
     * @param {number} index Index.
     * @return {LineString} LineString.
     * @api
     */ MultiLineString1.prototype.getLineString = function(index) {
        if (index < 0 || this.ends_.length <= index) return null;
        return new (0, _lineStringJsDefault.default)(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
    };
    /**
     * Return the linestrings of this multilinestring.
     * @return {Array<LineString>} LineStrings.
     * @api
     */ MultiLineString1.prototype.getLineStrings = function() {
        var flatCoordinates = this.flatCoordinates;
        var ends = this.ends_;
        var layout = this.layout;
        /** @type {Array<LineString>} */ var lineStrings = [];
        var offset = 0;
        for(var i = 0, ii = ends.length; i < ii; ++i){
            var end = ends[i];
            var lineString = new (0, _lineStringJsDefault.default)(flatCoordinates.slice(offset, end), layout);
            lineStrings.push(lineString);
            offset = end;
        }
        return lineStrings;
    };
    /**
     * @return {Array<number>} Flat midpoints.
     */ MultiLineString1.prototype.getFlatMidpoints = function() {
        var midpoints = [];
        var flatCoordinates = this.flatCoordinates;
        var offset = 0;
        var ends = this.ends_;
        var stride = this.stride;
        for(var i = 0, ii = ends.length; i < ii; ++i){
            var end = ends[i];
            var midpoint = (0, _interpolateJs.interpolatePoint)(flatCoordinates, offset, end, stride, 0.5);
            (0, _arrayJs.extend)(midpoints, midpoint);
            offset = end;
        }
        return midpoints;
    };
    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {MultiLineString} Simplified MultiLineString.
     * @protected
     */ MultiLineString1.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {
        var simplifiedFlatCoordinates = [];
        var simplifiedEnds = [];
        simplifiedFlatCoordinates.length = (0, _simplifyJs.douglasPeuckerArray)(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);
        return new MultiLineString1(simplifiedFlatCoordinates, (0, _geometryLayoutJsDefault.default).XY, simplifiedEnds);
    };
    /**
     * Get the type of this geometry.
     * @return {import("./GeometryType.js").default} Geometry type.
     * @api
     */ MultiLineString1.prototype.getType = function() {
        return (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING;
    };
    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */ MultiLineString1.prototype.intersectsExtent = function(extent) {
        return (0, _intersectsextentJs.intersectsLineStringArray)(this.flatCoordinates, 0, this.ends_, this.stride, extent);
    };
    /**
     * Set the coordinates of the multilinestring.
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
     * @param {GeometryLayout} [opt_layout] Layout.
     * @api
     */ MultiLineString1.prototype.setCoordinates = function(coordinates, opt_layout) {
        this.setLayout(opt_layout, coordinates, 2);
        if (!this.flatCoordinates) this.flatCoordinates = [];
        var ends = (0, _deflateJs.deflateCoordinatesArray)(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
        this.changed();
    };
    return MultiLineString1;
}((0, _simpleGeometryJsDefault.default));
exports.default = MultiLineString;

},{"./GeometryLayout.js":"hDCgS","./GeometryType.js":"j6daa","./LineString.js":"jLUiq","./SimpleGeometry.js":"hLwk3","./flat/closest.js":"fi6H5","../extent.js":"6YrVc","./flat/deflate.js":"3TE5l","./flat/simplify.js":"jsqc5","../array.js":"1Fbic","./flat/inflate.js":"4Rpju","./flat/interpolate.js":"dh8ns","./flat/intersectsextent.js":"7x08H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k4LcJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/MultiPoint
 */ var _geometryTypeJs = require("./GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _pointJs = require("./Point.js");
var _pointJsDefault = parcelHelpers.interopDefault(_pointJs);
var _simpleGeometryJs = require("./SimpleGeometry.js");
var _simpleGeometryJsDefault = parcelHelpers.interopDefault(_simpleGeometryJs);
var _extentJs = require("../extent.js");
var _deflateJs = require("./flat/deflate.js");
var _arrayJs = require("../array.js");
var _inflateJs = require("./flat/inflate.js");
var _mathJs = require("../math.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Multi-point geometry.
 *
 * @api
 */ var MultiPoint = /** @class */ function(_super) {
    __extends(MultiPoint1, _super);
    /**
     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     */ function MultiPoint1(coordinates, opt_layout) {
        var _this = _super.call(this) || this;
        if (opt_layout && !Array.isArray(coordinates[0])) _this.setFlatCoordinates(opt_layout, coordinates);
        else _this.setCoordinates(coordinates, opt_layout);
        return _this;
    }
    /**
     * Append the passed point to this multipoint.
     * @param {Point} point Point.
     * @api
     */ MultiPoint1.prototype.appendPoint = function(point) {
        if (!this.flatCoordinates) this.flatCoordinates = point.getFlatCoordinates().slice();
        else (0, _arrayJs.extend)(this.flatCoordinates, point.getFlatCoordinates());
        this.changed();
    };
    /**
     * Make a complete copy of the geometry.
     * @return {!MultiPoint} Clone.
     * @api
     */ MultiPoint1.prototype.clone = function() {
        var multiPoint = new MultiPoint1(this.flatCoordinates.slice(), this.layout);
        multiPoint.applyProperties(this);
        return multiPoint;
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */ MultiPoint1.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
        if (minSquaredDistance < (0, _extentJs.closestSquaredDistanceXY)(this.getExtent(), x, y)) return minSquaredDistance;
        var flatCoordinates = this.flatCoordinates;
        var stride = this.stride;
        for(var i = 0, ii = flatCoordinates.length; i < ii; i += stride){
            var squaredDistance = (0, _mathJs.squaredDistance)(x, y, flatCoordinates[i], flatCoordinates[i + 1]);
            if (squaredDistance < minSquaredDistance) {
                minSquaredDistance = squaredDistance;
                for(var j = 0; j < stride; ++j)closestPoint[j] = flatCoordinates[i + j];
                closestPoint.length = stride;
            }
        }
        return minSquaredDistance;
    };
    /**
     * Return the coordinates of the multipoint.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @api
     */ MultiPoint1.prototype.getCoordinates = function() {
        return (0, _inflateJs.inflateCoordinates)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
    };
    /**
     * Return the point at the specified index.
     * @param {number} index Index.
     * @return {Point} Point.
     * @api
     */ MultiPoint1.prototype.getPoint = function(index) {
        var n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;
        if (index < 0 || n <= index) return null;
        return new (0, _pointJsDefault.default)(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);
    };
    /**
     * Return the points of this multipoint.
     * @return {Array<Point>} Points.
     * @api
     */ MultiPoint1.prototype.getPoints = function() {
        var flatCoordinates = this.flatCoordinates;
        var layout = this.layout;
        var stride = this.stride;
        /** @type {Array<Point>} */ var points = [];
        for(var i = 0, ii = flatCoordinates.length; i < ii; i += stride){
            var point = new (0, _pointJsDefault.default)(flatCoordinates.slice(i, i + stride), layout);
            points.push(point);
        }
        return points;
    };
    /**
     * Get the type of this geometry.
     * @return {import("./GeometryType.js").default} Geometry type.
     * @api
     */ MultiPoint1.prototype.getType = function() {
        return (0, _geometryTypeJsDefault.default).MULTI_POINT;
    };
    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */ MultiPoint1.prototype.intersectsExtent = function(extent) {
        var flatCoordinates = this.flatCoordinates;
        var stride = this.stride;
        for(var i = 0, ii = flatCoordinates.length; i < ii; i += stride){
            var x = flatCoordinates[i];
            var y = flatCoordinates[i + 1];
            if ((0, _extentJs.containsXY)(extent, x, y)) return true;
        }
        return false;
    };
    /**
     * Set the coordinates of the multipoint.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     * @api
     */ MultiPoint1.prototype.setCoordinates = function(coordinates, opt_layout) {
        this.setLayout(opt_layout, coordinates, 1);
        if (!this.flatCoordinates) this.flatCoordinates = [];
        this.flatCoordinates.length = (0, _deflateJs.deflateCoordinates)(this.flatCoordinates, 0, coordinates, this.stride);
        this.changed();
    };
    return MultiPoint1;
}((0, _simpleGeometryJsDefault.default));
exports.default = MultiPoint;

},{"./GeometryType.js":"j6daa","./Point.js":"hx2Ar","./SimpleGeometry.js":"hLwk3","../extent.js":"6YrVc","./flat/deflate.js":"3TE5l","../array.js":"1Fbic","./flat/inflate.js":"4Rpju","../math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2XIqx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/MultiPolygon
 */ var _geometryLayoutJs = require("./GeometryLayout.js");
var _geometryLayoutJsDefault = parcelHelpers.interopDefault(_geometryLayoutJs);
var _geometryTypeJs = require("./GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _multiPointJs = require("./MultiPoint.js");
var _multiPointJsDefault = parcelHelpers.interopDefault(_multiPointJs);
var _polygonJs = require("./Polygon.js");
var _polygonJsDefault = parcelHelpers.interopDefault(_polygonJs);
var _simpleGeometryJs = require("./SimpleGeometry.js");
var _simpleGeometryJsDefault = parcelHelpers.interopDefault(_simpleGeometryJs);
var _closestJs = require("./flat/closest.js");
var _extentJs = require("../extent.js");
var _deflateJs = require("./flat/deflate.js");
var _arrayJs = require("../array.js");
var _interiorpointJs = require("./flat/interiorpoint.js");
var _inflateJs = require("./flat/inflate.js");
var _intersectsextentJs = require("./flat/intersectsextent.js");
var _orientJs = require("./flat/orient.js");
var _areaJs = require("./flat/area.js");
var _centerJs = require("./flat/center.js");
var _containsJs = require("./flat/contains.js");
var _simplifyJs = require("./flat/simplify.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Multi-polygon geometry.
 *
 * @api
 */ var MultiPolygon = /** @class */ function(_super) {
    __extends(MultiPolygon1, _super);
    /**
     * @param {Array<Array<Array<import("../coordinate.js").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `opt_layout` and `opt_endss` are also accepted.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     * @param {Array<Array<number>>} [opt_endss] Array of ends for internal use with flat coordinates.
     */ function MultiPolygon1(coordinates, opt_layout, opt_endss) {
        var _this = _super.call(this) || this;
        /**
         * @type {Array<Array<number>>}
         * @private
         */ _this.endss_ = [];
        /**
         * @private
         * @type {number}
         */ _this.flatInteriorPointsRevision_ = -1;
        /**
         * @private
         * @type {Array<number>}
         */ _this.flatInteriorPoints_ = null;
        /**
         * @private
         * @type {number}
         */ _this.maxDelta_ = -1;
        /**
         * @private
         * @type {number}
         */ _this.maxDeltaRevision_ = -1;
        /**
         * @private
         * @type {number}
         */ _this.orientedRevision_ = -1;
        /**
         * @private
         * @type {Array<number>}
         */ _this.orientedFlatCoordinates_ = null;
        if (!opt_endss && !Array.isArray(coordinates[0])) {
            var layout = _this.getLayout();
            var polygons = coordinates;
            var flatCoordinates = [];
            var endss = [];
            for(var i = 0, ii = polygons.length; i < ii; ++i){
                var polygon = polygons[i];
                if (i === 0) layout = polygon.getLayout();
                var offset = flatCoordinates.length;
                var ends = polygon.getEnds();
                for(var j = 0, jj = ends.length; j < jj; ++j)ends[j] += offset;
                (0, _arrayJs.extend)(flatCoordinates, polygon.getFlatCoordinates());
                endss.push(ends);
            }
            opt_layout = layout;
            coordinates = flatCoordinates;
            opt_endss = endss;
        }
        if (opt_layout !== undefined && opt_endss) {
            _this.setFlatCoordinates(opt_layout, coordinates);
            _this.endss_ = opt_endss;
        } else _this.setCoordinates(coordinates, opt_layout);
        return _this;
    }
    /**
     * Append the passed polygon to this multipolygon.
     * @param {Polygon} polygon Polygon.
     * @api
     */ MultiPolygon1.prototype.appendPolygon = function(polygon) {
        /** @type {Array<number>} */ var ends;
        if (!this.flatCoordinates) {
            this.flatCoordinates = polygon.getFlatCoordinates().slice();
            ends = polygon.getEnds().slice();
            this.endss_.push();
        } else {
            var offset = this.flatCoordinates.length;
            (0, _arrayJs.extend)(this.flatCoordinates, polygon.getFlatCoordinates());
            ends = polygon.getEnds().slice();
            for(var i = 0, ii = ends.length; i < ii; ++i)ends[i] += offset;
        }
        this.endss_.push(ends);
        this.changed();
    };
    /**
     * Make a complete copy of the geometry.
     * @return {!MultiPolygon} Clone.
     * @api
     */ MultiPolygon1.prototype.clone = function() {
        var len = this.endss_.length;
        var newEndss = new Array(len);
        for(var i = 0; i < len; ++i)newEndss[i] = this.endss_[i].slice();
        var multiPolygon = new MultiPolygon1(this.flatCoordinates.slice(), this.layout, newEndss);
        multiPolygon.applyProperties(this);
        return multiPolygon;
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */ MultiPolygon1.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
        if (minSquaredDistance < (0, _extentJs.closestSquaredDistanceXY)(this.getExtent(), x, y)) return minSquaredDistance;
        if (this.maxDeltaRevision_ != this.getRevision()) {
            this.maxDelta_ = Math.sqrt((0, _closestJs.multiArrayMaxSquaredDelta)(this.flatCoordinates, 0, this.endss_, this.stride, 0));
            this.maxDeltaRevision_ = this.getRevision();
        }
        return (0, _closestJs.assignClosestMultiArrayPoint)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */ MultiPolygon1.prototype.containsXY = function(x, y) {
        return (0, _containsJs.linearRingssContainsXY)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);
    };
    /**
     * Return the area of the multipolygon on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */ MultiPolygon1.prototype.getArea = function() {
        return (0, _areaJs.linearRingss)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);
    };
    /**
     * Get the coordinate array for this geometry.  This array has the structure
     * of a GeoJSON coordinate array for multi-polygons.
     *
     * @param {boolean} [opt_right] Orient coordinates according to the right-hand
     *     rule (counter-clockwise for exterior and clockwise for interior rings).
     *     If `false`, coordinates will be oriented according to the left-hand rule
     *     (clockwise for exterior and counter-clockwise for interior rings).
     *     By default, coordinate orientation will depend on how the geometry was
     *     constructed.
     * @return {Array<Array<Array<import("../coordinate.js").Coordinate>>>} Coordinates.
     * @api
     */ MultiPolygon1.prototype.getCoordinates = function(opt_right) {
        var flatCoordinates;
        if (opt_right !== undefined) {
            flatCoordinates = this.getOrientedFlatCoordinates().slice();
            (0, _orientJs.orientLinearRingsArray)(flatCoordinates, 0, this.endss_, this.stride, opt_right);
        } else flatCoordinates = this.flatCoordinates;
        return (0, _inflateJs.inflateMultiCoordinatesArray)(flatCoordinates, 0, this.endss_, this.stride);
    };
    /**
     * @return {Array<Array<number>>} Endss.
     */ MultiPolygon1.prototype.getEndss = function() {
        return this.endss_;
    };
    /**
     * @return {Array<number>} Flat interior points.
     */ MultiPolygon1.prototype.getFlatInteriorPoints = function() {
        if (this.flatInteriorPointsRevision_ != this.getRevision()) {
            var flatCenters = (0, _centerJs.linearRingss)(this.flatCoordinates, 0, this.endss_, this.stride);
            this.flatInteriorPoints_ = (0, _interiorpointJs.getInteriorPointsOfMultiArray)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, flatCenters);
            this.flatInteriorPointsRevision_ = this.getRevision();
        }
        return this.flatInteriorPoints_;
    };
    /**
     * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.
     * @return {MultiPoint} Interior points as XYM coordinates, where M is
     * the length of the horizontal intersection that the point belongs to.
     * @api
     */ MultiPolygon1.prototype.getInteriorPoints = function() {
        return new (0, _multiPointJsDefault.default)(this.getFlatInteriorPoints().slice(), (0, _geometryLayoutJsDefault.default).XYM);
    };
    /**
     * @return {Array<number>} Oriented flat coordinates.
     */ MultiPolygon1.prototype.getOrientedFlatCoordinates = function() {
        if (this.orientedRevision_ != this.getRevision()) {
            var flatCoordinates = this.flatCoordinates;
            if ((0, _orientJs.linearRingssAreOriented)(flatCoordinates, 0, this.endss_, this.stride)) this.orientedFlatCoordinates_ = flatCoordinates;
            else {
                this.orientedFlatCoordinates_ = flatCoordinates.slice();
                this.orientedFlatCoordinates_.length = (0, _orientJs.orientLinearRingsArray)(this.orientedFlatCoordinates_, 0, this.endss_, this.stride);
            }
            this.orientedRevision_ = this.getRevision();
        }
        return this.orientedFlatCoordinates_;
    };
    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {MultiPolygon} Simplified MultiPolygon.
     * @protected
     */ MultiPolygon1.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {
        var simplifiedFlatCoordinates = [];
        var simplifiedEndss = [];
        simplifiedFlatCoordinates.length = (0, _simplifyJs.quantizeMultiArray)(this.flatCoordinates, 0, this.endss_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEndss);
        return new MultiPolygon1(simplifiedFlatCoordinates, (0, _geometryLayoutJsDefault.default).XY, simplifiedEndss);
    };
    /**
     * Return the polygon at the specified index.
     * @param {number} index Index.
     * @return {Polygon} Polygon.
     * @api
     */ MultiPolygon1.prototype.getPolygon = function(index) {
        if (index < 0 || this.endss_.length <= index) return null;
        var offset;
        if (index === 0) offset = 0;
        else {
            var prevEnds = this.endss_[index - 1];
            offset = prevEnds[prevEnds.length - 1];
        }
        var ends = this.endss_[index].slice();
        var end = ends[ends.length - 1];
        if (offset !== 0) for(var i = 0, ii = ends.length; i < ii; ++i)ends[i] -= offset;
        return new (0, _polygonJsDefault.default)(this.flatCoordinates.slice(offset, end), this.layout, ends);
    };
    /**
     * Return the polygons of this multipolygon.
     * @return {Array<Polygon>} Polygons.
     * @api
     */ MultiPolygon1.prototype.getPolygons = function() {
        var layout = this.layout;
        var flatCoordinates = this.flatCoordinates;
        var endss = this.endss_;
        var polygons = [];
        var offset = 0;
        for(var i = 0, ii = endss.length; i < ii; ++i){
            var ends = endss[i].slice();
            var end = ends[ends.length - 1];
            if (offset !== 0) for(var j = 0, jj = ends.length; j < jj; ++j)ends[j] -= offset;
            var polygon = new (0, _polygonJsDefault.default)(flatCoordinates.slice(offset, end), layout, ends);
            polygons.push(polygon);
            offset = end;
        }
        return polygons;
    };
    /**
     * Get the type of this geometry.
     * @return {import("./GeometryType.js").default} Geometry type.
     * @api
     */ MultiPolygon1.prototype.getType = function() {
        return (0, _geometryTypeJsDefault.default).MULTI_POLYGON;
    };
    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */ MultiPolygon1.prototype.intersectsExtent = function(extent) {
        return (0, _intersectsextentJs.intersectsLinearRingMultiArray)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);
    };
    /**
     * Set the coordinates of the multipolygon.
     * @param {!Array<Array<Array<import("../coordinate.js").Coordinate>>>} coordinates Coordinates.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     * @api
     */ MultiPolygon1.prototype.setCoordinates = function(coordinates, opt_layout) {
        this.setLayout(opt_layout, coordinates, 3);
        if (!this.flatCoordinates) this.flatCoordinates = [];
        var endss = (0, _deflateJs.deflateMultiCoordinatesArray)(this.flatCoordinates, 0, coordinates, this.stride, this.endss_);
        if (endss.length === 0) this.flatCoordinates.length = 0;
        else {
            var lastEnds = endss[endss.length - 1];
            this.flatCoordinates.length = lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];
        }
        this.changed();
    };
    return MultiPolygon1;
}((0, _simpleGeometryJsDefault.default));
exports.default = MultiPolygon;

},{"./GeometryLayout.js":"hDCgS","./GeometryType.js":"j6daa","./MultiPoint.js":"k4LcJ","./Polygon.js":"cJuQF","./SimpleGeometry.js":"hLwk3","./flat/closest.js":"fi6H5","../extent.js":"6YrVc","./flat/deflate.js":"3TE5l","../array.js":"1Fbic","./flat/interiorpoint.js":"59VP9","./flat/inflate.js":"4Rpju","./flat/intersectsextent.js":"7x08H","./flat/orient.js":"btd6s","./flat/area.js":"7fT8A","./flat/center.js":"9OVXr","./flat/contains.js":"eArlN","./flat/simplify.js":"jsqc5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9OVXr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {Array<Array<number>>} endss Endss.
 * @param {number} stride Stride.
 * @return {Array<number>} Flat centers.
 */ parcelHelpers.export(exports, "linearRingss", ()=>linearRingss);
/**
 * @module ol/geom/flat/center
 */ var _extentJs = require("../../extent.js");
function linearRingss(flatCoordinates, offset, endss, stride) {
    var flatCenters = [];
    var extent = (0, _extentJs.createEmpty)();
    for(var i = 0, ii = endss.length; i < ii; ++i){
        var ends = endss[i];
        extent = (0, _extentJs.createOrUpdateFromFlatCoordinates)(flatCoordinates, offset, ends[0], stride);
        flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);
        offset = ends[ends.length - 1];
    }
    return flatCenters;
}

},{"../../extent.js":"6YrVc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"14YFC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/Map
 */ var _compositeJs = require("./renderer/Composite.js");
var _compositeJsDefault = parcelHelpers.interopDefault(_compositeJs);
var _pluggableMapJs = require("./PluggableMap.js");
var _pluggableMapJsDefault = parcelHelpers.interopDefault(_pluggableMapJs);
var _objJs = require("./obj.js");
var _controlJs = require("./control.js");
var _interactionJs = require("./interaction.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * The map is the core component of OpenLayers. For a map to render, a view,
 * one or more layers, and a target container are needed:
 *
 *     import Map from 'ol/Map';
 *     import View from 'ol/View';
 *     import TileLayer from 'ol/layer/Tile';
 *     import OSM from 'ol/source/OSM';
 *
 *     var map = new Map({
 *       view: new View({
 *         center: [0, 0],
 *         zoom: 1
 *       }),
 *       layers: [
 *         new TileLayer({
 *           source: new OSM()
 *         })
 *       ],
 *       target: 'map'
 *     });
 *
 * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to
 * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
 * element with the id `map`.
 *
 * The constructor places a viewport container (with CSS class name
 * `ol-viewport`) in the target element (see `getViewport()`), and then two
 * further elements within the viewport: one with CSS class name
 * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
 * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
 * option of {@link module:ol/Overlay~Overlay} for the difference). The map
 * itself is placed in a further element within the viewport.
 *
 * Layers are stored as a {@link module:ol/Collection~Collection} in
 * layerGroups. A top-level group is provided by the library. This is what is
 * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
 * options are added to this group, and `addLayer` and `removeLayer` change the
 * layer collection in the group. `getLayers` is a convenience function for
 * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}
 * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the
 * options or added with `addLayer` can be groups, which can contain further
 * groups, and so on.
 *
 * @api
 */ var Map = /** @class */ function(_super) {
    __extends(Map1, _super);
    /**
     * @param {import("./PluggableMap.js").MapOptions} options Map options.
     */ function Map1(options) {
        options = (0, _objJs.assign)({}, options);
        if (!options.controls) options.controls = (0, _controlJs.defaults)();
        if (!options.interactions) options.interactions = (0, _interactionJs.defaults)({
            onFocusOnly: true
        });
        return _super.call(this, options) || this;
    }
    Map1.prototype.createRenderer = function() {
        return new (0, _compositeJsDefault.default)(this);
    };
    return Map1;
}((0, _pluggableMapJsDefault.default));
exports.default = Map;

},{"./renderer/Composite.js":"fRfJ1","./PluggableMap.js":"75npf","./obj.js":"3ssAG","./control.js":"6Pehg","./interaction.js":"akCDO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"akCDO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DoubleClickZoom", ()=>(0, _doubleClickZoomJsDefault.default));
parcelHelpers.export(exports, "DragAndDrop", ()=>(0, _dragAndDropJsDefault.default));
parcelHelpers.export(exports, "DragBox", ()=>(0, _dragBoxJsDefault.default));
parcelHelpers.export(exports, "DragPan", ()=>(0, _dragPanJsDefault.default));
parcelHelpers.export(exports, "DragRotate", ()=>(0, _dragRotateJsDefault.default));
parcelHelpers.export(exports, "DragRotateAndZoom", ()=>(0, _dragRotateAndZoomJsDefault.default));
parcelHelpers.export(exports, "DragZoom", ()=>(0, _dragZoomJsDefault.default));
parcelHelpers.export(exports, "Draw", ()=>(0, _drawJsDefault.default));
parcelHelpers.export(exports, "Extent", ()=>(0, _extentJsDefault.default));
parcelHelpers.export(exports, "Interaction", ()=>(0, _interactionJsDefault.default));
parcelHelpers.export(exports, "KeyboardPan", ()=>(0, _keyboardPanJsDefault.default));
parcelHelpers.export(exports, "KeyboardZoom", ()=>(0, _keyboardZoomJsDefault.default));
parcelHelpers.export(exports, "Modify", ()=>(0, _modifyJsDefault.default));
parcelHelpers.export(exports, "MouseWheelZoom", ()=>(0, _mouseWheelZoomJsDefault.default));
parcelHelpers.export(exports, "PinchRotate", ()=>(0, _pinchRotateJsDefault.default));
parcelHelpers.export(exports, "PinchZoom", ()=>(0, _pinchZoomJsDefault.default));
parcelHelpers.export(exports, "Pointer", ()=>(0, _pointerJsDefault.default));
parcelHelpers.export(exports, "Select", ()=>(0, _selectJsDefault.default));
parcelHelpers.export(exports, "Snap", ()=>(0, _snapJsDefault.default));
parcelHelpers.export(exports, "Translate", ()=>(0, _translateJsDefault.default));
/**
 * @typedef {Object} DefaultsOptions
 * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is
 * desired.
 * @property {boolean} [onFocusOnly=false] Interact only when the map has the
 * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is
 * useful when page scroll is desired for maps that do not have the browser's
 * focus.
 * @property {boolean} [doubleClickZoom=true] Whether double click zoom is
 * desired.
 * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.
 * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.
 * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.
 * @property {boolean} [dragPan=true] Whether drag pan is desired.
 * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.
 * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.
 * @property {number} [zoomDelta] Zoom level delta when using keyboard or double click zoom.
 * @property {number} [zoomDuration] Duration of the zoom animation in
 * milliseconds.
 */ /**
 * Set of interactions included in maps by default. Specific interactions can be
 * excluded by setting the appropriate option to false in the constructor
 * options, but the order of the interactions is fixed.  If you want to specify
 * a different order for interactions, you will need to create your own
 * {@link module:ol/interaction/Interaction~Interaction} instances and insert
 * them into a {@link module:ol/Collection~Collection} in the order you want
 * before creating your {@link module:ol/Map~Map} instance. Changing the order can
 * be of interest if the event propagation needs to be stopped at a point.
 * The default set of interactions, in sequence, is:
 * * {@link module:ol/interaction/DragRotate~DragRotate}
 * * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}
 * * {@link module:ol/interaction/DragPan~DragPan}
 * * {@link module:ol/interaction/PinchRotate~PinchRotate}
 * * {@link module:ol/interaction/PinchZoom~PinchZoom}
 * * {@link module:ol/interaction/KeyboardPan~KeyboardPan}
 * * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}
 * * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}
 * * {@link module:ol/interaction/DragZoom~DragZoom}
 *
 * @param {DefaultsOptions} [opt_options] Defaults options.
 * @return {import("./Collection.js").default<import("./interaction/Interaction.js").default>}
 * A collection of interactions to be used with the {@link module:ol/Map~Map}
 * constructor's `interactions` option.
 * @api
 */ parcelHelpers.export(exports, "defaults", ()=>defaults);
/**
 * @module ol/interaction
 */ var _collectionJs = require("./Collection.js");
var _collectionJsDefault = parcelHelpers.interopDefault(_collectionJs);
var _doubleClickZoomJs = require("./interaction/DoubleClickZoom.js");
var _doubleClickZoomJsDefault = parcelHelpers.interopDefault(_doubleClickZoomJs);
var _dragPanJs = require("./interaction/DragPan.js");
var _dragPanJsDefault = parcelHelpers.interopDefault(_dragPanJs);
var _dragRotateJs = require("./interaction/DragRotate.js");
var _dragRotateJsDefault = parcelHelpers.interopDefault(_dragRotateJs);
var _dragZoomJs = require("./interaction/DragZoom.js");
var _dragZoomJsDefault = parcelHelpers.interopDefault(_dragZoomJs);
var _keyboardPanJs = require("./interaction/KeyboardPan.js");
var _keyboardPanJsDefault = parcelHelpers.interopDefault(_keyboardPanJs);
var _keyboardZoomJs = require("./interaction/KeyboardZoom.js");
var _keyboardZoomJsDefault = parcelHelpers.interopDefault(_keyboardZoomJs);
var _kineticJs = require("./Kinetic.js");
var _kineticJsDefault = parcelHelpers.interopDefault(_kineticJs);
var _mouseWheelZoomJs = require("./interaction/MouseWheelZoom.js");
var _mouseWheelZoomJsDefault = parcelHelpers.interopDefault(_mouseWheelZoomJs);
var _pinchRotateJs = require("./interaction/PinchRotate.js");
var _pinchRotateJsDefault = parcelHelpers.interopDefault(_pinchRotateJs);
var _pinchZoomJs = require("./interaction/PinchZoom.js");
var _pinchZoomJsDefault = parcelHelpers.interopDefault(_pinchZoomJs);
var _dragAndDropJs = require("./interaction/DragAndDrop.js");
var _dragAndDropJsDefault = parcelHelpers.interopDefault(_dragAndDropJs);
var _dragBoxJs = require("./interaction/DragBox.js");
var _dragBoxJsDefault = parcelHelpers.interopDefault(_dragBoxJs);
var _dragRotateAndZoomJs = require("./interaction/DragRotateAndZoom.js");
var _dragRotateAndZoomJsDefault = parcelHelpers.interopDefault(_dragRotateAndZoomJs);
var _drawJs = require("./interaction/Draw.js");
var _drawJsDefault = parcelHelpers.interopDefault(_drawJs);
var _extentJs = require("./interaction/Extent.js");
var _extentJsDefault = parcelHelpers.interopDefault(_extentJs);
var _interactionJs = require("./interaction/Interaction.js");
var _interactionJsDefault = parcelHelpers.interopDefault(_interactionJs);
var _modifyJs = require("./interaction/Modify.js");
var _modifyJsDefault = parcelHelpers.interopDefault(_modifyJs);
var _pointerJs = require("./interaction/Pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _selectJs = require("./interaction/Select.js");
var _selectJsDefault = parcelHelpers.interopDefault(_selectJs);
var _snapJs = require("./interaction/Snap.js");
var _snapJsDefault = parcelHelpers.interopDefault(_snapJs);
var _translateJs = require("./interaction/Translate.js");
var _translateJsDefault = parcelHelpers.interopDefault(_translateJs);
function defaults(opt_options) {
    var options = opt_options ? opt_options : {};
    var interactions = new (0, _collectionJsDefault.default)();
    var kinetic = new (0, _kineticJsDefault.default)(-0.005, 0.05, 100);
    var altShiftDragRotate = options.altShiftDragRotate !== undefined ? options.altShiftDragRotate : true;
    if (altShiftDragRotate) interactions.push(new (0, _dragRotateJsDefault.default)());
    var doubleClickZoom = options.doubleClickZoom !== undefined ? options.doubleClickZoom : true;
    if (doubleClickZoom) interactions.push(new (0, _doubleClickZoomJsDefault.default)({
        delta: options.zoomDelta,
        duration: options.zoomDuration
    }));
    var dragPan = options.dragPan !== undefined ? options.dragPan : true;
    if (dragPan) interactions.push(new (0, _dragPanJsDefault.default)({
        onFocusOnly: options.onFocusOnly,
        kinetic: kinetic
    }));
    var pinchRotate = options.pinchRotate !== undefined ? options.pinchRotate : true;
    if (pinchRotate) interactions.push(new (0, _pinchRotateJsDefault.default)());
    var pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;
    if (pinchZoom) interactions.push(new (0, _pinchZoomJsDefault.default)({
        duration: options.zoomDuration
    }));
    var keyboard = options.keyboard !== undefined ? options.keyboard : true;
    if (keyboard) {
        interactions.push(new (0, _keyboardPanJsDefault.default)());
        interactions.push(new (0, _keyboardZoomJsDefault.default)({
            delta: options.zoomDelta,
            duration: options.zoomDuration
        }));
    }
    var mouseWheelZoom = options.mouseWheelZoom !== undefined ? options.mouseWheelZoom : true;
    if (mouseWheelZoom) interactions.push(new (0, _mouseWheelZoomJsDefault.default)({
        onFocusOnly: options.onFocusOnly,
        duration: options.zoomDuration
    }));
    var shiftDragZoom = options.shiftDragZoom !== undefined ? options.shiftDragZoom : true;
    if (shiftDragZoom) interactions.push(new (0, _dragZoomJsDefault.default)({
        duration: options.zoomDuration
    }));
    return interactions;
}

},{"./Collection.js":"gReoh","./interaction/DoubleClickZoom.js":"kVR84","./interaction/DragPan.js":"4zDnZ","./interaction/DragRotate.js":"83edZ","./interaction/DragZoom.js":"8xtsQ","./interaction/KeyboardPan.js":"49Q4F","./interaction/KeyboardZoom.js":"4RjL4","./Kinetic.js":"aWbSH","./interaction/MouseWheelZoom.js":"gKXuR","./interaction/PinchRotate.js":"5f8eF","./interaction/PinchZoom.js":"5RZxv","./interaction/DragAndDrop.js":"190PQ","./interaction/DragBox.js":"b4kkx","./interaction/DragRotateAndZoom.js":"cdTmh","./interaction/Draw.js":"43MZd","./interaction/Extent.js":"hCfsz","./interaction/Interaction.js":"g1FUs","./interaction/Modify.js":"4T7TT","./interaction/Pointer.js":"1GIxf","./interaction/Select.js":"iBBOO","./interaction/Snap.js":"0zhsh","./interaction/Translate.js":"bfZjJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kVR84":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/interaction/DoubleClickZoom
 */ var _interactionJs = require("./Interaction.js");
var _interactionJsDefault = parcelHelpers.interopDefault(_interactionJs);
var _mapBrowserEventTypeJs = require("../MapBrowserEventType.js");
var _mapBrowserEventTypeJsDefault = parcelHelpers.interopDefault(_mapBrowserEventTypeJs);
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {number} [duration=250] Animation duration in milliseconds.
 * @property {number} [delta=1] The zoom delta applied on each double click.
 */ /**
 * @classdesc
 * Allows the user to zoom by double-clicking on the map.
 * @api
 */ var DoubleClickZoom = /** @class */ function(_super) {
    __extends(DoubleClickZoom1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function DoubleClickZoom1(opt_options) {
        var _this = _super.call(this) || this;
        var options = opt_options ? opt_options : {};
        /**
         * @private
         * @type {number}
         */ _this.delta_ = options.delta ? options.delta : 1;
        /**
         * @private
         * @type {number}
         */ _this.duration_ = options.duration !== undefined ? options.duration : 250;
        return _this;
    }
    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a
     * doubleclick) and eventually zooms the map.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     */ DoubleClickZoom1.prototype.handleEvent = function(mapBrowserEvent) {
        var stopEvent = false;
        if (mapBrowserEvent.type == (0, _mapBrowserEventTypeJsDefault.default).DBLCLICK) {
            var browserEvent = mapBrowserEvent.originalEvent;
            var map = mapBrowserEvent.map;
            var anchor = mapBrowserEvent.coordinate;
            var delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;
            var view = map.getView();
            (0, _interactionJs.zoomByDelta)(view, delta, anchor, this.duration_);
            browserEvent.preventDefault();
            stopEvent = true;
        }
        return !stopEvent;
    };
    return DoubleClickZoom1;
}((0, _interactionJsDefault.default));
exports.default = DoubleClickZoom;

},{"./Interaction.js":"g1FUs","../MapBrowserEventType.js":"fB9ae","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g1FUs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {import("../View.js").default} view View.
 * @param {import("../coordinate.js").Coordinate} delta Delta.
 * @param {number} [opt_duration] Duration.
 */ parcelHelpers.export(exports, "pan", ()=>pan);
/**
 * @param {import("../View.js").default} view View.
 * @param {number} delta Delta from previous zoom level.
 * @param {import("../coordinate.js").Coordinate} [opt_anchor] Anchor coordinate in the user projection.
 * @param {number} [opt_duration] Duration.
 */ parcelHelpers.export(exports, "zoomByDelta", ()=>zoomByDelta);
/**
 * @module ol/interaction/Interaction
 */ var _objectJs = require("../Object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _propertyJs = require("./Property.js");
var _propertyJsDefault = parcelHelpers.interopDefault(_propertyJs);
var _easingJs = require("../easing.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
 *     'change:active', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     'change:active', Return>} InteractionOnSignature
 */ /**
 * Object literal with config options for interactions.
 * @typedef {Object} InteractionOptions
 * @property {function(import("../MapBrowserEvent.js").default):boolean} handleEvent
 * Method called by the map to notify the interaction that a browser event was
 * dispatched to the map. If the function returns a falsy value, propagation of
 * the event to other interactions in the map's interactions chain will be
 * prevented (this includes functions with no explicit return). The interactions
 * are traversed in reverse order of the interactions collection of the map.
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * User actions that change the state of the map. Some are similar to controls,
 * but are not associated with a DOM element.
 * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is
 * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered
 * by a keyboard event not a button element event.
 * Although interactions do not have a DOM element, some of them do render
 * vectors and so are visible on the screen.
 * @api
 */ var Interaction = /** @class */ function(_super) {
    __extends(Interaction1, _super);
    /**
     * @param {InteractionOptions} [opt_options] Options.
     */ function Interaction1(opt_options) {
        var _this = _super.call(this) || this;
        /***
         * @type {InteractionOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {InteractionOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {InteractionOnSignature<void>}
         */ _this.un;
        if (opt_options && opt_options.handleEvent) _this.handleEvent = opt_options.handleEvent;
        /**
         * @private
         * @type {import("../PluggableMap.js").default|null}
         */ _this.map_ = null;
        _this.setActive(true);
        return _this;
    }
    /**
     * Return whether the interaction is currently active.
     * @return {boolean} `true` if the interaction is active, `false` otherwise.
     * @observable
     * @api
     */ Interaction1.prototype.getActive = function() {
        return /** @type {boolean} */ this.get((0, _propertyJsDefault.default).ACTIVE);
    };
    /**
     * Get the map associated with this interaction.
     * @return {import("../PluggableMap.js").default|null} Map.
     * @api
     */ Interaction1.prototype.getMap = function() {
        return this.map_;
    };
    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event}.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @api
     */ Interaction1.prototype.handleEvent = function(mapBrowserEvent) {
        return true;
    };
    /**
     * Activate or deactivate the interaction.
     * @param {boolean} active Active.
     * @observable
     * @api
     */ Interaction1.prototype.setActive = function(active) {
        this.set((0, _propertyJsDefault.default).ACTIVE, active);
    };
    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default|null} map Map.
     */ Interaction1.prototype.setMap = function(map) {
        this.map_ = map;
    };
    return Interaction1;
}((0, _objectJsDefault.default));
function pan(view, delta, opt_duration) {
    var currentCenter = view.getCenterInternal();
    if (currentCenter) {
        var center = [
            currentCenter[0] + delta[0],
            currentCenter[1] + delta[1]
        ];
        view.animateInternal({
            duration: opt_duration !== undefined ? opt_duration : 250,
            easing: (0, _easingJs.linear),
            center: view.getConstrainedCenter(center)
        });
    }
}
function zoomByDelta(view, delta, opt_anchor, opt_duration) {
    var currentZoom = view.getZoom();
    if (currentZoom === undefined) return;
    var newZoom = view.getConstrainedZoom(currentZoom + delta);
    var newResolution = view.getResolutionForZoom(newZoom);
    if (view.getAnimating()) view.cancelAnimations();
    view.animate({
        resolution: newResolution,
        anchor: opt_anchor,
        duration: opt_duration !== undefined ? opt_duration : 250,
        easing: (0, _easingJs.easeOut)
    });
}
exports.default = Interaction;

},{"../Object.js":"1zG8z","./Property.js":"lHt12","../easing.js":"fYITA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lHt12":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/interaction/Property
 */ /**
 * @enum {string}
 */ exports.default = {
    ACTIVE: "active"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4zDnZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/interaction/DragPan
 */ var _pointerJs = require("./Pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _functionsJs = require("../functions.js");
var _conditionJs = require("../events/condition.js");
var _easingJs = require("../easing.js");
var _coordinateJs = require("../coordinate.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
 * to indicate whether that event should be handled.
 * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.
 * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
 * the interaction will only handle events when the map has the focus.
 * @property {import("../Kinetic.js").default} [kinetic] Kinetic inertia to apply to the pan.
 */ /**
 * @classdesc
 * Allows the user to pan the map by dragging the map.
 * @api
 */ var DragPan = /** @class */ function(_super) {
    __extends(DragPan1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function DragPan1(opt_options) {
        var _this = _super.call(this, {
            stopDown: (0, _functionsJs.FALSE)
        }) || this;
        var options = opt_options ? opt_options : {};
        /**
         * @private
         * @type {import("../Kinetic.js").default|undefined}
         */ _this.kinetic_ = options.kinetic;
        /**
         * @type {import("../pixel.js").Pixel}
         */ _this.lastCentroid = null;
        /**
         * @type {number}
         */ _this.lastPointersCount_;
        /**
         * @type {boolean}
         */ _this.panning_ = false;
        var condition = options.condition ? options.condition : (0, _conditionJs.all)((0, _conditionJs.noModifierKeys), (0, _conditionJs.primaryAction));
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.condition_ = options.onFocusOnly ? (0, _conditionJs.all)((0, _conditionJs.focusWithTabindex), condition) : condition;
        /**
         * @private
         * @type {boolean}
         */ _this.noKinetic_ = false;
        return _this;
    }
    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */ DragPan1.prototype.handleDragEvent = function(mapBrowserEvent) {
        if (!this.panning_) {
            this.panning_ = true;
            this.getMap().getView().beginInteraction();
        }
        var targetPointers = this.targetPointers;
        var centroid = (0, _pointerJs.centroid)(targetPointers);
        if (targetPointers.length == this.lastPointersCount_) {
            if (this.kinetic_) this.kinetic_.update(centroid[0], centroid[1]);
            if (this.lastCentroid) {
                var delta = [
                    this.lastCentroid[0] - centroid[0],
                    centroid[1] - this.lastCentroid[1], 
                ];
                var map = mapBrowserEvent.map;
                var view = map.getView();
                (0, _coordinateJs.scale)(delta, view.getResolution());
                (0, _coordinateJs.rotate)(delta, view.getRotation());
                view.adjustCenterInternal(delta);
            }
        } else if (this.kinetic_) // reset so we don't overestimate the kinetic energy after
        // after one finger down, tiny drag, second finger down
        this.kinetic_.begin();
        this.lastCentroid = centroid;
        this.lastPointersCount_ = targetPointers.length;
        mapBrowserEvent.originalEvent.preventDefault();
    };
    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ DragPan1.prototype.handleUpEvent = function(mapBrowserEvent) {
        var map = mapBrowserEvent.map;
        var view = map.getView();
        if (this.targetPointers.length === 0) {
            if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
                var distance = this.kinetic_.getDistance();
                var angle = this.kinetic_.getAngle();
                var center = view.getCenterInternal();
                var centerpx = map.getPixelFromCoordinateInternal(center);
                var dest = map.getCoordinateFromPixelInternal([
                    centerpx[0] - distance * Math.cos(angle),
                    centerpx[1] - distance * Math.sin(angle), 
                ]);
                view.animateInternal({
                    center: view.getConstrainedCenter(dest),
                    duration: 500,
                    easing: (0, _easingJs.easeOut)
                });
            }
            if (this.panning_) {
                this.panning_ = false;
                view.endInteraction();
            }
            return false;
        } else {
            if (this.kinetic_) // reset so we don't overestimate the kinetic energy after
            // after one finger up, tiny drag, second finger up
            this.kinetic_.begin();
            this.lastCentroid = null;
            return true;
        }
    };
    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ DragPan1.prototype.handleDownEvent = function(mapBrowserEvent) {
        if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {
            var map = mapBrowserEvent.map;
            var view = map.getView();
            this.lastCentroid = null;
            // stop any current animation
            if (view.getAnimating()) view.cancelAnimations();
            if (this.kinetic_) this.kinetic_.begin();
            // No kinetic as soon as more than one pointer on the screen is
            // detected. This is to prevent nasty pans after pinch.
            this.noKinetic_ = this.targetPointers.length > 1;
            return true;
        } else return false;
    };
    return DragPan1;
}((0, _pointerJsDefault.default));
exports.default = DragPan;

},{"./Pointer.js":"1GIxf","../functions.js":"iqv8I","../events/condition.js":"iQTYY","../easing.js":"fYITA","../coordinate.js":"85Vu7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1GIxf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {Array<PointerEvent>} pointerEvents List of events.
 * @return {import("../pixel.js").Pixel} Centroid pixel.
 */ parcelHelpers.export(exports, "centroid", ()=>centroid);
/**
 * @module ol/interaction/Pointer
 */ var _interactionJs = require("./Interaction.js");
var _interactionJsDefault = parcelHelpers.interopDefault(_interactionJs);
var _mapBrowserEventTypeJs = require("../MapBrowserEventType.js");
var _mapBrowserEventTypeJsDefault = parcelHelpers.interopDefault(_mapBrowserEventTypeJs);
var _objJs = require("../obj.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleDownEvent]
 * Function handling "down" events. If the function returns `true` then a drag
 * sequence is started.
 * @property {function(import("../MapBrowserEvent.js").default):void} [handleDragEvent]
 * Function handling "drag" events. This function is called on "move" events
 * during a drag sequence.
 * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleEvent]
 * Method called by the map to notify the interaction that a browser event was
 * dispatched to the map. The function may return `false` to prevent the
 * propagation of the event to other interactions in the map's interactions
 * chain.
 * @property {function(import("../MapBrowserEvent.js").default):void} [handleMoveEvent]
 * Function handling "move" events. This function is called on "move" events.
 * This functions is also called during a drag sequence, so during a drag
 * sequence both the `handleDragEvent` function and this function are called.
 * If `handleDownEvent` is defined and it returns true this function will not
 * be called during a drag sequence.
 * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleUpEvent]
 *  Function handling "up" events. If the function returns `false` then the
 * current drag sequence is stopped.
 * @property {function(boolean):boolean} [stopDown]
 * Should the down event be propagated to other interactions, or should be
 * stopped?
 */ /**
 * @classdesc
 * Base class that calls user-defined functions on `down`, `move` and `up`
 * events. This class also manages "drag sequences".
 *
 * When the `handleDownEvent` user function returns `true` a drag sequence is
 * started. During a drag sequence the `handleDragEvent` user function is
 * called on `move` events. The drag sequence ends when the `handleUpEvent`
 * user function is called and returns `false`.
 * @api
 */ var PointerInteraction = /** @class */ function(_super) {
    __extends(PointerInteraction1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function PointerInteraction1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this, options) || this;
        if (options.handleDownEvent) _this.handleDownEvent = options.handleDownEvent;
        if (options.handleDragEvent) _this.handleDragEvent = options.handleDragEvent;
        if (options.handleMoveEvent) _this.handleMoveEvent = options.handleMoveEvent;
        if (options.handleUpEvent) _this.handleUpEvent = options.handleUpEvent;
        if (options.stopDown) _this.stopDown = options.stopDown;
        /**
         * @type {boolean}
         * @protected
         */ _this.handlingDownUpSequence = false;
        /**
         * @type {!Object<string, PointerEvent>}
         * @private
         */ _this.trackedPointers_ = {};
        /**
         * @type {Array<PointerEvent>}
         * @protected
         */ _this.targetPointers = [];
        return _this;
    }
    /**
     * Returns the current number of pointers involved in the interaction,
     * e.g. `2` when two fingers are used.
     * @return {number} The number of pointers.
     * @api
     */ PointerInteraction1.prototype.getPointerCount = function() {
        return this.targetPointers.length;
    };
    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @protected
     */ PointerInteraction1.prototype.handleDownEvent = function(mapBrowserEvent) {
        return false;
    };
    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @protected
     */ PointerInteraction1.prototype.handleDragEvent = function(mapBrowserEvent) {};
    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into
     * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
     * detected.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @api
     */ PointerInteraction1.prototype.handleEvent = function(mapBrowserEvent) {
        if (!mapBrowserEvent.originalEvent) return true;
        var stopEvent = false;
        this.updateTrackedPointers_(mapBrowserEvent);
        if (this.handlingDownUpSequence) {
            if (mapBrowserEvent.type == (0, _mapBrowserEventTypeJsDefault.default).POINTERDRAG) {
                this.handleDragEvent(mapBrowserEvent);
                // prevent page scrolling during dragging
                mapBrowserEvent.originalEvent.preventDefault();
            } else if (mapBrowserEvent.type == (0, _mapBrowserEventTypeJsDefault.default).POINTERUP) {
                var handledUp = this.handleUpEvent(mapBrowserEvent);
                this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;
            }
        } else {
            if (mapBrowserEvent.type == (0, _mapBrowserEventTypeJsDefault.default).POINTERDOWN) {
                var handled = this.handleDownEvent(mapBrowserEvent);
                this.handlingDownUpSequence = handled;
                stopEvent = this.stopDown(handled);
            } else if (mapBrowserEvent.type == (0, _mapBrowserEventTypeJsDefault.default).POINTERMOVE) this.handleMoveEvent(mapBrowserEvent);
        }
        return !stopEvent;
    };
    /**
     * Handle pointer move events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @protected
     */ PointerInteraction1.prototype.handleMoveEvent = function(mapBrowserEvent) {};
    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @protected
     */ PointerInteraction1.prototype.handleUpEvent = function(mapBrowserEvent) {
        return false;
    };
    /**
     * This function is used to determine if "down" events should be propagated
     * to other interactions or should be stopped.
     * @param {boolean} handled Was the event handled by the interaction?
     * @return {boolean} Should the `down` event be stopped?
     */ PointerInteraction1.prototype.stopDown = function(handled) {
        return handled;
    };
    /**
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @private
     */ PointerInteraction1.prototype.updateTrackedPointers_ = function(mapBrowserEvent) {
        if (isPointerDraggingEvent(mapBrowserEvent)) {
            var event_1 = mapBrowserEvent.originalEvent;
            var id = event_1.pointerId.toString();
            if (mapBrowserEvent.type == (0, _mapBrowserEventTypeJsDefault.default).POINTERUP) delete this.trackedPointers_[id];
            else if (mapBrowserEvent.type == (0, _mapBrowserEventTypeJsDefault.default).POINTERDOWN) this.trackedPointers_[id] = event_1;
            else if (id in this.trackedPointers_) // update only when there was a pointerdown event for this pointer
            this.trackedPointers_[id] = event_1;
            this.targetPointers = (0, _objJs.getValues)(this.trackedPointers_);
        }
    };
    return PointerInteraction1;
}((0, _interactionJsDefault.default));
function centroid(pointerEvents) {
    var length = pointerEvents.length;
    var clientX = 0;
    var clientY = 0;
    for(var i = 0; i < length; i++){
        clientX += pointerEvents[i].clientX;
        clientY += pointerEvents[i].clientY;
    }
    return [
        clientX / length,
        clientY / length
    ];
}
/**
 * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
 * @return {boolean} Whether the event is a pointerdown, pointerdrag
 *     or pointerup event.
 */ function isPointerDraggingEvent(mapBrowserEvent) {
    var type = mapBrowserEvent.type;
    return type === (0, _mapBrowserEventTypeJsDefault.default).POINTERDOWN || type === (0, _mapBrowserEventTypeJsDefault.default).POINTERDRAG || type === (0, _mapBrowserEventTypeJsDefault.default).POINTERUP;
}
exports.default = PointerInteraction;

},{"./Interaction.js":"g1FUs","../MapBrowserEventType.js":"fB9ae","../obj.js":"3ssAG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iQTYY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * `{boolean}`. If the condition is met, true should be returned.
 *
 * @typedef {function(this: ?, import("../MapBrowserEvent.js").default): boolean} Condition
 */ /**
 * Creates a condition function that passes when all provided conditions pass.
 * @param {...Condition} var_args Conditions to check.
 * @return {Condition} Condition function.
 */ parcelHelpers.export(exports, "all", ()=>all);
parcelHelpers.export(exports, "altKeyOnly", ()=>altKeyOnly);
parcelHelpers.export(exports, "altShiftKeysOnly", ()=>altShiftKeysOnly);
parcelHelpers.export(exports, "focus", ()=>focus);
parcelHelpers.export(exports, "focusWithTabindex", ()=>focusWithTabindex);
parcelHelpers.export(exports, "always", ()=>always);
parcelHelpers.export(exports, "click", ()=>click);
parcelHelpers.export(exports, "mouseActionButton", ()=>mouseActionButton);
parcelHelpers.export(exports, "never", ()=>never);
parcelHelpers.export(exports, "pointerMove", ()=>pointerMove);
parcelHelpers.export(exports, "singleClick", ()=>singleClick);
parcelHelpers.export(exports, "doubleClick", ()=>doubleClick);
parcelHelpers.export(exports, "noModifierKeys", ()=>noModifierKeys);
parcelHelpers.export(exports, "platformModifierKeyOnly", ()=>platformModifierKeyOnly);
parcelHelpers.export(exports, "shiftKeyOnly", ()=>shiftKeyOnly);
parcelHelpers.export(exports, "targetNotEditable", ()=>targetNotEditable);
parcelHelpers.export(exports, "mouseOnly", ()=>mouseOnly);
parcelHelpers.export(exports, "touchOnly", ()=>touchOnly);
parcelHelpers.export(exports, "penOnly", ()=>penOnly);
parcelHelpers.export(exports, "primaryAction", ()=>primaryAction);
/**
 * @module ol/events/condition
 */ var _mapBrowserEventTypeJs = require("../MapBrowserEventType.js");
var _mapBrowserEventTypeJsDefault = parcelHelpers.interopDefault(_mapBrowserEventTypeJs);
var _functionsJs = require("../functions.js");
var _hasJs = require("../has.js");
var _assertsJs = require("../asserts.js");
function all(var_args) {
    var conditions = arguments;
    /**
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} All conditions passed.
     */ return function(event) {
        var pass = true;
        for(var i = 0, ii = conditions.length; i < ii; ++i){
            pass = pass && conditions[i](event);
            if (!pass) break;
        }
        return pass;
    };
}
var altKeyOnly = function(mapBrowserEvent) {
    var originalEvent = mapBrowserEvent.originalEvent;
    return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;
};
var altShiftKeysOnly = function(mapBrowserEvent) {
    var originalEvent = mapBrowserEvent.originalEvent;
    return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;
};
var focus = function(event) {
    var targetElement = event.map.getTargetElement();
    var activeElement = event.map.getOwnerDocument().activeElement;
    return targetElement.contains(activeElement);
};
var focusWithTabindex = function(event) {
    return event.map.getTargetElement().hasAttribute("tabindex") ? focus(event) : true;
};
var always = (0, _functionsJs.TRUE);
var click = function(mapBrowserEvent) {
    return mapBrowserEvent.type == (0, _mapBrowserEventTypeJsDefault.default).CLICK;
};
var mouseActionButton = function(mapBrowserEvent) {
    var originalEvent = mapBrowserEvent.originalEvent;
    return originalEvent.button == 0 && !((0, _hasJs.WEBKIT) && (0, _hasJs.MAC) && originalEvent.ctrlKey);
};
var never = (0, _functionsJs.FALSE);
var pointerMove = function(mapBrowserEvent) {
    return mapBrowserEvent.type == "pointermove";
};
var singleClick = function(mapBrowserEvent) {
    return mapBrowserEvent.type == (0, _mapBrowserEventTypeJsDefault.default).SINGLECLICK;
};
var doubleClick = function(mapBrowserEvent) {
    return mapBrowserEvent.type == (0, _mapBrowserEventTypeJsDefault.default).DBLCLICK;
};
var noModifierKeys = function(mapBrowserEvent) {
    var originalEvent = mapBrowserEvent.originalEvent;
    return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;
};
var platformModifierKeyOnly = function(mapBrowserEvent) {
    var originalEvent = mapBrowserEvent.originalEvent;
    return !originalEvent.altKey && ((0, _hasJs.MAC) ? originalEvent.metaKey : originalEvent.ctrlKey) && !originalEvent.shiftKey;
};
var shiftKeyOnly = function(mapBrowserEvent) {
    var originalEvent = mapBrowserEvent.originalEvent;
    return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;
};
var targetNotEditable = function(mapBrowserEvent) {
    var originalEvent = mapBrowserEvent.originalEvent;
    var tagName = /** @type {Element} */ originalEvent.target.tagName;
    return tagName !== "INPUT" && tagName !== "SELECT" && tagName !== "TEXTAREA";
};
var mouseOnly = function(mapBrowserEvent) {
    var pointerEvent = /** @type {import("../MapBrowserEvent").default} */ mapBrowserEvent.originalEvent;
    (0, _assertsJs.assert)(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return pointerEvent.pointerType == "mouse";
};
var touchOnly = function(mapBrowserEvent) {
    var pointerEvt = /** @type {import("../MapBrowserEvent").default} */ mapBrowserEvent.originalEvent;
    (0, _assertsJs.assert)(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return pointerEvt.pointerType === "touch";
};
var penOnly = function(mapBrowserEvent) {
    var pointerEvt = /** @type {import("../MapBrowserEvent").default} */ mapBrowserEvent.originalEvent;
    (0, _assertsJs.assert)(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return pointerEvt.pointerType === "pen";
};
var primaryAction = function(mapBrowserEvent) {
    var pointerEvent = /** @type {import("../MapBrowserEvent").default} */ mapBrowserEvent.originalEvent;
    (0, _assertsJs.assert)(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    return pointerEvent.isPrimary && pointerEvent.button === 0;
};

},{"../MapBrowserEventType.js":"fB9ae","../functions.js":"iqv8I","../has.js":"6BDNi","../asserts.js":"e4TiF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"83edZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/interaction/DragRotate
 */ var _pointerJs = require("./Pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _functionsJs = require("../functions.js");
var _conditionJs = require("../events/condition.js");
var _rotationconstraintJs = require("../rotationconstraint.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {import("../events/condition.js").Condition} [condition] A function that takes an
 * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
 * to indicate whether that event should be handled.
 * Default is {@link module:ol/events/condition.altShiftKeysOnly}.
 * @property {number} [duration=250] Animation duration in milliseconds.
 */ /**
 * @classdesc
 * Allows the user to rotate the map by clicking and dragging on the map,
 * normally combined with an {@link module:ol/events/condition} that limits
 * it to when the alt and shift keys are held down.
 *
 * This interaction is only supported for mouse devices.
 * @api
 */ var DragRotate = /** @class */ function(_super) {
    __extends(DragRotate1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function DragRotate1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this, {
            stopDown: (0, _functionsJs.FALSE)
        }) || this;
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.condition_ = options.condition ? options.condition : (0, _conditionJs.altShiftKeysOnly);
        /**
         * @private
         * @type {number|undefined}
         */ _this.lastAngle_ = undefined;
        /**
         * @private
         * @type {number}
         */ _this.duration_ = options.duration !== undefined ? options.duration : 250;
        return _this;
    }
    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */ DragRotate1.prototype.handleDragEvent = function(mapBrowserEvent) {
        if (!(0, _conditionJs.mouseOnly)(mapBrowserEvent)) return;
        var map = mapBrowserEvent.map;
        var view = map.getView();
        if (view.getConstraints().rotation === (0, _rotationconstraintJs.disable)) return;
        var size = map.getSize();
        var offset = mapBrowserEvent.pixel;
        var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);
        if (this.lastAngle_ !== undefined) {
            var delta = theta - this.lastAngle_;
            view.adjustRotationInternal(-delta);
        }
        this.lastAngle_ = theta;
    };
    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ DragRotate1.prototype.handleUpEvent = function(mapBrowserEvent) {
        if (!(0, _conditionJs.mouseOnly)(mapBrowserEvent)) return true;
        var map = mapBrowserEvent.map;
        var view = map.getView();
        view.endInteraction(this.duration_);
        return false;
    };
    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ DragRotate1.prototype.handleDownEvent = function(mapBrowserEvent) {
        if (!(0, _conditionJs.mouseOnly)(mapBrowserEvent)) return false;
        if ((0, _conditionJs.mouseActionButton)(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {
            var map = mapBrowserEvent.map;
            map.getView().beginInteraction();
            this.lastAngle_ = undefined;
            return true;
        } else return false;
    };
    return DragRotate1;
}((0, _pointerJsDefault.default));
exports.default = DragRotate;

},{"./Pointer.js":"1GIxf","../functions.js":"iqv8I","../events/condition.js":"iQTYY","../rotationconstraint.js":"hSWd8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8xtsQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/interaction/DragZoom
 */ var _dragBoxJs = require("./DragBox.js");
var _dragBoxJsDefault = parcelHelpers.interopDefault(_dragBoxJs);
var _easingJs = require("../easing.js");
var _conditionJs = require("../events/condition.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {string} [className='ol-dragzoom'] CSS class name for styling the
 * box.
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled.
 * Default is {@link module:ol/events/condition.shiftKeyOnly}.
 * @property {number} [duration=200] Animation duration in milliseconds.
 * @property {boolean} [out=false] Use interaction for zooming out.
 * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default
 * `boxEndCondition` function.
 */ /**
 * @classdesc
 * Allows the user to zoom the map by clicking and dragging on the map,
 * normally combined with an {@link module:ol/events/condition} that limits
 * it to when a key, shift by default, is held down.
 *
 * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
 * your custom one configured with `className`.
 * @api
 */ var DragZoom = /** @class */ function(_super) {
    __extends(DragZoom1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function DragZoom1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        var condition = options.condition ? options.condition : (0, _conditionJs.shiftKeyOnly);
        _this = _super.call(this, {
            condition: condition,
            className: options.className || "ol-dragzoom",
            minArea: options.minArea
        }) || this;
        /**
         * @private
         * @type {number}
         */ _this.duration_ = options.duration !== undefined ? options.duration : 200;
        /**
         * @private
         * @type {boolean}
         */ _this.out_ = options.out !== undefined ? options.out : false;
        return _this;
    }
    /**
     * Function to execute just before `onboxend` is fired
     * @param {import("../MapBrowserEvent.js").default} event Event.
     */ DragZoom1.prototype.onBoxEnd = function(event) {
        var map = this.getMap();
        var view = /** @type {!import("../View.js").default} */ map.getView();
        var geometry = this.getGeometry();
        if (this.out_) {
            var rotatedExtent = view.rotatedExtentForGeometry(geometry);
            var resolution = view.getResolutionForExtentInternal(rotatedExtent);
            var factor = view.getResolution() / resolution;
            geometry = geometry.clone();
            geometry.scale(factor * factor);
        }
        view.fitInternal(geometry, {
            duration: this.duration_,
            easing: (0, _easingJs.easeOut)
        });
    };
    return DragZoom1;
}((0, _dragBoxJsDefault.default));
exports.default = DragZoom;

},{"./DragBox.js":"b4kkx","../easing.js":"fYITA","../events/condition.js":"iQTYY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b4kkx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DragBoxEvent", ()=>DragBoxEvent);
/**
 * @module ol/interaction/DragBox
 */ // FIXME draw drag box
var _eventJs = require("../events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _pointerJs = require("./Pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _boxJs = require("../render/Box.js");
var _boxJsDefault = parcelHelpers.interopDefault(_boxJs);
var _conditionJs = require("../events/condition.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
 * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,
 * true should be returned.
 * @typedef {function(this: ?, import("../MapBrowserEvent.js").default, import("../pixel.js").Pixel, import("../pixel.js").Pixel):boolean} EndCondition
 */ /**
 * @typedef {Object} Options
 * @property {string} [className='ol-dragbox'] CSS class name for styling the box.
 * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
 * to indicate whether that event should be handled.
 * Default is {@link ol/events/condition~mouseActionButton}.
 * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default
 * `boxEndCondition` function.
 * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
 * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.
 * Default is `true` if the area of the box is bigger than the `minArea` option.
 * @property {function(this:DragBox, import("../MapBrowserEvent.js").default):void} [onBoxEnd] Code to execute just
 * before `boxend` is fired.
 */ /**
 * @enum {string}
 */ var DragBoxEventType = {
    /**
     * Triggered upon drag box start.
     * @event DragBoxEvent#boxstart
     * @api
     */ BOXSTART: "boxstart",
    /**
     * Triggered on drag when box is active.
     * @event DragBoxEvent#boxdrag
     * @api
     */ BOXDRAG: "boxdrag",
    /**
     * Triggered upon drag box end.
     * @event DragBoxEvent#boxend
     * @api
     */ BOXEND: "boxend",
    /**
     * Triggered upon drag box canceled.
     * @event DragBoxEvent#boxcancel
     * @api
     */ BOXCANCEL: "boxcancel"
};
/**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of
 * this type.
 */ var DragBoxEvent = /** @class */ function(_super) {
    __extends(DragBoxEvent1, _super);
    /**
     * @param {string} type The event type.
     * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Originating event.
     */ function DragBoxEvent1(type, coordinate, mapBrowserEvent) {
        var _this = _super.call(this, type) || this;
        /**
         * The coordinate of the drag event.
         * @const
         * @type {import("../coordinate.js").Coordinate}
         * @api
         */ _this.coordinate = coordinate;
        /**
         * @const
         * @type {import("../MapBrowserEvent.js").default}
         * @api
         */ _this.mapBrowserEvent = mapBrowserEvent;
        return _this;
    }
    return DragBoxEvent1;
}((0, _eventJsDefault.default));
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
 *     'change:active', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<'boxcancel'|'boxdrag'|'boxend'|'boxstart', DragBoxEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature
 */ /**
 * @classdesc
 * Allows the user to draw a vector box by clicking and dragging on the map,
 * normally combined with an {@link module:ol/events/condition} that limits
 * it to when the shift or other key is held down. This is used, for example,
 * for zooming to a specific area of the map
 * (see {@link module:ol/interaction/DragZoom~DragZoom} and
 * {@link module:ol/interaction/DragRotateAndZoom~DragRotateAndZoom}).
 *
 * @fires DragBoxEvent
 * @api
 */ var DragBox = /** @class */ function(_super) {
    __extends(DragBox1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function DragBox1(opt_options) {
        var _this = _super.call(this) || this;
        /***
         * @type {DragBoxOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {DragBoxOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {DragBoxOnSignature<void>}
         */ _this.un;
        var options = opt_options ? opt_options : {};
        /**
         * @type {import("../render/Box.js").default}
         * @private
         */ _this.box_ = new (0, _boxJsDefault.default)(options.className || "ol-dragbox");
        /**
         * @type {number}
         * @private
         */ _this.minArea_ = options.minArea !== undefined ? options.minArea : 64;
        if (options.onBoxEnd) _this.onBoxEnd = options.onBoxEnd;
        /**
         * @type {import("../pixel.js").Pixel}
         * @private
         */ _this.startPixel_ = null;
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.condition_ = options.condition ? options.condition : (0, _conditionJs.mouseActionButton);
        /**
         * @private
         * @type {EndCondition}
         */ _this.boxEndCondition_ = options.boxEndCondition ? options.boxEndCondition : _this.defaultBoxEndCondition;
        return _this;
    }
    /**
     * The default condition for determining whether the boxend event
     * should fire.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent The originating MapBrowserEvent
     *     leading to the box end.
     * @param {import("../pixel.js").Pixel} startPixel The starting pixel of the box.
     * @param {import("../pixel.js").Pixel} endPixel The end pixel of the box.
     * @return {boolean} Whether or not the boxend condition should be fired.
     */ DragBox1.prototype.defaultBoxEndCondition = function(mapBrowserEvent, startPixel, endPixel) {
        var width = endPixel[0] - startPixel[0];
        var height = endPixel[1] - startPixel[1];
        return width * width + height * height >= this.minArea_;
    };
    /**
     * Returns geometry of last drawn box.
     * @return {import("../geom/Polygon.js").default} Geometry.
     * @api
     */ DragBox1.prototype.getGeometry = function() {
        return this.box_.getGeometry();
    };
    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */ DragBox1.prototype.handleDragEvent = function(mapBrowserEvent) {
        this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);
        this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));
    };
    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ DragBox1.prototype.handleUpEvent = function(mapBrowserEvent) {
        this.box_.setMap(null);
        var completeBox = this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel);
        if (completeBox) this.onBoxEnd(mapBrowserEvent);
        this.dispatchEvent(new DragBoxEvent(completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL, mapBrowserEvent.coordinate, mapBrowserEvent));
        return false;
    };
    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ DragBox1.prototype.handleDownEvent = function(mapBrowserEvent) {
        if (this.condition_(mapBrowserEvent)) {
            this.startPixel_ = mapBrowserEvent.pixel;
            this.box_.setMap(mapBrowserEvent.map);
            this.box_.setPixels(this.startPixel_, this.startPixel_);
            this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));
            return true;
        } else return false;
    };
    /**
     * Function to execute just before `onboxend` is fired
     * @param {import("../MapBrowserEvent.js").default} event Event.
     */ DragBox1.prototype.onBoxEnd = function(event) {};
    return DragBox1;
}((0, _pointerJsDefault.default));
exports.default = DragBox;

},{"../events/Event.js":"hwXQP","./Pointer.js":"1GIxf","../render/Box.js":"dUP5P","../events/condition.js":"iQTYY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dUP5P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _disposableJs = require("../Disposable.js");
var _disposableJsDefault = parcelHelpers.interopDefault(_disposableJs);
var _polygonJs = require("../geom/Polygon.js");
var _polygonJsDefault = parcelHelpers.interopDefault(_polygonJs);
/**
 * @module ol/render/Box
 */ var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var RenderBox = /** @class */ function(_super) {
    __extends(RenderBox1, _super);
    /**
     * @param {string} className CSS class name.
     */ function RenderBox1(className) {
        var _this = _super.call(this) || this;
        /**
         * @type {import("../geom/Polygon.js").default}
         * @private
         */ _this.geometry_ = null;
        /**
         * @type {HTMLDivElement}
         * @private
         */ _this.element_ = document.createElement("div");
        _this.element_.style.position = "absolute";
        _this.element_.style.pointerEvents = "auto";
        _this.element_.className = "ol-box " + className;
        /**
         * @private
         * @type {import("../PluggableMap.js").default|null}
         */ _this.map_ = null;
        /**
         * @private
         * @type {import("../pixel.js").Pixel}
         */ _this.startPixel_ = null;
        /**
         * @private
         * @type {import("../pixel.js").Pixel}
         */ _this.endPixel_ = null;
        return _this;
    }
    /**
     * Clean up.
     */ RenderBox1.prototype.disposeInternal = function() {
        this.setMap(null);
    };
    /**
     * @private
     */ RenderBox1.prototype.render_ = function() {
        var startPixel = this.startPixel_;
        var endPixel = this.endPixel_;
        var px = "px";
        var style = this.element_.style;
        style.left = Math.min(startPixel[0], endPixel[0]) + px;
        style.top = Math.min(startPixel[1], endPixel[1]) + px;
        style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
        style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
    };
    /**
     * @param {import("../PluggableMap.js").default|null} map Map.
     */ RenderBox1.prototype.setMap = function(map) {
        if (this.map_) {
            this.map_.getOverlayContainer().removeChild(this.element_);
            var style = this.element_.style;
            style.left = "inherit";
            style.top = "inherit";
            style.width = "inherit";
            style.height = "inherit";
        }
        this.map_ = map;
        if (this.map_) this.map_.getOverlayContainer().appendChild(this.element_);
    };
    /**
     * @param {import("../pixel.js").Pixel} startPixel Start pixel.
     * @param {import("../pixel.js").Pixel} endPixel End pixel.
     */ RenderBox1.prototype.setPixels = function(startPixel, endPixel) {
        this.startPixel_ = startPixel;
        this.endPixel_ = endPixel;
        this.createOrUpdateGeometry();
        this.render_();
    };
    /**
     * Creates or updates the cached geometry.
     */ RenderBox1.prototype.createOrUpdateGeometry = function() {
        var startPixel = this.startPixel_;
        var endPixel = this.endPixel_;
        var pixels = [
            startPixel,
            [
                startPixel[0],
                endPixel[1]
            ],
            endPixel,
            [
                endPixel[0],
                startPixel[1]
            ], 
        ];
        var coordinates = pixels.map(this.map_.getCoordinateFromPixelInternal, this.map_);
        // close the polygon
        coordinates[4] = coordinates[0].slice();
        if (!this.geometry_) this.geometry_ = new (0, _polygonJsDefault.default)([
            coordinates
        ]);
        else this.geometry_.setCoordinates([
            coordinates
        ]);
    };
    /**
     * @return {import("../geom/Polygon.js").default} Geometry.
     */ RenderBox1.prototype.getGeometry = function() {
        return this.geometry_;
    };
    return RenderBox1;
}((0, _disposableJsDefault.default));
exports.default = RenderBox;

},{"../Disposable.js":"c0oTM","../geom/Polygon.js":"cJuQF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"49Q4F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/interaction/KeyboardPan
 */ var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _interactionJs = require("./Interaction.js");
var _interactionJsDefault = parcelHelpers.interopDefault(_interactionJs);
var _keyCodeJs = require("../events/KeyCode.js");
var _keyCodeJsDefault = parcelHelpers.interopDefault(_keyCodeJs);
var _conditionJs = require("../events/condition.js");
var _coordinateJs = require("../coordinate.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. Default is
 * {@link module:ol/events/condition.noModifierKeys} and
 * {@link module:ol/events/condition.targetNotEditable}.
 * @property {number} [duration=100] Animation duration in milliseconds.
 * @property {number} [pixelDelta=128] The amount of pixels to pan on each key
 * press.
 */ /**
 * @classdesc
 * Allows the user to pan the map using keyboard arrows.
 * Note that, although this interaction is by default included in maps,
 * the keys can only be used when browser focus is on the element to which
 * the keyboard events are attached. By default, this is the map div,
 * though you can change this with the `keyboardEventTarget` in
 * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
 * element, focus will have to be on, and returned to, this element if the keys
 * are to function.
 * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.
 * @api
 */ var KeyboardPan = /** @class */ function(_super) {
    __extends(KeyboardPan1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function KeyboardPan1(opt_options) {
        var _this = _super.call(this) || this;
        var options = opt_options || {};
        /**
         * @private
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
         * @return {boolean} Combined condition result.
         */ _this.defaultCondition_ = function(mapBrowserEvent) {
            return (0, _conditionJs.noModifierKeys)(mapBrowserEvent) && (0, _conditionJs.targetNotEditable)(mapBrowserEvent);
        };
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.condition_ = options.condition !== undefined ? options.condition : _this.defaultCondition_;
        /**
         * @private
         * @type {number}
         */ _this.duration_ = options.duration !== undefined ? options.duration : 100;
        /**
         * @private
         * @type {number}
         */ _this.pixelDelta_ = options.pixelDelta !== undefined ? options.pixelDelta : 128;
        return _this;
    }
    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a
     * `KeyEvent`, and decides the direction to pan to (if an arrow key was
     * pressed).
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @this {KeyboardPan}
     */ KeyboardPan1.prototype.handleEvent = function(mapBrowserEvent) {
        var stopEvent = false;
        if (mapBrowserEvent.type == (0, _eventTypeJsDefault.default).KEYDOWN) {
            var keyEvent = mapBrowserEvent.originalEvent;
            var keyCode = keyEvent.keyCode;
            if (this.condition_(mapBrowserEvent) && (keyCode == (0, _keyCodeJsDefault.default).DOWN || keyCode == (0, _keyCodeJsDefault.default).LEFT || keyCode == (0, _keyCodeJsDefault.default).RIGHT || keyCode == (0, _keyCodeJsDefault.default).UP)) {
                var map = mapBrowserEvent.map;
                var view = map.getView();
                var mapUnitsDelta = view.getResolution() * this.pixelDelta_;
                var deltaX = 0, deltaY = 0;
                if (keyCode == (0, _keyCodeJsDefault.default).DOWN) deltaY = -mapUnitsDelta;
                else if (keyCode == (0, _keyCodeJsDefault.default).LEFT) deltaX = -mapUnitsDelta;
                else if (keyCode == (0, _keyCodeJsDefault.default).RIGHT) deltaX = mapUnitsDelta;
                else deltaY = mapUnitsDelta;
                var delta = [
                    deltaX,
                    deltaY
                ];
                (0, _coordinateJs.rotate)(delta, view.getRotation());
                (0, _interactionJs.pan)(view, delta, this.duration_);
                keyEvent.preventDefault();
                stopEvent = true;
            }
        }
        return !stopEvent;
    };
    return KeyboardPan1;
}((0, _interactionJsDefault.default));
exports.default = KeyboardPan;

},{"../events/EventType.js":"hrQJ6","./Interaction.js":"g1FUs","../events/KeyCode.js":"hChv2","../events/condition.js":"iQTYY","../coordinate.js":"85Vu7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hChv2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/events/KeyCode
 */ /**
 * @enum {number}
 * @const
 */ exports.default = {
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4RjL4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/interaction/KeyboardZoom
 */ var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _interactionJs = require("./Interaction.js");
var _interactionJsDefault = parcelHelpers.interopDefault(_interactionJs);
var _conditionJs = require("../events/condition.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {number} [duration=100] Animation duration in milliseconds.
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. Default is
 * {@link module:ol/events/condition.targetNotEditable}.
 * @property {number} [delta=1] The zoom level delta on each key press.
 */ /**
 * @classdesc
 * Allows the user to zoom the map using keyboard + and -.
 * Note that, although this interaction is by default included in maps,
 * the keys can only be used when browser focus is on the element to which
 * the keyboard events are attached. By default, this is the map div,
 * though you can change this with the `keyboardEventTarget` in
 * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
 * element, focus will have to be on, and returned to, this element if the keys
 * are to function.
 * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.
 * @api
 */ var KeyboardZoom = /** @class */ function(_super) {
    __extends(KeyboardZoom1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function KeyboardZoom1(opt_options) {
        var _this = _super.call(this) || this;
        var options = opt_options ? opt_options : {};
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.condition_ = options.condition ? options.condition : (0, _conditionJs.targetNotEditable);
        /**
         * @private
         * @type {number}
         */ _this.delta_ = options.delta ? options.delta : 1;
        /**
         * @private
         * @type {number}
         */ _this.duration_ = options.duration !== undefined ? options.duration : 100;
        return _this;
    }
    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a
     * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
     * key pressed was '+' or '-').
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @this {KeyboardZoom}
     */ KeyboardZoom1.prototype.handleEvent = function(mapBrowserEvent) {
        var stopEvent = false;
        if (mapBrowserEvent.type == (0, _eventTypeJsDefault.default).KEYDOWN || mapBrowserEvent.type == (0, _eventTypeJsDefault.default).KEYPRESS) {
            var keyEvent = mapBrowserEvent.originalEvent;
            var charCode = keyEvent.charCode;
            if (this.condition_(mapBrowserEvent) && (charCode == "+".charCodeAt(0) || charCode == "-".charCodeAt(0))) {
                var map = mapBrowserEvent.map;
                var delta = charCode == "+".charCodeAt(0) ? this.delta_ : -this.delta_;
                var view = map.getView();
                (0, _interactionJs.zoomByDelta)(view, delta, undefined, this.duration_);
                keyEvent.preventDefault();
                stopEvent = true;
            }
        }
        return !stopEvent;
    };
    return KeyboardZoom1;
}((0, _interactionJsDefault.default));
exports.default = KeyboardZoom;

},{"../events/EventType.js":"hrQJ6","./Interaction.js":"g1FUs","../events/condition.js":"iQTYY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aWbSH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/Kinetic
 */ /**
 * @classdesc
 * Implementation of inertial deceleration for map movement.
 *
 * @api
 */ var Kinetic = /** @class */ function() {
    /**
     * @param {number} decay Rate of decay (must be negative).
     * @param {number} minVelocity Minimum velocity (pixels/millisecond).
     * @param {number} delay Delay to consider to calculate the kinetic
     *     initial values (milliseconds).
     */ function Kinetic1(decay, minVelocity, delay) {
        /**
         * @private
         * @type {number}
         */ this.decay_ = decay;
        /**
         * @private
         * @type {number}
         */ this.minVelocity_ = minVelocity;
        /**
         * @private
         * @type {number}
         */ this.delay_ = delay;
        /**
         * @private
         * @type {Array<number>}
         */ this.points_ = [];
        /**
         * @private
         * @type {number}
         */ this.angle_ = 0;
        /**
         * @private
         * @type {number}
         */ this.initialVelocity_ = 0;
    }
    /**
     * FIXME empty description for jsdoc
     */ Kinetic1.prototype.begin = function() {
        this.points_.length = 0;
        this.angle_ = 0;
        this.initialVelocity_ = 0;
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     */ Kinetic1.prototype.update = function(x, y) {
        this.points_.push(x, y, Date.now());
    };
    /**
     * @return {boolean} Whether we should do kinetic animation.
     */ Kinetic1.prototype.end = function() {
        if (this.points_.length < 6) // at least 2 points are required (i.e. there must be at least 6 elements
        // in the array)
        return false;
        var delay = Date.now() - this.delay_;
        var lastIndex = this.points_.length - 3;
        if (this.points_[lastIndex + 2] < delay) // the last tracked point is too old, which means that the user stopped
        // panning before releasing the map
        return false;
        // get the first point which still falls into the delay time
        var firstIndex = lastIndex - 3;
        while(firstIndex > 0 && this.points_[firstIndex + 2] > delay)firstIndex -= 3;
        var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];
        // we don't want a duration of 0 (divide by zero)
        // we also make sure the user panned for a duration of at least one frame
        // (1/60s) to compute sane displacement values
        if (duration < 1000 / 60) return false;
        var dx = this.points_[lastIndex] - this.points_[firstIndex];
        var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];
        this.angle_ = Math.atan2(dy, dx);
        this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;
        return this.initialVelocity_ > this.minVelocity_;
    };
    /**
     * @return {number} Total distance travelled (pixels).
     */ Kinetic1.prototype.getDistance = function() {
        return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
    };
    /**
     * @return {number} Angle of the kinetic panning animation (radians).
     */ Kinetic1.prototype.getAngle = function() {
        return this.angle_;
    };
    return Kinetic1;
}();
exports.default = Kinetic;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gKXuR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Mode", ()=>Mode);
/**
 * @module ol/interaction/MouseWheelZoom
 */ var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _interactionJs = require("./Interaction.js");
var _interactionJsDefault = parcelHelpers.interopDefault(_interactionJs);
var _hasJs = require("../has.js");
var _conditionJs = require("../events/condition.js");
var _mathJs = require("../math.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var Mode = {
    TRACKPAD: "trackpad",
    WHEEL: "wheel"
};
/**
 * @typedef {Object} Options
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. Default is
 * {@link module:ol/events/condition.always}.
 * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
 * the interaction will only handle events when the map has the focus.
 * @property {number} [maxDelta=1] Maximum mouse wheel delta.
 * @property {number} [duration=250] Animation duration in milliseconds.
 * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.
 * @property {boolean} [useAnchor=true] Enable zooming using the mouse's
 * location as the anchor. When set to `false`, zooming in and out will zoom to
 * the center of the screen instead of zooming on the mouse's location.
 * @property {boolean} [constrainResolution=false] If true, the mouse wheel zoom
 * event will always animate to the closest zoom level after an interaction;
 * false means intermediary zoom levels are allowed.
 */ /**
 * @classdesc
 * Allows the user to zoom the map by scrolling the mouse wheel.
 * @api
 */ var MouseWheelZoom = /** @class */ function(_super) {
    __extends(MouseWheelZoom1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function MouseWheelZoom1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this, options) || this;
        /**
         * @private
         * @type {number}
         */ _this.totalDelta_ = 0;
        /**
         * @private
         * @type {number}
         */ _this.lastDelta_ = 0;
        /**
         * @private
         * @type {number}
         */ _this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;
        /**
         * @private
         * @type {number}
         */ _this.duration_ = options.duration !== undefined ? options.duration : 250;
        /**
         * @private
         * @type {number}
         */ _this.timeout_ = options.timeout !== undefined ? options.timeout : 80;
        /**
         * @private
         * @type {boolean}
         */ _this.useAnchor_ = options.useAnchor !== undefined ? options.useAnchor : true;
        /**
         * @private
         * @type {boolean}
         */ _this.constrainResolution_ = options.constrainResolution !== undefined ? options.constrainResolution : false;
        var condition = options.condition ? options.condition : (0, _conditionJs.always);
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.condition_ = options.onFocusOnly ? (0, _conditionJs.all)((0, _conditionJs.focusWithTabindex), condition) : condition;
        /**
         * @private
         * @type {?import("../coordinate.js").Coordinate}
         */ _this.lastAnchor_ = null;
        /**
         * @private
         * @type {number|undefined}
         */ _this.startTime_ = undefined;
        /**
         * @private
         * @type {?}
         */ _this.timeoutId_;
        /**
         * @private
         * @type {Mode|undefined}
         */ _this.mode_ = undefined;
        /**
         * Trackpad events separated by this delay will be considered separate
         * interactions.
         * @type {number}
         */ _this.trackpadEventGap_ = 400;
        /**
         * @type {?}
         */ _this.trackpadTimeoutId_;
        /**
         * The number of delta values per zoom level
         * @private
         * @type {number}
         */ _this.deltaPerZoom_ = 300;
        return _this;
    }
    /**
     * @private
     */ MouseWheelZoom1.prototype.endInteraction_ = function() {
        this.trackpadTimeoutId_ = undefined;
        var view = this.getMap().getView();
        view.endInteraction(undefined, this.lastDelta_ ? this.lastDelta_ > 0 ? 1 : -1 : 0, this.lastAnchor_);
    };
    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually
     * zooms the map.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     */ MouseWheelZoom1.prototype.handleEvent = function(mapBrowserEvent) {
        if (!this.condition_(mapBrowserEvent)) return true;
        var type = mapBrowserEvent.type;
        if (type !== (0, _eventTypeJsDefault.default).WHEEL) return true;
        var map = mapBrowserEvent.map;
        var wheelEvent = mapBrowserEvent.originalEvent;
        wheelEvent.preventDefault();
        if (this.useAnchor_) this.lastAnchor_ = mapBrowserEvent.coordinate;
        // Delta normalisation inspired by
        // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js
        var delta;
        if (mapBrowserEvent.type == (0, _eventTypeJsDefault.default).WHEEL) {
            delta = wheelEvent.deltaY;
            if ((0, _hasJs.FIREFOX) && wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) delta /= (0, _hasJs.DEVICE_PIXEL_RATIO);
            if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) delta *= 40;
        }
        if (delta === 0) return false;
        else this.lastDelta_ = delta;
        var now = Date.now();
        if (this.startTime_ === undefined) this.startTime_ = now;
        if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) this.mode_ = Math.abs(delta) < 4 ? Mode.TRACKPAD : Mode.WHEEL;
        var view = map.getView();
        if (this.mode_ === Mode.TRACKPAD && !(view.getConstrainResolution() || this.constrainResolution_)) {
            if (this.trackpadTimeoutId_) clearTimeout(this.trackpadTimeoutId_);
            else {
                if (view.getAnimating()) view.cancelAnimations();
                view.beginInteraction();
            }
            this.trackpadTimeoutId_ = setTimeout(this.endInteraction_.bind(this), this.timeout_);
            view.adjustZoom(-delta / this.deltaPerZoom_, this.lastAnchor_);
            this.startTime_ = now;
            return false;
        }
        this.totalDelta_ += delta;
        var timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);
        clearTimeout(this.timeoutId_);
        this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);
        return false;
    };
    /**
     * @private
     * @param {import("../PluggableMap.js").default} map Map.
     */ MouseWheelZoom1.prototype.handleWheelZoom_ = function(map) {
        var view = map.getView();
        if (view.getAnimating()) view.cancelAnimations();
        var delta = -(0, _mathJs.clamp)(this.totalDelta_, -this.maxDelta_ * this.deltaPerZoom_, this.maxDelta_ * this.deltaPerZoom_) / this.deltaPerZoom_;
        if (view.getConstrainResolution() || this.constrainResolution_) // view has a zoom constraint, zoom by 1
        delta = delta ? delta > 0 ? 1 : -1 : 0;
        (0, _interactionJs.zoomByDelta)(view, delta, this.lastAnchor_, this.duration_);
        this.mode_ = undefined;
        this.totalDelta_ = 0;
        this.lastAnchor_ = null;
        this.startTime_ = undefined;
        this.timeoutId_ = undefined;
    };
    /**
     * Enable or disable using the mouse's location as an anchor when zooming
     * @param {boolean} useAnchor true to zoom to the mouse's location, false
     * to zoom to the center of the map
     * @api
     */ MouseWheelZoom1.prototype.setMouseAnchor = function(useAnchor) {
        this.useAnchor_ = useAnchor;
        if (!useAnchor) this.lastAnchor_ = null;
    };
    return MouseWheelZoom1;
}((0, _interactionJsDefault.default));
exports.default = MouseWheelZoom;

},{"../events/EventType.js":"hrQJ6","./Interaction.js":"g1FUs","../has.js":"6BDNi","../events/condition.js":"iQTYY","../math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5f8eF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/interaction/PinchRotate
 */ var _pointerJs = require("./Pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _functionsJs = require("../functions.js");
var _rotationconstraintJs = require("../rotationconstraint.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {number} [duration=250] The duration of the animation in
 * milliseconds.
 * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.
 */ /**
 * @classdesc
 * Allows the user to rotate the map by twisting with two fingers
 * on a touch screen.
 * @api
 */ var PinchRotate = /** @class */ function(_super) {
    __extends(PinchRotate1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function PinchRotate1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        var pointerOptions = options;
        if (!pointerOptions.stopDown) pointerOptions.stopDown = (0, _functionsJs.FALSE);
        _this = _super.call(this, pointerOptions) || this;
        /**
         * @private
         * @type {import("../coordinate.js").Coordinate}
         */ _this.anchor_ = null;
        /**
         * @private
         * @type {number|undefined}
         */ _this.lastAngle_ = undefined;
        /**
         * @private
         * @type {boolean}
         */ _this.rotating_ = false;
        /**
         * @private
         * @type {number}
         */ _this.rotationDelta_ = 0.0;
        /**
         * @private
         * @type {number}
         */ _this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;
        /**
         * @private
         * @type {number}
         */ _this.duration_ = options.duration !== undefined ? options.duration : 250;
        return _this;
    }
    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */ PinchRotate1.prototype.handleDragEvent = function(mapBrowserEvent) {
        var rotationDelta = 0.0;
        var touch0 = this.targetPointers[0];
        var touch1 = this.targetPointers[1];
        // angle between touches
        var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);
        if (this.lastAngle_ !== undefined) {
            var delta = angle - this.lastAngle_;
            this.rotationDelta_ += delta;
            if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) this.rotating_ = true;
            rotationDelta = delta;
        }
        this.lastAngle_ = angle;
        var map = mapBrowserEvent.map;
        var view = map.getView();
        if (view.getConstraints().rotation === (0, _rotationconstraintJs.disable)) return;
        // rotate anchor point.
        // FIXME: should be the intersection point between the lines:
        //     touch0,touch1 and previousTouch0,previousTouch1
        var viewportPosition = map.getViewport().getBoundingClientRect();
        var centroid = (0, _pointerJs.centroid)(this.targetPointers);
        centroid[0] -= viewportPosition.left;
        centroid[1] -= viewportPosition.top;
        this.anchor_ = map.getCoordinateFromPixelInternal(centroid);
        // rotate
        if (this.rotating_) {
            map.render();
            view.adjustRotationInternal(rotationDelta, this.anchor_);
        }
    };
    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ PinchRotate1.prototype.handleUpEvent = function(mapBrowserEvent) {
        if (this.targetPointers.length < 2) {
            var map = mapBrowserEvent.map;
            var view = map.getView();
            view.endInteraction(this.duration_);
            return false;
        } else return true;
    };
    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ PinchRotate1.prototype.handleDownEvent = function(mapBrowserEvent) {
        if (this.targetPointers.length >= 2) {
            var map = mapBrowserEvent.map;
            this.anchor_ = null;
            this.lastAngle_ = undefined;
            this.rotating_ = false;
            this.rotationDelta_ = 0.0;
            if (!this.handlingDownUpSequence) map.getView().beginInteraction();
            return true;
        } else return false;
    };
    return PinchRotate1;
}((0, _pointerJsDefault.default));
exports.default = PinchRotate;

},{"./Pointer.js":"1GIxf","../functions.js":"iqv8I","../rotationconstraint.js":"hSWd8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5RZxv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/interaction/PinchZoom
 */ var _pointerJs = require("./Pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _functionsJs = require("../functions.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {number} [duration=400] Animation duration in milliseconds.
 */ /**
 * @classdesc
 * Allows the user to zoom the map by pinching with two fingers
 * on a touch screen.
 * @api
 */ var PinchZoom = /** @class */ function(_super) {
    __extends(PinchZoom1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function PinchZoom1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        var pointerOptions = options;
        if (!pointerOptions.stopDown) pointerOptions.stopDown = (0, _functionsJs.FALSE);
        _this = _super.call(this, pointerOptions) || this;
        /**
         * @private
         * @type {import("../coordinate.js").Coordinate}
         */ _this.anchor_ = null;
        /**
         * @private
         * @type {number}
         */ _this.duration_ = options.duration !== undefined ? options.duration : 400;
        /**
         * @private
         * @type {number|undefined}
         */ _this.lastDistance_ = undefined;
        /**
         * @private
         * @type {number}
         */ _this.lastScaleDelta_ = 1;
        return _this;
    }
    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */ PinchZoom1.prototype.handleDragEvent = function(mapBrowserEvent) {
        var scaleDelta = 1.0;
        var touch0 = this.targetPointers[0];
        var touch1 = this.targetPointers[1];
        var dx = touch0.clientX - touch1.clientX;
        var dy = touch0.clientY - touch1.clientY;
        // distance between touches
        var distance = Math.sqrt(dx * dx + dy * dy);
        if (this.lastDistance_ !== undefined) scaleDelta = this.lastDistance_ / distance;
        this.lastDistance_ = distance;
        var map = mapBrowserEvent.map;
        var view = map.getView();
        if (scaleDelta != 1.0) this.lastScaleDelta_ = scaleDelta;
        // scale anchor point.
        var viewportPosition = map.getViewport().getBoundingClientRect();
        var centroid = (0, _pointerJs.centroid)(this.targetPointers);
        centroid[0] -= viewportPosition.left;
        centroid[1] -= viewportPosition.top;
        this.anchor_ = map.getCoordinateFromPixelInternal(centroid);
        // scale, bypass the resolution constraint
        map.render();
        view.adjustResolutionInternal(scaleDelta, this.anchor_);
    };
    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ PinchZoom1.prototype.handleUpEvent = function(mapBrowserEvent) {
        if (this.targetPointers.length < 2) {
            var map = mapBrowserEvent.map;
            var view = map.getView();
            var direction = this.lastScaleDelta_ > 1 ? 1 : -1;
            view.endInteraction(this.duration_, direction);
            return false;
        } else return true;
    };
    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ PinchZoom1.prototype.handleDownEvent = function(mapBrowserEvent) {
        if (this.targetPointers.length >= 2) {
            var map = mapBrowserEvent.map;
            this.anchor_ = null;
            this.lastDistance_ = undefined;
            this.lastScaleDelta_ = 1;
            if (!this.handlingDownUpSequence) map.getView().beginInteraction();
            return true;
        } else return false;
    };
    return PinchZoom1;
}((0, _pointerJsDefault.default));
exports.default = PinchZoom;

},{"./Pointer.js":"1GIxf","../functions.js":"iqv8I","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"190PQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DragAndDropEvent", ()=>DragAndDropEvent);
var _eventJs = require("../events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _formatTypeJs = require("../format/FormatType.js");
var _formatTypeJsDefault = parcelHelpers.interopDefault(_formatTypeJs);
var _interactionJs = require("./Interaction.js");
var _interactionJsDefault = parcelHelpers.interopDefault(_interactionJs);
var _functionsJs = require("../functions.js");
var _projJs = require("../proj.js");
var _eventsJs = require("../events.js");
/**
 * @module ol/interaction/DragAndDrop
 */ // FIXME should handle all geo-referenced data, not just vector data
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {Array<typeof import("../format/Feature.js").default|import("../format/Feature.js").default>} [formatConstructors] Format constructors
 * (and/or formats pre-constructed with options).
 * @property {import("../source/Vector.js").default} [source] Optional vector source where features will be added.  If a source is provided
 * all existing features will be removed and new features will be added when
 * they are dropped on the target.  If you want to add features to a vector
 * source without removing the existing features (append only), instead of
 * providing the source option listen for the "addfeatures" event.
 * @property {import("../proj.js").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.
 * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.
 */ /**
 * @enum {string}
 */ var DragAndDropEventType = {
    /**
     * Triggered when features are added
     * @event DragAndDropEvent#addfeatures
     * @api
     */ ADD_FEATURES: "addfeatures"
};
/**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances
 * of this type.
 */ var DragAndDropEvent = /** @class */ function(_super) {
    __extends(DragAndDropEvent1, _super);
    /**
     * @param {DragAndDropEventType} type Type.
     * @param {File} file File.
     * @param {Array<import("../Feature.js").default>} [opt_features] Features.
     * @param {import("../proj/Projection.js").default} [opt_projection] Projection.
     */ function DragAndDropEvent1(type, file, opt_features, opt_projection) {
        var _this = _super.call(this, type) || this;
        /**
         * The features parsed from dropped data.
         * @type {Array<import("../Feature.js").FeatureLike>|undefined}
         * @api
         */ _this.features = opt_features;
        /**
         * The dropped file.
         * @type {File}
         * @api
         */ _this.file = file;
        /**
         * The feature projection.
         * @type {import("../proj/Projection.js").default|undefined}
         * @api
         */ _this.projection = opt_projection;
        return _this;
    }
    return DragAndDropEvent1;
}((0, _eventJsDefault.default));
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
 *     'change:active', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<'addfeatures', DragAndDropEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     'change:active'|'addfeatures', Return>} DragAndDropOnSignature
 */ /**
 * @classdesc
 * Handles input of vector data by drag and drop.
 *
 * Note that the DragAndDrop interaction uses the TextDecoder() constructor if the supplied
 * combination of formats read both text string and ArrayBuffer sources. Older browsers such
 * as IE which do not support this will need a TextDecoder polyfill to be loaded before use.
 *
 * @api
 *
 * @fires DragAndDropEvent
 */ var DragAndDrop = /** @class */ function(_super) {
    __extends(DragAndDrop1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function DragAndDrop1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this, {
            handleEvent: (0, _functionsJs.TRUE)
        }) || this;
        /***
         * @type {DragAndDropOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {DragAndDropOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {DragAndDropOnSignature<void>}
         */ _this.un;
        /**
         * @private
         * @type {boolean}
         */ _this.readAsBuffer_ = false;
        /**
         * @private
         * @type {Array<import("../format/Feature.js").default>}
         */ _this.formats_ = [];
        var formatConstructors = options.formatConstructors ? options.formatConstructors : [];
        for(var i = 0, ii = formatConstructors.length; i < ii; ++i){
            var format = formatConstructors[i];
            if (typeof format === "function") format = new format();
            _this.formats_.push(format);
            _this.readAsBuffer_ = _this.readAsBuffer_ || format.getType() === (0, _formatTypeJsDefault.default).ARRAY_BUFFER;
        }
        /**
         * @private
         * @type {import("../proj/Projection.js").default}
         */ _this.projection_ = options.projection ? (0, _projJs.get)(options.projection) : null;
        /**
         * @private
         * @type {?Array<import("../events.js").EventsKey>}
         */ _this.dropListenKeys_ = null;
        /**
         * @private
         * @type {import("../source/Vector.js").default}
         */ _this.source_ = options.source || null;
        /**
         * @private
         * @type {HTMLElement|null}
         */ _this.target = options.target ? options.target : null;
        return _this;
    }
    /**
     * @param {File} file File.
     * @param {Event} event Load event.
     * @private
     */ DragAndDrop1.prototype.handleResult_ = function(file, event) {
        var result = event.target.result;
        var map = this.getMap();
        var projection = this.projection_;
        if (!projection) {
            var view = map.getView();
            projection = view.getProjection();
        }
        var text;
        var formats = this.formats_;
        for(var i = 0, ii = formats.length; i < ii; ++i){
            var format = formats[i];
            var input = result;
            if (this.readAsBuffer_ && format.getType() !== (0, _formatTypeJsDefault.default).ARRAY_BUFFER) {
                if (text === undefined) text = new TextDecoder().decode(result);
                input = text;
            }
            var features = this.tryReadFeatures_(format, input, {
                featureProjection: projection
            });
            if (features && features.length > 0) {
                if (this.source_) {
                    this.source_.clear();
                    this.source_.addFeatures(features);
                }
                this.dispatchEvent(new DragAndDropEvent(DragAndDropEventType.ADD_FEATURES, file, features, projection));
                break;
            }
        }
    };
    /**
     * @private
     */ DragAndDrop1.prototype.registerListeners_ = function() {
        var map = this.getMap();
        if (map) {
            var dropArea = this.target ? this.target : map.getViewport();
            this.dropListenKeys_ = [
                (0, _eventsJs.listen)(dropArea, (0, _eventTypeJsDefault.default).DROP, this.handleDrop, this),
                (0, _eventsJs.listen)(dropArea, (0, _eventTypeJsDefault.default).DRAGENTER, this.handleStop, this),
                (0, _eventsJs.listen)(dropArea, (0, _eventTypeJsDefault.default).DRAGOVER, this.handleStop, this),
                (0, _eventsJs.listen)(dropArea, (0, _eventTypeJsDefault.default).DROP, this.handleStop, this), 
            ];
        }
    };
    /**
     * Activate or deactivate the interaction.
     * @param {boolean} active Active.
     * @observable
     * @api
     */ DragAndDrop1.prototype.setActive = function(active) {
        if (!this.getActive() && active) this.registerListeners_();
        if (this.getActive() && !active) this.unregisterListeners_();
        _super.prototype.setActive.call(this, active);
    };
    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default} map Map.
     */ DragAndDrop1.prototype.setMap = function(map) {
        this.unregisterListeners_();
        _super.prototype.setMap.call(this, map);
        if (this.getActive()) this.registerListeners_();
    };
    /**
     * @param {import("../format/Feature.js").default} format Format.
     * @param {string} text Text.
     * @param {import("../format/Feature.js").ReadOptions} options Read options.
     * @private
     * @return {Array<import("../Feature.js").default>} Features.
     */ DragAndDrop1.prototype.tryReadFeatures_ = function(format, text, options) {
        try {
            return /** @type {Array<import("../Feature.js").default>} */ format.readFeatures(text, options);
        } catch (e) {
            return null;
        }
    };
    /**
     * @private
     */ DragAndDrop1.prototype.unregisterListeners_ = function() {
        if (this.dropListenKeys_) {
            this.dropListenKeys_.forEach((0, _eventsJs.unlistenByKey));
            this.dropListenKeys_ = null;
        }
    };
    /**
     * @param {DragEvent} event Event.
     */ DragAndDrop1.prototype.handleDrop = function(event) {
        var files = event.dataTransfer.files;
        for(var i = 0, ii = files.length; i < ii; ++i){
            var file = files.item(i);
            var reader = new FileReader();
            reader.addEventListener((0, _eventTypeJsDefault.default).LOAD, this.handleResult_.bind(this, file));
            if (this.readAsBuffer_) reader.readAsArrayBuffer(file);
            else reader.readAsText(file);
        }
    };
    /**
     * @param {DragEvent} event Event.
     */ DragAndDrop1.prototype.handleStop = function(event) {
        event.stopPropagation();
        event.preventDefault();
        event.dataTransfer.dropEffect = "copy";
    };
    return DragAndDrop1;
}((0, _interactionJsDefault.default));
exports.default = DragAndDrop;

},{"../events/Event.js":"hwXQP","../events/EventType.js":"hrQJ6","../format/FormatType.js":"cQiMP","./Interaction.js":"g1FUs","../functions.js":"iqv8I","../proj.js":"SznqC","../events.js":"dcspA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cdTmh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/interaction/DragRotateAndZoom
 */ var _pointerJs = require("./Pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _conditionJs = require("../events/condition.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled.
 * Default is {@link module:ol/events/condition.shiftKeyOnly}.
 * @property {number} [duration=400] Animation duration in milliseconds.
 */ /**
 * @classdesc
 * Allows the user to zoom and rotate the map by clicking and dragging
 * on the map.  By default, this interaction is limited to when the shift
 * key is held down.
 *
 * This interaction is only supported for mouse devices.
 *
 * And this interaction is not included in the default interactions.
 * @api
 */ var DragRotateAndZoom = /** @class */ function(_super) {
    __extends(DragRotateAndZoom1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function DragRotateAndZoom1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this, options) || this;
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.condition_ = options.condition ? options.condition : (0, _conditionJs.shiftKeyOnly);
        /**
         * @private
         * @type {number|undefined}
         */ _this.lastAngle_ = undefined;
        /**
         * @private
         * @type {number|undefined}
         */ _this.lastMagnitude_ = undefined;
        /**
         * @private
         * @type {number}
         */ _this.lastScaleDelta_ = 0;
        /**
         * @private
         * @type {number}
         */ _this.duration_ = options.duration !== undefined ? options.duration : 400;
        return _this;
    }
    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */ DragRotateAndZoom1.prototype.handleDragEvent = function(mapBrowserEvent) {
        if (!(0, _conditionJs.mouseOnly)(mapBrowserEvent)) return;
        var map = mapBrowserEvent.map;
        var size = map.getSize();
        var offset = mapBrowserEvent.pixel;
        var deltaX = offset[0] - size[0] / 2;
        var deltaY = size[1] / 2 - offset[1];
        var theta = Math.atan2(deltaY, deltaX);
        var magnitude = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        var view = map.getView();
        if (this.lastAngle_ !== undefined) {
            var angleDelta = this.lastAngle_ - theta;
            view.adjustRotationInternal(angleDelta);
        }
        this.lastAngle_ = theta;
        if (this.lastMagnitude_ !== undefined) view.adjustResolutionInternal(this.lastMagnitude_ / magnitude);
        if (this.lastMagnitude_ !== undefined) this.lastScaleDelta_ = this.lastMagnitude_ / magnitude;
        this.lastMagnitude_ = magnitude;
    };
    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ DragRotateAndZoom1.prototype.handleUpEvent = function(mapBrowserEvent) {
        if (!(0, _conditionJs.mouseOnly)(mapBrowserEvent)) return true;
        var map = mapBrowserEvent.map;
        var view = map.getView();
        var direction = this.lastScaleDelta_ > 1 ? 1 : -1;
        view.endInteraction(this.duration_, direction);
        this.lastScaleDelta_ = 0;
        return false;
    };
    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ DragRotateAndZoom1.prototype.handleDownEvent = function(mapBrowserEvent) {
        if (!(0, _conditionJs.mouseOnly)(mapBrowserEvent)) return false;
        if (this.condition_(mapBrowserEvent)) {
            mapBrowserEvent.map.getView().beginInteraction();
            this.lastAngle_ = undefined;
            this.lastMagnitude_ = undefined;
            return true;
        } else return false;
    };
    return DragRotateAndZoom1;
}((0, _pointerJsDefault.default));
exports.default = DragRotateAndZoom;

},{"./Pointer.js":"1GIxf","../events/condition.js":"iQTYY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"43MZd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DrawEvent", ()=>DrawEvent);
/**
 * Create a `geometryFunction` for `type: 'Circle'` that will create a regular
 * polygon with a user specified number of sides and start angle instead of a
 * {@link import("../geom/Circle.js").Circle} geometry.
 * @param {number} [opt_sides] Number of sides of the regular polygon.
 *     Default is 32.
 * @param {number} [opt_angle] Angle of the first point in counter-clockwise
 *     radians. 0 means East.
 *     Default is the angle defined by the heading from the center of the
 *     regular polygon to the current pointer position.
 * @return {GeometryFunction} Function that draws a polygon.
 * @api
 */ parcelHelpers.export(exports, "createRegularPolygon", ()=>createRegularPolygon);
/**
 * Create a `geometryFunction` that will create a box-shaped polygon (aligned
 * with the coordinate system axes).  Use this with the draw interaction and
 * `type: 'Circle'` to return a box instead of a circle geometry.
 * @return {GeometryFunction} Function that draws a box-shaped polygon.
 * @api
 */ parcelHelpers.export(exports, "createBox", ()=>createBox);
/**
 * @module ol/interaction/Draw
 */ var _circleJs = require("../geom/Circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _eventJs = require("../events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _featureJs = require("../Feature.js");
var _featureJsDefault = parcelHelpers.interopDefault(_featureJs);
var _geometryTypeJs = require("../geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _propertyJs = require("./Property.js");
var _propertyJsDefault = parcelHelpers.interopDefault(_propertyJs);
var _lineStringJs = require("../geom/LineString.js");
var _lineStringJsDefault = parcelHelpers.interopDefault(_lineStringJs);
var _mapBrowserEventJs = require("../MapBrowserEvent.js");
var _mapBrowserEventJsDefault = parcelHelpers.interopDefault(_mapBrowserEventJs);
var _mapBrowserEventTypeJs = require("../MapBrowserEventType.js");
var _mapBrowserEventTypeJsDefault = parcelHelpers.interopDefault(_mapBrowserEventTypeJs);
var _multiLineStringJs = require("../geom/MultiLineString.js");
var _multiLineStringJsDefault = parcelHelpers.interopDefault(_multiLineStringJs);
var _multiPointJs = require("../geom/MultiPoint.js");
var _multiPointJsDefault = parcelHelpers.interopDefault(_multiPointJs);
var _multiPolygonJs = require("../geom/MultiPolygon.js");
var _multiPolygonJsDefault = parcelHelpers.interopDefault(_multiPolygonJs);
var _pointJs = require("../geom/Point.js");
var _pointJsDefault = parcelHelpers.interopDefault(_pointJs);
var _pointerJs = require("./Pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _polygonJs = require("../geom/Polygon.js");
var _polygonJsDefault = parcelHelpers.interopDefault(_polygonJs);
var _vectorJs = require("../layer/Vector.js");
var _vectorJsDefault = parcelHelpers.interopDefault(_vectorJs);
var _vectorJs1 = require("../source/Vector.js");
var _vectorJsDefault1 = parcelHelpers.interopDefault(_vectorJs1);
var _functionsJs = require("../functions.js");
var _conditionJs = require("../events/condition.js");
var _extentJs = require("../extent.js");
var _styleJs = require("../style/Style.js");
var _projJs = require("../proj.js");
var _coordinateJs = require("../coordinate.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {import("../geom/GeometryType.js").default} type Geometry type of
 * the geometries being drawn with this instance.
 * @property {number} [clickTolerance=6] The maximum distance in pixels between
 * "down" and "up" for a "up" event to be considered a "click" event and
 * actually add a point/vertex to the geometry being drawn.  The default of `6`
 * was chosen for the draw interaction to behave correctly on mouse as well as
 * on touch devices.
 * @property {import("../Collection.js").default<Feature>} [features]
 * Destination collection for the drawn features.
 * @property {VectorSource} [source] Destination source for
 * the drawn features.
 * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown
 * before the current vertex can be dragged to its exact position.
 * @property {number} [snapTolerance=12] Pixel distance for snapping to the
 * drawing finish. Must be greater than `0`.
 * @property {boolean} [stopClick=false] Stop click, singleclick, and
 * doubleclick events from firing during drawing.
 * @property {number} [maxPoints] The number of points that can be drawn before
 * a polygon ring or line string is finished. By default there is no
 * restriction.
 * @property {number} [minPoints] The number of points that must be drawn
 * before a polygon ring or line string can be finished. Default is `3` for
 * polygon rings and `2` for line strings.
 * @property {import("../events/condition.js").Condition} [finishCondition] A function
 * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether the drawing can be finished. Not used when drawing
 * POINT or MULTI_POINT geometries.
 * @property {import("../style/Style.js").StyleLike} [style]
 * Style for sketch features.
 * @property {GeometryFunction} [geometryFunction]
 * Function that is called when a geometry's coordinates are updated.
 * @property {string} [geometryName] Geometry name to use for features created
 * by the draw interaction.
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled.
 * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,
 * adds a vertex or deactivates freehand drawing.
 * @property {boolean} [freehand=false] Operate in freehand mode for lines,
 * polygons, and circles.  This makes the interaction always operate in freehand
 * mode and takes precedence over any `freehandCondition` option.
 * @property {import("../events/condition.js").Condition} [freehandCondition]
 * Condition that activates freehand drawing for lines and polygons. This
 * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
 * returns a boolean to indicate whether that event should be handled. The
 * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the
 * Shift key activates freehand drawing.
 * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
 * overlay.
 */ /**
 * Coordinate type when drawing points.
 * @typedef {import("../coordinate.js").Coordinate} PointCoordType
 */ /**
 * Coordinate type when drawing lines.
 * @typedef {Array<import("../coordinate.js").Coordinate>} LineCoordType
 */ /**
 * Coordinate type when drawing polygons.
 * @typedef {Array<Array<import("../coordinate.js").Coordinate>>} PolyCoordType
 */ /**
 * Types used for drawing coordinates.
 * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType
 */ /**
 * Function that takes an array of coordinates and an optional existing geometry
 * and a projection as arguments, and returns a geometry. The optional existing
 * geometry is the geometry that is returned when the function is called without
 * a second argument.
 * @typedef {function(!SketchCoordType, import("../geom/SimpleGeometry.js").default,
 *     import("../proj/Projection.js").default):
 *     import("../geom/SimpleGeometry.js").default} GeometryFunction
 */ /**
 * Draw mode.  This collapses multi-part geometry types with their single-part
 * cousins.
 * @enum {string}
 */ var Mode = {
    POINT: "Point",
    LINE_STRING: "LineString",
    POLYGON: "Polygon",
    CIRCLE: "Circle"
};
/**
 * @enum {string}
 */ var DrawEventType = {
    /**
     * Triggered upon feature draw start
     * @event DrawEvent#drawstart
     * @api
     */ DRAWSTART: "drawstart",
    /**
     * Triggered upon feature draw end
     * @event DrawEvent#drawend
     * @api
     */ DRAWEND: "drawend",
    /**
     * Triggered upon feature draw abortion
     * @event DrawEvent#drawabort
     * @api
     */ DRAWABORT: "drawabort"
};
/**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are
 * instances of this type.
 */ var DrawEvent = /** @class */ function(_super) {
    __extends(DrawEvent1, _super);
    /**
     * @param {DrawEventType} type Type.
     * @param {Feature} feature The feature drawn.
     */ function DrawEvent1(type, feature) {
        var _this = _super.call(this, type) || this;
        /**
         * The feature being drawn.
         * @type {Feature}
         * @api
         */ _this.feature = feature;
        return _this;
    }
    return DrawEvent1;
}((0, _eventJsDefault.default));
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
 *     'change:active', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature
 */ /**
 * @classdesc
 * Interaction for drawing feature geometries.
 *
 * @fires DrawEvent
 * @api
 */ var Draw = /** @class */ function(_super) {
    __extends(Draw1, _super);
    /**
     * @param {Options} options Options.
     */ function Draw1(options) {
        var _this = this;
        var pointerOptions = options;
        if (!pointerOptions.stopDown) pointerOptions.stopDown = (0, _functionsJs.FALSE);
        _this = _super.call(this, pointerOptions) || this;
        /***
         * @type {DrawOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {DrawOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {DrawOnSignature<void>}
         */ _this.un;
        /**
         * @type {boolean}
         * @private
         */ _this.shouldHandle_ = false;
        /**
         * @type {import("../pixel.js").Pixel}
         * @private
         */ _this.downPx_ = null;
        /**
         * @type {?}
         * @private
         */ _this.downTimeout_;
        /**
         * @type {number|undefined}
         * @private
         */ _this.lastDragTime_;
        /**
         * Pointer type of the last pointermove event
         * @type {string}
         * @private
         */ _this.pointerType_;
        /**
         * @type {boolean}
         * @private
         */ _this.freehand_ = false;
        /**
         * Target source for drawn features.
         * @type {VectorSource|null}
         * @private
         */ _this.source_ = options.source ? options.source : null;
        /**
         * Target collection for drawn features.
         * @type {import("../Collection.js").default<Feature>|null}
         * @private
         */ _this.features_ = options.features ? options.features : null;
        /**
         * Pixel distance for snapping.
         * @type {number}
         * @private
         */ _this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;
        /**
         * Geometry type.
         * @type {import("../geom/GeometryType.js").default}
         * @private
         */ _this.type_ = options.type;
        /**
         * Drawing mode (derived from geometry type.
         * @type {Mode}
         * @private
         */ _this.mode_ = getMode(_this.type_);
        /**
         * Stop click, singleclick, and doubleclick events from firing during drawing.
         * Default is `false`.
         * @type {boolean}
         * @private
         */ _this.stopClick_ = !!options.stopClick;
        /**
         * The number of points that must be drawn before a polygon ring or line
         * string can be finished.  The default is 3 for polygon rings and 2 for
         * line strings.
         * @type {number}
         * @private
         */ _this.minPoints_ = options.minPoints ? options.minPoints : _this.mode_ === Mode.POLYGON ? 3 : 2;
        /**
         * The number of points that can be drawn before a polygon ring or line string
         * is finished. The default is no restriction.
         * @type {number}
         * @private
         */ _this.maxPoints_ = _this.mode_ === Mode.CIRCLE ? 2 : options.maxPoints ? options.maxPoints : Infinity;
        /**
         * A function to decide if a potential finish coordinate is permissible
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.finishCondition_ = options.finishCondition ? options.finishCondition : (0, _functionsJs.TRUE);
        var geometryFunction = options.geometryFunction;
        if (!geometryFunction) {
            var mode_1 = _this.mode_;
            if (mode_1 === Mode.CIRCLE) /**
                 * @param {!LineCoordType} coordinates The coordinates.
                 * @param {import("../geom/SimpleGeometry.js").default|undefined} geometry Optional geometry.
                 * @param {import("../proj/Projection.js").default} projection The view projection.
                 * @return {import("../geom/SimpleGeometry.js").default} A geometry.
                 */ geometryFunction = function(coordinates, geometry, projection) {
                var circle = geometry ? geometry : new (0, _circleJsDefault.default)([
                    NaN,
                    NaN
                ]);
                var center = (0, _projJs.fromUserCoordinate)(coordinates[0], projection);
                var squaredLength = (0, _coordinateJs.squaredDistance)(center, (0, _projJs.fromUserCoordinate)(coordinates[coordinates.length - 1], projection));
                circle.setCenterAndRadius(center, Math.sqrt(squaredLength));
                var userProjection = (0, _projJs.getUserProjection)();
                if (userProjection) circle.transform(projection, userProjection);
                return circle;
            };
            else {
                var Constructor_1;
                if (mode_1 === Mode.POINT) Constructor_1 = (0, _pointJsDefault.default);
                else if (mode_1 === Mode.LINE_STRING) Constructor_1 = (0, _lineStringJsDefault.default);
                else if (mode_1 === Mode.POLYGON) Constructor_1 = (0, _polygonJsDefault.default);
                /**
                 * @param {!LineCoordType} coordinates The coordinates.
                 * @param {import("../geom/SimpleGeometry.js").default|undefined} geometry Optional geometry.
                 * @param {import("../proj/Projection.js").default} projection The view projection.
                 * @return {import("../geom/SimpleGeometry.js").default} A geometry.
                 */ geometryFunction = function(coordinates, geometry, projection) {
                    if (geometry) {
                        if (mode_1 === Mode.POLYGON) {
                            if (coordinates[0].length) // Add a closing coordinate to match the first
                            geometry.setCoordinates([
                                coordinates[0].concat([
                                    coordinates[0][0]
                                ]), 
                            ]);
                            else geometry.setCoordinates([]);
                        } else geometry.setCoordinates(coordinates);
                    } else geometry = new Constructor_1(coordinates);
                    return geometry;
                };
            }
        }
        /**
         * @type {GeometryFunction}
         * @private
         */ _this.geometryFunction_ = geometryFunction;
        /**
         * @type {number}
         * @private
         */ _this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;
        /**
         * Finish coordinate for the feature (first point for polygons, last point for
         * linestrings).
         * @type {import("../coordinate.js").Coordinate}
         * @private
         */ _this.finishCoordinate_ = null;
        /**
         * Sketch feature.
         * @type {Feature<import('../geom/SimpleGeometry.js').default>}
         * @private
         */ _this.sketchFeature_ = null;
        /**
         * Sketch point.
         * @type {Feature<Point>}
         * @private
         */ _this.sketchPoint_ = null;
        /**
         * Sketch coordinates. Used when drawing a line or polygon.
         * @type {SketchCoordType}
         * @private
         */ _this.sketchCoords_ = null;
        /**
         * Sketch line. Used when drawing polygon.
         * @type {Feature<LineString>}
         * @private
         */ _this.sketchLine_ = null;
        /**
         * Sketch line coordinates. Used when drawing a polygon or circle.
         * @type {LineCoordType}
         * @private
         */ _this.sketchLineCoords_ = null;
        /**
         * Squared tolerance for handling up events.  If the squared distance
         * between a down and up event is greater than this tolerance, up events
         * will not be handled.
         * @type {number}
         * @private
         */ _this.squaredClickTolerance_ = options.clickTolerance ? options.clickTolerance * options.clickTolerance : 36;
        /**
         * Draw overlay where our sketch features are drawn.
         * @type {VectorLayer}
         * @private
         */ _this.overlay_ = new (0, _vectorJsDefault.default)({
            source: new (0, _vectorJsDefault1.default)({
                useSpatialIndex: false,
                wrapX: options.wrapX ? options.wrapX : false
            }),
            style: options.style ? options.style : getDefaultStyleFunction(),
            updateWhileInteracting: true
        });
        /**
         * Name of the geometry attribute for newly created features.
         * @type {string|undefined}
         * @private
         */ _this.geometryName_ = options.geometryName;
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.condition_ = options.condition ? options.condition : (0, _conditionJs.noModifierKeys);
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.freehandCondition_;
        if (options.freehand) _this.freehandCondition_ = (0, _conditionJs.always);
        else _this.freehandCondition_ = options.freehandCondition ? options.freehandCondition : (0, _conditionJs.shiftKeyOnly);
        _this.addChangeListener((0, _propertyJsDefault.default).ACTIVE, _this.updateState_);
        return _this;
    }
    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default} map Map.
     */ Draw1.prototype.setMap = function(map) {
        _super.prototype.setMap.call(this, map);
        this.updateState_();
    };
    /**
     * Get the overlay layer that this interaction renders sketch features to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */ Draw1.prototype.getOverlay = function() {
        return this.overlay_;
    };
    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may actually draw or finish the drawing.
     * @param {import("../MapBrowserEvent.js").default} event Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @api
     */ Draw1.prototype.handleEvent = function(event) {
        if (event.originalEvent.type === (0, _eventTypeJsDefault.default).CONTEXTMENU) // Avoid context menu for long taps when drawing on mobile
        event.originalEvent.preventDefault();
        this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);
        var move = event.type === (0, _mapBrowserEventTypeJsDefault.default).POINTERMOVE;
        var pass = true;
        if (!this.freehand_ && this.lastDragTime_ && event.type === (0, _mapBrowserEventTypeJsDefault.default).POINTERDRAG) {
            var now = Date.now();
            if (now - this.lastDragTime_ >= this.dragVertexDelay_) {
                this.downPx_ = event.pixel;
                this.shouldHandle_ = !this.freehand_;
                move = true;
            } else this.lastDragTime_ = undefined;
            if (this.shouldHandle_ && this.downTimeout_ !== undefined) {
                clearTimeout(this.downTimeout_);
                this.downTimeout_ = undefined;
            }
        }
        if (this.freehand_ && event.type === (0, _mapBrowserEventTypeJsDefault.default).POINTERDRAG && this.sketchFeature_ !== null) {
            this.addToDrawing_(event.coordinate);
            pass = false;
        } else if (this.freehand_ && event.type === (0, _mapBrowserEventTypeJsDefault.default).POINTERDOWN) pass = false;
        else if (move && this.getPointerCount() < 2) {
            pass = event.type === (0, _mapBrowserEventTypeJsDefault.default).POINTERMOVE;
            if (pass && this.freehand_) {
                this.handlePointerMove_(event);
                if (this.shouldHandle_) // Avoid page scrolling when freehand drawing on mobile
                event.originalEvent.preventDefault();
            } else if (event.originalEvent.pointerType === "mouse" || event.type === (0, _mapBrowserEventTypeJsDefault.default).POINTERDRAG && this.downTimeout_ === undefined) this.handlePointerMove_(event);
        } else if (event.type === (0, _mapBrowserEventTypeJsDefault.default).DBLCLICK) pass = false;
        return _super.prototype.handleEvent.call(this, event) && pass;
    };
    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} If the event was consumed.
     */ Draw1.prototype.handleDownEvent = function(event) {
        this.shouldHandle_ = !this.freehand_;
        if (this.freehand_) {
            this.downPx_ = event.pixel;
            if (!this.finishCoordinate_) this.startDrawing_(event.coordinate);
            return true;
        } else if (this.condition_(event)) {
            this.lastDragTime_ = Date.now();
            this.downTimeout_ = setTimeout((function() {
                this.handlePointerMove_(new (0, _mapBrowserEventJsDefault.default)((0, _mapBrowserEventTypeJsDefault.default).POINTERMOVE, event.map, event.originalEvent, false, event.frameState));
            }).bind(this), this.dragVertexDelay_);
            this.downPx_ = event.pixel;
            return true;
        } else {
            this.lastDragTime_ = undefined;
            return false;
        }
    };
    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} If the event was consumed.
     */ Draw1.prototype.handleUpEvent = function(event) {
        var pass = true;
        if (this.getPointerCount() === 0) {
            if (this.downTimeout_) {
                clearTimeout(this.downTimeout_);
                this.downTimeout_ = undefined;
            }
            this.handlePointerMove_(event);
            if (this.shouldHandle_) {
                var startingToDraw = !this.finishCoordinate_;
                if (startingToDraw) this.startDrawing_(event.coordinate);
                if (!startingToDraw && this.freehand_) this.finishDrawing();
                else if (!this.freehand_ && (!startingToDraw || this.mode_ === Mode.POINT)) {
                    if (this.atFinish_(event.pixel)) {
                        if (this.finishCondition_(event)) this.finishDrawing();
                    } else this.addToDrawing_(event.coordinate);
                }
                pass = false;
            } else if (this.freehand_) this.abortDrawing();
        }
        if (!pass && this.stopClick_) event.preventDefault();
        return pass;
    };
    /**
     * Handle move events.
     * @param {import("../MapBrowserEvent.js").default} event A move event.
     * @private
     */ Draw1.prototype.handlePointerMove_ = function(event) {
        this.pointerType_ = event.originalEvent.pointerType;
        if (this.downPx_ && (!this.freehand_ && this.shouldHandle_ || this.freehand_ && !this.shouldHandle_)) {
            var downPx = this.downPx_;
            var clickPx = event.pixel;
            var dx = downPx[0] - clickPx[0];
            var dy = downPx[1] - clickPx[1];
            var squaredDistance = dx * dx + dy * dy;
            this.shouldHandle_ = this.freehand_ ? squaredDistance > this.squaredClickTolerance_ : squaredDistance <= this.squaredClickTolerance_;
            if (!this.shouldHandle_) return;
        }
        if (this.finishCoordinate_) this.modifyDrawing_(event.coordinate);
        else this.createOrUpdateSketchPoint_(event.coordinate.slice());
    };
    /**
     * Determine if an event is within the snapping tolerance of the start coord.
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @return {boolean} The event is within the snapping tolerance of the start.
     * @private
     */ Draw1.prototype.atFinish_ = function(pixel) {
        var at = false;
        if (this.sketchFeature_) {
            var potentiallyDone = false;
            var potentiallyFinishCoordinates = [
                this.finishCoordinate_
            ];
            var mode = this.mode_;
            if (mode === Mode.POINT) at = true;
            else if (mode === Mode.CIRCLE) at = this.sketchCoords_.length === 2;
            else if (mode === Mode.LINE_STRING) potentiallyDone = this.sketchCoords_.length > this.minPoints_;
            else if (mode === Mode.POLYGON) {
                var sketchCoords = this.sketchCoords_;
                potentiallyDone = sketchCoords[0].length > this.minPoints_;
                potentiallyFinishCoordinates = [
                    sketchCoords[0][0],
                    sketchCoords[0][sketchCoords[0].length - 2], 
                ];
            }
            if (potentiallyDone) {
                var map = this.getMap();
                for(var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++){
                    var finishCoordinate = potentiallyFinishCoordinates[i];
                    var finishPixel = map.getPixelFromCoordinate(finishCoordinate);
                    var dx = pixel[0] - finishPixel[0];
                    var dy = pixel[1] - finishPixel[1];
                    var snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;
                    at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;
                    if (at) {
                        this.finishCoordinate_ = finishCoordinate;
                        break;
                    }
                }
            }
        }
        return at;
    };
    /**
     * @param {import("../coordinate").Coordinate} coordinates Coordinate.
     * @private
     */ Draw1.prototype.createOrUpdateSketchPoint_ = function(coordinates) {
        if (!this.sketchPoint_) {
            this.sketchPoint_ = new (0, _featureJsDefault.default)(new (0, _pointJsDefault.default)(coordinates));
            this.updateSketchFeatures_();
        } else {
            var sketchPointGeom = this.sketchPoint_.getGeometry();
            sketchPointGeom.setCoordinates(coordinates);
        }
    };
    /**
     * @param {import("../geom/Polygon.js").default} geometry Polygon geometry.
     * @private
     */ Draw1.prototype.createOrUpdateCustomSketchLine_ = function(geometry) {
        if (!this.sketchLine_) this.sketchLine_ = new (0, _featureJsDefault.default)();
        var ring = geometry.getLinearRing(0);
        var sketchLineGeom = this.sketchLine_.getGeometry();
        if (!sketchLineGeom) {
            sketchLineGeom = new (0, _lineStringJsDefault.default)(ring.getFlatCoordinates(), ring.getLayout());
            this.sketchLine_.setGeometry(sketchLineGeom);
        } else {
            sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());
            sketchLineGeom.changed();
        }
    };
    /**
     * Start the drawing.
     * @param {import("../coordinate.js").Coordinate} start Start coordinate.
     * @private
     */ Draw1.prototype.startDrawing_ = function(start) {
        var projection = this.getMap().getView().getProjection();
        this.finishCoordinate_ = start;
        if (this.mode_ === Mode.POINT) this.sketchCoords_ = start.slice();
        else if (this.mode_ === Mode.POLYGON) {
            this.sketchCoords_ = [
                [
                    start.slice(),
                    start.slice()
                ]
            ];
            this.sketchLineCoords_ = this.sketchCoords_[0];
        } else this.sketchCoords_ = [
            start.slice(),
            start.slice()
        ];
        if (this.sketchLineCoords_) this.sketchLine_ = new (0, _featureJsDefault.default)(new (0, _lineStringJsDefault.default)(this.sketchLineCoords_));
        var geometry = this.geometryFunction_(this.sketchCoords_, undefined, projection);
        this.sketchFeature_ = new (0, _featureJsDefault.default)();
        if (this.geometryName_) this.sketchFeature_.setGeometryName(this.geometryName_);
        this.sketchFeature_.setGeometry(geometry);
        this.updateSketchFeatures_();
        this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));
    };
    /**
     * Modify the drawing.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @private
     */ Draw1.prototype.modifyDrawing_ = function(coordinate) {
        var map = this.getMap();
        var geometry = this.sketchFeature_.getGeometry();
        var projection = map.getView().getProjection();
        var coordinates, last;
        if (this.mode_ === Mode.POINT) last = this.sketchCoords_;
        else if (this.mode_ === Mode.POLYGON) {
            coordinates = /** @type {PolyCoordType} */ this.sketchCoords_[0];
            last = coordinates[coordinates.length - 1];
            if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) // snap to finish
            coordinate = this.finishCoordinate_.slice();
        } else {
            coordinates = this.sketchCoords_;
            last = coordinates[coordinates.length - 1];
        }
        last[0] = coordinate[0];
        last[1] = coordinate[1];
        this.geometryFunction_(this.sketchCoords_, geometry, projection);
        if (this.sketchPoint_) {
            var sketchPointGeom = this.sketchPoint_.getGeometry();
            sketchPointGeom.setCoordinates(coordinate);
        }
        if (geometry.getType() === (0, _geometryTypeJsDefault.default).POLYGON && this.mode_ !== Mode.POLYGON) this.createOrUpdateCustomSketchLine_(geometry);
        else if (this.sketchLineCoords_) {
            var sketchLineGeom = this.sketchLine_.getGeometry();
            sketchLineGeom.setCoordinates(this.sketchLineCoords_);
        }
        this.updateSketchFeatures_();
    };
    /**
     * Add a new coordinate to the drawing.
     * @param {!PointCoordType} coordinate Coordinate
     * @private
     */ Draw1.prototype.addToDrawing_ = function(coordinate) {
        var geometry = this.sketchFeature_.getGeometry();
        var projection = this.getMap().getView().getProjection();
        var done;
        var coordinates;
        var mode = this.mode_;
        if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {
            this.finishCoordinate_ = coordinate.slice();
            coordinates = this.sketchCoords_;
            if (coordinates.length >= this.maxPoints_) {
                if (this.freehand_) coordinates.pop();
                else done = true;
            }
            coordinates.push(coordinate.slice());
            this.geometryFunction_(coordinates, geometry, projection);
        } else if (mode === Mode.POLYGON) {
            coordinates = /** @type {PolyCoordType} */ this.sketchCoords_[0];
            if (coordinates.length >= this.maxPoints_) {
                if (this.freehand_) coordinates.pop();
                else done = true;
            }
            coordinates.push(coordinate.slice());
            if (done) this.finishCoordinate_ = coordinates[0];
            this.geometryFunction_(this.sketchCoords_, geometry, projection);
        }
        this.createOrUpdateSketchPoint_(coordinate.slice());
        this.updateSketchFeatures_();
        if (done) this.finishDrawing();
    };
    /**
     * Remove last point of the feature currently being drawn. Does not do anything when
     * drawing POINT or MULTI_POINT geometries.
     * @api
     */ Draw1.prototype.removeLastPoint = function() {
        if (!this.sketchFeature_) return;
        var geometry = this.sketchFeature_.getGeometry();
        var projection = this.getMap().getView().getProjection();
        var coordinates;
        var mode = this.mode_;
        if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {
            coordinates = this.sketchCoords_;
            coordinates.splice(-2, 1);
            if (coordinates.length >= 2) {
                this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();
                var finishCoordinate = this.finishCoordinate_.slice();
                coordinates[coordinates.length - 1] = finishCoordinate;
                this.createOrUpdateSketchPoint_(finishCoordinate);
            }
            this.geometryFunction_(coordinates, geometry, projection);
            if (geometry.getType() === (0, _geometryTypeJsDefault.default).POLYGON && this.sketchLine_) this.createOrUpdateCustomSketchLine_(geometry);
        } else if (mode === Mode.POLYGON) {
            coordinates = /** @type {PolyCoordType} */ this.sketchCoords_[0];
            coordinates.splice(-2, 1);
            var sketchLineGeom = this.sketchLine_.getGeometry();
            if (coordinates.length >= 2) {
                var finishCoordinate = coordinates[coordinates.length - 2].slice();
                coordinates[coordinates.length - 1] = finishCoordinate;
                this.createOrUpdateSketchPoint_(finishCoordinate);
            }
            sketchLineGeom.setCoordinates(coordinates);
            this.geometryFunction_(this.sketchCoords_, geometry, projection);
        }
        if (coordinates.length === 1) this.abortDrawing();
        this.updateSketchFeatures_();
    };
    /**
     * Stop drawing and add the sketch feature to the target layer.
     * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is
     * dispatched before inserting the feature.
     * @api
     */ Draw1.prototype.finishDrawing = function() {
        var sketchFeature = this.abortDrawing_();
        if (!sketchFeature) return;
        var coordinates = this.sketchCoords_;
        var geometry = sketchFeature.getGeometry();
        var projection = this.getMap().getView().getProjection();
        if (this.mode_ === Mode.LINE_STRING) {
            // remove the redundant last point
            coordinates.pop();
            this.geometryFunction_(coordinates, geometry, projection);
        } else if (this.mode_ === Mode.POLYGON) {
            // remove the redundant last point in ring
            /** @type {PolyCoordType} */ coordinates[0].pop();
            this.geometryFunction_(coordinates, geometry, projection);
            coordinates = geometry.getCoordinates();
        }
        // cast multi-part geometries
        if (this.type_ === (0, _geometryTypeJsDefault.default).MULTI_POINT) sketchFeature.setGeometry(new (0, _multiPointJsDefault.default)([
            coordinates
        ]));
        else if (this.type_ === (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING) sketchFeature.setGeometry(new (0, _multiLineStringJsDefault.default)([
            coordinates
        ]));
        else if (this.type_ === (0, _geometryTypeJsDefault.default).MULTI_POLYGON) sketchFeature.setGeometry(new (0, _multiPolygonJsDefault.default)([
            coordinates
        ]));
        // First dispatch event to allow full set up of feature
        this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));
        // Then insert feature
        if (this.features_) this.features_.push(sketchFeature);
        if (this.source_) this.source_.addFeature(sketchFeature);
    };
    /**
     * Stop drawing without adding the sketch feature to the target layer.
     * @return {Feature<import("../geom/SimpleGeometry.js").default>|null} The sketch feature (or null if none).
     * @private
     */ Draw1.prototype.abortDrawing_ = function() {
        this.finishCoordinate_ = null;
        var sketchFeature = this.sketchFeature_;
        this.sketchFeature_ = null;
        this.sketchPoint_ = null;
        this.sketchLine_ = null;
        this.overlay_.getSource().clear(true);
        return sketchFeature;
    };
    /**
     * Stop drawing without adding the sketch feature to the target layer.
     * @api
     */ Draw1.prototype.abortDrawing = function() {
        var sketchFeature = this.abortDrawing_();
        if (sketchFeature) this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));
    };
    /**
     * Append coordinates to the end of the geometry that is currently being drawn.
     * This can be used when drawing LineStrings or Polygons. Coordinates will
     * either be appended to the current LineString or the outer ring of the current
     * Polygon. If no geometry is being drawn, a new one will be created.
     * @param {!LineCoordType} coordinates Linear coordinates to be appended to
     * the coordinate array.
     * @api
     */ Draw1.prototype.appendCoordinates = function(coordinates) {
        var mode = this.mode_;
        var newDrawing = !this.sketchFeature_;
        if (newDrawing) this.startDrawing_(coordinates[0]);
        /** @type {LineCoordType} */ var sketchCoords;
        if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) sketchCoords = this.sketchCoords_;
        else if (mode === Mode.POLYGON) sketchCoords = this.sketchCoords_ && this.sketchCoords_.length ? /** @type {PolyCoordType} */ this.sketchCoords_[0] : [];
        else return;
        if (newDrawing) sketchCoords.shift();
        // Remove last coordinate from sketch drawing (this coordinate follows cursor position)
        sketchCoords.pop();
        // Append coordinate list
        for(var i = 0; i < coordinates.length; i++)this.addToDrawing_(coordinates[i]);
        var ending = coordinates[coordinates.length - 1];
        // Duplicate last coordinate for sketch drawing (cursor position)
        this.addToDrawing_(ending);
        this.modifyDrawing_(ending);
    };
    /**
     * Initiate draw mode by starting from an existing geometry which will
     * receive new additional points. This only works on features with
     * `LineString` geometries, where the interaction will extend lines by adding
     * points to the end of the coordinates array.
     * This will change the original feature, instead of drawing a copy.
     *
     * The function will dispatch a `drawstart` event.
     *
     * @param {!Feature<LineString>} feature Feature to be extended.
     * @api
     */ Draw1.prototype.extend = function(feature) {
        var geometry = feature.getGeometry();
        var lineString = geometry;
        this.sketchFeature_ = feature;
        this.sketchCoords_ = lineString.getCoordinates();
        var last = this.sketchCoords_[this.sketchCoords_.length - 1];
        this.finishCoordinate_ = last.slice();
        this.sketchCoords_.push(last.slice());
        this.sketchPoint_ = new (0, _featureJsDefault.default)(new (0, _pointJsDefault.default)(last));
        this.updateSketchFeatures_();
        this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));
    };
    /**
     * Redraw the sketch features.
     * @private
     */ Draw1.prototype.updateSketchFeatures_ = function() {
        var sketchFeatures = [];
        if (this.sketchFeature_) sketchFeatures.push(this.sketchFeature_);
        if (this.sketchLine_) sketchFeatures.push(this.sketchLine_);
        if (this.sketchPoint_) sketchFeatures.push(this.sketchPoint_);
        var overlaySource = this.overlay_.getSource();
        overlaySource.clear(true);
        overlaySource.addFeatures(sketchFeatures);
    };
    /**
     * @private
     */ Draw1.prototype.updateState_ = function() {
        var map = this.getMap();
        var active = this.getActive();
        if (!map || !active) this.abortDrawing();
        this.overlay_.setMap(active ? map : null);
    };
    return Draw1;
}((0, _pointerJsDefault.default));
/**
 * @return {import("../style/Style.js").StyleFunction} Styles.
 */ function getDefaultStyleFunction() {
    var styles = (0, _styleJs.createEditingStyle)();
    return function(feature, resolution) {
        return styles[feature.getGeometry().getType()];
    };
}
function createRegularPolygon(opt_sides, opt_angle) {
    return function(coordinates, opt_geometry, projection) {
        var center = (0, _projJs.fromUserCoordinate)(/** @type {LineCoordType} */ coordinates[0], projection);
        var end = (0, _projJs.fromUserCoordinate)(/** @type {LineCoordType} */ coordinates[coordinates.length - 1], projection);
        var radius = Math.sqrt((0, _coordinateJs.squaredDistance)(center, end));
        var geometry = opt_geometry ? opt_geometry : (0, _polygonJs.fromCircle)(new (0, _circleJsDefault.default)(center), opt_sides);
        var angle = opt_angle;
        if (!opt_angle && opt_angle !== 0) {
            var x = end[0] - center[0];
            var y = end[1] - center[1];
            angle = Math.atan2(y, x);
        }
        (0, _polygonJs.makeRegular)(geometry, center, radius, angle);
        var userProjection = (0, _projJs.getUserProjection)();
        if (userProjection) geometry.transform(projection, userProjection);
        return geometry;
    };
}
function createBox() {
    return function(coordinates, opt_geometry, projection) {
        var extent = (0, _extentJs.boundingExtent)(/** @type {LineCoordType} */ [
            coordinates[0],
            coordinates[coordinates.length - 1], 
        ].map(function(coordinate) {
            return (0, _projJs.fromUserCoordinate)(coordinate, projection);
        }));
        var boxCoordinates = [
            [
                (0, _extentJs.getBottomLeft)(extent),
                (0, _extentJs.getBottomRight)(extent),
                (0, _extentJs.getTopRight)(extent),
                (0, _extentJs.getTopLeft)(extent),
                (0, _extentJs.getBottomLeft)(extent), 
            ], 
        ];
        var geometry = opt_geometry;
        if (geometry) geometry.setCoordinates(boxCoordinates);
        else geometry = new (0, _polygonJsDefault.default)(boxCoordinates);
        var userProjection = (0, _projJs.getUserProjection)();
        if (userProjection) geometry.transform(projection, userProjection);
        return geometry;
    };
}
/**
 * Get the drawing mode.  The mode for multi-part geometries is the same as for
 * their single-part cousins.
 * @param {import("../geom/GeometryType.js").default} type Geometry type.
 * @return {Mode} Drawing mode.
 */ function getMode(type) {
    switch(type){
        case (0, _geometryTypeJsDefault.default).POINT:
        case (0, _geometryTypeJsDefault.default).MULTI_POINT:
            return Mode.POINT;
        case (0, _geometryTypeJsDefault.default).LINE_STRING:
        case (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING:
            return Mode.LINE_STRING;
        case (0, _geometryTypeJsDefault.default).POLYGON:
        case (0, _geometryTypeJsDefault.default).MULTI_POLYGON:
            return Mode.POLYGON;
        case (0, _geometryTypeJsDefault.default).CIRCLE:
            return Mode.CIRCLE;
        default:
            throw new Error("Invalid type: " + type);
    }
}
exports.default = Draw;

},{"../geom/Circle.js":"7Crtc","../events/Event.js":"hwXQP","../events/EventType.js":"hrQJ6","../Feature.js":"liabO","../geom/GeometryType.js":"j6daa","./Property.js":"lHt12","../geom/LineString.js":"jLUiq","../MapBrowserEvent.js":"32Can","../MapBrowserEventType.js":"fB9ae","../geom/MultiLineString.js":"030lt","../geom/MultiPoint.js":"k4LcJ","../geom/MultiPolygon.js":"2XIqx","../geom/Point.js":"hx2Ar","./Pointer.js":"1GIxf","../geom/Polygon.js":"cJuQF","../layer/Vector.js":"iTrAy","../source/Vector.js":"9w7Fr","../functions.js":"iqv8I","../events/condition.js":"iQTYY","../extent.js":"6YrVc","../style/Style.js":"fW7vC","../proj.js":"SznqC","../coordinate.js":"85Vu7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Crtc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/Circle
 */ var _geometryTypeJs = require("./GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _simpleGeometryJs = require("./SimpleGeometry.js");
var _simpleGeometryJsDefault = parcelHelpers.interopDefault(_simpleGeometryJs);
var _extentJs = require("../extent.js");
var _deflateJs = require("./flat/deflate.js");
var _transformJs = require("./flat/transform.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Circle geometry.
 *
 * @api
 */ var Circle = /** @class */ function(_super) {
    __extends(Circle1, _super);
    /**
     * @param {!import("../coordinate.js").Coordinate} center Center.
     *     For internal use, flat coordinates in combination with `opt_layout` and no
     *     `opt_radius` are also accepted.
     * @param {number} [opt_radius] Radius.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     */ function Circle1(center, opt_radius, opt_layout) {
        var _this = _super.call(this) || this;
        if (opt_layout !== undefined && opt_radius === undefined) _this.setFlatCoordinates(opt_layout, center);
        else {
            var radius = opt_radius ? opt_radius : 0;
            _this.setCenterAndRadius(center, radius, opt_layout);
        }
        return _this;
    }
    /**
     * Make a complete copy of the geometry.
     * @return {!Circle} Clone.
     * @api
     */ Circle1.prototype.clone = function() {
        var circle = new Circle1(this.flatCoordinates.slice(), undefined, this.layout);
        circle.applyProperties(this);
        return circle;
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */ Circle1.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
        var flatCoordinates = this.flatCoordinates;
        var dx = x - flatCoordinates[0];
        var dy = y - flatCoordinates[1];
        var squaredDistance = dx * dx + dy * dy;
        if (squaredDistance < minSquaredDistance) {
            if (squaredDistance === 0) for(var i = 0; i < this.stride; ++i)closestPoint[i] = flatCoordinates[i];
            else {
                var delta = this.getRadius() / Math.sqrt(squaredDistance);
                closestPoint[0] = flatCoordinates[0] + delta * dx;
                closestPoint[1] = flatCoordinates[1] + delta * dy;
                for(var i = 2; i < this.stride; ++i)closestPoint[i] = flatCoordinates[i];
            }
            closestPoint.length = this.stride;
            return squaredDistance;
        } else return minSquaredDistance;
    };
    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */ Circle1.prototype.containsXY = function(x, y) {
        var flatCoordinates = this.flatCoordinates;
        var dx = x - flatCoordinates[0];
        var dy = y - flatCoordinates[1];
        return dx * dx + dy * dy <= this.getRadiusSquared_();
    };
    /**
     * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
     * @return {import("../coordinate.js").Coordinate} Center.
     * @api
     */ Circle1.prototype.getCenter = function() {
        return this.flatCoordinates.slice(0, this.stride);
    };
    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */ Circle1.prototype.computeExtent = function(extent) {
        var flatCoordinates = this.flatCoordinates;
        var radius = flatCoordinates[this.stride] - flatCoordinates[0];
        return (0, _extentJs.createOrUpdate)(flatCoordinates[0] - radius, flatCoordinates[1] - radius, flatCoordinates[0] + radius, flatCoordinates[1] + radius, extent);
    };
    /**
     * Return the radius of the circle.
     * @return {number} Radius.
     * @api
     */ Circle1.prototype.getRadius = function() {
        return Math.sqrt(this.getRadiusSquared_());
    };
    /**
     * @private
     * @return {number} Radius squared.
     */ Circle1.prototype.getRadiusSquared_ = function() {
        var dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];
        var dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];
        return dx * dx + dy * dy;
    };
    /**
     * Get the type of this geometry.
     * @return {import("./GeometryType.js").default} Geometry type.
     * @api
     */ Circle1.prototype.getType = function() {
        return (0, _geometryTypeJsDefault.default).CIRCLE;
    };
    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */ Circle1.prototype.intersectsExtent = function(extent) {
        var circleExtent = this.getExtent();
        if ((0, _extentJs.intersects)(extent, circleExtent)) {
            var center = this.getCenter();
            if (extent[0] <= center[0] && extent[2] >= center[0]) return true;
            if (extent[1] <= center[1] && extent[3] >= center[1]) return true;
            return (0, _extentJs.forEachCorner)(extent, this.intersectsCoordinate.bind(this));
        }
        return false;
    };
    /**
     * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
     * @param {import("../coordinate.js").Coordinate} center Center.
     * @api
     */ Circle1.prototype.setCenter = function(center) {
        var stride = this.stride;
        var radius = this.flatCoordinates[stride] - this.flatCoordinates[0];
        var flatCoordinates = center.slice();
        flatCoordinates[stride] = flatCoordinates[0] + radius;
        for(var i = 1; i < stride; ++i)flatCoordinates[stride + i] = center[i];
        this.setFlatCoordinates(this.layout, flatCoordinates);
        this.changed();
    };
    /**
     * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as
     * number) of the circle.
     * @param {!import("../coordinate.js").Coordinate} center Center.
     * @param {number} radius Radius.
     * @param {import("./GeometryLayout.js").default} [opt_layout] Layout.
     * @api
     */ Circle1.prototype.setCenterAndRadius = function(center, radius, opt_layout) {
        this.setLayout(opt_layout, center, 0);
        if (!this.flatCoordinates) this.flatCoordinates = [];
        /** @type {Array<number>} */ var flatCoordinates = this.flatCoordinates;
        var offset = (0, _deflateJs.deflateCoordinate)(flatCoordinates, 0, center, this.stride);
        flatCoordinates[offset++] = flatCoordinates[0] + radius;
        for(var i = 1, ii = this.stride; i < ii; ++i)flatCoordinates[offset++] = flatCoordinates[i];
        flatCoordinates.length = offset;
        this.changed();
    };
    Circle1.prototype.getCoordinates = function() {
        return null;
    };
    Circle1.prototype.setCoordinates = function(coordinates, opt_layout) {};
    /**
     * Set the radius of the circle. The radius is in the units of the projection.
     * @param {number} radius Radius.
     * @api
     */ Circle1.prototype.setRadius = function(radius) {
        this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;
        this.changed();
    };
    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @param {number} angle Rotation angle in counter-clockwise radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     */ Circle1.prototype.rotate = function(angle, anchor) {
        var center = this.getCenter();
        var stride = this.getStride();
        this.setCenter((0, _transformJs.rotate)(center, 0, center.length, stride, angle, anchor, center));
        this.changed();
    };
    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     */ Circle1.prototype.translate = function(deltaX, deltaY) {
        var center = this.getCenter();
        var stride = this.getStride();
        this.setCenter((0, _transformJs.translate)(center, 0, center.length, stride, deltaX, deltaY, center));
        this.changed();
    };
    return Circle1;
}((0, _simpleGeometryJsDefault.default));
/**
 * Transform each coordinate of the circle from one coordinate reference system
 * to another. The geometry is modified in place.
 * If you do not want the geometry modified in place, first clone() it and
 * then use this function on the clone.
 *
 * Internally a circle is currently represented by two points: the center of
 * the circle `[cx, cy]`, and the point to the right of the circle
 * `[cx + r, cy]`. This `transform` function just transforms these two points.
 * So the resulting geometry is also a circle, and that circle does not
 * correspond to the shape that would be obtained by transforming every point
 * of the original circle.
 *
 * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
 *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
 * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
 *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
 * @return {Circle} This geometry.  Note that original geometry is
 *     modified in place.
 * @function
 * @api
 */ Circle.prototype.transform;
exports.default = Circle;

},{"./GeometryType.js":"j6daa","./SimpleGeometry.js":"hLwk3","../extent.js":"6YrVc","./flat/deflate.js":"3TE5l","./flat/transform.js":"cDA2L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iTrAy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/layer/Vector
 */ var _baseVectorJs = require("./BaseVector.js");
var _baseVectorJsDefault = parcelHelpers.interopDefault(_baseVectorJs);
var _vectorLayerJs = require("../renderer/canvas/VectorLayer.js");
var _vectorLayerJsDefault = parcelHelpers.interopDefault(_vectorLayerJs);
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Vector data is rendered client-side, as vectors. This layer type provides most accurate rendering
 * even during animations. Points and labels stay upright on rotated views. For very large
 * amounts of vector data, performance may suffer during pan and zoom animations. In this case,
 * try {@link module:ol/layer/VectorImage~VectorImageLayer}.
 *
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @template {import("../source/Vector.js").default} VectorSourceType
 * @extends {BaseVectorLayer<VectorSourceType, CanvasVectorLayerRenderer>}
 * @api
 */ var VectorLayer = /** @class */ function(_super) {
    __extends(VectorLayer1, _super);
    /**
     * @param {import("./BaseVector.js").Options<VectorSourceType>} [opt_options] Options.
     */ function VectorLayer1(opt_options) {
        return _super.call(this, opt_options) || this;
    }
    VectorLayer1.prototype.createRenderer = function() {
        return new (0, _vectorLayerJsDefault.default)(this);
    };
    return VectorLayer1;
}((0, _baseVectorJsDefault.default));
exports.default = VectorLayer;

},{"./BaseVector.js":"2tWeN","../renderer/canvas/VectorLayer.js":"kTTmt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2tWeN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/layer/BaseVector
 */ var _layerJs = require("./Layer.js");
var _layerJsDefault = parcelHelpers.interopDefault(_layerJs);
var _rbush = require("rbush");
var _rbushDefault = parcelHelpers.interopDefault(_rbush);
var _objJs = require("../obj.js");
var _styleJs = require("../style/Style.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @template {import("../source/Vector.js").default|import("../source/VectorTile.js").default} VectorSourceType
 * @typedef {Object} Options
 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
 * method was used.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
 * visible.
 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
 * be visible.
 * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
 * features before rendering. By default features are drawn in the order that they are created. Use
 * `null` to avoid the sort, but get an undefined draw order.
 * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
 * renderer when getting features from the vector source for the rendering or hit-detection.
 * Recommended value: the size of the largest symbol, line width or label.
 * @property {VectorSourceType} [source] Source.
 * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
 * this layer in its layers collection, and the layer will be rendered on top. This is useful for
 * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
 * use {@link import("../PluggableMap.js").default#addLayer map.addLayer()}.
 * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
 * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
 * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
 * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
 * higher priority.
 *
 * As an optimization decluttered features from layers with the same `className` are rendered above
 * the fill and stroke styles of all of those layers regardless of z-index.  To opt out of this
 * behavior and place declutterd features with their own layer configure the layer with a `className`
 * other than `ol-layer`.
 * @property {import("../style/Style.js").StyleLike|null} [style] Layer style. When set to `null`, only
 * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style
 * which will be used if this is not set.
 * @property {import("./Base.js").BackgroundColor} [background] Background color for the layer. If not specified, no background
 * will be rendered.
 * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will
 * be recreated during animations. This means that no vectors will be shown clipped, but the
 * setting will have a performance impact for large amounts of vector data. When set to `false`,
 * batches will be recreated when no animation is active.
 * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will
 * be recreated during interactions. See also `updateWhileAnimating`.
 * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
 */ /**
 * @enum {string}
 * @private
 */ var Property = {
    RENDER_ORDER: "renderOrder"
};
/**
 * @classdesc
 * Vector data that is rendered client-side.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @template {import("../source/Vector.js").default|import("../source/VectorTile.js").default} VectorSourceType
 * @template {import("../renderer/canvas/VectorLayer.js").default|import("../renderer/canvas/VectorTileLayer.js").default|import("../renderer/canvas/VectorImageLayer.js").default|import("../renderer/webgl/PointsLayer.js").default} RendererType
 * @extends {Layer<VectorSourceType, RendererType>}
 * @api
 */ var BaseVectorLayer = /** @class */ function(_super) {
    __extends(BaseVectorLayer1, _super);
    /**
     * @param {Options<VectorSourceType>} [opt_options] Options.
     */ function BaseVectorLayer1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        var baseOptions = (0, _objJs.assign)({}, options);
        delete baseOptions.style;
        delete baseOptions.renderBuffer;
        delete baseOptions.updateWhileAnimating;
        delete baseOptions.updateWhileInteracting;
        _this = _super.call(this, baseOptions) || this;
        /**
         * @private
         * @type {boolean}
         */ _this.declutter_ = options.declutter !== undefined ? options.declutter : false;
        /**
         * @type {number}
         * @private
         */ _this.renderBuffer_ = options.renderBuffer !== undefined ? options.renderBuffer : 100;
        /**
         * User provided style.
         * @type {import("../style/Style.js").StyleLike}
         * @private
         */ _this.style_ = null;
        /**
         * Style function for use within the library.
         * @type {import("../style/Style.js").StyleFunction|undefined}
         * @private
         */ _this.styleFunction_ = undefined;
        _this.setStyle(options.style);
        /**
         * @type {boolean}
         * @private
         */ _this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ? options.updateWhileAnimating : false;
        /**
         * @type {boolean}
         * @private
         */ _this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ? options.updateWhileInteracting : false;
        return _this;
    }
    /**
     * @return {boolean} Declutter.
     */ BaseVectorLayer1.prototype.getDeclutter = function() {
        return this.declutter_;
    };
    /**
     * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise
     * that resolves with an array of features. The array will either contain the topmost feature
     * when a hit was detected, or it will be empty.
     *
     * The hit detection algorithm used for this method is optimized for performance, but is less
     * accurate than the one used in {@link import("../PluggableMap.js").default#getFeaturesAtPixel}: Text
     * is not considered, and icons are only represented by their bounding box instead of the exact
     * image.
     *
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with an array of features.
     * @api
     */ BaseVectorLayer1.prototype.getFeatures = function(pixel) {
        return _super.prototype.getFeatures.call(this, pixel);
    };
    /**
     * @return {number|undefined} Render buffer.
     */ BaseVectorLayer1.prototype.getRenderBuffer = function() {
        return this.renderBuffer_;
    };
    /**
     * @return {function(import("../Feature.js").default, import("../Feature.js").default): number|null|undefined} Render
     *     order.
     */ BaseVectorLayer1.prototype.getRenderOrder = function() {
        return /** @type {import("../render.js").OrderFunction|null|undefined} */ this.get(Property.RENDER_ORDER);
    };
    /**
     * Get the style for features.  This returns whatever was passed to the `style`
     * option at construction or to the `setStyle` method.
     * @return {import("../style/Style.js").StyleLike|null|undefined} Layer style.
     * @api
     */ BaseVectorLayer1.prototype.getStyle = function() {
        return this.style_;
    };
    /**
     * Get the style function.
     * @return {import("../style/Style.js").StyleFunction|undefined} Layer style function.
     * @api
     */ BaseVectorLayer1.prototype.getStyleFunction = function() {
        return this.styleFunction_;
    };
    /**
     * @return {boolean} Whether the rendered layer should be updated while
     *     animating.
     */ BaseVectorLayer1.prototype.getUpdateWhileAnimating = function() {
        return this.updateWhileAnimating_;
    };
    /**
     * @return {boolean} Whether the rendered layer should be updated while
     *     interacting.
     */ BaseVectorLayer1.prototype.getUpdateWhileInteracting = function() {
        return this.updateWhileInteracting_;
    };
    /**
     * Render declutter items for this layer
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     */ BaseVectorLayer1.prototype.renderDeclutter = function(frameState) {
        if (!frameState.declutterTree) frameState.declutterTree = new (0, _rbushDefault.default)(9);
        /** @type {*} */ this.getRenderer().renderDeclutter(frameState);
    };
    /**
     * @param {import("../render.js").OrderFunction|null|undefined} renderOrder
     *     Render order.
     */ BaseVectorLayer1.prototype.setRenderOrder = function(renderOrder) {
        this.set(Property.RENDER_ORDER, renderOrder);
    };
    /**
     * Set the style for features.  This can be a single style object, an array
     * of styles, or a function that takes a feature and resolution and returns
     * an array of styles. If set to `null`, the layer has no style (a `null` style),
     * so only features that have their own styles will be rendered in the layer. Call
     * `setStyle()` without arguments to reset to the default style. See
     * {@link module:ol/style/Style~Style} for information on the default style.
     * @param {import("../style/Style.js").StyleLike|null} [opt_style] Layer style.
     * @api
     */ BaseVectorLayer1.prototype.setStyle = function(opt_style) {
        this.style_ = opt_style !== undefined ? opt_style : (0, _styleJs.createDefaultStyle);
        this.styleFunction_ = opt_style === null ? undefined : (0, _styleJs.toFunction)(this.style_);
        this.changed();
    };
    return BaseVectorLayer1;
}((0, _layerJsDefault.default));
exports.default = BaseVectorLayer;

},{"./Layer.js":"8J9Kf","rbush":"k2VZu","../obj.js":"3ssAG","../style/Style.js":"fW7vC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k2VZu":[function(require,module,exports) {
!function(t, i) {
    module.exports = i();
}(this, function() {
    "use strict";
    function t1(t2, r2, e2, a2, h2) {
        !function t(n, r, e, a, h) {
            for(; a > e;){
                if (a - e > 600) {
                    var o = a - e + 1, s = r - e + 1, l = Math.log(o), f = .5 * Math.exp(2 * l / 3), u = .5 * Math.sqrt(l * f * (o - f) / o) * (s - o / 2 < 0 ? -1 : 1), m = Math.max(e, Math.floor(r - s * f / o + u)), c = Math.min(a, Math.floor(r + (o - s) * f / o + u));
                    t(n, r, m, c, h);
                }
                var p = n[r], d = e, x = a;
                for(i1(n, e, r), h(n[a], p) > 0 && i1(n, e, a); d < x;){
                    for(i1(n, d, x), d++, x--; h(n[d], p) < 0;)d++;
                    for(; h(n[x], p) > 0;)x--;
                }
                0 === h(n[e], p) ? i1(n, e, x) : i1(n, ++x, a), x <= r && (e = x + 1), r <= x && (a = x - 1);
            }
        }(t2, r2, e2 || 0, a2 || t2.length - 1, h2 || n1);
    }
    function i1(t, i, n) {
        var r = t[i];
        t[i] = t[n], t[n] = r;
    }
    function n1(t, i) {
        return t < i ? -1 : t > i ? 1 : 0;
    }
    var r1 = function(t) {
        void 0 === t && (t = 9), this._maxEntries = Math.max(4, t), this._minEntries = Math.max(2, Math.ceil(.4 * this._maxEntries)), this.clear();
    };
    function e1(t, i, n) {
        if (!n) return i.indexOf(t);
        for(var r = 0; r < i.length; r++)if (n(t, i[r])) return r;
        return -1;
    }
    function a1(t, i) {
        h1(t, 0, t.children.length, i, t);
    }
    function h1(t, i, n, r, e) {
        e || (e = p1(null)), e.minX = 1 / 0, e.minY = 1 / 0, e.maxX = -1 / 0, e.maxY = -1 / 0;
        for(var a = i; a < n; a++){
            var h = t.children[a];
            o1(e, t.leaf ? r(h) : h);
        }
        return e;
    }
    function o1(t, i) {
        return t.minX = Math.min(t.minX, i.minX), t.minY = Math.min(t.minY, i.minY), t.maxX = Math.max(t.maxX, i.maxX), t.maxY = Math.max(t.maxY, i.maxY), t;
    }
    function s1(t, i) {
        return t.minX - i.minX;
    }
    function l1(t, i) {
        return t.minY - i.minY;
    }
    function f1(t) {
        return (t.maxX - t.minX) * (t.maxY - t.minY);
    }
    function u1(t) {
        return t.maxX - t.minX + (t.maxY - t.minY);
    }
    function m1(t, i) {
        return t.minX <= i.minX && t.minY <= i.minY && i.maxX <= t.maxX && i.maxY <= t.maxY;
    }
    function c1(t, i) {
        return i.minX <= t.maxX && i.minY <= t.maxY && i.maxX >= t.minX && i.maxY >= t.minY;
    }
    function p1(t) {
        return {
            children: t,
            height: 1,
            leaf: !0,
            minX: 1 / 0,
            minY: 1 / 0,
            maxX: -1 / 0,
            maxY: -1 / 0
        };
    }
    function d1(i, n, r, e, a) {
        for(var h = [
            n,
            r
        ]; h.length;)if (!((r = h.pop()) - (n = h.pop()) <= e)) {
            var o = n + Math.ceil((r - n) / e / 2) * e;
            t1(i, o, n, r, a), h.push(n, o, o, r);
        }
    }
    return r1.prototype.all = function() {
        return this._all(this.data, []);
    }, r1.prototype.search = function(t) {
        var i = this.data, n = [];
        if (!c1(t, i)) return n;
        for(var r = this.toBBox, e = []; i;){
            for(var a = 0; a < i.children.length; a++){
                var h = i.children[a], o = i.leaf ? r(h) : h;
                c1(t, o) && (i.leaf ? n.push(h) : m1(t, o) ? this._all(h, n) : e.push(h));
            }
            i = e.pop();
        }
        return n;
    }, r1.prototype.collides = function(t) {
        var i = this.data;
        if (!c1(t, i)) return !1;
        for(var n = []; i;){
            for(var r = 0; r < i.children.length; r++){
                var e = i.children[r], a = i.leaf ? this.toBBox(e) : e;
                if (c1(t, a)) {
                    if (i.leaf || m1(t, a)) return !0;
                    n.push(e);
                }
            }
            i = n.pop();
        }
        return !1;
    }, r1.prototype.load = function(t) {
        if (!t || !t.length) return this;
        if (t.length < this._minEntries) {
            for(var i = 0; i < t.length; i++)this.insert(t[i]);
            return this;
        }
        var n = this._build(t.slice(), 0, t.length - 1, 0);
        if (this.data.children.length) {
            if (this.data.height === n.height) this._splitRoot(this.data, n);
            else {
                if (this.data.height < n.height) {
                    var r = this.data;
                    this.data = n, n = r;
                }
                this._insert(n, this.data.height - n.height - 1, !0);
            }
        } else this.data = n;
        return this;
    }, r1.prototype.insert = function(t) {
        return t && this._insert(t, this.data.height - 1), this;
    }, r1.prototype.clear = function() {
        return this.data = p1([]), this;
    }, r1.prototype.remove = function(t, i) {
        if (!t) return this;
        for(var n, r, a, h = this.data, o = this.toBBox(t), s = [], l = []; h || s.length;){
            if (h || (h = s.pop(), r = s[s.length - 1], n = l.pop(), a = !0), h.leaf) {
                var f = e1(t, h.children, i);
                if (-1 !== f) return h.children.splice(f, 1), s.push(h), this._condense(s), this;
            }
            a || h.leaf || !m1(h, o) ? r ? (n++, h = r.children[n], a = !1) : h = null : (s.push(h), l.push(n), n = 0, r = h, h = h.children[0]);
        }
        return this;
    }, r1.prototype.toBBox = function(t) {
        return t;
    }, r1.prototype.compareMinX = function(t, i) {
        return t.minX - i.minX;
    }, r1.prototype.compareMinY = function(t, i) {
        return t.minY - i.minY;
    }, r1.prototype.toJSON = function() {
        return this.data;
    }, r1.prototype.fromJSON = function(t) {
        return this.data = t, this;
    }, r1.prototype._all = function(t, i) {
        for(var n = []; t;)t.leaf ? i.push.apply(i, t.children) : n.push.apply(n, t.children), t = n.pop();
        return i;
    }, r1.prototype._build = function(t, i, n, r) {
        var e, h = n - i + 1, o = this._maxEntries;
        if (h <= o) return a1(e = p1(t.slice(i, n + 1)), this.toBBox), e;
        r || (r = Math.ceil(Math.log(h) / Math.log(o)), o = Math.ceil(h / Math.pow(o, r - 1))), (e = p1([])).leaf = !1, e.height = r;
        var s = Math.ceil(h / o), l = s * Math.ceil(Math.sqrt(o));
        d1(t, i, n, l, this.compareMinX);
        for(var f = i; f <= n; f += l){
            var u = Math.min(f + l - 1, n);
            d1(t, f, u, s, this.compareMinY);
            for(var m = f; m <= u; m += s){
                var c = Math.min(m + s - 1, u);
                e.children.push(this._build(t, m, c, r - 1));
            }
        }
        return a1(e, this.toBBox), e;
    }, r1.prototype._chooseSubtree = function(t, i, n, r) {
        for(; r.push(i), !i.leaf && r.length - 1 !== n;){
            for(var e = 1 / 0, a = 1 / 0, h = void 0, o = 0; o < i.children.length; o++){
                var s = i.children[o], l = f1(s), u = (m = t, c = s, (Math.max(c.maxX, m.maxX) - Math.min(c.minX, m.minX)) * (Math.max(c.maxY, m.maxY) - Math.min(c.minY, m.minY)) - l);
                u < a ? (a = u, e = l < e ? l : e, h = s) : u === a && l < e && (e = l, h = s);
            }
            i = h || i.children[0];
        }
        var m, c;
        return i;
    }, r1.prototype._insert = function(t, i, n) {
        var r = n ? t : this.toBBox(t), e = [], a = this._chooseSubtree(r, this.data, i, e);
        for(a.children.push(t), o1(a, r); i >= 0 && e[i].children.length > this._maxEntries;)this._split(e, i), i--;
        this._adjustParentBBoxes(r, e, i);
    }, r1.prototype._split = function(t, i) {
        var n = t[i], r = n.children.length, e = this._minEntries;
        this._chooseSplitAxis(n, e, r);
        var h = this._chooseSplitIndex(n, e, r), o = p1(n.children.splice(h, n.children.length - h));
        o.height = n.height, o.leaf = n.leaf, a1(n, this.toBBox), a1(o, this.toBBox), i ? t[i - 1].children.push(o) : this._splitRoot(n, o);
    }, r1.prototype._splitRoot = function(t, i) {
        this.data = p1([
            t,
            i
        ]), this.data.height = t.height + 1, this.data.leaf = !1, a1(this.data, this.toBBox);
    }, r1.prototype._chooseSplitIndex = function(t, i, n) {
        for(var r, e, a, o, s, l, u, m = 1 / 0, c = 1 / 0, p = i; p <= n - i; p++){
            var d = h1(t, 0, p, this.toBBox), x = h1(t, p, n, this.toBBox), v = (e = d, a = x, o = void 0, s = void 0, l = void 0, u = void 0, o = Math.max(e.minX, a.minX), s = Math.max(e.minY, a.minY), l = Math.min(e.maxX, a.maxX), u = Math.min(e.maxY, a.maxY), Math.max(0, l - o) * Math.max(0, u - s)), M = f1(d) + f1(x);
            v < m ? (m = v, r = p, c = M < c ? M : c) : v === m && M < c && (c = M, r = p);
        }
        return r || n - i;
    }, r1.prototype._chooseSplitAxis = function(t, i, n) {
        var r = t.leaf ? this.compareMinX : s1, e = t.leaf ? this.compareMinY : l1;
        this._allDistMargin(t, i, n, r) < this._allDistMargin(t, i, n, e) && t.children.sort(r);
    }, r1.prototype._allDistMargin = function(t, i, n, r) {
        t.children.sort(r);
        for(var e = this.toBBox, a = h1(t, 0, i, e), s = h1(t, n - i, n, e), l = u1(a) + u1(s), f = i; f < n - i; f++){
            var m = t.children[f];
            o1(a, t.leaf ? e(m) : m), l += u1(a);
        }
        for(var c = n - i - 1; c >= i; c--){
            var p = t.children[c];
            o1(s, t.leaf ? e(p) : p), l += u1(s);
        }
        return l;
    }, r1.prototype._adjustParentBBoxes = function(t, i, n) {
        for(var r = n; r >= 0; r--)o1(i[r], t);
    }, r1.prototype._condense = function(t) {
        for(var i = t.length - 1, n = void 0; i >= 0; i--)0 === t[i].children.length ? i > 0 ? (n = t[i - 1].children).splice(n.indexOf(t[i]), 1) : this.clear() : a1(t[i], this.toBBox);
    }, r1;
});

},{}],"fW7vC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Convert the provided object into a style function.  Functions passed through
 * unchanged.  Arrays of Style or single style objects wrapped in a
 * new style function.
 * @param {StyleFunction|Array<Style>|Style} obj
 *     A style function, a single style, or an array of styles.
 * @return {StyleFunction} A style function.
 */ parcelHelpers.export(exports, "toFunction", ()=>toFunction);
/**
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {number} resolution Resolution.
 * @return {Array<Style>} Style.
 */ parcelHelpers.export(exports, "createDefaultStyle", ()=>createDefaultStyle);
/**
 * Default styles for editing features.
 * @return {Object<import("../geom/GeometryType.js").default, Array<Style>>} Styles
 */ parcelHelpers.export(exports, "createEditingStyle", ()=>createEditingStyle);
/**
 * @module ol/style/Style
 */ var _circleJs = require("./Circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _fillJs = require("./Fill.js");
var _fillJsDefault = parcelHelpers.interopDefault(_fillJs);
var _geometryTypeJs = require("../geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _strokeJs = require("./Stroke.js");
var _strokeJsDefault = parcelHelpers.interopDefault(_strokeJs);
var _assertsJs = require("../asserts.js");
/**
 * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`
 * representing the view's resolution. The function should return a
 * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a
 * vector layer can be styled. If the function returns `undefined`, the
 * feature will not be rendered.
 *
 * @typedef {function(import("../Feature.js").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction
 */ /**
 * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.
 * @typedef {Style|Array<Style>|StyleFunction} StyleLike
 */ /**
 * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an
 * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.
 *
 * @typedef {function(import("../Feature.js").FeatureLike):
 *     (import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined)} GeometryFunction
 */ /**
 * Custom renderer function. Takes two arguments:
 *
 * 1. The pixel coordinates of the geometry in GeoJSON notation.
 * 2. The {@link module:ol/render~State} of the layer renderer.
 *
 * @typedef {function((import("../coordinate.js").Coordinate|Array<import("../coordinate.js").Coordinate>|Array<Array<import("../coordinate.js").Coordinate>>),import("../render.js").State): void}
 * RenderFunction
 */ /**
 * @typedef {Object} Options
 * @property {string|import("../geom/Geometry.js").default|GeometryFunction} [geometry] Feature property or geometry
 * or function returning a geometry to render for this style.
 * @property {import("./Fill.js").default} [fill] Fill style.
 * @property {import("./Image.js").default} [image] Image style.
 * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be
 * ignored, and the provided function will be called with each render frame for each geometry.
 * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used
 * in hit detection rendering.
 * @property {import("./Stroke.js").default} [stroke] Stroke style.
 * @property {import("./Text.js").default} [text] Text style.
 * @property {number} [zIndex] Z index.
 */ /**
 * @classdesc
 * Container for vector feature rendering styles. Any changes made to the style
 * or its children through `set*()` methods will not take effect until the
 * feature or layer that uses the style is re-rendered.
 *
 * ## Feature styles
 *
 * If no style is defined, the following default style is used:
 * ```js
 *  import {Circle, Fill, Stroke, Style} from 'ol/style';
 *
 *  const fill = new Fill({
 *    color: 'rgba(255,255,255,0.4)',
 *  });
 *  const stroke = new Stroke({
 *    color: '#3399CC',
 *    width: 1.25,
 *  });
 *  const styles = [
 *    new Style({
 *      image: new Circle({
 *        fill: fill,
 *        stroke: stroke,
 *        radius: 5,
 *      }),
 *      fill: fill,
 *      stroke: stroke,
 *    }),
 *  ];
 * ```
 *
 * A separate editing style has the following defaults:
 * ```js
 *  import GeometryType from 'ol/geom/GeometryType';
 *  import {Circle, Fill, Stroke, Style} from 'ol/style';
 *
 *  const styles = {};
 *  const white = [255, 255, 255, 1];
 *  const blue = [0, 153, 255, 1];
 *  const width = 3;
 *  styles[GeometryType.POLYGON] = [
 *    new Style({
 *      fill: new Fill({
 *        color: [255, 255, 255, 0.5],
 *      }),
 *    }),
 *  ];
 *  styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];
 *
 *  styles[GeometryType.LINE_STRING] = [
 *    new Style({
 *      stroke: new Stroke({
 *        color: white,
 *        width: width + 2,
 *      }),
 *    }),
 *    new Style({
 *      stroke: new Stroke({
 *        color: blue,
 *        width: width,
 *      }),
 *    }),
 *  ];
 *  styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];
 *
 *  styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(
 *    styles[GeometryType.LINE_STRING]
 *  );
 *
 *  styles[GeometryType.POINT] = [
 *    new Style({
 *      image: new Circle({
 *        radius: width * 2,
 *        fill: new Fill({
 *          color: blue,
 *        }),
 *        stroke: new Stroke({
 *          color: white,
 *          width: width / 2,
 *        }),
 *      }),
 *      zIndex: Infinity,
 *    }),
 *  ];
 *  styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];
 *
 *  styles[GeometryType.GEOMETRY_COLLECTION] = styles[
 *    GeometryType.POLYGON
 *  ].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);
 * ```
 *
 * @api
 */ var Style = /** @class */ function() {
    /**
     * @param {Options} [opt_options] Style options.
     */ function Style1(opt_options) {
        var options = opt_options || {};
        /**
         * @private
         * @type {string|import("../geom/Geometry.js").default|GeometryFunction}
         */ this.geometry_ = null;
        /**
         * @private
         * @type {!GeometryFunction}
         */ this.geometryFunction_ = defaultGeometryFunction;
        if (options.geometry !== undefined) this.setGeometry(options.geometry);
        /**
         * @private
         * @type {import("./Fill.js").default}
         */ this.fill_ = options.fill !== undefined ? options.fill : null;
        /**
         * @private
         * @type {import("./Image.js").default}
         */ this.image_ = options.image !== undefined ? options.image : null;
        /**
         * @private
         * @type {RenderFunction|null}
         */ this.renderer_ = options.renderer !== undefined ? options.renderer : null;
        /**
         * @private
         * @type {RenderFunction|null}
         */ this.hitDetectionRenderer_ = options.hitDetectionRenderer !== undefined ? options.hitDetectionRenderer : null;
        /**
         * @private
         * @type {import("./Stroke.js").default}
         */ this.stroke_ = options.stroke !== undefined ? options.stroke : null;
        /**
         * @private
         * @type {import("./Text.js").default}
         */ this.text_ = options.text !== undefined ? options.text : null;
        /**
         * @private
         * @type {number|undefined}
         */ this.zIndex_ = options.zIndex;
    }
    /**
     * Clones the style.
     * @return {Style} The cloned style.
     * @api
     */ Style1.prototype.clone = function() {
        var geometry = this.getGeometry();
        if (geometry && typeof geometry === "object") geometry = /** @type {import("../geom/Geometry.js").default} */ geometry.clone();
        return new Style1({
            geometry: geometry,
            fill: this.getFill() ? this.getFill().clone() : undefined,
            image: this.getImage() ? this.getImage().clone() : undefined,
            renderer: this.getRenderer(),
            stroke: this.getStroke() ? this.getStroke().clone() : undefined,
            text: this.getText() ? this.getText().clone() : undefined,
            zIndex: this.getZIndex()
        });
    };
    /**
     * Get the custom renderer function that was configured with
     * {@link #setRenderer} or the `renderer` constructor option.
     * @return {RenderFunction|null} Custom renderer function.
     * @api
     */ Style1.prototype.getRenderer = function() {
        return this.renderer_;
    };
    /**
     * Sets a custom renderer function for this style. When set, `fill`, `stroke`
     * and `image` options of the style will be ignored.
     * @param {RenderFunction|null} renderer Custom renderer function.
     * @api
     */ Style1.prototype.setRenderer = function(renderer) {
        this.renderer_ = renderer;
    };
    /**
     * Sets a custom renderer function for this style used
     * in hit detection.
     * @param {RenderFunction|null} renderer Custom renderer function.
     * @api
     */ Style1.prototype.setHitDetectionRenderer = function(renderer) {
        this.hitDetectionRenderer_ = renderer;
    };
    /**
     * Get the custom renderer function that was configured with
     * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.
     * @return {RenderFunction|null} Custom renderer function.
     * @api
     */ Style1.prototype.getHitDetectionRenderer = function() {
        return this.hitDetectionRenderer_;
    };
    /**
     * Get the geometry to be rendered.
     * @return {string|import("../geom/Geometry.js").default|GeometryFunction}
     * Feature property or geometry or function that returns the geometry that will
     * be rendered with this style.
     * @api
     */ Style1.prototype.getGeometry = function() {
        return this.geometry_;
    };
    /**
     * Get the function used to generate a geometry for rendering.
     * @return {!GeometryFunction} Function that is called with a feature
     * and returns the geometry to render instead of the feature's geometry.
     * @api
     */ Style1.prototype.getGeometryFunction = function() {
        return this.geometryFunction_;
    };
    /**
     * Get the fill style.
     * @return {import("./Fill.js").default} Fill style.
     * @api
     */ Style1.prototype.getFill = function() {
        return this.fill_;
    };
    /**
     * Set the fill style.
     * @param {import("./Fill.js").default} fill Fill style.
     * @api
     */ Style1.prototype.setFill = function(fill) {
        this.fill_ = fill;
    };
    /**
     * Get the image style.
     * @return {import("./Image.js").default} Image style.
     * @api
     */ Style1.prototype.getImage = function() {
        return this.image_;
    };
    /**
     * Set the image style.
     * @param {import("./Image.js").default} image Image style.
     * @api
     */ Style1.prototype.setImage = function(image) {
        this.image_ = image;
    };
    /**
     * Get the stroke style.
     * @return {import("./Stroke.js").default} Stroke style.
     * @api
     */ Style1.prototype.getStroke = function() {
        return this.stroke_;
    };
    /**
     * Set the stroke style.
     * @param {import("./Stroke.js").default} stroke Stroke style.
     * @api
     */ Style1.prototype.setStroke = function(stroke) {
        this.stroke_ = stroke;
    };
    /**
     * Get the text style.
     * @return {import("./Text.js").default} Text style.
     * @api
     */ Style1.prototype.getText = function() {
        return this.text_;
    };
    /**
     * Set the text style.
     * @param {import("./Text.js").default} text Text style.
     * @api
     */ Style1.prototype.setText = function(text) {
        this.text_ = text;
    };
    /**
     * Get the z-index for the style.
     * @return {number|undefined} ZIndex.
     * @api
     */ Style1.prototype.getZIndex = function() {
        return this.zIndex_;
    };
    /**
     * Set a geometry that is rendered instead of the feature's geometry.
     *
     * @param {string|import("../geom/Geometry.js").default|GeometryFunction} geometry
     *     Feature property or geometry or function returning a geometry to render
     *     for this style.
     * @api
     */ Style1.prototype.setGeometry = function(geometry) {
        if (typeof geometry === "function") this.geometryFunction_ = geometry;
        else if (typeof geometry === "string") this.geometryFunction_ = function(feature) {
            return /** @type {import("../geom/Geometry.js").default} */ feature.get(geometry);
        };
        else if (!geometry) this.geometryFunction_ = defaultGeometryFunction;
        else if (geometry !== undefined) this.geometryFunction_ = function() {
            return geometry;
        };
        this.geometry_ = geometry;
    };
    /**
     * Set the z-index.
     *
     * @param {number|undefined} zIndex ZIndex.
     * @api
     */ Style1.prototype.setZIndex = function(zIndex) {
        this.zIndex_ = zIndex;
    };
    return Style1;
}();
function toFunction(obj) {
    var styleFunction;
    if (typeof obj === "function") styleFunction = obj;
    else {
        /**
         * @type {Array<Style>}
         */ var styles_1;
        if (Array.isArray(obj)) styles_1 = obj;
        else {
            (0, _assertsJs.assert)(typeof /** @type {?} */ obj.getZIndex === "function", 41); // Expected an `Style` or an array of `Style`
            var style = obj;
            styles_1 = [
                style
            ];
        }
        styleFunction = function() {
            return styles_1;
        };
    }
    return styleFunction;
}
/**
 * @type {Array<Style>|null}
 */ var defaultStyles = null;
function createDefaultStyle(feature, resolution) {
    // We don't use an immediately-invoked function
    // and a closure so we don't get an error at script evaluation time in
    // browsers that do not support Canvas. (import("./Circle.js").CircleStyle does
    // canvas.getContext('2d') at construction time, which will cause an.error
    // in such browsers.)
    if (!defaultStyles) {
        var fill = new (0, _fillJsDefault.default)({
            color: "rgba(255,255,255,0.4)"
        });
        var stroke = new (0, _strokeJsDefault.default)({
            color: "#3399CC",
            width: 1.25
        });
        defaultStyles = [
            new Style({
                image: new (0, _circleJsDefault.default)({
                    fill: fill,
                    stroke: stroke,
                    radius: 5
                }),
                fill: fill,
                stroke: stroke
            }), 
        ];
    }
    return defaultStyles;
}
function createEditingStyle() {
    /** @type {Object<import("../geom/GeometryType.js").default, Array<Style>>} */ var styles = {};
    var white = [
        255,
        255,
        255,
        1
    ];
    var blue = [
        0,
        153,
        255,
        1
    ];
    var width = 3;
    styles[(0, _geometryTypeJsDefault.default).POLYGON] = [
        new Style({
            fill: new (0, _fillJsDefault.default)({
                color: [
                    255,
                    255,
                    255,
                    0.5
                ]
            })
        }), 
    ];
    styles[(0, _geometryTypeJsDefault.default).MULTI_POLYGON] = styles[(0, _geometryTypeJsDefault.default).POLYGON];
    styles[(0, _geometryTypeJsDefault.default).LINE_STRING] = [
        new Style({
            stroke: new (0, _strokeJsDefault.default)({
                color: white,
                width: width + 2
            })
        }),
        new Style({
            stroke: new (0, _strokeJsDefault.default)({
                color: blue,
                width: width
            })
        }), 
    ];
    styles[(0, _geometryTypeJsDefault.default).MULTI_LINE_STRING] = styles[(0, _geometryTypeJsDefault.default).LINE_STRING];
    styles[(0, _geometryTypeJsDefault.default).CIRCLE] = styles[(0, _geometryTypeJsDefault.default).POLYGON].concat(styles[(0, _geometryTypeJsDefault.default).LINE_STRING]);
    styles[(0, _geometryTypeJsDefault.default).POINT] = [
        new Style({
            image: new (0, _circleJsDefault.default)({
                radius: width * 2,
                fill: new (0, _fillJsDefault.default)({
                    color: blue
                }),
                stroke: new (0, _strokeJsDefault.default)({
                    color: white,
                    width: width / 2
                })
            }),
            zIndex: Infinity
        }), 
    ];
    styles[(0, _geometryTypeJsDefault.default).MULTI_POINT] = styles[(0, _geometryTypeJsDefault.default).POINT];
    styles[(0, _geometryTypeJsDefault.default).GEOMETRY_COLLECTION] = styles[(0, _geometryTypeJsDefault.default).POLYGON].concat(styles[(0, _geometryTypeJsDefault.default).LINE_STRING], styles[(0, _geometryTypeJsDefault.default).POINT]);
    return styles;
}
/**
 * Function that is called with a feature and returns its default geometry.
 * @param {import("../Feature.js").FeatureLike} feature Feature to get the geometry for.
 * @return {import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined} Geometry to render.
 */ function defaultGeometryFunction(feature) {
    return feature.getGeometry();
}
exports.default = Style;

},{"./Circle.js":"cSS3Y","./Fill.js":"4fB56","../geom/GeometryType.js":"j6daa","./Stroke.js":"5Cq04","../asserts.js":"e4TiF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cSS3Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _regularShapeJs = require("./RegularShape.js");
var _regularShapeJsDefault = parcelHelpers.interopDefault(_regularShapeJs);
/**
 * @module ol/style/Circle
 */ var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {import("./Fill.js").default} [fill] Fill style.
 * @property {number} radius Circle radius.
 * @property {import("./Stroke.js").default} [stroke] Stroke style.
 * @property {Array<number>} [displacement=[0,0]] displacement
 * @property {number|import("../size.js").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.
 * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.
 * @property {number} [rotation=0] Rotation in radians
 * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).
 * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view
 * (meaningful only when used in conjunction with a two dimensional scale).
 */ /**
 * @classdesc
 * Set circle style for vector features.
 * @api
 */ var CircleStyle = /** @class */ function(_super) {
    __extends(CircleStyle1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function CircleStyle1(opt_options) {
        var options = opt_options ? opt_options : {};
        return _super.call(this, {
            points: Infinity,
            fill: options.fill,
            radius: options.radius,
            stroke: options.stroke,
            scale: options.scale !== undefined ? options.scale : 1,
            rotation: options.rotation !== undefined ? options.rotation : 0,
            rotateWithView: options.rotateWithView !== undefined ? options.rotateWithView : false,
            displacement: options.displacement !== undefined ? options.displacement : [
                0,
                0
            ]
        }) || this;
    }
    /**
     * Clones the style.
     * @return {CircleStyle} The cloned style.
     * @api
     */ CircleStyle1.prototype.clone = function() {
        var scale = this.getScale();
        var style = new CircleStyle1({
            fill: this.getFill() ? this.getFill().clone() : undefined,
            stroke: this.getStroke() ? this.getStroke().clone() : undefined,
            radius: this.getRadius(),
            scale: Array.isArray(scale) ? scale.slice() : scale,
            rotation: this.getRotation(),
            rotateWithView: this.getRotateWithView(),
            displacement: this.getDisplacement().slice()
        });
        style.setOpacity(this.getOpacity());
        return style;
    };
    /**
     * Set the circle radius.
     *
     * @param {number} radius Circle radius.
     * @api
     */ CircleStyle1.prototype.setRadius = function(radius) {
        this.radius_ = radius;
        this.render();
    };
    return CircleStyle1;
}((0, _regularShapeJsDefault.default));
exports.default = CircleStyle;

},{"./RegularShape.js":"44xDg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"44xDg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _imageStateJs = require("../ImageState.js");
var _imageStateJsDefault = parcelHelpers.interopDefault(_imageStateJs);
var _imageJs = require("./Image.js");
var _imageJsDefault = parcelHelpers.interopDefault(_imageJs);
var _colorJs = require("../color.js");
var _colorlikeJs = require("../colorlike.js");
var _domJs = require("../dom.js");
var _canvasJs = require("../render/canvas.js");
/**
 * @module ol/style/RegularShape
 */ var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * Specify radius for regular polygons, or radius1 and radius2 for stars.
 * @typedef {Object} Options
 * @property {import("./Fill.js").default} [fill] Fill style.
 * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points
 * is the number of sides.
 * @property {number} [radius] Radius of a regular polygon.
 * @property {number} [radius1] First radius of a star. Ignored if radius is set.
 * @property {number} [radius2] Second radius of a star.
 * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.
 * @property {Array<number>} [displacement=[0,0]] Displacement of the shape
 * @property {import("./Stroke.js").default} [stroke] Stroke style.
 * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
 * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.
 * @property {number|import("../size.js").Size} [scale=1] Scale. Unless two dimensional scaling is required a better
 * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.
 */ /**
 * @typedef {Object} RenderOptions
 * @property {import("../colorlike.js").ColorLike} [strokeStyle] StrokeStyle.
 * @property {number} strokeWidth StrokeWidth.
 * @property {number} size Size.
 * @property {Array<number>} lineDash LineDash.
 * @property {number} lineDashOffset LineDashOffset.
 * @property {CanvasLineJoin} lineJoin LineJoin.
 * @property {number} miterLimit MiterLimit.
 */ /**
 * @classdesc
 * Set regular shape style for vector features. The resulting shape will be
 * a regular polygon when `radius` is provided, or a star when `radius1` and
 * `radius2` are provided.
 * @api
 */ var RegularShape = /** @class */ function(_super) {
    __extends(RegularShape1, _super);
    /**
     * @param {Options} options Options.
     */ function RegularShape1(options) {
        var _this = this;
        /**
         * @type {boolean}
         */ var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;
        _this = _super.call(this, {
            opacity: 1,
            rotateWithView: rotateWithView,
            rotation: options.rotation !== undefined ? options.rotation : 0,
            scale: options.scale !== undefined ? options.scale : 1,
            displacement: options.displacement !== undefined ? options.displacement : [
                0,
                0
            ]
        }) || this;
        /**
         * @private
         * @type {Object<number, HTMLCanvasElement>}
         */ _this.canvas_ = undefined;
        /**
         * @private
         * @type {HTMLCanvasElement}
         */ _this.hitDetectionCanvas_ = null;
        /**
         * @private
         * @type {import("./Fill.js").default}
         */ _this.fill_ = options.fill !== undefined ? options.fill : null;
        /**
         * @private
         * @type {Array<number>}
         */ _this.origin_ = [
            0,
            0
        ];
        /**
         * @private
         * @type {number}
         */ _this.points_ = options.points;
        /**
         * @protected
         * @type {number}
         */ _this.radius_ = options.radius !== undefined ? options.radius : options.radius1;
        /**
         * @private
         * @type {number|undefined}
         */ _this.radius2_ = options.radius2;
        /**
         * @private
         * @type {number}
         */ _this.angle_ = options.angle !== undefined ? options.angle : 0;
        /**
         * @private
         * @type {import("./Stroke.js").default}
         */ _this.stroke_ = options.stroke !== undefined ? options.stroke : null;
        /**
         * @private
         * @type {import("../size.js").Size}
         */ _this.size_ = null;
        /**
         * @private
         * @type {RenderOptions}
         */ _this.renderOptions_ = null;
        _this.render();
        return _this;
    }
    /**
     * Clones the style.
     * @return {RegularShape} The cloned style.
     * @api
     */ RegularShape1.prototype.clone = function() {
        var scale = this.getScale();
        var style = new RegularShape1({
            fill: this.getFill() ? this.getFill().clone() : undefined,
            points: this.getPoints(),
            radius: this.getRadius(),
            radius2: this.getRadius2(),
            angle: this.getAngle(),
            stroke: this.getStroke() ? this.getStroke().clone() : undefined,
            rotation: this.getRotation(),
            rotateWithView: this.getRotateWithView(),
            scale: Array.isArray(scale) ? scale.slice() : scale,
            displacement: this.getDisplacement().slice()
        });
        style.setOpacity(this.getOpacity());
        return style;
    };
    /**
     * Get the anchor point in pixels. The anchor determines the center point for the
     * symbolizer.
     * @return {Array<number>} Anchor.
     * @api
     */ RegularShape1.prototype.getAnchor = function() {
        var size = this.size_;
        if (!size) return null;
        var displacement = this.getDisplacement();
        return [
            size[0] / 2 - displacement[0],
            size[1] / 2 + displacement[1]
        ];
    };
    /**
     * Get the angle used in generating the shape.
     * @return {number} Shape's rotation in radians.
     * @api
     */ RegularShape1.prototype.getAngle = function() {
        return this.angle_;
    };
    /**
     * Get the fill style for the shape.
     * @return {import("./Fill.js").default} Fill style.
     * @api
     */ RegularShape1.prototype.getFill = function() {
        return this.fill_;
    };
    /**
     * @return {HTMLCanvasElement} Image element.
     */ RegularShape1.prototype.getHitDetectionImage = function() {
        if (!this.hitDetectionCanvas_) this.createHitDetectionCanvas_(this.renderOptions_);
        return this.hitDetectionCanvas_;
    };
    /**
     * Get the image icon.
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLCanvasElement} Image or Canvas element.
     * @api
     */ RegularShape1.prototype.getImage = function(pixelRatio) {
        var image = this.canvas_[pixelRatio];
        if (!image) {
            var renderOptions = this.renderOptions_;
            var context = (0, _domJs.createCanvasContext2D)(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);
            this.draw_(renderOptions, context, pixelRatio);
            image = context.canvas;
            this.canvas_[pixelRatio] = image;
        }
        return image;
    };
    /**
     * Get the image pixel ratio.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Pixel ratio.
     */ RegularShape1.prototype.getPixelRatio = function(pixelRatio) {
        return pixelRatio;
    };
    /**
     * @return {import("../size.js").Size} Image size.
     */ RegularShape1.prototype.getImageSize = function() {
        return this.size_;
    };
    /**
     * @return {import("../ImageState.js").default} Image state.
     */ RegularShape1.prototype.getImageState = function() {
        return (0, _imageStateJsDefault.default).LOADED;
    };
    /**
     * Get the origin of the symbolizer.
     * @return {Array<number>} Origin.
     * @api
     */ RegularShape1.prototype.getOrigin = function() {
        return this.origin_;
    };
    /**
     * Get the number of points for generating the shape.
     * @return {number} Number of points for stars and regular polygons.
     * @api
     */ RegularShape1.prototype.getPoints = function() {
        return this.points_;
    };
    /**
     * Get the (primary) radius for the shape.
     * @return {number} Radius.
     * @api
     */ RegularShape1.prototype.getRadius = function() {
        return this.radius_;
    };
    /**
     * Get the secondary radius for the shape.
     * @return {number|undefined} Radius2.
     * @api
     */ RegularShape1.prototype.getRadius2 = function() {
        return this.radius2_;
    };
    /**
     * Get the size of the symbolizer (in pixels).
     * @return {import("../size.js").Size} Size.
     * @api
     */ RegularShape1.prototype.getSize = function() {
        return this.size_;
    };
    /**
     * Get the stroke style for the shape.
     * @return {import("./Stroke.js").default} Stroke style.
     * @api
     */ RegularShape1.prototype.getStroke = function() {
        return this.stroke_;
    };
    /**
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */ RegularShape1.prototype.listenImageChange = function(listener) {};
    /**
     * Load not yet loaded URI.
     */ RegularShape1.prototype.load = function() {};
    /**
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */ RegularShape1.prototype.unlistenImageChange = function(listener) {};
    /**
     * Calculate additional canvas size needed for the miter.
     * @param {string} lineJoin Line join
     * @param {number} strokeWidth Stroke width
     * @param {number} miterLimit Miter limit
     * @return {number} Additional canvas size needed
     * @private
     */ RegularShape1.prototype.calculateLineJoinSize_ = function(lineJoin, strokeWidth, miterLimit) {
        if (strokeWidth === 0 || this.points_ === Infinity || lineJoin !== "bevel" && lineJoin !== "miter") return strokeWidth;
        // m  | ^
        // i  | |\                  .
        // t >|  #\
        // e  | |\ \              .
        // r      \s\
        //      |  \t\          .                 .
        //          \r\                      .   .
        //      |    \o\      .          .  . . .
        //          e \k\            .  .    . .
        //      |      \e\  .    .  .       . .
        //       d      \ \  .  .          . .
        //      | _ _a_ _\#  .            . .
        //   r1          / `             . .
        //      |                       . .
        //       b     /               . .
        //      |                     . .
        //           / r2            . .
        //      |                        .   .
        //         /                           .   .
        //      |α                                   .   .
        //       /                                         .   .
        //      ° center
        var r1 = this.radius_;
        var r2 = this.radius2_ === undefined ? r1 : this.radius2_;
        if (r1 < r2) {
            var tmp = r1;
            r1 = r2;
            r2 = tmp;
        }
        var points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;
        var alpha = 2 * Math.PI / points;
        var a = r2 * Math.sin(alpha);
        var b = Math.sqrt(r2 * r2 - a * a);
        var d = r1 - b;
        var e = Math.sqrt(a * a + d * d);
        var miterRatio = e / a;
        if (lineJoin === "miter" && miterRatio <= miterLimit) return miterRatio * strokeWidth;
        // Calculate the distnce from center to the stroke corner where
        // it was cut short because of the miter limit.
        //              l
        //        ----+---- <= distance from center to here is maxr
        //       /####|k ##\
        //      /#####^#####\
        //     /#### /+\# s #\
        //    /### h/+++\# t #\
        //   /### t/+++++\# r #\
        //  /### a/+++++++\# o #\
        // /### p/++ fill +\# k #\
        ///#### /+++++^+++++\# e #\
        //#####/+++++/+\+++++\#####\
        var k = strokeWidth / 2 / miterRatio;
        var l = strokeWidth / 2 * (d / e);
        var maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);
        var bevelAdd = maxr - r1;
        if (this.radius2_ === undefined || lineJoin === "bevel") return bevelAdd * 2;
        // If outer miter is over the miter limit the inner miter may reach through the
        // center and be longer than the bevel, same calculation as above but swap r1 / r2.
        var aa = r1 * Math.sin(alpha);
        var bb = Math.sqrt(r1 * r1 - aa * aa);
        var dd = r2 - bb;
        var ee = Math.sqrt(aa * aa + dd * dd);
        var innerMiterRatio = ee / aa;
        if (innerMiterRatio <= miterLimit) {
            var innerLength = innerMiterRatio * strokeWidth / 2 - r2 - r1;
            return 2 * Math.max(bevelAdd, innerLength);
        }
        return bevelAdd * 2;
    };
    /**
     * @return {RenderOptions}  The render options
     * @protected
     */ RegularShape1.prototype.createRenderOptions = function() {
        var lineJoin = (0, _canvasJs.defaultLineJoin);
        var miterLimit = 0;
        var lineDash = null;
        var lineDashOffset = 0;
        var strokeStyle;
        var strokeWidth = 0;
        if (this.stroke_) {
            strokeStyle = this.stroke_.getColor();
            if (strokeStyle === null) strokeStyle = (0, _canvasJs.defaultStrokeStyle);
            strokeStyle = (0, _colorlikeJs.asColorLike)(strokeStyle);
            strokeWidth = this.stroke_.getWidth();
            if (strokeWidth === undefined) strokeWidth = (0, _canvasJs.defaultLineWidth);
            lineDash = this.stroke_.getLineDash();
            lineDashOffset = this.stroke_.getLineDashOffset();
            lineJoin = this.stroke_.getLineJoin();
            if (lineJoin === undefined) lineJoin = (0, _canvasJs.defaultLineJoin);
            miterLimit = this.stroke_.getMiterLimit();
            if (miterLimit === undefined) miterLimit = (0, _canvasJs.defaultMiterLimit);
        }
        var add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);
        var maxRadius = Math.max(this.radius_, this.radius2_ || 0);
        var size = Math.ceil(2 * maxRadius + add);
        return {
            strokeStyle: strokeStyle,
            strokeWidth: strokeWidth,
            size: size,
            lineDash: lineDash,
            lineDashOffset: lineDashOffset,
            lineJoin: lineJoin,
            miterLimit: miterLimit
        };
    };
    /**
     * @protected
     */ RegularShape1.prototype.render = function() {
        this.renderOptions_ = this.createRenderOptions();
        var size = this.renderOptions_.size;
        this.canvas_ = {};
        this.size_ = [
            size,
            size
        ];
    };
    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     * @param {CanvasRenderingContext2D} context The rendering context.
     * @param {number} pixelRatio The pixel ratio.
     */ RegularShape1.prototype.draw_ = function(renderOptions, context, pixelRatio) {
        context.scale(pixelRatio, pixelRatio);
        // set origin to canvas center
        context.translate(renderOptions.size / 2, renderOptions.size / 2);
        this.createPath_(context);
        if (this.fill_) {
            var color = this.fill_.getColor();
            if (color === null) color = (0, _canvasJs.defaultFillStyle);
            context.fillStyle = (0, _colorlikeJs.asColorLike)(color);
            context.fill();
        }
        if (this.stroke_) {
            context.strokeStyle = renderOptions.strokeStyle;
            context.lineWidth = renderOptions.strokeWidth;
            if (context.setLineDash && renderOptions.lineDash) {
                context.setLineDash(renderOptions.lineDash);
                context.lineDashOffset = renderOptions.lineDashOffset;
            }
            context.lineJoin = renderOptions.lineJoin;
            context.miterLimit = renderOptions.miterLimit;
            context.stroke();
        }
    };
    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     */ RegularShape1.prototype.createHitDetectionCanvas_ = function(renderOptions) {
        if (this.fill_) {
            var color = this.fill_.getColor();
            // determine if fill is transparent (or pattern or gradient)
            var opacity = 0;
            if (typeof color === "string") color = (0, _colorJs.asArray)(color);
            if (color === null) opacity = 1;
            else if (Array.isArray(color)) opacity = color.length === 4 ? color[3] : 1;
            if (opacity === 0) {
                // if a transparent fill style is set, create an extra hit-detection image
                // with a default fill style
                var context = (0, _domJs.createCanvasContext2D)(renderOptions.size, renderOptions.size);
                this.hitDetectionCanvas_ = context.canvas;
                this.drawHitDetectionCanvas_(renderOptions, context);
            }
        }
        if (!this.hitDetectionCanvas_) this.hitDetectionCanvas_ = this.getImage(1);
    };
    /**
     * @private
     * @param {CanvasRenderingContext2D} context The context to draw in.
     */ RegularShape1.prototype.createPath_ = function(context) {
        var points = this.points_;
        var radius = this.radius_;
        if (points === Infinity) context.arc(0, 0, radius, 0, 2 * Math.PI);
        else {
            var radius2 = this.radius2_ === undefined ? radius : this.radius2_;
            if (this.radius2_ !== undefined) points *= 2;
            var startAngle = this.angle_ - Math.PI / 2;
            var step = 2 * Math.PI / points;
            for(var i = 0; i < points; i++){
                var angle0 = startAngle + i * step;
                var radiusC = i % 2 === 0 ? radius : radius2;
                context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));
            }
            context.closePath();
        }
    };
    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     * @param {CanvasRenderingContext2D} context The context.
     */ RegularShape1.prototype.drawHitDetectionCanvas_ = function(renderOptions, context) {
        // set origin to canvas center
        context.translate(renderOptions.size / 2, renderOptions.size / 2);
        this.createPath_(context);
        context.fillStyle = (0, _canvasJs.defaultFillStyle);
        context.fill();
        if (this.stroke_) {
            context.strokeStyle = renderOptions.strokeStyle;
            context.lineWidth = renderOptions.strokeWidth;
            if (renderOptions.lineDash) {
                context.setLineDash(renderOptions.lineDash);
                context.lineDashOffset = renderOptions.lineDashOffset;
            }
            context.lineJoin = renderOptions.lineJoin;
            context.miterLimit = renderOptions.miterLimit;
            context.stroke();
        }
    };
    return RegularShape1;
}((0, _imageJsDefault.default));
exports.default = RegularShape;

},{"../ImageState.js":"c4jJS","./Image.js":"eyoR9","../color.js":"4tahz","../colorlike.js":"ftcFo","../dom.js":"84QzQ","../render/canvas.js":"e85iQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c4jJS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/ImageState
 */ /**
 * @enum {number}
 */ exports.default = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    ERROR: 3,
    EMPTY: 4
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eyoR9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/style/Image
 */ var _utilJs = require("../util.js");
var _sizeJs = require("../size.js");
/**
 * @typedef {Object} Options
 * @property {number} opacity Opacity.
 * @property {boolean} rotateWithView If the image should get rotated with the view.
 * @property {number} rotation Rotation.
 * @property {number|import("../size.js").Size} scale Scale.
 * @property {Array<number>} displacement Displacement.
 */ /**
 * @classdesc
 * A base class used for creating subclasses and not instantiated in
 * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and
 * {@link module:ol/style/RegularShape~RegularShape}.
 * @abstract
 * @api
 */ var ImageStyle = /** @class */ function() {
    /**
     * @param {Options} options Options.
     */ function ImageStyle1(options) {
        /**
         * @private
         * @type {number}
         */ this.opacity_ = options.opacity;
        /**
         * @private
         * @type {boolean}
         */ this.rotateWithView_ = options.rotateWithView;
        /**
         * @private
         * @type {number}
         */ this.rotation_ = options.rotation;
        /**
         * @private
         * @type {number|import("../size.js").Size}
         */ this.scale_ = options.scale;
        /**
         * @private
         * @type {import("../size.js").Size}
         */ this.scaleArray_ = (0, _sizeJs.toSize)(options.scale);
        /**
         * @private
         * @type {Array<number>}
         */ this.displacement_ = options.displacement;
    }
    /**
     * Clones the style.
     * @return {ImageStyle} The cloned style.
     * @api
     */ ImageStyle1.prototype.clone = function() {
        var scale = this.getScale();
        return new ImageStyle1({
            opacity: this.getOpacity(),
            scale: Array.isArray(scale) ? scale.slice() : scale,
            rotation: this.getRotation(),
            rotateWithView: this.getRotateWithView(),
            displacement: this.getDisplacement().slice()
        });
    };
    /**
     * Get the symbolizer opacity.
     * @return {number} Opacity.
     * @api
     */ ImageStyle1.prototype.getOpacity = function() {
        return this.opacity_;
    };
    /**
     * Determine whether the symbolizer rotates with the map.
     * @return {boolean} Rotate with map.
     * @api
     */ ImageStyle1.prototype.getRotateWithView = function() {
        return this.rotateWithView_;
    };
    /**
     * Get the symoblizer rotation.
     * @return {number} Rotation.
     * @api
     */ ImageStyle1.prototype.getRotation = function() {
        return this.rotation_;
    };
    /**
     * Get the symbolizer scale.
     * @return {number|import("../size.js").Size} Scale.
     * @api
     */ ImageStyle1.prototype.getScale = function() {
        return this.scale_;
    };
    /**
     * Get the symbolizer scale array.
     * @return {import("../size.js").Size} Scale array.
     */ ImageStyle1.prototype.getScaleArray = function() {
        return this.scaleArray_;
    };
    /**
     * Get the displacement of the shape
     * @return {Array<number>} Shape's center displacement
     * @api
     */ ImageStyle1.prototype.getDisplacement = function() {
        return this.displacement_;
    };
    /**
     * Get the anchor point in pixels. The anchor determines the center point for the
     * symbolizer.
     * @abstract
     * @return {Array<number>} Anchor.
     */ ImageStyle1.prototype.getAnchor = function() {
        return (0, _utilJs.abstract)();
    };
    /**
     * Get the image element for the symbolizer.
     * @abstract
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
     */ ImageStyle1.prototype.getImage = function(pixelRatio) {
        return (0, _utilJs.abstract)();
    };
    /**
     * @abstract
     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
     */ ImageStyle1.prototype.getHitDetectionImage = function() {
        return (0, _utilJs.abstract)();
    };
    /**
     * Get the image pixel ratio.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Pixel ratio.
     */ ImageStyle1.prototype.getPixelRatio = function(pixelRatio) {
        return 1;
    };
    /**
     * @abstract
     * @return {import("../ImageState.js").default} Image state.
     */ ImageStyle1.prototype.getImageState = function() {
        return (0, _utilJs.abstract)();
    };
    /**
     * @abstract
     * @return {import("../size.js").Size} Image size.
     */ ImageStyle1.prototype.getImageSize = function() {
        return (0, _utilJs.abstract)();
    };
    /**
     * Get the origin of the symbolizer.
     * @abstract
     * @return {Array<number>} Origin.
     */ ImageStyle1.prototype.getOrigin = function() {
        return (0, _utilJs.abstract)();
    };
    /**
     * Get the size of the symbolizer (in pixels).
     * @abstract
     * @return {import("../size.js").Size} Size.
     */ ImageStyle1.prototype.getSize = function() {
        return (0, _utilJs.abstract)();
    };
    /**
     * Set the displacement.
     *
     * @param {Array<number>} displacement Displacement.
     * @api
     */ ImageStyle1.prototype.setDisplacement = function(displacement) {
        this.displacement_ = displacement;
    };
    /**
     * Set the opacity.
     *
     * @param {number} opacity Opacity.
     * @api
     */ ImageStyle1.prototype.setOpacity = function(opacity) {
        this.opacity_ = opacity;
    };
    /**
     * Set whether to rotate the style with the view.
     *
     * @param {boolean} rotateWithView Rotate with map.
     * @api
     */ ImageStyle1.prototype.setRotateWithView = function(rotateWithView) {
        this.rotateWithView_ = rotateWithView;
    };
    /**
     * Set the rotation.
     *
     * @param {number} rotation Rotation.
     * @api
     */ ImageStyle1.prototype.setRotation = function(rotation) {
        this.rotation_ = rotation;
    };
    /**
     * Set the scale.
     *
     * @param {number|import("../size.js").Size} scale Scale.
     * @api
     */ ImageStyle1.prototype.setScale = function(scale) {
        this.scale_ = scale;
        this.scaleArray_ = (0, _sizeJs.toSize)(scale);
    };
    /**
     * @abstract
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */ ImageStyle1.prototype.listenImageChange = function(listener) {
        (0, _utilJs.abstract)();
    };
    /**
     * Load not yet loaded URI.
     * @abstract
     */ ImageStyle1.prototype.load = function() {
        (0, _utilJs.abstract)();
    };
    /**
     * @abstract
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */ ImageStyle1.prototype.unlistenImageChange = function(listener) {
        (0, _utilJs.abstract)();
    };
    return ImageStyle1;
}();
exports.default = ImageStyle;

},{"../util.js":"pLBjQ","../size.js":"lKEPe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ftcFo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A type accepted by CanvasRenderingContext2D.fillStyle
 * or CanvasRenderingContext2D.strokeStyle.
 * Represents a color, pattern, or gradient. The origin for patterns and
 * gradients as fill style is an increment of 512 css pixels from map coordinate
 * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image
 * must be a factor of two (2, 4, 8, ..., 512).
 *
 * @typedef {string|CanvasPattern|CanvasGradient} ColorLike
 * @api
 */ /**
 * @param {import("./color.js").Color|ColorLike} color Color.
 * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.
 * @api
 */ parcelHelpers.export(exports, "asColorLike", ()=>asColorLike);
/**
 * @module ol/colorlike
 */ var _colorJs = require("./color.js");
function asColorLike(color) {
    if (Array.isArray(color)) return (0, _colorJs.toString)(color);
    else return color;
}

},{"./color.js":"4tahz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4fB56":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/style/Fill
 */ /**
 * @typedef {Object} Options
 * @property {import("../color.js").Color|import("../colorlike.js").ColorLike|null} [color=null] A color, gradient or pattern.
 * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
 * Default null; if null, the Canvas/renderer default black will be used.
 */ /**
 * @classdesc
 * Set fill style for vector features.
 * @api
 */ var Fill = /** @class */ function() {
    /**
     * @param {Options} [opt_options] Options.
     */ function Fill1(opt_options) {
        var options = opt_options || {};
        /**
         * @private
         * @type {import("../color.js").Color|import("../colorlike.js").ColorLike|null}
         */ this.color_ = options.color !== undefined ? options.color : null;
    }
    /**
     * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.
     * @return {Fill} The cloned style.
     * @api
     */ Fill1.prototype.clone = function() {
        var color = this.getColor();
        return new Fill1({
            color: Array.isArray(color) ? color.slice() : color || undefined
        });
    };
    /**
     * Get the fill color.
     * @return {import("../color.js").Color|import("../colorlike.js").ColorLike|null} Color.
     * @api
     */ Fill1.prototype.getColor = function() {
        return this.color_;
    };
    /**
     * Set the color.
     *
     * @param {import("../color.js").Color|import("../colorlike.js").ColorLike|null} color Color.
     * @api
     */ Fill1.prototype.setColor = function(color) {
        this.color_ = color;
    };
    return Fill1;
}();
exports.default = Fill;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Cq04":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/style/Stroke
 */ /**
 * @typedef {Object} Options
 * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color] A color, gradient or pattern.
 * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
 * Default null; if null, the Canvas/renderer default black will be used.
 * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.
 * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.
 * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).
 * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on
 * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.
 * @property {number} [lineDashOffset=0] Line dash offset.
 * @property {number} [miterLimit=10] Miter limit.
 * @property {number} [width] Width.
 */ /**
 * @classdesc
 * Set stroke style for vector features.
 * Note that the defaults given are the Canvas defaults, which will be used if
 * option is not defined. The `get` functions return whatever was entered in
 * the options; they will not return the default.
 * @api
 */ var Stroke = /** @class */ function() {
    /**
     * @param {Options} [opt_options] Options.
     */ function Stroke1(opt_options) {
        var options = opt_options || {};
        /**
         * @private
         * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
         */ this.color_ = options.color !== undefined ? options.color : null;
        /**
         * @private
         * @type {CanvasLineCap|undefined}
         */ this.lineCap_ = options.lineCap;
        /**
         * @private
         * @type {Array<number>}
         */ this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;
        /**
         * @private
         * @type {number|undefined}
         */ this.lineDashOffset_ = options.lineDashOffset;
        /**
         * @private
         * @type {CanvasLineJoin|undefined}
         */ this.lineJoin_ = options.lineJoin;
        /**
         * @private
         * @type {number|undefined}
         */ this.miterLimit_ = options.miterLimit;
        /**
         * @private
         * @type {number|undefined}
         */ this.width_ = options.width;
    }
    /**
     * Clones the style.
     * @return {Stroke} The cloned style.
     * @api
     */ Stroke1.prototype.clone = function() {
        var color = this.getColor();
        return new Stroke1({
            color: Array.isArray(color) ? color.slice() : color || undefined,
            lineCap: this.getLineCap(),
            lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,
            lineDashOffset: this.getLineDashOffset(),
            lineJoin: this.getLineJoin(),
            miterLimit: this.getMiterLimit(),
            width: this.getWidth()
        });
    };
    /**
     * Get the stroke color.
     * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
     * @api
     */ Stroke1.prototype.getColor = function() {
        return this.color_;
    };
    /**
     * Get the line cap type for the stroke.
     * @return {CanvasLineCap|undefined} Line cap.
     * @api
     */ Stroke1.prototype.getLineCap = function() {
        return this.lineCap_;
    };
    /**
     * Get the line dash style for the stroke.
     * @return {Array<number>} Line dash.
     * @api
     */ Stroke1.prototype.getLineDash = function() {
        return this.lineDash_;
    };
    /**
     * Get the line dash offset for the stroke.
     * @return {number|undefined} Line dash offset.
     * @api
     */ Stroke1.prototype.getLineDashOffset = function() {
        return this.lineDashOffset_;
    };
    /**
     * Get the line join type for the stroke.
     * @return {CanvasLineJoin|undefined} Line join.
     * @api
     */ Stroke1.prototype.getLineJoin = function() {
        return this.lineJoin_;
    };
    /**
     * Get the miter limit for the stroke.
     * @return {number|undefined} Miter limit.
     * @api
     */ Stroke1.prototype.getMiterLimit = function() {
        return this.miterLimit_;
    };
    /**
     * Get the stroke width.
     * @return {number|undefined} Width.
     * @api
     */ Stroke1.prototype.getWidth = function() {
        return this.width_;
    };
    /**
     * Set the color.
     *
     * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
     * @api
     */ Stroke1.prototype.setColor = function(color) {
        this.color_ = color;
    };
    /**
     * Set the line cap.
     *
     * @param {CanvasLineCap|undefined} lineCap Line cap.
     * @api
     */ Stroke1.prototype.setLineCap = function(lineCap) {
        this.lineCap_ = lineCap;
    };
    /**
     * Set the line dash.
     *
     * Please note that Internet Explorer 10 and lower [do not support][mdn] the
     * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this
     * property will have no visual effect in these browsers.
     *
     * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility
     *
     * @param {Array<number>} lineDash Line dash.
     * @api
     */ Stroke1.prototype.setLineDash = function(lineDash) {
        this.lineDash_ = lineDash;
    };
    /**
     * Set the line dash offset.
     *
     * @param {number|undefined} lineDashOffset Line dash offset.
     * @api
     */ Stroke1.prototype.setLineDashOffset = function(lineDashOffset) {
        this.lineDashOffset_ = lineDashOffset;
    };
    /**
     * Set the line join.
     *
     * @param {CanvasLineJoin|undefined} lineJoin Line join.
     * @api
     */ Stroke1.prototype.setLineJoin = function(lineJoin) {
        this.lineJoin_ = lineJoin;
    };
    /**
     * Set the miter limit.
     *
     * @param {number|undefined} miterLimit Miter limit.
     * @api
     */ Stroke1.prototype.setMiterLimit = function(miterLimit) {
        this.miterLimit_ = miterLimit;
    };
    /**
     * Set the width.
     *
     * @param {number|undefined} width Width.
     * @api
     */ Stroke1.prototype.setWidth = function(width) {
        this.width_ = width;
    };
    return Stroke1;
}();
exports.default = Stroke;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kTTmt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/renderer/canvas/VectorLayer
 */ var _builderGroupJs = require("../../render/canvas/BuilderGroup.js");
var _builderGroupJsDefault = parcelHelpers.interopDefault(_builderGroupJs);
var _layerJs = require("./Layer.js");
var _layerJsDefault = parcelHelpers.interopDefault(_layerJs);
var _executorGroupJs = require("../../render/canvas/ExecutorGroup.js");
var _executorGroupJsDefault = parcelHelpers.interopDefault(_executorGroupJs);
var _viewHintJs = require("../../ViewHint.js");
var _viewHintJsDefault = parcelHelpers.interopDefault(_viewHintJs);
var _hitdetectJs = require("../../render/canvas/hitdetect.js");
var _transformJs = require("../../transform.js");
var _extentJs = require("../../extent.js");
var _cssJs = require("../../css.js");
var _vectorJs = require("../vector.js");
var _arrayJs = require("../../array.js");
var _projJs = require("../../proj.js");
var _utilJs = require("../../util.js");
var _coordinateJs = require("../../coordinate.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Canvas renderer for vector layers.
 * @api
 */ var CanvasVectorLayerRenderer = /** @class */ function(_super) {
    __extends(CanvasVectorLayerRenderer1, _super);
    /**
     * @param {import("../../layer/BaseVector.js").default} vectorLayer Vector layer.
     */ function CanvasVectorLayerRenderer1(vectorLayer) {
        var _this = _super.call(this, vectorLayer) || this;
        /** @private */ _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);
        /**
         * @type {boolean}
         */ _this.animatingOrInteracting_;
        /**
         * @private
         * @type {boolean}
         */ _this.dirty_ = false;
        /**
         * @type {ImageData}
         */ _this.hitDetectionImageData_ = null;
        /**
         * @type {Array<import("../../Feature.js").default>}
         */ _this.renderedFeatures_ = null;
        /**
         * @private
         * @type {number}
         */ _this.renderedRevision_ = -1;
        /**
         * @private
         * @type {number}
         */ _this.renderedResolution_ = NaN;
        /**
         * @private
         * @type {import("../../extent.js").Extent}
         */ _this.renderedExtent_ = (0, _extentJs.createEmpty)();
        /**
         * @private
         * @type {import("../../extent.js").Extent}
         */ _this.wrappedRenderedExtent_ = (0, _extentJs.createEmpty)();
        /**
         * @private
         * @type {number}
         */ _this.renderedRotation_;
        /**
         * @private
         * @type {import("../../coordinate").Coordinate}
         */ _this.renderedCenter_ = null;
        /**
         * @private
         * @type {import("../../proj/Projection").default}
         */ _this.renderedProjection_ = null;
        /**
         * @private
         * @type {function(import("../../Feature.js").default, import("../../Feature.js").default): number|null}
         */ _this.renderedRenderOrder_ = null;
        /**
         * @private
         * @type {import("../../render/canvas/ExecutorGroup").default}
         */ _this.replayGroup_ = null;
        /**
         * A new replay group had to be created by `prepareFrame()`
         * @type {boolean}
         */ _this.replayGroupChanged = true;
        /**
         * @type {import("../../render/canvas/ExecutorGroup").default}
         */ _this.declutterExecutorGroup = null;
        /**
         * Clipping to be performed by `renderFrame()`
         * @type {boolean}
         */ _this.clipping = true;
        return _this;
    }
    /**
     * @param {ExecutorGroup} executorGroup Executor group.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("rbush").default} [opt_declutterTree] Declutter tree.
     */ CanvasVectorLayerRenderer1.prototype.renderWorlds = function(executorGroup, frameState, opt_declutterTree) {
        var extent = frameState.extent;
        var viewState = frameState.viewState;
        var center = viewState.center;
        var resolution = viewState.resolution;
        var projection = viewState.projection;
        var rotation = viewState.rotation;
        var projectionExtent = projection.getExtent();
        var vectorSource = this.getLayer().getSource();
        var pixelRatio = frameState.pixelRatio;
        var viewHints = frameState.viewHints;
        var snapToPixel = !(viewHints[(0, _viewHintJsDefault.default).ANIMATING] || viewHints[(0, _viewHintJsDefault.default).INTERACTING]);
        var context = this.context;
        var width = Math.round(frameState.size[0] * pixelRatio);
        var height = Math.round(frameState.size[1] * pixelRatio);
        var multiWorld = vectorSource.getWrapX() && projection.canWrapX();
        var worldWidth = multiWorld ? (0, _extentJs.getWidth)(projectionExtent) : null;
        var endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;
        var world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;
        do {
            var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);
            executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, opt_declutterTree);
        }while (++world < endWorld);
    };
    /**
     * Render declutter items for this layer
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     */ CanvasVectorLayerRenderer1.prototype.renderDeclutter = function(frameState) {
        if (this.declutterExecutorGroup) this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);
    };
    /**
     * Render the layer.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target that may be used to render content to.
     * @return {HTMLElement} The rendered element.
     */ CanvasVectorLayerRenderer1.prototype.renderFrame = function(frameState, target) {
        var pixelRatio = frameState.pixelRatio;
        var layerState = frameState.layerStatesArray[frameState.layerIndex];
        // set forward and inverse pixel transforms
        (0, _transformJs.makeScale)(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);
        (0, _transformJs.makeInverse)(this.inversePixelTransform, this.pixelTransform);
        var canvasTransform = (0, _transformJs.toString)(this.pixelTransform);
        this.useContainer(target, canvasTransform, layerState.opacity, this.getBackground(frameState));
        var context = this.context;
        var canvas = context.canvas;
        var replayGroup = this.replayGroup_;
        var declutterExecutorGroup = this.declutterExecutorGroup;
        if ((!replayGroup || replayGroup.isEmpty()) && (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) return null;
        // resize and clear
        var width = Math.round(frameState.size[0] * pixelRatio);
        var height = Math.round(frameState.size[1] * pixelRatio);
        if (canvas.width != width || canvas.height != height) {
            canvas.width = width;
            canvas.height = height;
            if (canvas.style.transform !== canvasTransform) canvas.style.transform = canvasTransform;
        } else if (!this.containerReused) context.clearRect(0, 0, width, height);
        this.preRender(context, frameState);
        var viewState = frameState.viewState;
        var projection = viewState.projection;
        // clipped rendering if layer extent is set
        var clipped = false;
        var render = true;
        if (layerState.extent && this.clipping) {
            var layerExtent = (0, _projJs.fromUserExtent)(layerState.extent, projection);
            render = (0, _extentJs.intersects)(layerExtent, frameState.extent);
            clipped = render && !(0, _extentJs.containsExtent)(layerExtent, frameState.extent);
            if (clipped) this.clipUnrotated(context, frameState, layerExtent);
        }
        if (render) this.renderWorlds(replayGroup, frameState);
        if (clipped) context.restore();
        this.postRender(context, frameState);
        var opacity = (0, _cssJs.cssOpacity)(layerState.opacity);
        var container = this.container;
        if (opacity !== container.style.opacity) container.style.opacity = opacity;
        if (this.renderedRotation_ !== viewState.rotation) {
            this.renderedRotation_ = viewState.rotation;
            this.hitDetectionImageData_ = null;
        }
        return this.container;
    };
    /**
     * Asynchronous layer level hit detection.
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../../Feature").default>>} Promise that resolves with an array of features.
     */ CanvasVectorLayerRenderer1.prototype.getFeatures = function(pixel) {
        return new Promise(/**
         * @param {function(Array<import("../../Feature").default|import("../../render/Feature").default>): void} resolve Resolver function.
         * @this {CanvasVectorLayerRenderer}
         */ (function(resolve) {
            if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {
                var size = [
                    this.context.canvas.width,
                    this.context.canvas.height
                ];
                (0, _transformJs.apply)(this.pixelTransform, size);
                var center = this.renderedCenter_;
                var resolution = this.renderedResolution_;
                var rotation = this.renderedRotation_;
                var projection = this.renderedProjection_;
                var extent = this.wrappedRenderedExtent_;
                var layer = this.getLayer();
                var transforms = [];
                var width = size[0] * (0, _hitdetectJs.HIT_DETECT_RESOLUTION);
                var height = size[1] * (0, _hitdetectJs.HIT_DETECT_RESOLUTION);
                transforms.push(this.getRenderTransform(center, resolution, rotation, (0, _hitdetectJs.HIT_DETECT_RESOLUTION), width, height, 0).slice());
                var source = layer.getSource();
                var projectionExtent = projection.getExtent();
                if (source.getWrapX() && projection.canWrapX() && !(0, _extentJs.containsExtent)(projectionExtent, extent)) {
                    var startX = extent[0];
                    var worldWidth = (0, _extentJs.getWidth)(projectionExtent);
                    var world = 0;
                    var offsetX = void 0;
                    while(startX < projectionExtent[0]){
                        --world;
                        offsetX = worldWidth * world;
                        transforms.push(this.getRenderTransform(center, resolution, rotation, (0, _hitdetectJs.HIT_DETECT_RESOLUTION), width, height, offsetX).slice());
                        startX += worldWidth;
                    }
                    world = 0;
                    startX = extent[2];
                    while(startX > projectionExtent[2]){
                        ++world;
                        offsetX = worldWidth * world;
                        transforms.push(this.getRenderTransform(center, resolution, rotation, (0, _hitdetectJs.HIT_DETECT_RESOLUTION), width, height, offsetX).slice());
                        startX -= worldWidth;
                    }
                }
                this.hitDetectionImageData_ = (0, _hitdetectJs.createHitDetectionImageData)(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);
            }
            resolve((0, _hitdetectJs.hitDetect)(pixel, this.renderedFeatures_, this.hitDetectionImageData_));
        }).bind(this));
    };
    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {import("../vector.js").FeatureCallback<T>} callback Feature callback.
     * @param {Array<import("../Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
     * @return {T|undefined} Callback result.
     * @template T
     */ CanvasVectorLayerRenderer1.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, matches) {
        var _this = this;
        if (!this.replayGroup_) return undefined;
        var resolution = frameState.viewState.resolution;
        var rotation = frameState.viewState.rotation;
        var layer = this.getLayer();
        /** @type {!Object<string, import("../Map.js").HitMatch<T>|true>} */ var features = {};
        /**
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
         * @param {number} distanceSq The squared distance to the click position
         * @return {T|undefined} Callback result.
         */ var featureCallback = function(feature, geometry, distanceSq) {
            var key = (0, _utilJs.getUid)(feature);
            var match = features[key];
            if (!match) {
                if (distanceSq === 0) {
                    features[key] = true;
                    return callback(feature, layer, geometry);
                }
                matches.push(features[key] = {
                    feature: feature,
                    layer: layer,
                    geometry: geometry,
                    distanceSq: distanceSq,
                    callback: callback
                });
            } else if (match !== true && distanceSq < match.distanceSq) {
                if (distanceSq === 0) {
                    features[key] = true;
                    matches.splice(matches.lastIndexOf(match), 1);
                    return callback(feature, layer, geometry);
                }
                match.geometry = geometry;
                match.distanceSq = distanceSq;
            }
            return undefined;
        };
        var result;
        var executorGroups = [
            this.replayGroup_
        ];
        if (this.declutterExecutorGroup) executorGroups.push(this.declutterExecutorGroup);
        executorGroups.some(function(executorGroup) {
            return result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === _this.declutterExecutorGroup && frameState.declutterTree ? frameState.declutterTree.all().map(function(item) {
                return item.value;
            }) : null);
        });
        return result;
    };
    /**
     * Perform action necessary to get the layer rendered after new fonts have loaded
     */ CanvasVectorLayerRenderer1.prototype.handleFontsChanged = function() {
        var layer = this.getLayer();
        if (layer.getVisible() && this.replayGroup_) layer.changed();
    };
    /**
     * Handle changes in image style state.
     * @param {import("../../events/Event.js").default} event Image style change event.
     * @private
     */ CanvasVectorLayerRenderer1.prototype.handleStyleImageChange_ = function(event) {
        this.renderIfReadyAndVisible();
    };
    /**
     * Determine whether render should be called.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */ CanvasVectorLayerRenderer1.prototype.prepareFrame = function(frameState) {
        var vectorLayer = this.getLayer();
        var vectorSource = vectorLayer.getSource();
        if (!vectorSource) return false;
        var animating = frameState.viewHints[(0, _viewHintJsDefault.default).ANIMATING];
        var interacting = frameState.viewHints[(0, _viewHintJsDefault.default).INTERACTING];
        var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
        var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();
        if (!this.dirty_ && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {
            this.animatingOrInteracting_ = true;
            return true;
        }
        this.animatingOrInteracting_ = false;
        var frameStateExtent = frameState.extent;
        var viewState = frameState.viewState;
        var projection = viewState.projection;
        var resolution = viewState.resolution;
        var pixelRatio = frameState.pixelRatio;
        var vectorLayerRevision = vectorLayer.getRevision();
        var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
        var vectorLayerRenderOrder = vectorLayer.getRenderOrder();
        if (vectorLayerRenderOrder === undefined) vectorLayerRenderOrder = (0, _vectorJs.defaultOrder);
        var center = viewState.center.slice();
        var extent = (0, _extentJs.buffer)(frameStateExtent, vectorLayerRenderBuffer * resolution);
        var renderedExtent = extent.slice();
        var loadExtents = [
            extent.slice()
        ];
        var projectionExtent = projection.getExtent();
        if (vectorSource.getWrapX() && projection.canWrapX() && !(0, _extentJs.containsExtent)(projectionExtent, frameState.extent)) {
            // For the replay group, we need an extent that intersects the real world
            // (-180° to +180°). To support geometries in a coordinate range from -540°
            // to +540°, we add at least 1 world width on each side of the projection
            // extent. If the viewport is wider than the world, we need to add half of
            // the viewport width to make sure we cover the whole viewport.
            var worldWidth = (0, _extentJs.getWidth)(projectionExtent);
            var gutter = Math.max((0, _extentJs.getWidth)(extent) / 2, worldWidth);
            extent[0] = projectionExtent[0] - gutter;
            extent[2] = projectionExtent[2] + gutter;
            (0, _coordinateJs.wrapX)(center, projection);
            var loadExtent = (0, _extentJs.wrapX)(loadExtents[0], projection);
            // If the extent crosses the date line, we load data for both edges of the worlds
            if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) loadExtents.push([
                loadExtent[0] + worldWidth,
                loadExtent[1],
                loadExtent[2] + worldWidth,
                loadExtent[3], 
            ]);
            else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) loadExtents.push([
                loadExtent[0] - worldWidth,
                loadExtent[1],
                loadExtent[2] - worldWidth,
                loadExtent[3], 
            ]);
        }
        if (!this.dirty_ && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && (0, _extentJs.containsExtent)(this.wrappedRenderedExtent_, extent)) {
            if (!(0, _arrayJs.equals)(this.renderedExtent_, renderedExtent)) {
                this.hitDetectionImageData_ = null;
                this.renderedExtent_ = renderedExtent;
            }
            this.renderedCenter_ = center;
            this.replayGroupChanged = false;
            return true;
        }
        this.replayGroup_ = null;
        this.dirty_ = false;
        var replayGroup = new (0, _builderGroupJsDefault.default)((0, _vectorJs.getTolerance)(resolution, pixelRatio), extent, resolution, pixelRatio);
        var declutterBuilderGroup;
        if (this.getLayer().getDeclutter()) declutterBuilderGroup = new (0, _builderGroupJsDefault.default)((0, _vectorJs.getTolerance)(resolution, pixelRatio), extent, resolution, pixelRatio);
        var userProjection = (0, _projJs.getUserProjection)();
        var userTransform;
        if (userProjection) {
            for(var i = 0, ii = loadExtents.length; i < ii; ++i){
                var extent_1 = loadExtents[i];
                var userExtent_1 = (0, _projJs.toUserExtent)(extent_1, projection);
                vectorSource.loadFeatures(userExtent_1, (0, _projJs.toUserResolution)(resolution, projection), userProjection);
            }
            userTransform = (0, _projJs.getTransformFromProjections)(userProjection, projection);
        } else for(var i = 0, ii = loadExtents.length; i < ii; ++i)vectorSource.loadFeatures(loadExtents[i], resolution, projection);
        var squaredTolerance = (0, _vectorJs.getSquaredTolerance)(resolution, pixelRatio);
        var render = /**
         * @param {import("../../Feature.js").default} feature Feature.
         * @this {CanvasVectorLayerRenderer}
         */ (function(feature) {
            var styles;
            var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
            if (styleFunction) styles = styleFunction(feature, resolution);
            if (styles) {
                var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);
                this.dirty_ = this.dirty_ || dirty;
            }
        }).bind(this);
        var userExtent = (0, _projJs.toUserExtent)(extent, projection);
        /** @type {Array<import("../../Feature.js").default>} */ var features = vectorSource.getFeaturesInExtent(userExtent);
        if (vectorLayerRenderOrder) features.sort(vectorLayerRenderOrder);
        for(var i = 0, ii = features.length; i < ii; ++i)render(features[i]);
        this.renderedFeatures_ = features;
        var replayGroupInstructions = replayGroup.finish();
        var executorGroup = new (0, _executorGroupJsDefault.default)(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());
        if (declutterBuilderGroup) this.declutterExecutorGroup = new (0, _executorGroupJsDefault.default)(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());
        this.renderedResolution_ = resolution;
        this.renderedRevision_ = vectorLayerRevision;
        this.renderedRenderOrder_ = vectorLayerRenderOrder;
        this.renderedExtent_ = renderedExtent;
        this.wrappedRenderedExtent_ = extent;
        this.renderedCenter_ = center;
        this.renderedProjection_ = projection;
        this.replayGroup_ = executorGroup;
        this.hitDetectionImageData_ = null;
        this.replayGroupChanged = true;
        return true;
    };
    /**
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {number} squaredTolerance Squared render tolerance.
     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
     * @param {import("../../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
     * @param {import("../../proj.js").TransformFunction} [opt_transform] Transform from user to view projection.
     * @param {import("../../render/canvas/BuilderGroup.js").default} [opt_declutterBuilderGroup] Builder for decluttering.
     * @return {boolean} `true` if an image is loading.
     */ CanvasVectorLayerRenderer1.prototype.renderFeature = function(feature, squaredTolerance, styles, builderGroup, opt_transform, opt_declutterBuilderGroup) {
        if (!styles) return false;
        var loading = false;
        if (Array.isArray(styles)) for(var i = 0, ii = styles.length; i < ii; ++i)loading = (0, _vectorJs.renderFeature)(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup) || loading;
        else loading = (0, _vectorJs.renderFeature)(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup);
        return loading;
    };
    return CanvasVectorLayerRenderer1;
}((0, _layerJsDefault.default));
exports.default = CanvasVectorLayerRenderer;

},{"../../render/canvas/BuilderGroup.js":"kQbDd","./Layer.js":"fY3ny","../../render/canvas/ExecutorGroup.js":"eUidV","../../ViewHint.js":"6THmF","../../render/canvas/hitdetect.js":"hriIE","../../transform.js":"1BqUf","../../extent.js":"6YrVc","../../css.js":"lDlNi","../vector.js":"liv8a","../../array.js":"1Fbic","../../proj.js":"SznqC","../../util.js":"pLBjQ","../../coordinate.js":"85Vu7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQbDd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/render/canvas/BuilderGroup
 */ var _builderJs = require("./Builder.js");
var _builderJsDefault = parcelHelpers.interopDefault(_builderJs);
var _imageBuilderJs = require("./ImageBuilder.js");
var _imageBuilderJsDefault = parcelHelpers.interopDefault(_imageBuilderJs);
var _lineStringBuilderJs = require("./LineStringBuilder.js");
var _lineStringBuilderJsDefault = parcelHelpers.interopDefault(_lineStringBuilderJs);
var _polygonBuilderJs = require("./PolygonBuilder.js");
var _polygonBuilderJsDefault = parcelHelpers.interopDefault(_polygonBuilderJs);
var _textBuilderJs = require("./TextBuilder.js");
var _textBuilderJsDefault = parcelHelpers.interopDefault(_textBuilderJs);
/**
 * @type {Object<import("./BuilderType").default, typeof Builder>}
 */ var BATCH_CONSTRUCTORS = {
    "Circle": (0, _polygonBuilderJsDefault.default),
    "Default": (0, _builderJsDefault.default),
    "Image": (0, _imageBuilderJsDefault.default),
    "LineString": (0, _lineStringBuilderJsDefault.default),
    "Polygon": (0, _polygonBuilderJsDefault.default),
    "Text": (0, _textBuilderJsDefault.default)
};
var BuilderGroup = /** @class */ function() {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Max extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */ function BuilderGroup1(tolerance, maxExtent, resolution, pixelRatio) {
        /**
         * @private
         * @type {number}
         */ this.tolerance_ = tolerance;
        /**
         * @private
         * @type {import("../../extent.js").Extent}
         */ this.maxExtent_ = maxExtent;
        /**
         * @private
         * @type {number}
         */ this.pixelRatio_ = pixelRatio;
        /**
         * @private
         * @type {number}
         */ this.resolution_ = resolution;
        /**
         * @private
         * @type {!Object<string, !Object<import("./BuilderType").default, Builder>>}
         */ this.buildersByZIndex_ = {};
    }
    /**
     * @return {!Object<string, !Object<import("./BuilderType").default, import("./Builder.js").SerializableInstructions>>} The serializable instructions
     */ BuilderGroup1.prototype.finish = function() {
        var builderInstructions = {};
        for(var zKey in this.buildersByZIndex_){
            builderInstructions[zKey] = builderInstructions[zKey] || {};
            var builders = this.buildersByZIndex_[zKey];
            for(var builderKey in builders){
                var builderInstruction = builders[builderKey].finish();
                builderInstructions[zKey][builderKey] = builderInstruction;
            }
        }
        return builderInstructions;
    };
    /**
     * @param {number|undefined} zIndex Z index.
     * @param {import("./BuilderType.js").default} builderType Replay type.
     * @return {import("../VectorContext.js").default} Replay.
     */ BuilderGroup1.prototype.getBuilder = function(zIndex, builderType) {
        var zIndexKey = zIndex !== undefined ? zIndex.toString() : "0";
        var replays = this.buildersByZIndex_[zIndexKey];
        if (replays === undefined) {
            replays = {};
            this.buildersByZIndex_[zIndexKey] = replays;
        }
        var replay = replays[builderType];
        if (replay === undefined) {
            var Constructor = BATCH_CONSTRUCTORS[builderType];
            replay = new Constructor(this.tolerance_, this.maxExtent_, this.resolution_, this.pixelRatio_);
            replays[builderType] = replay;
        }
        return replay;
    };
    return BuilderGroup1;
}();
exports.default = BuilderGroup;

},{"./Builder.js":"aCopB","./ImageBuilder.js":"jkri9","./LineStringBuilder.js":"cuNSN","./PolygonBuilder.js":"992jH","./TextBuilder.js":"6mvke","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aCopB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/render/canvas/Builder
 */ var _instructionJs = require("./Instruction.js");
var _instructionJsDefault = parcelHelpers.interopDefault(_instructionJs);
var _geometryTypeJs = require("../../geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _relationshipJs = require("../../extent/Relationship.js");
var _relationshipJsDefault = parcelHelpers.interopDefault(_relationshipJs);
var _vectorContextJs = require("../VectorContext.js");
var _vectorContextJsDefault = parcelHelpers.interopDefault(_vectorContextJs);
var _colorlikeJs = require("../../colorlike.js");
var _extentJs = require("../../extent.js");
var _canvasJs = require("../canvas.js");
var _arrayJs = require("../../array.js");
var _inflateJs = require("../../geom/flat/inflate.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var CanvasBuilder = /** @class */ function(_super) {
    __extends(CanvasBuilder1, _super);
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */ function CanvasBuilder1(tolerance, maxExtent, resolution, pixelRatio) {
        var _this = _super.call(this) || this;
        /**
         * @protected
         * @type {number}
         */ _this.tolerance = tolerance;
        /**
         * @protected
         * @const
         * @type {import("../../extent.js").Extent}
         */ _this.maxExtent = maxExtent;
        /**
         * @protected
         * @type {number}
         */ _this.pixelRatio = pixelRatio;
        /**
         * @protected
         * @type {number}
         */ _this.maxLineWidth = 0;
        /**
         * @protected
         * @const
         * @type {number}
         */ _this.resolution = resolution;
        /**
         * @private
         * @type {Array<*>}
         */ _this.beginGeometryInstruction1_ = null;
        /**
         * @private
         * @type {Array<*>}
         */ _this.beginGeometryInstruction2_ = null;
        /**
         * @private
         * @type {import("../../extent.js").Extent}
         */ _this.bufferedMaxExtent_ = null;
        /**
         * @protected
         * @type {Array<*>}
         */ _this.instructions = [];
        /**
         * @protected
         * @type {Array<number>}
         */ _this.coordinates = [];
        /**
         * @private
         * @type {import("../../coordinate.js").Coordinate}
         */ _this.tmpCoordinate_ = [];
        /**
         * @protected
         * @type {Array<*>}
         */ _this.hitDetectionInstructions = [];
        /**
         * @protected
         * @type {import("../canvas.js").FillStrokeState}
         */ _this.state = {};
        return _this;
    }
    /**
     * @protected
     * @param {Array<number>} dashArray Dash array.
     * @return {Array<number>} Dash array with pixel ratio applied
     */ CanvasBuilder1.prototype.applyPixelRatio = function(dashArray) {
        var pixelRatio = this.pixelRatio;
        return pixelRatio == 1 ? dashArray : dashArray.map(function(dash) {
            return dash * pixelRatio;
        });
    };
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} stride Stride.
     * @protected
     * @return {number} My end
     */ CanvasBuilder1.prototype.appendFlatPointCoordinates = function(flatCoordinates, stride) {
        var extent = this.getBufferedMaxExtent();
        var tmpCoord = this.tmpCoordinate_;
        var coordinates = this.coordinates;
        var myEnd = coordinates.length;
        for(var i = 0, ii = flatCoordinates.length; i < ii; i += stride){
            tmpCoord[0] = flatCoordinates[i];
            tmpCoord[1] = flatCoordinates[i + 1];
            if ((0, _extentJs.containsCoordinate)(extent, tmpCoord)) {
                coordinates[myEnd++] = tmpCoord[0];
                coordinates[myEnd++] = tmpCoord[1];
            }
        }
        return myEnd;
    };
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {boolean} closed Last input coordinate equals first.
     * @param {boolean} skipFirst Skip first coordinate.
     * @protected
     * @return {number} My end.
     */ CanvasBuilder1.prototype.appendFlatLineCoordinates = function(flatCoordinates, offset, end, stride, closed, skipFirst) {
        var coordinates = this.coordinates;
        var myEnd = coordinates.length;
        var extent = this.getBufferedMaxExtent();
        if (skipFirst) offset += stride;
        var lastXCoord = flatCoordinates[offset];
        var lastYCoord = flatCoordinates[offset + 1];
        var nextCoord = this.tmpCoordinate_;
        var skipped = true;
        var i, lastRel, nextRel;
        for(i = offset + stride; i < end; i += stride){
            nextCoord[0] = flatCoordinates[i];
            nextCoord[1] = flatCoordinates[i + 1];
            nextRel = (0, _extentJs.coordinateRelationship)(extent, nextCoord);
            if (nextRel !== lastRel) {
                if (skipped) {
                    coordinates[myEnd++] = lastXCoord;
                    coordinates[myEnd++] = lastYCoord;
                    skipped = false;
                }
                coordinates[myEnd++] = nextCoord[0];
                coordinates[myEnd++] = nextCoord[1];
            } else if (nextRel === (0, _relationshipJsDefault.default).INTERSECTING) {
                coordinates[myEnd++] = nextCoord[0];
                coordinates[myEnd++] = nextCoord[1];
                skipped = false;
            } else skipped = true;
            lastXCoord = nextCoord[0];
            lastYCoord = nextCoord[1];
            lastRel = nextRel;
        }
        // Last coordinate equals first or only one point to append:
        if (closed && skipped || i === offset + stride) {
            coordinates[myEnd++] = lastXCoord;
            coordinates[myEnd++] = lastYCoord;
        }
        return myEnd;
    };
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {Array<number>} builderEnds Builder ends.
     * @return {number} Offset.
     */ CanvasBuilder1.prototype.drawCustomCoordinates_ = function(flatCoordinates, offset, ends, stride, builderEnds) {
        for(var i = 0, ii = ends.length; i < ii; ++i){
            var end = ends[i];
            var builderEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);
            builderEnds.push(builderEnd);
            offset = end;
        }
        return offset;
    };
    /**
     * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {Function} renderer Renderer.
     * @param {Function} hitDetectionRenderer Renderer.
     */ CanvasBuilder1.prototype.drawCustom = function(geometry, feature, renderer, hitDetectionRenderer) {
        this.beginGeometry(geometry, feature);
        var type = geometry.getType();
        var stride = geometry.getStride();
        var builderBegin = this.coordinates.length;
        var flatCoordinates, builderEnd, builderEnds, builderEndss;
        var offset;
        switch(type){
            case (0, _geometryTypeJsDefault.default).MULTI_POLYGON:
                flatCoordinates = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.getOrientedFlatCoordinates();
                builderEndss = [];
                var endss = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.getEndss();
                offset = 0;
                for(var i = 0, ii = endss.length; i < ii; ++i){
                    var myEnds = [];
                    offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);
                    builderEndss.push(myEnds);
                }
                this.instructions.push([
                    (0, _instructionJsDefault.default).CUSTOM,
                    builderBegin,
                    builderEndss,
                    geometry,
                    renderer,
                    (0, _inflateJs.inflateMultiCoordinatesArray), 
                ]);
                this.hitDetectionInstructions.push([
                    (0, _instructionJsDefault.default).CUSTOM,
                    builderBegin,
                    builderEndss,
                    geometry,
                    hitDetectionRenderer || renderer,
                    (0, _inflateJs.inflateMultiCoordinatesArray), 
                ]);
                break;
            case (0, _geometryTypeJsDefault.default).POLYGON:
            case (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING:
                builderEnds = [];
                flatCoordinates = type == (0, _geometryTypeJsDefault.default).POLYGON ? /** @type {import("../../geom/Polygon.js").default} */ geometry.getOrientedFlatCoordinates() : geometry.getFlatCoordinates();
                offset = this.drawCustomCoordinates_(flatCoordinates, 0, /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */ geometry.getEnds(), stride, builderEnds);
                this.instructions.push([
                    (0, _instructionJsDefault.default).CUSTOM,
                    builderBegin,
                    builderEnds,
                    geometry,
                    renderer,
                    (0, _inflateJs.inflateCoordinatesArray), 
                ]);
                this.hitDetectionInstructions.push([
                    (0, _instructionJsDefault.default).CUSTOM,
                    builderBegin,
                    builderEnds,
                    geometry,
                    hitDetectionRenderer || renderer,
                    (0, _inflateJs.inflateCoordinatesArray), 
                ]);
                break;
            case (0, _geometryTypeJsDefault.default).LINE_STRING:
            case (0, _geometryTypeJsDefault.default).CIRCLE:
                flatCoordinates = geometry.getFlatCoordinates();
                builderEnd = this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
                this.instructions.push([
                    (0, _instructionJsDefault.default).CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    renderer,
                    (0, _inflateJs.inflateCoordinates), 
                ]);
                this.hitDetectionInstructions.push([
                    (0, _instructionJsDefault.default).CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    hitDetectionRenderer || renderer,
                    (0, _inflateJs.inflateCoordinates), 
                ]);
                break;
            case (0, _geometryTypeJsDefault.default).MULTI_POINT:
                flatCoordinates = geometry.getFlatCoordinates();
                builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
                if (builderEnd > builderBegin) {
                    this.instructions.push([
                        (0, _instructionJsDefault.default).CUSTOM,
                        builderBegin,
                        builderEnd,
                        geometry,
                        renderer,
                        (0, _inflateJs.inflateCoordinates), 
                    ]);
                    this.hitDetectionInstructions.push([
                        (0, _instructionJsDefault.default).CUSTOM,
                        builderBegin,
                        builderEnd,
                        geometry,
                        hitDetectionRenderer || renderer,
                        (0, _inflateJs.inflateCoordinates), 
                    ]);
                }
                break;
            case (0, _geometryTypeJsDefault.default).POINT:
                flatCoordinates = geometry.getFlatCoordinates();
                this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);
                builderEnd = this.coordinates.length;
                this.instructions.push([
                    (0, _instructionJsDefault.default).CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    renderer, 
                ]);
                this.hitDetectionInstructions.push([
                    (0, _instructionJsDefault.default).CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    hitDetectionRenderer || renderer, 
                ]);
                break;
            default:
        }
        this.endGeometry(feature);
    };
    /**
     * @protected
     * @param {import("../../geom/Geometry").default|import("../Feature.js").default} geometry The geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */ CanvasBuilder1.prototype.beginGeometry = function(geometry, feature) {
        this.beginGeometryInstruction1_ = [
            (0, _instructionJsDefault.default).BEGIN_GEOMETRY,
            feature,
            0,
            geometry, 
        ];
        this.instructions.push(this.beginGeometryInstruction1_);
        this.beginGeometryInstruction2_ = [
            (0, _instructionJsDefault.default).BEGIN_GEOMETRY,
            feature,
            0,
            geometry, 
        ];
        this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
    };
    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     */ CanvasBuilder1.prototype.finish = function() {
        return {
            instructions: this.instructions,
            hitDetectionInstructions: this.hitDetectionInstructions,
            coordinates: this.coordinates
        };
    };
    /**
     * Reverse the hit detection instructions.
     */ CanvasBuilder1.prototype.reverseHitDetectionInstructions = function() {
        var hitDetectionInstructions = this.hitDetectionInstructions;
        // step 1 - reverse array
        hitDetectionInstructions.reverse();
        // step 2 - reverse instructions within geometry blocks
        var i;
        var n = hitDetectionInstructions.length;
        var instruction;
        var type;
        var begin = -1;
        for(i = 0; i < n; ++i){
            instruction = hitDetectionInstructions[i];
            type = instruction[0];
            if (type == (0, _instructionJsDefault.default).END_GEOMETRY) begin = i;
            else if (type == (0, _instructionJsDefault.default).BEGIN_GEOMETRY) {
                instruction[2] = i;
                (0, _arrayJs.reverseSubArray)(this.hitDetectionInstructions, begin, i);
                begin = -1;
            }
        }
    };
    /**
     * @param {import("../../style/Fill.js").default} fillStyle Fill style.
     * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
     */ CanvasBuilder1.prototype.setFillStrokeStyle = function(fillStyle, strokeStyle) {
        var state = this.state;
        if (fillStyle) {
            var fillStyleColor = fillStyle.getColor();
            state.fillStyle = (0, _colorlikeJs.asColorLike)(fillStyleColor ? fillStyleColor : (0, _canvasJs.defaultFillStyle));
        } else state.fillStyle = undefined;
        if (strokeStyle) {
            var strokeStyleColor = strokeStyle.getColor();
            state.strokeStyle = (0, _colorlikeJs.asColorLike)(strokeStyleColor ? strokeStyleColor : (0, _canvasJs.defaultStrokeStyle));
            var strokeStyleLineCap = strokeStyle.getLineCap();
            state.lineCap = strokeStyleLineCap !== undefined ? strokeStyleLineCap : (0, _canvasJs.defaultLineCap);
            var strokeStyleLineDash = strokeStyle.getLineDash();
            state.lineDash = strokeStyleLineDash ? strokeStyleLineDash.slice() : (0, _canvasJs.defaultLineDash);
            var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
            state.lineDashOffset = strokeStyleLineDashOffset ? strokeStyleLineDashOffset : (0, _canvasJs.defaultLineDashOffset);
            var strokeStyleLineJoin = strokeStyle.getLineJoin();
            state.lineJoin = strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : (0, _canvasJs.defaultLineJoin);
            var strokeStyleWidth = strokeStyle.getWidth();
            state.lineWidth = strokeStyleWidth !== undefined ? strokeStyleWidth : (0, _canvasJs.defaultLineWidth);
            var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
            state.miterLimit = strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : (0, _canvasJs.defaultMiterLimit);
            if (state.lineWidth > this.maxLineWidth) {
                this.maxLineWidth = state.lineWidth;
                // invalidate the buffered max extent cache
                this.bufferedMaxExtent_ = null;
            }
        } else {
            state.strokeStyle = undefined;
            state.lineCap = undefined;
            state.lineDash = null;
            state.lineDashOffset = undefined;
            state.lineJoin = undefined;
            state.lineWidth = undefined;
            state.miterLimit = undefined;
        }
    };
    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @return {Array<*>} Fill instruction.
     */ CanvasBuilder1.prototype.createFill = function(state) {
        var fillStyle = state.fillStyle;
        /** @type {Array<*>} */ var fillInstruction = [
            (0, _instructionJsDefault.default).SET_FILL_STYLE,
            fillStyle
        ];
        if (typeof fillStyle !== "string") // Fill is a pattern or gradient - align it!
        fillInstruction.push(true);
        return fillInstruction;
    };
    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     */ CanvasBuilder1.prototype.applyStroke = function(state) {
        this.instructions.push(this.createStroke(state));
    };
    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @return {Array<*>} Stroke instruction.
     */ CanvasBuilder1.prototype.createStroke = function(state) {
        return [
            (0, _instructionJsDefault.default).SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth * this.pixelRatio,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            this.applyPixelRatio(state.lineDash),
            state.lineDashOffset * this.pixelRatio, 
        ];
    };
    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState):Array<*>} createFill Create fill.
     */ CanvasBuilder1.prototype.updateFillStyle = function(state, createFill) {
        var fillStyle = state.fillStyle;
        if (typeof fillStyle !== "string" || state.currentFillStyle != fillStyle) {
            if (fillStyle !== undefined) this.instructions.push(createFill.call(this, state));
            state.currentFillStyle = fillStyle;
        }
    };
    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState): void} applyStroke Apply stroke.
     */ CanvasBuilder1.prototype.updateStrokeStyle = function(state, applyStroke) {
        var strokeStyle = state.strokeStyle;
        var lineCap = state.lineCap;
        var lineDash = state.lineDash;
        var lineDashOffset = state.lineDashOffset;
        var lineJoin = state.lineJoin;
        var lineWidth = state.lineWidth;
        var miterLimit = state.miterLimit;
        if (state.currentStrokeStyle != strokeStyle || state.currentLineCap != lineCap || lineDash != state.currentLineDash && !(0, _arrayJs.equals)(state.currentLineDash, lineDash) || state.currentLineDashOffset != lineDashOffset || state.currentLineJoin != lineJoin || state.currentLineWidth != lineWidth || state.currentMiterLimit != miterLimit) {
            if (strokeStyle !== undefined) applyStroke.call(this, state);
            state.currentStrokeStyle = strokeStyle;
            state.currentLineCap = lineCap;
            state.currentLineDash = lineDash;
            state.currentLineDashOffset = lineDashOffset;
            state.currentLineJoin = lineJoin;
            state.currentLineWidth = lineWidth;
            state.currentMiterLimit = miterLimit;
        }
    };
    /**
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */ CanvasBuilder1.prototype.endGeometry = function(feature) {
        this.beginGeometryInstruction1_[2] = this.instructions.length;
        this.beginGeometryInstruction1_ = null;
        this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;
        this.beginGeometryInstruction2_ = null;
        var endGeometryInstruction = [
            (0, _instructionJsDefault.default).END_GEOMETRY,
            feature
        ];
        this.instructions.push(endGeometryInstruction);
        this.hitDetectionInstructions.push(endGeometryInstruction);
    };
    /**
     * Get the buffered rendering extent.  Rendering will be clipped to the extent
     * provided to the constructor.  To account for symbolizers that may intersect
     * this extent, we calculate a buffered extent (e.g. based on stroke width).
     * @return {import("../../extent.js").Extent} The buffered rendering extent.
     * @protected
     */ CanvasBuilder1.prototype.getBufferedMaxExtent = function() {
        if (!this.bufferedMaxExtent_) {
            this.bufferedMaxExtent_ = (0, _extentJs.clone)(this.maxExtent);
            if (this.maxLineWidth > 0) {
                var width = this.resolution * (this.maxLineWidth + 1) / 2;
                (0, _extentJs.buffer)(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);
            }
        }
        return this.bufferedMaxExtent_;
    };
    return CanvasBuilder1;
}((0, _vectorContextJsDefault.default));
exports.default = CanvasBuilder;

},{"./Instruction.js":"9nhw8","../../geom/GeometryType.js":"j6daa","../../extent/Relationship.js":"9q0e7","../VectorContext.js":"ezpza","../../colorlike.js":"ftcFo","../../extent.js":"6YrVc","../canvas.js":"e85iQ","../../array.js":"1Fbic","../../geom/flat/inflate.js":"4Rpju","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9nhw8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fillInstruction", ()=>fillInstruction);
parcelHelpers.export(exports, "strokeInstruction", ()=>strokeInstruction);
parcelHelpers.export(exports, "beginPathInstruction", ()=>beginPathInstruction);
parcelHelpers.export(exports, "closePathInstruction", ()=>closePathInstruction);
/**
 * @module ol/render/canvas/Instruction
 */ /**
 * @enum {number}
 */ var Instruction = {
    BEGIN_GEOMETRY: 0,
    BEGIN_PATH: 1,
    CIRCLE: 2,
    CLOSE_PATH: 3,
    CUSTOM: 4,
    DRAW_CHARS: 5,
    DRAW_IMAGE: 6,
    END_GEOMETRY: 7,
    FILL: 8,
    MOVE_TO_LINE_TO: 9,
    SET_FILL_STYLE: 10,
    SET_STROKE_STYLE: 11,
    STROKE: 12
};
var fillInstruction = [
    Instruction.FILL
];
var strokeInstruction = [
    Instruction.STROKE
];
var beginPathInstruction = [
    Instruction.BEGIN_PATH
];
var closePathInstruction = [
    Instruction.CLOSE_PATH
];
exports.default = Instruction;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ezpza":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/render/VectorContext
 */ /**
 * @classdesc
 * Context for drawing geometries.  A vector context is available on render
 * events and does not need to be constructed directly.
 * @api
 */ var VectorContext = /** @class */ function() {
    function VectorContext1() {}
    /**
     * Render a geometry with a custom renderer.
     *
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {Function} renderer Renderer.
     * @param {Function} hitDetectionRenderer Renderer.
     */ VectorContext1.prototype.drawCustom = function(geometry, feature, renderer, hitDetectionRenderer) {};
    /**
     * Render a geometry.
     *
     * @param {import("../geom/Geometry.js").default} geometry The geometry to render.
     */ VectorContext1.prototype.drawGeometry = function(geometry) {};
    /**
     * Set the rendering style.
     *
     * @param {import("../style/Style.js").default} style The rendering style.
     */ VectorContext1.prototype.setStyle = function(style) {};
    /**
     * @param {import("../geom/Circle.js").default} circleGeometry Circle geometry.
     * @param {import("../Feature.js").default} feature Feature.
     */ VectorContext1.prototype.drawCircle = function(circleGeometry, feature) {};
    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("../style/Style.js").default} style Style.
     */ VectorContext1.prototype.drawFeature = function(feature, style) {};
    /**
     * @param {import("../geom/GeometryCollection.js").default} geometryCollectionGeometry Geometry collection.
     * @param {import("../Feature.js").default} feature Feature.
     */ VectorContext1.prototype.drawGeometryCollection = function(geometryCollectionGeometry, feature) {};
    /**
     * @param {import("../geom/LineString.js").default|import("./Feature.js").default} lineStringGeometry Line string geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */ VectorContext1.prototype.drawLineString = function(lineStringGeometry, feature) {};
    /**
     * @param {import("../geom/MultiLineString.js").default|import("./Feature.js").default} multiLineStringGeometry MultiLineString geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */ VectorContext1.prototype.drawMultiLineString = function(multiLineStringGeometry, feature) {};
    /**
     * @param {import("../geom/MultiPoint.js").default|import("./Feature.js").default} multiPointGeometry MultiPoint geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */ VectorContext1.prototype.drawMultiPoint = function(multiPointGeometry, feature) {};
    /**
     * @param {import("../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */ VectorContext1.prototype.drawMultiPolygon = function(multiPolygonGeometry, feature) {};
    /**
     * @param {import("../geom/Point.js").default|import("./Feature.js").default} pointGeometry Point geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */ VectorContext1.prototype.drawPoint = function(pointGeometry, feature) {};
    /**
     * @param {import("../geom/Polygon.js").default|import("./Feature.js").default} polygonGeometry Polygon geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */ VectorContext1.prototype.drawPolygon = function(polygonGeometry, feature) {};
    /**
     * @param {import("../geom/SimpleGeometry.js").default|import("./Feature.js").default} geometry Geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */ VectorContext1.prototype.drawText = function(geometry, feature) {};
    /**
     * @param {import("../style/Fill.js").default} fillStyle Fill style.
     * @param {import("../style/Stroke.js").default} strokeStyle Stroke style.
     */ VectorContext1.prototype.setFillStrokeStyle = function(fillStyle, strokeStyle) {};
    /**
     * @param {import("../style/Image.js").default} imageStyle Image style.
     * @param {import("../render/canvas.js").DeclutterImageWithText} [opt_declutterImageWithText] Shared data for combined decluttering with a text style.
     */ VectorContext1.prototype.setImageStyle = function(imageStyle, opt_declutterImageWithText) {};
    /**
     * @param {import("../style/Text.js").default} textStyle Text style.
     * @param {import("../render/canvas.js").DeclutterImageWithText} [opt_declutterImageWithText] Shared data for combined decluttering with an image style.
     */ VectorContext1.prototype.setTextStyle = function(textStyle, opt_declutterImageWithText) {};
    return VectorContext1;
}();
exports.default = VectorContext;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jkri9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/render/canvas/ImageBuilder
 */ var _builderJs = require("./Builder.js");
var _builderJsDefault = parcelHelpers.interopDefault(_builderJs);
var _instructionJs = require("./Instruction.js");
var _instructionJsDefault = parcelHelpers.interopDefault(_instructionJs);
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var CanvasImageBuilder = /** @class */ function(_super) {
    __extends(CanvasImageBuilder1, _super);
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */ function CanvasImageBuilder1(tolerance, maxExtent, resolution, pixelRatio) {
        var _this = _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
        /**
         * @private
         * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
         */ _this.hitDetectionImage_ = null;
        /**
         * @private
         * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
         */ _this.image_ = null;
        /**
         * @private
         * @type {number|undefined}
         */ _this.imagePixelRatio_ = undefined;
        /**
         * @private
         * @type {number|undefined}
         */ _this.anchorX_ = undefined;
        /**
         * @private
         * @type {number|undefined}
         */ _this.anchorY_ = undefined;
        /**
         * @private
         * @type {number|undefined}
         */ _this.height_ = undefined;
        /**
         * @private
         * @type {number|undefined}
         */ _this.opacity_ = undefined;
        /**
         * @private
         * @type {number|undefined}
         */ _this.originX_ = undefined;
        /**
         * @private
         * @type {number|undefined}
         */ _this.originY_ = undefined;
        /**
         * @private
         * @type {boolean|undefined}
         */ _this.rotateWithView_ = undefined;
        /**
         * @private
         * @type {number|undefined}
         */ _this.rotation_ = undefined;
        /**
         * @private
         * @type {import("../../size.js").Size|undefined}
         */ _this.scale_ = undefined;
        /**
         * @private
         * @type {number|undefined}
         */ _this.width_ = undefined;
        /**
         * Data shared with a text builder for combined decluttering.
         * @private
         * @type {import("../canvas.js").DeclutterImageWithText}
         */ _this.declutterImageWithText_ = undefined;
        return _this;
    }
    /**
     * @param {import("../../geom/Point.js").default|import("../Feature.js").default} pointGeometry Point geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */ CanvasImageBuilder1.prototype.drawPoint = function(pointGeometry, feature) {
        if (!this.image_) return;
        this.beginGeometry(pointGeometry, feature);
        var flatCoordinates = pointGeometry.getFlatCoordinates();
        var stride = pointGeometry.getStride();
        var myBegin = this.coordinates.length;
        var myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
        this.instructions.push([
            (0, _instructionJsDefault.default).DRAW_IMAGE,
            myBegin,
            myEnd,
            this.image_,
            // Remaining arguments to DRAW_IMAGE are in alphabetical order
            this.anchorX_ * this.imagePixelRatio_,
            this.anchorY_ * this.imagePixelRatio_,
            Math.ceil(this.height_ * this.imagePixelRatio_),
            this.opacity_,
            this.originX_,
            this.originY_,
            this.rotateWithView_,
            this.rotation_,
            [
                this.scale_[0] * this.pixelRatio / this.imagePixelRatio_,
                this.scale_[1] * this.pixelRatio / this.imagePixelRatio_, 
            ],
            Math.ceil(this.width_ * this.imagePixelRatio_),
            this.declutterImageWithText_, 
        ]);
        this.hitDetectionInstructions.push([
            (0, _instructionJsDefault.default).DRAW_IMAGE,
            myBegin,
            myEnd,
            this.hitDetectionImage_,
            // Remaining arguments to DRAW_IMAGE are in alphabetical order
            this.anchorX_,
            this.anchorY_,
            this.height_,
            this.opacity_,
            this.originX_,
            this.originY_,
            this.rotateWithView_,
            this.rotation_,
            this.scale_,
            this.width_,
            this.declutterImageWithText_, 
        ]);
        this.endGeometry(feature);
    };
    /**
     * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} multiPointGeometry MultiPoint geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */ CanvasImageBuilder1.prototype.drawMultiPoint = function(multiPointGeometry, feature) {
        if (!this.image_) return;
        this.beginGeometry(multiPointGeometry, feature);
        var flatCoordinates = multiPointGeometry.getFlatCoordinates();
        var stride = multiPointGeometry.getStride();
        var myBegin = this.coordinates.length;
        var myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
        this.instructions.push([
            (0, _instructionJsDefault.default).DRAW_IMAGE,
            myBegin,
            myEnd,
            this.image_,
            // Remaining arguments to DRAW_IMAGE are in alphabetical order
            this.anchorX_ * this.imagePixelRatio_,
            this.anchorY_ * this.imagePixelRatio_,
            Math.ceil(this.height_ * this.imagePixelRatio_),
            this.opacity_,
            this.originX_,
            this.originY_,
            this.rotateWithView_,
            this.rotation_,
            [
                this.scale_[0] * this.pixelRatio / this.imagePixelRatio_,
                this.scale_[1] * this.pixelRatio / this.imagePixelRatio_, 
            ],
            Math.ceil(this.width_ * this.imagePixelRatio_),
            this.declutterImageWithText_, 
        ]);
        this.hitDetectionInstructions.push([
            (0, _instructionJsDefault.default).DRAW_IMAGE,
            myBegin,
            myEnd,
            this.hitDetectionImage_,
            // Remaining arguments to DRAW_IMAGE are in alphabetical order
            this.anchorX_,
            this.anchorY_,
            this.height_,
            this.opacity_,
            this.originX_,
            this.originY_,
            this.rotateWithView_,
            this.rotation_,
            this.scale_,
            this.width_,
            this.declutterImageWithText_, 
        ]);
        this.endGeometry(feature);
    };
    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     */ CanvasImageBuilder1.prototype.finish = function() {
        this.reverseHitDetectionInstructions();
        // FIXME this doesn't really protect us against further calls to draw*Geometry
        this.anchorX_ = undefined;
        this.anchorY_ = undefined;
        this.hitDetectionImage_ = null;
        this.image_ = null;
        this.imagePixelRatio_ = undefined;
        this.height_ = undefined;
        this.scale_ = undefined;
        this.opacity_ = undefined;
        this.originX_ = undefined;
        this.originY_ = undefined;
        this.rotateWithView_ = undefined;
        this.rotation_ = undefined;
        this.width_ = undefined;
        return _super.prototype.finish.call(this);
    };
    /**
     * @param {import("../../style/Image.js").default} imageStyle Image style.
     * @param {Object} [opt_sharedData] Shared data.
     */ CanvasImageBuilder1.prototype.setImageStyle = function(imageStyle, opt_sharedData) {
        var anchor = imageStyle.getAnchor();
        var size = imageStyle.getSize();
        var hitDetectionImage = imageStyle.getHitDetectionImage();
        var image = imageStyle.getImage(this.pixelRatio);
        var origin = imageStyle.getOrigin();
        this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);
        this.anchorX_ = anchor[0];
        this.anchorY_ = anchor[1];
        this.hitDetectionImage_ = hitDetectionImage;
        this.image_ = image;
        this.height_ = size[1];
        this.opacity_ = imageStyle.getOpacity();
        this.originX_ = origin[0] * this.imagePixelRatio_;
        this.originY_ = origin[1] * this.imagePixelRatio_;
        this.rotateWithView_ = imageStyle.getRotateWithView();
        this.rotation_ = imageStyle.getRotation();
        this.scale_ = imageStyle.getScaleArray();
        this.width_ = size[0];
        this.declutterImageWithText_ = opt_sharedData;
    };
    return CanvasImageBuilder1;
}((0, _builderJsDefault.default));
exports.default = CanvasImageBuilder;

},{"./Builder.js":"aCopB","./Instruction.js":"9nhw8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cuNSN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/render/canvas/LineStringBuilder
 */ var _builderJs = require("./Builder.js");
var _builderJsDefault = parcelHelpers.interopDefault(_builderJs);
var _instructionJs = require("./Instruction.js");
var _instructionJsDefault = parcelHelpers.interopDefault(_instructionJs);
var _canvasJs = require("../canvas.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var CanvasLineStringBuilder = /** @class */ function(_super) {
    __extends(CanvasLineStringBuilder1, _super);
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */ function CanvasLineStringBuilder1(tolerance, maxExtent, resolution, pixelRatio) {
        return _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     * @return {number} end.
     */ CanvasLineStringBuilder1.prototype.drawFlatCoordinates_ = function(flatCoordinates, offset, end, stride) {
        var myBegin = this.coordinates.length;
        var myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);
        var moveToLineToInstruction = [
            (0, _instructionJsDefault.default).MOVE_TO_LINE_TO,
            myBegin,
            myEnd, 
        ];
        this.instructions.push(moveToLineToInstruction);
        this.hitDetectionInstructions.push(moveToLineToInstruction);
        return end;
    };
    /**
     * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} lineStringGeometry Line string geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */ CanvasLineStringBuilder1.prototype.drawLineString = function(lineStringGeometry, feature) {
        var state = this.state;
        var strokeStyle = state.strokeStyle;
        var lineWidth = state.lineWidth;
        if (strokeStyle === undefined || lineWidth === undefined) return;
        this.updateStrokeStyle(state, this.applyStroke);
        this.beginGeometry(lineStringGeometry, feature);
        this.hitDetectionInstructions.push([
            (0, _instructionJsDefault.default).SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            (0, _canvasJs.defaultLineDash),
            (0, _canvasJs.defaultLineDashOffset), 
        ], (0, _instructionJs.beginPathInstruction));
        var flatCoordinates = lineStringGeometry.getFlatCoordinates();
        var stride = lineStringGeometry.getStride();
        this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
        this.hitDetectionInstructions.push((0, _instructionJs.strokeInstruction));
        this.endGeometry(feature);
    };
    /**
     * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} multiLineStringGeometry MultiLineString geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */ CanvasLineStringBuilder1.prototype.drawMultiLineString = function(multiLineStringGeometry, feature) {
        var state = this.state;
        var strokeStyle = state.strokeStyle;
        var lineWidth = state.lineWidth;
        if (strokeStyle === undefined || lineWidth === undefined) return;
        this.updateStrokeStyle(state, this.applyStroke);
        this.beginGeometry(multiLineStringGeometry, feature);
        this.hitDetectionInstructions.push([
            (0, _instructionJsDefault.default).SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            state.lineDash,
            state.lineDashOffset, 
        ], (0, _instructionJs.beginPathInstruction));
        var ends = multiLineStringGeometry.getEnds();
        var flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
        var stride = multiLineStringGeometry.getStride();
        var offset = 0;
        for(var i = 0, ii = ends.length; i < ii; ++i)offset = this.drawFlatCoordinates_(flatCoordinates, offset, ends[i], stride);
        this.hitDetectionInstructions.push((0, _instructionJs.strokeInstruction));
        this.endGeometry(feature);
    };
    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     */ CanvasLineStringBuilder1.prototype.finish = function() {
        var state = this.state;
        if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) this.instructions.push((0, _instructionJs.strokeInstruction));
        this.reverseHitDetectionInstructions();
        this.state = null;
        return _super.prototype.finish.call(this);
    };
    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     */ CanvasLineStringBuilder1.prototype.applyStroke = function(state) {
        if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
            this.instructions.push((0, _instructionJs.strokeInstruction));
            state.lastStroke = this.coordinates.length;
        }
        state.lastStroke = 0;
        _super.prototype.applyStroke.call(this, state);
        this.instructions.push((0, _instructionJs.beginPathInstruction));
    };
    return CanvasLineStringBuilder1;
}((0, _builderJsDefault.default));
exports.default = CanvasLineStringBuilder;

},{"./Builder.js":"aCopB","./Instruction.js":"9nhw8","../canvas.js":"e85iQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"992jH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/render/canvas/PolygonBuilder
 */ var _builderJs = require("./Builder.js");
var _builderJsDefault = parcelHelpers.interopDefault(_builderJs);
var _instructionJs = require("./Instruction.js");
var _instructionJsDefault = parcelHelpers.interopDefault(_instructionJs);
var _canvasJs = require("../canvas.js");
var _simplifyJs = require("../../geom/flat/simplify.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var CanvasPolygonBuilder = /** @class */ function(_super) {
    __extends(CanvasPolygonBuilder1, _super);
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */ function CanvasPolygonBuilder1(tolerance, maxExtent, resolution, pixelRatio) {
        return _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @private
     * @return {number} End.
     */ CanvasPolygonBuilder1.prototype.drawFlatCoordinatess_ = function(flatCoordinates, offset, ends, stride) {
        var state = this.state;
        var fill = state.fillStyle !== undefined;
        var stroke = state.strokeStyle !== undefined;
        var numEnds = ends.length;
        this.instructions.push((0, _instructionJs.beginPathInstruction));
        this.hitDetectionInstructions.push((0, _instructionJs.beginPathInstruction));
        for(var i = 0; i < numEnds; ++i){
            var end = ends[i];
            var myBegin = this.coordinates.length;
            var myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, true, !stroke);
            var moveToLineToInstruction = [
                (0, _instructionJsDefault.default).MOVE_TO_LINE_TO,
                myBegin,
                myEnd, 
            ];
            this.instructions.push(moveToLineToInstruction);
            this.hitDetectionInstructions.push(moveToLineToInstruction);
            if (stroke) {
                // Performance optimization: only call closePath() when we have a stroke.
                // Otherwise the ring is closed already (see appendFlatLineCoordinates above).
                this.instructions.push((0, _instructionJs.closePathInstruction));
                this.hitDetectionInstructions.push((0, _instructionJs.closePathInstruction));
            }
            offset = end;
        }
        if (fill) {
            this.instructions.push((0, _instructionJs.fillInstruction));
            this.hitDetectionInstructions.push((0, _instructionJs.fillInstruction));
        }
        if (stroke) {
            this.instructions.push((0, _instructionJs.strokeInstruction));
            this.hitDetectionInstructions.push((0, _instructionJs.strokeInstruction));
        }
        return offset;
    };
    /**
     * @param {import("../../geom/Circle.js").default} circleGeometry Circle geometry.
     * @param {import("../../Feature.js").default} feature Feature.
     */ CanvasPolygonBuilder1.prototype.drawCircle = function(circleGeometry, feature) {
        var state = this.state;
        var fillStyle = state.fillStyle;
        var strokeStyle = state.strokeStyle;
        if (fillStyle === undefined && strokeStyle === undefined) return;
        this.setFillStrokeStyles_();
        this.beginGeometry(circleGeometry, feature);
        if (state.fillStyle !== undefined) this.hitDetectionInstructions.push([
            (0, _instructionJsDefault.default).SET_FILL_STYLE,
            (0, _canvasJs.defaultFillStyle), 
        ]);
        if (state.strokeStyle !== undefined) this.hitDetectionInstructions.push([
            (0, _instructionJsDefault.default).SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            state.lineDash,
            state.lineDashOffset, 
        ]);
        var flatCoordinates = circleGeometry.getFlatCoordinates();
        var stride = circleGeometry.getStride();
        var myBegin = this.coordinates.length;
        this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
        var circleInstruction = [
            (0, _instructionJsDefault.default).CIRCLE,
            myBegin
        ];
        this.instructions.push((0, _instructionJs.beginPathInstruction), circleInstruction);
        this.hitDetectionInstructions.push((0, _instructionJs.beginPathInstruction), circleInstruction);
        if (state.fillStyle !== undefined) {
            this.instructions.push((0, _instructionJs.fillInstruction));
            this.hitDetectionInstructions.push((0, _instructionJs.fillInstruction));
        }
        if (state.strokeStyle !== undefined) {
            this.instructions.push((0, _instructionJs.strokeInstruction));
            this.hitDetectionInstructions.push((0, _instructionJs.strokeInstruction));
        }
        this.endGeometry(feature);
    };
    /**
     * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} polygonGeometry Polygon geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */ CanvasPolygonBuilder1.prototype.drawPolygon = function(polygonGeometry, feature) {
        var state = this.state;
        var fillStyle = state.fillStyle;
        var strokeStyle = state.strokeStyle;
        if (fillStyle === undefined && strokeStyle === undefined) return;
        this.setFillStrokeStyles_();
        this.beginGeometry(polygonGeometry, feature);
        if (state.fillStyle !== undefined) this.hitDetectionInstructions.push([
            (0, _instructionJsDefault.default).SET_FILL_STYLE,
            (0, _canvasJs.defaultFillStyle), 
        ]);
        if (state.strokeStyle !== undefined) this.hitDetectionInstructions.push([
            (0, _instructionJsDefault.default).SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            state.lineDash,
            state.lineDashOffset, 
        ]);
        var ends = polygonGeometry.getEnds();
        var flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();
        var stride = polygonGeometry.getStride();
        this.drawFlatCoordinatess_(flatCoordinates, 0, ends, stride);
        this.endGeometry(feature);
    };
    /**
     * @param {import("../../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */ CanvasPolygonBuilder1.prototype.drawMultiPolygon = function(multiPolygonGeometry, feature) {
        var state = this.state;
        var fillStyle = state.fillStyle;
        var strokeStyle = state.strokeStyle;
        if (fillStyle === undefined && strokeStyle === undefined) return;
        this.setFillStrokeStyles_();
        this.beginGeometry(multiPolygonGeometry, feature);
        if (state.fillStyle !== undefined) this.hitDetectionInstructions.push([
            (0, _instructionJsDefault.default).SET_FILL_STYLE,
            (0, _canvasJs.defaultFillStyle), 
        ]);
        if (state.strokeStyle !== undefined) this.hitDetectionInstructions.push([
            (0, _instructionJsDefault.default).SET_STROKE_STYLE,
            state.strokeStyle,
            state.lineWidth,
            state.lineCap,
            state.lineJoin,
            state.miterLimit,
            state.lineDash,
            state.lineDashOffset, 
        ]);
        var endss = multiPolygonGeometry.getEndss();
        var flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();
        var stride = multiPolygonGeometry.getStride();
        var offset = 0;
        for(var i = 0, ii = endss.length; i < ii; ++i)offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);
        this.endGeometry(feature);
    };
    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     */ CanvasPolygonBuilder1.prototype.finish = function() {
        this.reverseHitDetectionInstructions();
        this.state = null;
        // We want to preserve topology when drawing polygons.  Polygons are
        // simplified using quantization and point elimination. However, we might
        // have received a mix of quantized and non-quantized geometries, so ensure
        // that all are quantized by quantizing all coordinates in the batch.
        var tolerance = this.tolerance;
        if (tolerance !== 0) {
            var coordinates = this.coordinates;
            for(var i = 0, ii = coordinates.length; i < ii; ++i)coordinates[i] = (0, _simplifyJs.snap)(coordinates[i], tolerance);
        }
        return _super.prototype.finish.call(this);
    };
    /**
     * @private
     */ CanvasPolygonBuilder1.prototype.setFillStrokeStyles_ = function() {
        var state = this.state;
        var fillStyle = state.fillStyle;
        if (fillStyle !== undefined) this.updateFillStyle(state, this.createFill);
        if (state.strokeStyle !== undefined) this.updateStrokeStyle(state, this.applyStroke);
    };
    return CanvasPolygonBuilder1;
}((0, _builderJsDefault.default));
exports.default = CanvasPolygonBuilder;

},{"./Builder.js":"aCopB","./Instruction.js":"9nhw8","../canvas.js":"e85iQ","../../geom/flat/simplify.js":"jsqc5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6mvke":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TEXT_ALIGN", ()=>TEXT_ALIGN);
/**
 * @module ol/render/canvas/TextBuilder
 */ var _builderJs = require("./Builder.js");
var _builderJsDefault = parcelHelpers.interopDefault(_builderJs);
var _instructionJs = require("./Instruction.js");
var _instructionJsDefault = parcelHelpers.interopDefault(_instructionJs);
var _geometryTypeJs = require("../../geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _textPlacementJs = require("../../style/TextPlacement.js");
var _textPlacementJsDefault = parcelHelpers.interopDefault(_textPlacementJs);
var _colorlikeJs = require("../../colorlike.js");
var _canvasJs = require("../canvas.js");
var _utilJs = require("../../util.js");
var _extentJs = require("../../extent.js");
var _straightchunkJs = require("../../geom/flat/straightchunk.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var TEXT_ALIGN = {
    "left": 0,
    "end": 0,
    "center": 0.5,
    "right": 1,
    "start": 1,
    "top": 0,
    "middle": 0.5,
    "hanging": 0.2,
    "alphabetic": 0.8,
    "ideographic": 0.8,
    "bottom": 1
};
var CanvasTextBuilder = /** @class */ function(_super) {
    __extends(CanvasTextBuilder1, _super);
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */ function CanvasTextBuilder1(tolerance, maxExtent, resolution, pixelRatio) {
        var _this = _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
        /**
         * @private
         * @type {Array<HTMLCanvasElement>}
         */ _this.labels_ = null;
        /**
         * @private
         * @type {string|Array<string>}
         */ _this.text_ = "";
        /**
         * @private
         * @type {number}
         */ _this.textOffsetX_ = 0;
        /**
         * @private
         * @type {number}
         */ _this.textOffsetY_ = 0;
        /**
         * @private
         * @type {boolean|undefined}
         */ _this.textRotateWithView_ = undefined;
        /**
         * @private
         * @type {number}
         */ _this.textRotation_ = 0;
        /**
         * @private
         * @type {?import("../canvas.js").FillState}
         */ _this.textFillState_ = null;
        /**
         * @type {!Object<string, import("../canvas.js").FillState>}
         */ _this.fillStates = {};
        /**
         * @private
         * @type {?import("../canvas.js").StrokeState}
         */ _this.textStrokeState_ = null;
        /**
         * @type {!Object<string, import("../canvas.js").StrokeState>}
         */ _this.strokeStates = {};
        /**
         * @private
         * @type {import("../canvas.js").TextState}
         */ _this.textState_ = {};
        /**
         * @type {!Object<string, import("../canvas.js").TextState>}
         */ _this.textStates = {};
        /**
         * @private
         * @type {string}
         */ _this.textKey_ = "";
        /**
         * @private
         * @type {string}
         */ _this.fillKey_ = "";
        /**
         * @private
         * @type {string}
         */ _this.strokeKey_ = "";
        /**
         * Data shared with an image builder for combined decluttering.
         * @private
         * @type {import("../canvas.js").DeclutterImageWithText}
         */ _this.declutterImageWithText_ = undefined;
        return _this;
    }
    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     */ CanvasTextBuilder1.prototype.finish = function() {
        var instructions = _super.prototype.finish.call(this);
        instructions.textStates = this.textStates;
        instructions.fillStates = this.fillStates;
        instructions.strokeStates = this.strokeStates;
        return instructions;
    };
    /**
     * @param {import("../../geom/SimpleGeometry.js").default|import("../Feature.js").default} geometry Geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */ CanvasTextBuilder1.prototype.drawText = function(geometry, feature) {
        var fillState = this.textFillState_;
        var strokeState = this.textStrokeState_;
        var textState = this.textState_;
        if (this.text_ === "" || !textState || !fillState && !strokeState) return;
        var coordinates = this.coordinates;
        var begin = coordinates.length;
        var geometryType = geometry.getType();
        var flatCoordinates = null;
        var stride = geometry.getStride();
        if (textState.placement === (0, _textPlacementJsDefault.default).LINE && (geometryType == (0, _geometryTypeJsDefault.default).LINE_STRING || geometryType == (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING || geometryType == (0, _geometryTypeJsDefault.default).POLYGON || geometryType == (0, _geometryTypeJsDefault.default).MULTI_POLYGON)) {
            if (!(0, _extentJs.intersects)(this.getBufferedMaxExtent(), geometry.getExtent())) return;
            var ends = void 0;
            flatCoordinates = geometry.getFlatCoordinates();
            if (geometryType == (0, _geometryTypeJsDefault.default).LINE_STRING) ends = [
                flatCoordinates.length
            ];
            else if (geometryType == (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING) ends = /** @type {import("../../geom/MultiLineString.js").default} */ geometry.getEnds();
            else if (geometryType == (0, _geometryTypeJsDefault.default).POLYGON) ends = /** @type {import("../../geom/Polygon.js").default} */ geometry.getEnds().slice(0, 1);
            else if (geometryType == (0, _geometryTypeJsDefault.default).MULTI_POLYGON) {
                var endss = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.getEndss();
                ends = [];
                for(var i1 = 0, ii = endss.length; i1 < ii; ++i1)ends.push(endss[i1][0]);
            }
            this.beginGeometry(geometry, feature);
            var textAlign = textState.textAlign;
            var flatOffset = 0;
            var flatEnd = void 0;
            for(var o = 0, oo = ends.length; o < oo; ++o){
                if (textAlign == undefined) {
                    var range = (0, _straightchunkJs.matchingChunk)(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);
                    flatOffset = range[0];
                    flatEnd = range[1];
                } else flatEnd = ends[o];
                for(var i1 = flatOffset; i1 < flatEnd; i1 += stride)coordinates.push(flatCoordinates[i1], flatCoordinates[i1 + 1]);
                var end = coordinates.length;
                flatOffset = ends[o];
                this.drawChars_(begin, end);
                begin = end;
            }
            this.endGeometry(feature);
        } else {
            var geometryWidths = textState.overflow ? null : [];
            switch(geometryType){
                case (0, _geometryTypeJsDefault.default).POINT:
                case (0, _geometryTypeJsDefault.default).MULTI_POINT:
                    flatCoordinates = /** @type {import("../../geom/MultiPoint.js").default} */ geometry.getFlatCoordinates();
                    break;
                case (0, _geometryTypeJsDefault.default).LINE_STRING:
                    flatCoordinates = /** @type {import("../../geom/LineString.js").default} */ geometry.getFlatMidpoint();
                    break;
                case (0, _geometryTypeJsDefault.default).CIRCLE:
                    flatCoordinates = /** @type {import("../../geom/Circle.js").default} */ geometry.getCenter();
                    break;
                case (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING:
                    flatCoordinates = /** @type {import("../../geom/MultiLineString.js").default} */ geometry.getFlatMidpoints();
                    stride = 2;
                    break;
                case (0, _geometryTypeJsDefault.default).POLYGON:
                    flatCoordinates = /** @type {import("../../geom/Polygon.js").default} */ geometry.getFlatInteriorPoint();
                    if (!textState.overflow) geometryWidths.push(flatCoordinates[2] / this.resolution);
                    stride = 3;
                    break;
                case (0, _geometryTypeJsDefault.default).MULTI_POLYGON:
                    var interiorPoints = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.getFlatInteriorPoints();
                    flatCoordinates = [];
                    for(var i1 = 0, ii = interiorPoints.length; i1 < ii; i1 += 3){
                        if (!textState.overflow) geometryWidths.push(interiorPoints[i1 + 2] / this.resolution);
                        flatCoordinates.push(interiorPoints[i1], interiorPoints[i1 + 1]);
                    }
                    if (flatCoordinates.length === 0) return;
                    stride = 2;
                    break;
                default:
            }
            var end = this.appendFlatPointCoordinates(flatCoordinates, stride);
            if (end === begin) return;
            if (geometryWidths && (end - begin) / 2 !== flatCoordinates.length / stride) {
                var beg_1 = begin / 2;
                geometryWidths = geometryWidths.filter(function(w, i) {
                    var keep = coordinates[(beg_1 + i) * 2] === flatCoordinates[i * stride] && coordinates[(beg_1 + i) * 2 + 1] === flatCoordinates[i * stride + 1];
                    if (!keep) --beg_1;
                    return keep;
                });
            }
            this.saveTextStates_();
            if (textState.backgroundFill || textState.backgroundStroke) {
                this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);
                if (textState.backgroundFill) {
                    this.updateFillStyle(this.state, this.createFill);
                    this.hitDetectionInstructions.push(this.createFill(this.state));
                }
                if (textState.backgroundStroke) {
                    this.updateStrokeStyle(this.state, this.applyStroke);
                    this.hitDetectionInstructions.push(this.createStroke(this.state));
                }
            }
            this.beginGeometry(geometry, feature);
            // adjust padding for negative scale
            var padding = textState.padding;
            if (padding != (0, _canvasJs.defaultPadding) && (textState.scale[0] < 0 || textState.scale[1] < 0)) {
                var p0 = textState.padding[0];
                var p1 = textState.padding[1];
                var p2 = textState.padding[2];
                var p3 = textState.padding[3];
                if (textState.scale[0] < 0) {
                    p1 = -p1;
                    p3 = -p3;
                }
                if (textState.scale[1] < 0) {
                    p0 = -p0;
                    p2 = -p2;
                }
                padding = [
                    p0,
                    p1,
                    p2,
                    p3
                ];
            }
            // The image is unknown at this stage so we pass null; it will be computed at render time.
            // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at
            // render time.
            var pixelRatio_1 = this.pixelRatio;
            this.instructions.push([
                (0, _instructionJsDefault.default).DRAW_IMAGE,
                begin,
                end,
                null,
                NaN,
                NaN,
                NaN,
                1,
                0,
                0,
                this.textRotateWithView_,
                this.textRotation_,
                [
                    1,
                    1
                ],
                NaN,
                this.declutterImageWithText_,
                padding == (0, _canvasJs.defaultPadding) ? (0, _canvasJs.defaultPadding) : padding.map(function(p) {
                    return p * pixelRatio_1;
                }),
                !!textState.backgroundFill,
                !!textState.backgroundStroke,
                this.text_,
                this.textKey_,
                this.strokeKey_,
                this.fillKey_,
                this.textOffsetX_,
                this.textOffsetY_,
                geometryWidths, 
            ]);
            var scale = 1 / pixelRatio_1;
            this.hitDetectionInstructions.push([
                (0, _instructionJsDefault.default).DRAW_IMAGE,
                begin,
                end,
                null,
                NaN,
                NaN,
                NaN,
                1,
                0,
                0,
                this.textRotateWithView_,
                this.textRotation_,
                [
                    scale,
                    scale
                ],
                NaN,
                this.declutterImageWithText_,
                padding,
                !!textState.backgroundFill,
                !!textState.backgroundStroke,
                this.text_,
                this.textKey_,
                this.strokeKey_,
                this.fillKey_,
                this.textOffsetX_,
                this.textOffsetY_,
                geometryWidths, 
            ]);
            this.endGeometry(feature);
        }
    };
    /**
     * @private
     */ CanvasTextBuilder1.prototype.saveTextStates_ = function() {
        var strokeState = this.textStrokeState_;
        var textState = this.textState_;
        var fillState = this.textFillState_;
        var strokeKey = this.strokeKey_;
        if (strokeState) {
            if (!(strokeKey in this.strokeStates)) this.strokeStates[strokeKey] = {
                strokeStyle: strokeState.strokeStyle,
                lineCap: strokeState.lineCap,
                lineDashOffset: strokeState.lineDashOffset,
                lineWidth: strokeState.lineWidth,
                lineJoin: strokeState.lineJoin,
                miterLimit: strokeState.miterLimit,
                lineDash: strokeState.lineDash
            };
        }
        var textKey = this.textKey_;
        if (!(textKey in this.textStates)) this.textStates[textKey] = {
            font: textState.font,
            textAlign: textState.textAlign || (0, _canvasJs.defaultTextAlign),
            textBaseline: textState.textBaseline || (0, _canvasJs.defaultTextBaseline),
            scale: textState.scale
        };
        var fillKey = this.fillKey_;
        if (fillState) {
            if (!(fillKey in this.fillStates)) this.fillStates[fillKey] = {
                fillStyle: fillState.fillStyle
            };
        }
    };
    /**
     * @private
     * @param {number} begin Begin.
     * @param {number} end End.
     */ CanvasTextBuilder1.prototype.drawChars_ = function(begin, end) {
        var strokeState = this.textStrokeState_;
        var textState = this.textState_;
        var strokeKey = this.strokeKey_;
        var textKey = this.textKey_;
        var fillKey = this.fillKey_;
        this.saveTextStates_();
        var pixelRatio = this.pixelRatio;
        var baseline = TEXT_ALIGN[textState.textBaseline];
        var offsetY = this.textOffsetY_ * pixelRatio;
        var text = this.text_;
        var strokeWidth = strokeState ? strokeState.lineWidth * Math.abs(textState.scale[0]) / 2 : 0;
        this.instructions.push([
            (0, _instructionJsDefault.default).DRAW_CHARS,
            begin,
            end,
            baseline,
            textState.overflow,
            fillKey,
            textState.maxAngle,
            pixelRatio,
            offsetY,
            strokeKey,
            strokeWidth * pixelRatio,
            text,
            textKey,
            1, 
        ]);
        this.hitDetectionInstructions.push([
            (0, _instructionJsDefault.default).DRAW_CHARS,
            begin,
            end,
            baseline,
            textState.overflow,
            fillKey,
            textState.maxAngle,
            1,
            offsetY,
            strokeKey,
            strokeWidth,
            text,
            textKey,
            1 / pixelRatio, 
        ]);
    };
    /**
     * @param {import("../../style/Text.js").default} textStyle Text style.
     * @param {Object} [opt_sharedData] Shared data.
     */ CanvasTextBuilder1.prototype.setTextStyle = function(textStyle, opt_sharedData) {
        var textState, fillState, strokeState;
        if (!textStyle) this.text_ = "";
        else {
            var textFillStyle = textStyle.getFill();
            if (!textFillStyle) {
                fillState = null;
                this.textFillState_ = fillState;
            } else {
                fillState = this.textFillState_;
                if (!fillState) {
                    fillState = {};
                    this.textFillState_ = fillState;
                }
                fillState.fillStyle = (0, _colorlikeJs.asColorLike)(textFillStyle.getColor() || (0, _canvasJs.defaultFillStyle));
            }
            var textStrokeStyle = textStyle.getStroke();
            if (!textStrokeStyle) {
                strokeState = null;
                this.textStrokeState_ = strokeState;
            } else {
                strokeState = this.textStrokeState_;
                if (!strokeState) {
                    strokeState = {};
                    this.textStrokeState_ = strokeState;
                }
                var lineDash = textStrokeStyle.getLineDash();
                var lineDashOffset = textStrokeStyle.getLineDashOffset();
                var lineWidth = textStrokeStyle.getWidth();
                var miterLimit = textStrokeStyle.getMiterLimit();
                strokeState.lineCap = textStrokeStyle.getLineCap() || (0, _canvasJs.defaultLineCap);
                strokeState.lineDash = lineDash ? lineDash.slice() : (0, _canvasJs.defaultLineDash);
                strokeState.lineDashOffset = lineDashOffset === undefined ? (0, _canvasJs.defaultLineDashOffset) : lineDashOffset;
                strokeState.lineJoin = textStrokeStyle.getLineJoin() || (0, _canvasJs.defaultLineJoin);
                strokeState.lineWidth = lineWidth === undefined ? (0, _canvasJs.defaultLineWidth) : lineWidth;
                strokeState.miterLimit = miterLimit === undefined ? (0, _canvasJs.defaultMiterLimit) : miterLimit;
                strokeState.strokeStyle = (0, _colorlikeJs.asColorLike)(textStrokeStyle.getColor() || (0, _canvasJs.defaultStrokeStyle));
            }
            textState = this.textState_;
            var font = textStyle.getFont() || (0, _canvasJs.defaultFont);
            (0, _canvasJs.registerFont)(font);
            var textScale = textStyle.getScaleArray();
            textState.overflow = textStyle.getOverflow();
            textState.font = font;
            textState.maxAngle = textStyle.getMaxAngle();
            textState.placement = textStyle.getPlacement();
            textState.textAlign = textStyle.getTextAlign();
            textState.textBaseline = textStyle.getTextBaseline() || (0, _canvasJs.defaultTextBaseline);
            textState.backgroundFill = textStyle.getBackgroundFill();
            textState.backgroundStroke = textStyle.getBackgroundStroke();
            textState.padding = textStyle.getPadding() || (0, _canvasJs.defaultPadding);
            textState.scale = textScale === undefined ? [
                1,
                1
            ] : textScale;
            var textOffsetX = textStyle.getOffsetX();
            var textOffsetY = textStyle.getOffsetY();
            var textRotateWithView = textStyle.getRotateWithView();
            var textRotation = textStyle.getRotation();
            this.text_ = textStyle.getText() || "";
            this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
            this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
            this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;
            this.textRotation_ = textRotation === undefined ? 0 : textRotation;
            this.strokeKey_ = strokeState ? (typeof strokeState.strokeStyle == "string" ? strokeState.strokeStyle : (0, _utilJs.getUid)(strokeState.strokeStyle)) + strokeState.lineCap + strokeState.lineDashOffset + "|" + strokeState.lineWidth + strokeState.lineJoin + strokeState.miterLimit + "[" + strokeState.lineDash.join() + "]" : "";
            this.textKey_ = textState.font + textState.scale + (textState.textAlign || "?") + (textState.textBaseline || "?");
            this.fillKey_ = fillState ? typeof fillState.fillStyle == "string" ? fillState.fillStyle : "|" + (0, _utilJs.getUid)(fillState.fillStyle) : "";
        }
        this.declutterImageWithText_ = opt_sharedData;
    };
    return CanvasTextBuilder1;
}((0, _builderJsDefault.default));
exports.default = CanvasTextBuilder;

},{"./Builder.js":"aCopB","./Instruction.js":"9nhw8","../../geom/GeometryType.js":"j6daa","../../style/TextPlacement.js":"cVBZj","../../colorlike.js":"ftcFo","../canvas.js":"e85iQ","../../util.js":"pLBjQ","../../extent.js":"6YrVc","../../geom/flat/straightchunk.js":"eUhrS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cVBZj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/style/TextPlacement
 */ /**
 * Text placement. One of `'point'`, `'line'`. Default is `'point'`. Note that
 * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},
 * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or
 * {@link module:ol/geom/MultiPolygon~MultiPolygon}.
 * @enum {string}
 */ exports.default = {
    POINT: "point",
    LINE: "line"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eUhrS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/geom/flat/straightchunk
 */ /**
 * @param {number} maxAngle Maximum acceptable angle delta between segments.
 * @param {Array<number>} flatCoordinates Flat coordinates.
 * @param {number} offset Offset.
 * @param {number} end End.
 * @param {number} stride Stride.
 * @return {Array<number>} Start and end of the first suitable chunk of the
 * given `flatCoordinates`.
 */ parcelHelpers.export(exports, "matchingChunk", ()=>matchingChunk);
function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {
    var chunkStart = offset;
    var chunkEnd = offset;
    var chunkM = 0;
    var m = 0;
    var start = offset;
    var acos, i, m12, m23, x1, y1, x12, y12, x23, y23;
    for(i = offset; i < end; i += stride){
        var x2 = flatCoordinates[i];
        var y2 = flatCoordinates[i + 1];
        if (x1 !== undefined) {
            x23 = x2 - x1;
            y23 = y2 - y1;
            m23 = Math.sqrt(x23 * x23 + y23 * y23);
            if (x12 !== undefined) {
                m += m12;
                acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));
                if (acos > maxAngle) {
                    if (m > chunkM) {
                        chunkM = m;
                        chunkStart = start;
                        chunkEnd = i;
                    }
                    m = 0;
                    start = i - stride;
                }
            }
            m12 = m23;
            x12 = x23;
            y12 = y23;
        }
        x1 = x2;
        y1 = y2;
    }
    m += m23;
    return m > chunkM ? [
        start,
        i
    ] : [
        chunkStart,
        chunkEnd
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fY3ny":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/renderer/canvas/Layer
 */ var _layerJs = require("../Layer.js");
var _layerJsDefault = parcelHelpers.interopDefault(_layerJs);
var _eventJs = require("../../render/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _eventTypeJs = require("../../render/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _transformJs = require("../../transform.js");
var _colorJs = require("../../color.js");
var _extentJs = require("../../extent.js");
var _domJs = require("../../dom.js");
var _arrayJs = require("../../array.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @type {CanvasRenderingContext2D}
 */ var pixelContext = null;
function createPixelContext() {
    var canvas = document.createElement("canvas");
    canvas.width = 1;
    canvas.height = 1;
    pixelContext = canvas.getContext("2d");
}
/**
 * @abstract
 * @template {import("../../layer/Layer.js").default} LayerType
 * @extends {LayerRenderer<LayerType>}
 */ var CanvasLayerRenderer = /** @class */ function(_super) {
    __extends(CanvasLayerRenderer1, _super);
    /**
     * @param {LayerType} layer Layer.
     */ function CanvasLayerRenderer1(layer) {
        var _this = _super.call(this, layer) || this;
        /**
         * @protected
         * @type {HTMLElement}
         */ _this.container = null;
        /**
         * @protected
         * @type {number}
         */ _this.renderedResolution;
        /**
         * A temporary transform.  The values in this transform should only be used in a
         * function that sets the values.
         * @protected
         * @type {import("../../transform.js").Transform}
         */ _this.tempTransform = (0, _transformJs.create)();
        /**
         * The transform for rendered pixels to viewport CSS pixels.  This transform must
         * be set when rendering a frame and may be used by other functions after rendering.
         * @protected
         * @type {import("../../transform.js").Transform}
         */ _this.pixelTransform = (0, _transformJs.create)();
        /**
         * The transform for viewport CSS pixels to rendered pixels.  This transform must
         * be set when rendering a frame and may be used by other functions after rendering.
         * @protected
         * @type {import("../../transform.js").Transform}
         */ _this.inversePixelTransform = (0, _transformJs.create)();
        /**
         * @type {CanvasRenderingContext2D}
         */ _this.context = null;
        /**
         * @type {boolean}
         */ _this.containerReused = false;
        /**
         * @private
         * @type {CanvasRenderingContext2D}
         */ _this.pixelContext_ = null;
        /**
         * @protected
         * @type {import("../../PluggableMap.js").FrameState|null}
         */ _this.frameState = null;
        return _this;
    }
    /**
     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
     * @param {number} col The column index.
     * @param {number} row The row index.
     * @return {Uint8ClampedArray|null} The image data.
     */ CanvasLayerRenderer1.prototype.getImageData = function(image, col, row) {
        if (!pixelContext) createPixelContext();
        pixelContext.clearRect(0, 0, 1, 1);
        var data;
        try {
            pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);
            data = pixelContext.getImageData(0, 0, 1, 1).data;
        } catch (err) {
            return null;
        }
        return data;
    };
    /**
     * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.
     * @return {string} Background color.
     */ CanvasLayerRenderer1.prototype.getBackground = function(frameState) {
        var layer = this.getLayer();
        var background = layer.getBackground();
        if (typeof background === "function") background = background(frameState.viewState.resolution);
        return background || undefined;
    };
    /**
     * Get a rendering container from an existing target, if compatible.
     * @param {HTMLElement} target Potential render target.
     * @param {string} transform CSS Transform.
     * @param {number} opacity Opacity.
     * @param {string} [opt_backgroundColor] Background color.
     */ CanvasLayerRenderer1.prototype.useContainer = function(target, transform, opacity, opt_backgroundColor) {
        var layerClassName = this.getLayer().getClassName();
        var container, context;
        if (target && target.className === layerClassName && target.style.opacity === "" && opacity === 1 && (!opt_backgroundColor || target.style.backgroundColor && (0, _arrayJs.equals)((0, _colorJs.asArray)(target.style.backgroundColor), (0, _colorJs.asArray)(opt_backgroundColor)))) {
            var canvas = target.firstElementChild;
            if (canvas instanceof HTMLCanvasElement) context = canvas.getContext("2d");
        }
        if (context && context.canvas.style.transform === transform) {
            // Container of the previous layer renderer can be used.
            this.container = target;
            this.context = context;
            this.containerReused = true;
        } else if (this.containerReused) {
            // Previously reused container cannot be used any more.
            this.container = null;
            this.context = null;
            this.containerReused = false;
        }
        if (!this.container) {
            container = document.createElement("div");
            container.className = layerClassName;
            var style = container.style;
            style.position = "absolute";
            style.width = "100%";
            style.height = "100%";
            if (opt_backgroundColor) style.backgroundColor = opt_backgroundColor;
            context = (0, _domJs.createCanvasContext2D)();
            var canvas = context.canvas;
            container.appendChild(canvas);
            style = canvas.style;
            style.position = "absolute";
            style.left = "0";
            style.transformOrigin = "top left";
            this.container = container;
            this.context = context;
        }
    };
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../extent.js").Extent} extent Clip extent.
     * @protected
     */ CanvasLayerRenderer1.prototype.clipUnrotated = function(context, frameState, extent) {
        var topLeft = (0, _extentJs.getTopLeft)(extent);
        var topRight = (0, _extentJs.getTopRight)(extent);
        var bottomRight = (0, _extentJs.getBottomRight)(extent);
        var bottomLeft = (0, _extentJs.getBottomLeft)(extent);
        (0, _transformJs.apply)(frameState.coordinateToPixelTransform, topLeft);
        (0, _transformJs.apply)(frameState.coordinateToPixelTransform, topRight);
        (0, _transformJs.apply)(frameState.coordinateToPixelTransform, bottomRight);
        (0, _transformJs.apply)(frameState.coordinateToPixelTransform, bottomLeft);
        var inverted = this.inversePixelTransform;
        (0, _transformJs.apply)(inverted, topLeft);
        (0, _transformJs.apply)(inverted, topRight);
        (0, _transformJs.apply)(inverted, bottomRight);
        (0, _transformJs.apply)(inverted, bottomLeft);
        context.save();
        context.beginPath();
        context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));
        context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));
        context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));
        context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));
        context.clip();
    };
    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */ CanvasLayerRenderer1.prototype.dispatchRenderEvent_ = function(type, context, frameState) {
        var layer = this.getLayer();
        if (layer.hasListener(type)) {
            var event_1 = new (0, _eventJsDefault.default)(type, this.inversePixelTransform, frameState, context);
            layer.dispatchEvent(event_1);
        }
    };
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */ CanvasLayerRenderer1.prototype.preRender = function(context, frameState) {
        this.frameState = frameState;
        this.dispatchRenderEvent_((0, _eventTypeJsDefault.default).PRERENDER, context, frameState);
    };
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */ CanvasLayerRenderer1.prototype.postRender = function(context, frameState) {
        this.dispatchRenderEvent_((0, _eventTypeJsDefault.default).POSTRENDER, context, frameState);
    };
    /**
     * Creates a transform for rendering to an element that will be rotated after rendering.
     * @param {import("../../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} width Width of the rendered element (in pixels).
     * @param {number} height Height of the rendered element (in pixels).
     * @param {number} offsetX Offset on the x-axis in view coordinates.
     * @protected
     * @return {!import("../../transform.js").Transform} Transform.
     */ CanvasLayerRenderer1.prototype.getRenderTransform = function(center, resolution, rotation, pixelRatio, width, height, offsetX) {
        var dx1 = width / 2;
        var dy1 = height / 2;
        var sx = pixelRatio / resolution;
        var sy = -sx;
        var dx2 = -center[0] + offsetX;
        var dy2 = -center[1];
        return (0, _transformJs.compose)(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);
    };
    /**
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @param {import("../../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
     *    location, null will be returned.  If there is data, but pixel values cannot be
     *    returned, and empty array will be returned.
     */ CanvasLayerRenderer1.prototype.getDataAtPixel = function(pixel, frameState, hitTolerance) {
        var renderPixel = (0, _transformJs.apply)(this.inversePixelTransform, pixel.slice());
        var context = this.context;
        var layer = this.getLayer();
        var layerExtent = layer.getExtent();
        if (layerExtent) {
            var renderCoordinate = (0, _transformJs.apply)(frameState.pixelToCoordinateTransform, pixel.slice());
            /** get only data inside of the layer extent */ if (!(0, _extentJs.containsCoordinate)(layerExtent, renderCoordinate)) return null;
        }
        var x = Math.round(renderPixel[0]);
        var y = Math.round(renderPixel[1]);
        var pixelContext1 = this.pixelContext_;
        if (!pixelContext1) {
            var pixelCanvas = document.createElement("canvas");
            pixelCanvas.width = 1;
            pixelCanvas.height = 1;
            pixelContext1 = pixelCanvas.getContext("2d");
            this.pixelContext_ = pixelContext1;
        }
        pixelContext1.clearRect(0, 0, 1, 1);
        var data;
        try {
            pixelContext1.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);
            data = pixelContext1.getImageData(0, 0, 1, 1).data;
        } catch (err) {
            if (err.name === "SecurityError") {
                // tainted canvas, we assume there is data at the given pixel (although there might not be)
                this.pixelContext_ = null;
                return new Uint8Array();
            }
            return data;
        }
        if (data[3] === 0) return null;
        return data;
    };
    /**
     * Clean up.
     */ CanvasLayerRenderer1.prototype.disposeInternal = function() {
        delete this.frameState;
        _super.prototype.disposeInternal.call(this);
    };
    return CanvasLayerRenderer1;
}((0, _layerJsDefault.default));
exports.default = CanvasLayerRenderer;

},{"../Layer.js":"b6gGa","../../render/Event.js":"bpzid","../../render/EventType.js":"5G9JA","../../transform.js":"1BqUf","../../color.js":"4tahz","../../extent.js":"6YrVc","../../dom.js":"84QzQ","../../array.js":"1Fbic","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b6gGa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/renderer/Layer
 */ var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _imageStateJs = require("../ImageState.js");
var _imageStateJsDefault = parcelHelpers.interopDefault(_imageStateJs);
var _observableJs = require("../Observable.js");
var _observableJsDefault = parcelHelpers.interopDefault(_observableJs);
var _stateJs = require("../source/State.js");
var _stateJsDefault = parcelHelpers.interopDefault(_stateJs);
var _utilJs = require("../util.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @template {import("../layer/Layer.js").default} LayerType
 */ var LayerRenderer = /** @class */ function(_super) {
    __extends(LayerRenderer1, _super);
    /**
     * @param {LayerType} layer Layer.
     */ function LayerRenderer1(layer) {
        var _this = _super.call(this) || this;
        /**
         * The renderer is initialized and ready to render.
         * @type {boolean}
         */ _this.ready = true;
        /** @private */ _this.boundHandleImageChange_ = _this.handleImageChange_.bind(_this);
        /**
         * @protected
         * @type {LayerType}
         */ _this.layer_ = layer;
        /**
         * @type {import("../render/canvas/ExecutorGroup").default}
         */ _this.declutterExecutorGroup = null;
        return _this;
    }
    /**
     * Asynchronous layer level hit detection.
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with
     * an array of features.
     */ LayerRenderer1.prototype.getFeatures = function(pixel) {
        return (0, _utilJs.abstract)();
    };
    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
     */ LayerRenderer1.prototype.getData = function(pixel) {
        return null;
    };
    /**
     * Determine whether render should be called.
     * @abstract
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */ LayerRenderer1.prototype.prepareFrame = function(frameState) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Render the layer.
     * @abstract
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target that may be used to render content to.
     * @return {HTMLElement} The rendered element.
     */ LayerRenderer1.prototype.renderFrame = function(frameState, target) {
        return (0, _utilJs.abstract)();
    };
    /**
     * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
     * @param {number} zoom Zoom level.
     * @param {import("../Tile.js").default} tile Tile.
     * @return {boolean|void} If `false`, the tile will not be considered loaded.
     */ LayerRenderer1.prototype.loadedTileCallback = function(tiles, zoom, tile) {
        if (!tiles[zoom]) tiles[zoom] = {};
        tiles[zoom][tile.tileCoord.toString()] = tile;
        return undefined;
    };
    /**
     * Create a function that adds loaded tiles to the tile lookup.
     * @param {import("../source/Tile.js").default} source Tile source.
     * @param {import("../proj/Projection.js").default} projection Projection of the tiles.
     * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
     * @return {function(number, import("../TileRange.js").default):boolean} A function that can be
     *     called with a zoom level and a tile range to add loaded tiles to the lookup.
     * @protected
     */ LayerRenderer1.prototype.createLoadedTileFinder = function(source, projection, tiles) {
        return(/**
         * @param {number} zoom Zoom level.
         * @param {import("../TileRange.js").default} tileRange Tile range.
         * @return {boolean} The tile range is fully loaded.
         * @this {LayerRenderer}
         */ (function(zoom, tileRange) {
            var callback = this.loadedTileCallback.bind(this, tiles, zoom);
            return source.forEachLoadedTile(projection, zoom, tileRange, callback);
        }).bind(this));
    };
    /**
     * @abstract
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
     * @param {Array<import("./Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
     * @return {T|undefined} Callback result.
     * @template T
     */ LayerRenderer1.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, matches) {
        return undefined;
    };
    /**
     * @abstract
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
     *    location, null will be returned.  If there is data, but pixel values cannot be
     *    returned, and empty array will be returned.
     */ LayerRenderer1.prototype.getDataAtPixel = function(pixel, frameState, hitTolerance) {
        return null;
    };
    /**
     * @return {LayerType} Layer.
     */ LayerRenderer1.prototype.getLayer = function() {
        return this.layer_;
    };
    /**
     * Perform action necessary to get the layer rendered after new fonts have loaded
     * @abstract
     */ LayerRenderer1.prototype.handleFontsChanged = function() {};
    /**
     * Handle changes in image state.
     * @param {import("../events/Event.js").default} event Image change event.
     * @private
     */ LayerRenderer1.prototype.handleImageChange_ = function(event) {
        var image = event.target;
        if (image.getState() === (0, _imageStateJsDefault.default).LOADED) this.renderIfReadyAndVisible();
    };
    /**
     * Load the image if not already loaded, and register the image change
     * listener if needed.
     * @param {import("../ImageBase.js").default} image Image.
     * @return {boolean} `true` if the image is already loaded, `false` otherwise.
     * @protected
     */ LayerRenderer1.prototype.loadImage = function(image) {
        var imageState = image.getState();
        if (imageState != (0, _imageStateJsDefault.default).LOADED && imageState != (0, _imageStateJsDefault.default).ERROR) image.addEventListener((0, _eventTypeJsDefault.default).CHANGE, this.boundHandleImageChange_);
        if (imageState == (0, _imageStateJsDefault.default).IDLE) {
            image.load();
            imageState = image.getState();
        }
        return imageState == (0, _imageStateJsDefault.default).LOADED;
    };
    /**
     * @protected
     */ LayerRenderer1.prototype.renderIfReadyAndVisible = function() {
        var layer = this.getLayer();
        if (layer.getVisible() && layer.getSourceState() == (0, _stateJsDefault.default).READY) layer.changed();
    };
    /**
     * Clean up.
     */ LayerRenderer1.prototype.disposeInternal = function() {
        delete this.layer_;
        _super.prototype.disposeInternal.call(this);
    };
    return LayerRenderer1;
}((0, _observableJsDefault.default));
exports.default = LayerRenderer;

},{"../events/EventType.js":"hrQJ6","../ImageState.js":"c4jJS","../Observable.js":"cQ2uI","../source/State.js":"gW573","../util.js":"pLBjQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eUidV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This methods creates an array with indexes of all pixels within a circle,
 * ordered by how close they are to the center.
 * A cache is used to increase performance.
 * @param {number} radius Radius.
 * @return {Array<number>} An array with indexes within a circle.
 */ parcelHelpers.export(exports, "getPixelIndexArray", ()=>getPixelIndexArray);
/**
 * @module ol/render/canvas/ExecutorGroup
 */ var _builderTypeJs = require("./BuilderType.js");
var _builderTypeJsDefault = parcelHelpers.interopDefault(_builderTypeJs);
var _executorJs = require("./Executor.js");
var _executorJsDefault = parcelHelpers.interopDefault(_executorJs);
var _extentJs = require("../../extent.js");
var _transformJs = require("../../transform.js");
var _domJs = require("../../dom.js");
var _objJs = require("../../obj.js");
var _arrayJs = require("../../array.js");
var _transformJs1 = require("../../geom/flat/transform.js");
/**
 * @const
 * @type {Array<import("./BuilderType.js").default>}
 */ var ORDER = [
    (0, _builderTypeJsDefault.default).POLYGON,
    (0, _builderTypeJsDefault.default).CIRCLE,
    (0, _builderTypeJsDefault.default).LINE_STRING,
    (0, _builderTypeJsDefault.default).IMAGE,
    (0, _builderTypeJsDefault.default).TEXT,
    (0, _builderTypeJsDefault.default).DEFAULT, 
];
var ExecutorGroup = /** @class */ function() {
    /**
     * @param {import("../../extent.js").Extent} maxExtent Max extent for clipping. When a
     * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`
     * should be set here, unless the target context does not exceed that extent (which
     * can be the case when rendering to tiles).
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {boolean} overlaps The executor group can have overlapping geometries.
     * @param {!Object<string, !Object<import("./BuilderType.js").default, import("../canvas.js").SerializableInstructions>>} allInstructions
     * The serializable instructions.
     * @param {number} [opt_renderBuffer] Optional rendering buffer.
     */ function ExecutorGroup1(maxExtent, resolution, pixelRatio, overlaps, allInstructions, opt_renderBuffer) {
        /**
         * @private
         * @type {import("../../extent.js").Extent}
         */ this.maxExtent_ = maxExtent;
        /**
         * @private
         * @type {boolean}
         */ this.overlaps_ = overlaps;
        /**
         * @private
         * @type {number}
         */ this.pixelRatio_ = pixelRatio;
        /**
         * @private
         * @type {number}
         */ this.resolution_ = resolution;
        /**
         * @private
         * @type {number|undefined}
         */ this.renderBuffer_ = opt_renderBuffer;
        /**
         * @private
         * @type {!Object<string, !Object<import("./BuilderType.js").default, import("./Executor").default>>}
         */ this.executorsByZIndex_ = {};
        /**
         * @private
         * @type {CanvasRenderingContext2D}
         */ this.hitDetectionContext_ = null;
        /**
         * @private
         * @type {import("../../transform.js").Transform}
         */ this.hitDetectionTransform_ = (0, _transformJs.create)();
        this.createExecutors_(allInstructions);
    }
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     */ ExecutorGroup1.prototype.clip = function(context, transform) {
        var flatClipCoords = this.getClipCoords(transform);
        context.beginPath();
        context.moveTo(flatClipCoords[0], flatClipCoords[1]);
        context.lineTo(flatClipCoords[2], flatClipCoords[3]);
        context.lineTo(flatClipCoords[4], flatClipCoords[5]);
        context.lineTo(flatClipCoords[6], flatClipCoords[7]);
        context.clip();
    };
    /**
     * Create executors and populate them using the provided instructions.
     * @private
     * @param {!Object<string, !Object<import("./BuilderType.js").default, import("../canvas.js").SerializableInstructions>>} allInstructions The serializable instructions
     */ ExecutorGroup1.prototype.createExecutors_ = function(allInstructions) {
        for(var zIndex in allInstructions){
            var executors = this.executorsByZIndex_[zIndex];
            if (executors === undefined) {
                executors = {};
                this.executorsByZIndex_[zIndex] = executors;
            }
            var instructionByZindex = allInstructions[zIndex];
            for(var builderType in instructionByZindex){
                var instructions = instructionByZindex[builderType];
                executors[builderType] = new (0, _executorJsDefault.default)(this.resolution_, this.pixelRatio_, this.overlaps_, instructions);
            }
        }
    };
    /**
     * @param {Array<import("./BuilderType.js").default>} executors Executors.
     * @return {boolean} Has executors of the provided types.
     */ ExecutorGroup1.prototype.hasExecutors = function(executors) {
        for(var zIndex in this.executorsByZIndex_){
            var candidates = this.executorsByZIndex_[zIndex];
            for(var i = 0, ii = executors.length; i < ii; ++i){
                if (executors[i] in candidates) return true;
            }
        }
        return false;
    };
    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default, number): T} callback Feature callback.
     * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
     * @return {T|undefined} Callback result.
     * @template T
     */ ExecutorGroup1.prototype.forEachFeatureAtCoordinate = function(coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {
        hitTolerance = Math.round(hitTolerance);
        var contextSize = hitTolerance * 2 + 1;
        var transform = (0, _transformJs.compose)(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);
        var newContext = !this.hitDetectionContext_;
        if (newContext) this.hitDetectionContext_ = (0, _domJs.createCanvasContext2D)(contextSize, contextSize);
        var context = this.hitDetectionContext_;
        if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {
            context.canvas.width = contextSize;
            context.canvas.height = contextSize;
        } else if (!newContext) context.clearRect(0, 0, contextSize, contextSize);
        /**
         * @type {import("../../extent.js").Extent}
         */ var hitExtent;
        if (this.renderBuffer_ !== undefined) {
            hitExtent = (0, _extentJs.createEmpty)();
            (0, _extentJs.extendCoordinate)(hitExtent, coordinate);
            (0, _extentJs.buffer)(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);
        }
        var indexes = getPixelIndexArray(hitTolerance);
        var builderType;
        /**
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
         * @return {T|undefined} Callback result.
         */ function featureCallback(feature, geometry) {
            var imageData = context.getImageData(0, 0, contextSize, contextSize).data;
            for(var i_1 = 0, ii = indexes.length; i_1 < ii; i_1++)if (imageData[indexes[i_1]] > 0) {
                if (!declutteredFeatures || builderType !== (0, _builderTypeJsDefault.default).IMAGE && builderType !== (0, _builderTypeJsDefault.default).TEXT || declutteredFeatures.indexOf(feature) !== -1) {
                    var idx = (indexes[i_1] - 3) / 4;
                    var x = hitTolerance - idx % contextSize;
                    var y = hitTolerance - (idx / contextSize | 0);
                    var result_1 = callback(feature, geometry, x * x + y * y);
                    if (result_1) return result_1;
                }
                context.clearRect(0, 0, contextSize, contextSize);
                break;
            }
            return undefined;
        }
        /** @type {Array<number>} */ var zs = Object.keys(this.executorsByZIndex_).map(Number);
        zs.sort((0, _arrayJs.numberSafeCompareFunction));
        var i, j, executors, executor, result;
        for(i = zs.length - 1; i >= 0; --i){
            var zIndexKey = zs[i].toString();
            executors = this.executorsByZIndex_[zIndexKey];
            for(j = ORDER.length - 1; j >= 0; --j){
                builderType = ORDER[j];
                executor = executors[builderType];
                if (executor !== undefined) {
                    result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);
                    if (result) return result;
                }
            }
        }
        return undefined;
    };
    /**
     * @param {import("../../transform.js").Transform} transform Transform.
     * @return {Array<number>} Clip coordinates.
     */ ExecutorGroup1.prototype.getClipCoords = function(transform) {
        var maxExtent = this.maxExtent_;
        if (!maxExtent) return null;
        var minX = maxExtent[0];
        var minY = maxExtent[1];
        var maxX = maxExtent[2];
        var maxY = maxExtent[3];
        var flatClipCoords = [
            minX,
            minY,
            minX,
            maxY,
            maxX,
            maxY,
            maxX,
            minY
        ];
        (0, _transformJs1.transform2D)(flatClipCoords, 0, 8, 2, transform, flatClipCoords);
        return flatClipCoords;
    };
    /**
     * @return {boolean} Is empty.
     */ ExecutorGroup1.prototype.isEmpty = function() {
        return (0, _objJs.isEmpty)(this.executorsByZIndex_);
    };
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} contextScale Scale of the context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.
     * @param {Array<import("./BuilderType.js").default>} [opt_builderTypes] Ordered replay types to replay.
     *     Default is {@link module:ol/render/replay~ORDER}
     * @param {import("rbush").default} [opt_declutterTree] Declutter tree.
     */ ExecutorGroup1.prototype.execute = function(context, contextScale, transform, viewRotation, snapToPixel, opt_builderTypes, opt_declutterTree) {
        /** @type {Array<number>} */ var zs = Object.keys(this.executorsByZIndex_).map(Number);
        zs.sort((0, _arrayJs.numberSafeCompareFunction));
        // setup clipping so that the parts of over-simplified geometries are not
        // visible outside the current extent when panning
        if (this.maxExtent_) {
            context.save();
            this.clip(context, transform);
        }
        var builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;
        var i, ii, j, jj, replays, replay;
        if (opt_declutterTree) zs.reverse();
        for(i = 0, ii = zs.length; i < ii; ++i){
            var zIndexKey = zs[i].toString();
            replays = this.executorsByZIndex_[zIndexKey];
            for(j = 0, jj = builderTypes.length; j < jj; ++j){
                var builderType = builderTypes[j];
                replay = replays[builderType];
                if (replay !== undefined) replay.execute(context, contextScale, transform, viewRotation, snapToPixel, opt_declutterTree);
            }
        }
        if (this.maxExtent_) context.restore();
    };
    return ExecutorGroup1;
}();
/**
 * This cache is used to store arrays of indexes for calculated pixel circles
 * to increase performance.
 * It is a static property to allow each Replaygroup to access it.
 * @type {Object<number, Array<number>>}
 */ var circlePixelIndexArrayCache = {};
function getPixelIndexArray(radius) {
    if (circlePixelIndexArrayCache[radius] !== undefined) return circlePixelIndexArrayCache[radius];
    var size = radius * 2 + 1;
    var maxDistanceSq = radius * radius;
    var distances = new Array(maxDistanceSq + 1);
    for(var i = 0; i <= radius; ++i)for(var j = 0; j <= radius; ++j){
        var distanceSq = i * i + j * j;
        if (distanceSq > maxDistanceSq) break;
        var distance = distances[distanceSq];
        if (!distance) {
            distance = [];
            distances[distanceSq] = distance;
        }
        distance.push(((radius + i) * size + (radius + j)) * 4 + 3);
        if (i > 0) distance.push(((radius - i) * size + (radius + j)) * 4 + 3);
        if (j > 0) {
            distance.push(((radius + i) * size + (radius - j)) * 4 + 3);
            if (i > 0) distance.push(((radius - i) * size + (radius - j)) * 4 + 3);
        }
    }
    var pixelIndex = [];
    for(var i = 0, ii = distances.length; i < ii; ++i)if (distances[i]) pixelIndex.push.apply(pixelIndex, distances[i]);
    circlePixelIndexArrayCache[radius] = pixelIndex;
    return pixelIndex;
}
exports.default = ExecutorGroup;

},{"./BuilderType.js":"26rms","./Executor.js":"5JJby","../../extent.js":"6YrVc","../../transform.js":"1BqUf","../../dom.js":"84QzQ","../../obj.js":"3ssAG","../../array.js":"1Fbic","../../geom/flat/transform.js":"cDA2L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"26rms":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/render/canvas/BuilderType
 */ /**
 * @enum {string}
 */ exports.default = {
    CIRCLE: "Circle",
    DEFAULT: "Default",
    IMAGE: "Image",
    LINE_STRING: "LineString",
    POLYGON: "Polygon",
    TEXT: "Text"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5JJby":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/render/canvas/Executor
 */ var _instructionJs = require("./Instruction.js");
var _instructionJsDefault = parcelHelpers.interopDefault(_instructionJs);
var _textBuilderJs = require("./TextBuilder.js");
var _hasJs = require("../../has.js");
var _transformJs = require("../../transform.js");
var _extentJs = require("../../extent.js");
var _canvasJs = require("../canvas.js");
var _textpathJs = require("../../geom/flat/textpath.js");
var _arrayJs = require("../../array.js");
var _lengthJs = require("../../geom/flat/length.js");
var _transformJs1 = require("../../geom/flat/transform.js");
/**
 * @typedef {Object} BBox
 * @property {number} minX Minimal x.
 * @property {number} minY Minimal y.
 * @property {number} maxX Maximal x.
 * @property {number} maxY Maximal y
 * @property {*} value Value.
 */ /**
 * @typedef {Object} ImageOrLabelDimensions
 * @property {number} drawImageX DrawImageX.
 * @property {number} drawImageY DrawImageY.
 * @property {number} drawImageW DrawImageW.
 * @property {number} drawImageH DrawImageH.
 * @property {number} originX OriginX.
 * @property {number} originY OriginY.
 * @property {Array<number>} scale Scale.
 * @property {BBox} declutterBox DeclutterBox.
 * @property {import("../../transform.js").Transform} canvasTransform CanvasTransform.
 */ /**
 * @typedef {{0: CanvasRenderingContext2D, 1: number, 2: import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs
 */ /**
 * @template T
 * @typedef {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default): T} FeatureCallback
 */ /**
 * @type {import("../../extent.js").Extent}
 */ var tmpExtent = (0, _extentJs.createEmpty)();
/** @type {import("../../coordinate.js").Coordinate} */ var p1 = [];
/** @type {import("../../coordinate.js").Coordinate} */ var p2 = [];
/** @type {import("../../coordinate.js").Coordinate} */ var p3 = [];
/** @type {import("../../coordinate.js").Coordinate} */ var p4 = [];
/**
 * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel
 * @return {BBox} Declutter bbox.
 */ function getDeclutterBox(replayImageOrLabelArgs) {
    return replayImageOrLabelArgs[3].declutterBox;
}
var rtlRegEx = new RegExp(/* eslint-disable prettier/prettier */ "[" + String.fromCharCode(0x00591) + "-" + String.fromCharCode(0x008ff) + String.fromCharCode(0x0fb1d) + "-" + String.fromCharCode(0x0fdff) + String.fromCharCode(0x0fe70) + "-" + String.fromCharCode(0x0fefc) + String.fromCharCode(0x10800) + "-" + String.fromCharCode(0x10fff) + String.fromCharCode(0x1e800) + "-" + String.fromCharCode(0x1efff) + "]");
/**
 * @param {string} text Text.
 * @param {string} align Alignment.
 * @return {number} Text alignment.
 */ function horizontalTextAlign(text, align) {
    if ((align === "start" || align === "end") && !rtlRegEx.test(text)) align = align === "start" ? "left" : "right";
    return (0, _textBuilderJs.TEXT_ALIGN)[align];
}
/**
 * @param {Array<string>} acc Accumulator.
 * @param {string} line Line of text.
 * @param {number} i Index
 * @return {Array<string>} Accumulator.
 */ function createTextChunks(acc, line, i) {
    if (i > 0) acc.push("\n", "");
    acc.push(line, "");
    return acc;
}
var Executor = /** @class */ function() {
    /**
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {boolean} overlaps The replay can have overlapping geometries.
     * @param {import("../canvas.js").SerializableInstructions} instructions The serializable instructions
     */ function Executor1(resolution, pixelRatio, overlaps, instructions) {
        /**
         * @protected
         * @type {boolean}
         */ this.overlaps = overlaps;
        /**
         * @protected
         * @type {number}
         */ this.pixelRatio = pixelRatio;
        /**
         * @protected
         * @const
         * @type {number}
         */ this.resolution = resolution;
        /**
         * @private
         * @type {boolean}
         */ this.alignFill_;
        /**
         * @protected
         * @type {Array<*>}
         */ this.instructions = instructions.instructions;
        /**
         * @protected
         * @type {Array<number>}
         */ this.coordinates = instructions.coordinates;
        /**
         * @private
         * @type {!Object<number,import("../../coordinate.js").Coordinate|Array<import("../../coordinate.js").Coordinate>|Array<Array<import("../../coordinate.js").Coordinate>>>}
         */ this.coordinateCache_ = {};
        /**
         * @private
         * @type {!import("../../transform.js").Transform}
         */ this.renderedTransform_ = (0, _transformJs.create)();
        /**
         * @protected
         * @type {Array<*>}
         */ this.hitDetectionInstructions = instructions.hitDetectionInstructions;
        /**
         * @private
         * @type {Array<number>}
         */ this.pixelCoordinates_ = null;
        /**
         * @private
         * @type {number}
         */ this.viewRotation_ = 0;
        /**
         * @type {!Object<string, import("../canvas.js").FillState>}
         */ this.fillStates = instructions.fillStates || {};
        /**
         * @type {!Object<string, import("../canvas.js").StrokeState>}
         */ this.strokeStates = instructions.strokeStates || {};
        /**
         * @type {!Object<string, import("../canvas.js").TextState>}
         */ this.textStates = instructions.textStates || {};
        /**
         * @private
         * @type {Object<string, Object<string, number>>}
         */ this.widths_ = {};
        /**
         * @private
         * @type {Object<string, import("../canvas.js").Label>}
         */ this.labels_ = {};
    }
    /**
     * @param {string|Array<string>} text Text.
     * @param {string} textKey Text style key.
     * @param {string} fillKey Fill style key.
     * @param {string} strokeKey Stroke style key.
     * @return {import("../canvas.js").Label} Label.
     */ Executor1.prototype.createLabel = function(text, textKey, fillKey, strokeKey) {
        var key = text + textKey + fillKey + strokeKey;
        if (this.labels_[key]) return this.labels_[key];
        var strokeState = strokeKey ? this.strokeStates[strokeKey] : null;
        var fillState = fillKey ? this.fillStates[fillKey] : null;
        var textState = this.textStates[textKey];
        var pixelRatio = this.pixelRatio;
        var scale = [
            textState.scale[0] * pixelRatio,
            textState.scale[1] * pixelRatio, 
        ];
        var textIsArray = Array.isArray(text);
        var align = horizontalTextAlign(textIsArray ? text[0] : text, textState.textAlign || (0, _canvasJs.defaultTextAlign));
        var strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;
        var chunks = textIsArray ? text : text.split("\n").reduce(createTextChunks, []);
        var _a = (0, _canvasJs.getTextDimensions)(textState, chunks), width = _a.width, height = _a.height, widths = _a.widths, heights = _a.heights, lineWidths = _a.lineWidths;
        var renderWidth = width + strokeWidth;
        var contextInstructions = [];
        // make canvas 2 pixels wider to account for italic text width measurement errors
        var w = (renderWidth + 2) * scale[0];
        var h = (height + strokeWidth) * scale[1];
        /** @type {import("../canvas.js").Label} */ var label = {
            width: w < 0 ? Math.floor(w) : Math.ceil(w),
            height: h < 0 ? Math.floor(h) : Math.ceil(h),
            contextInstructions: contextInstructions
        };
        if (scale[0] != 1 || scale[1] != 1) contextInstructions.push("scale", scale);
        if (strokeKey) {
            contextInstructions.push("strokeStyle", strokeState.strokeStyle);
            contextInstructions.push("lineWidth", strokeWidth);
            contextInstructions.push("lineCap", strokeState.lineCap);
            contextInstructions.push("lineJoin", strokeState.lineJoin);
            contextInstructions.push("miterLimit", strokeState.miterLimit);
            // eslint-disable-next-line
            var Context = (0, _hasJs.WORKER_OFFSCREEN_CANVAS) ? OffscreenCanvasRenderingContext2D : CanvasRenderingContext2D;
            if (Context.prototype.setLineDash) {
                contextInstructions.push("setLineDash", [
                    strokeState.lineDash
                ]);
                contextInstructions.push("lineDashOffset", strokeState.lineDashOffset);
            }
        }
        if (fillKey) contextInstructions.push("fillStyle", fillState.fillStyle);
        contextInstructions.push("textBaseline", "middle");
        contextInstructions.push("textAlign", "center");
        var leftRight = 0.5 - align;
        var x = align * renderWidth + leftRight * strokeWidth;
        var strokeInstructions = [];
        var fillInstructions = [];
        var lineHeight = 0;
        var lineOffset = 0;
        var widthHeightIndex = 0;
        var lineWidthIndex = 0;
        var previousFont;
        for(var i = 0, ii = chunks.length; i < ii; i += 2){
            var text_1 = chunks[i];
            if (text_1 === "\n") {
                lineOffset += lineHeight;
                lineHeight = 0;
                x = align * renderWidth + leftRight * strokeWidth;
                ++lineWidthIndex;
                continue;
            }
            var font = chunks[i + 1] || textState.font;
            if (font !== previousFont) {
                if (strokeKey) strokeInstructions.push("font", font);
                if (fillKey) fillInstructions.push("font", font);
                previousFont = font;
            }
            lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);
            var fillStrokeArgs = [
                text_1,
                x + leftRight * widths[widthHeightIndex] + align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),
                0.5 * (strokeWidth + lineHeight) + lineOffset, 
            ];
            x += widths[widthHeightIndex];
            if (strokeKey) strokeInstructions.push("strokeText", fillStrokeArgs);
            if (fillKey) fillInstructions.push("fillText", fillStrokeArgs);
            ++widthHeightIndex;
        }
        Array.prototype.push.apply(contextInstructions, strokeInstructions);
        Array.prototype.push.apply(contextInstructions, fillInstructions);
        this.labels_[key] = label;
        return label;
    };
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.
     * @param {Array<*>} fillInstruction Fill instruction.
     * @param {Array<*>} strokeInstruction Stroke instruction.
     */ Executor1.prototype.replayTextBackground_ = function(context, p11, p21, p31, p41, fillInstruction, strokeInstruction) {
        context.beginPath();
        context.moveTo.apply(context, p11);
        context.lineTo.apply(context, p21);
        context.lineTo.apply(context, p31);
        context.lineTo.apply(context, p41);
        context.lineTo.apply(context, p11);
        if (fillInstruction) {
            this.alignFill_ = fillInstruction[2];
            this.fill_(context);
        }
        if (strokeInstruction) {
            this.setStrokeStyle_(context, strokeInstruction);
            context.stroke();
        }
    };
    /**
     * @private
     * @param {number} sheetWidth Width of the sprite sheet.
     * @param {number} sheetHeight Height of the sprite sheet.
     * @param {number} centerX X.
     * @param {number} centerY Y.
     * @param {number} width Width.
     * @param {number} height Height.
     * @param {number} anchorX Anchor X.
     * @param {number} anchorY Anchor Y.
     * @param {number} originX Origin X.
     * @param {number} originY Origin Y.
     * @param {number} rotation Rotation.
     * @param {import("../../size.js").Size} scale Scale.
     * @param {boolean} snapToPixel Snap to pixel.
     * @param {Array<number>} padding Padding.
     * @param {boolean} fillStroke Background fill or stroke.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.
     */ Executor1.prototype.calculateImageOrLabelDimensions_ = function(sheetWidth, sheetHeight, centerX, centerY, width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, fillStroke, feature) {
        anchorX *= scale[0];
        anchorY *= scale[1];
        var x = centerX - anchorX;
        var y = centerY - anchorY;
        var w = width + originX > sheetWidth ? sheetWidth - originX : width;
        var h = height + originY > sheetHeight ? sheetHeight - originY : height;
        var boxW = padding[3] + w * scale[0] + padding[1];
        var boxH = padding[0] + h * scale[1] + padding[2];
        var boxX = x - padding[3];
        var boxY = y - padding[0];
        if (fillStroke || rotation !== 0) {
            p1[0] = boxX;
            p4[0] = boxX;
            p1[1] = boxY;
            p2[1] = boxY;
            p2[0] = boxX + boxW;
            p3[0] = p2[0];
            p3[1] = boxY + boxH;
            p4[1] = p3[1];
        }
        var transform;
        if (rotation !== 0) {
            transform = (0, _transformJs.compose)((0, _transformJs.create)(), centerX, centerY, 1, 1, rotation, -centerX, -centerY);
            (0, _transformJs.apply)(transform, p1);
            (0, _transformJs.apply)(transform, p2);
            (0, _transformJs.apply)(transform, p3);
            (0, _transformJs.apply)(transform, p4);
            (0, _extentJs.createOrUpdate)(Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1]), tmpExtent);
        } else (0, _extentJs.createOrUpdate)(Math.min(boxX, boxX + boxW), Math.min(boxY, boxY + boxH), Math.max(boxX, boxX + boxW), Math.max(boxY, boxY + boxH), tmpExtent);
        if (snapToPixel) {
            x = Math.round(x);
            y = Math.round(y);
        }
        return {
            drawImageX: x,
            drawImageY: y,
            drawImageW: w,
            drawImageH: h,
            originX: originX,
            originY: originY,
            declutterBox: {
                minX: tmpExtent[0],
                minY: tmpExtent[1],
                maxX: tmpExtent[2],
                maxY: tmpExtent[3],
                value: feature
            },
            canvasTransform: transform,
            scale: scale
        };
    };
    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} contextScale Scale of the context.
     * @param {import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.
     * @param {ImageOrLabelDimensions} dimensions Dimensions.
     * @param {number} opacity Opacity.
     * @param {Array<*>} fillInstruction Fill instruction.
     * @param {Array<*>} strokeInstruction Stroke instruction.
     * @return {boolean} The image or label was rendered.
     */ Executor1.prototype.replayImageOrLabel_ = function(context, contextScale, imageOrLabel, dimensions, opacity, fillInstruction, strokeInstruction) {
        var fillStroke = !!(fillInstruction || strokeInstruction);
        var box = dimensions.declutterBox;
        var canvas = context.canvas;
        var strokePadding = strokeInstruction ? strokeInstruction[2] * dimensions.scale[0] / 2 : 0;
        var intersects = box.minX - strokePadding <= canvas.width / contextScale && box.maxX + strokePadding >= 0 && box.minY - strokePadding <= canvas.height / contextScale && box.maxY + strokePadding >= 0;
        if (intersects) {
            if (fillStroke) this.replayTextBackground_(context, p1, p2, p3, p4, fillInstruction, strokeInstruction);
            (0, _canvasJs.drawImageOrLabel)(context, dimensions.canvasTransform, opacity, imageOrLabel, dimensions.originX, dimensions.originY, dimensions.drawImageW, dimensions.drawImageH, dimensions.drawImageX, dimensions.drawImageY, dimensions.scale);
        }
        return true;
    };
    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     */ Executor1.prototype.fill_ = function(context) {
        if (this.alignFill_) {
            var origin_1 = (0, _transformJs.apply)(this.renderedTransform_, [
                0,
                0
            ]);
            var repeatSize = 512 * this.pixelRatio;
            context.save();
            context.translate(origin_1[0] % repeatSize, origin_1[1] % repeatSize);
            context.rotate(this.viewRotation_);
        }
        context.fill();
        if (this.alignFill_) context.restore();
    };
    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {Array<*>} instruction Instruction.
     */ Executor1.prototype.setStrokeStyle_ = function(context, instruction) {
        context["strokeStyle"] = instruction[1];
        context.lineWidth = instruction[2];
        context.lineCap = instruction[3];
        context.lineJoin = instruction[4];
        context.miterLimit = instruction[5];
        if (context.setLineDash) {
            context.lineDashOffset = instruction[7];
            context.setLineDash(instruction[6]);
        }
    };
    /**
     * @private
     * @param {string|Array<string>} text The text to draw.
     * @param {string} textKey The key of the text state.
     * @param {string} strokeKey The key for the stroke state.
     * @param {string} fillKey The key for the fill state.
     * @return {{label: import("../canvas.js").Label, anchorX: number, anchorY: number}} The text image and its anchor.
     */ Executor1.prototype.drawLabelWithPointPlacement_ = function(text, textKey, strokeKey, fillKey) {
        var textState = this.textStates[textKey];
        var label = this.createLabel(text, textKey, fillKey, strokeKey);
        var strokeState = this.strokeStates[strokeKey];
        var pixelRatio = this.pixelRatio;
        var align = horizontalTextAlign(Array.isArray(text) ? text[0] : text, textState.textAlign || (0, _canvasJs.defaultTextAlign));
        var baseline = (0, _textBuilderJs.TEXT_ALIGN)[textState.textBaseline || (0, _canvasJs.defaultTextBaseline)];
        var strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;
        // Remove the 2 pixels we added in createLabel() for the anchor
        var width = label.width / pixelRatio - 2 * textState.scale[0];
        var anchorX = align * width + 2 * (0.5 - align) * strokeWidth;
        var anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;
        return {
            label: label,
            anchorX: anchorX,
            anchorY: anchorY
        };
    };
    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} contextScale Scale of the context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {Array<*>} instructions Instructions array.
     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
     * @param {FeatureCallback<T>} [opt_featureCallback] Feature callback.
     * @param {import("../../extent.js").Extent} [opt_hitExtent] Only check
     *     features that intersect this extent.
     * @param {import("rbush").default} [opt_declutterTree] Declutter tree.
     * @return {T|undefined} Callback result.
     * @template T
     */ Executor1.prototype.execute_ = function(context, contextScale, transform, instructions, snapToPixel, opt_featureCallback, opt_hitExtent, opt_declutterTree) {
        /** @type {Array<number>} */ var pixelCoordinates;
        if (this.pixelCoordinates_ && (0, _arrayJs.equals)(transform, this.renderedTransform_)) pixelCoordinates = this.pixelCoordinates_;
        else {
            if (!this.pixelCoordinates_) this.pixelCoordinates_ = [];
            pixelCoordinates = (0, _transformJs1.transform2D)(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);
            (0, _transformJs.setFromArray)(this.renderedTransform_, transform);
        }
        var i = 0; // instruction index
        var ii = instructions.length; // end of instructions
        var d = 0; // data index
        var dd; // end of per-instruction data
        var anchorX, anchorY, prevX, prevY, roundX, roundY, image, text, textKey, strokeKey, fillKey;
        var pendingFill = 0;
        var pendingStroke = 0;
        var lastFillInstruction = null;
        var lastStrokeInstruction = null;
        var coordinateCache = this.coordinateCache_;
        var viewRotation = this.viewRotation_;
        var viewRotationFromTransform = Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;
        var state = {
            context: context,
            pixelRatio: this.pixelRatio,
            resolution: this.resolution,
            rotation: viewRotation
        };
        // When the batch size gets too big, performance decreases. 200 is a good
        // balance between batch size and number of fill/stroke instructions.
        var batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;
        var /** @type {import("../../Feature.js").FeatureLike} */ feature;
        var x, y, currentGeometry;
        while(i < ii){
            var instruction = instructions[i];
            var type = instruction[0];
            switch(type){
                case (0, _instructionJsDefault.default).BEGIN_GEOMETRY:
                    feature = instruction[1];
                    currentGeometry = instruction[3];
                    if (!feature.getGeometry()) i = instruction[2];
                    else if (opt_hitExtent !== undefined && !(0, _extentJs.intersects)(opt_hitExtent, currentGeometry.getExtent())) i = /** @type {number} */ instruction[2] + 1;
                    else ++i;
                    break;
                case (0, _instructionJsDefault.default).BEGIN_PATH:
                    if (pendingFill > batchSize) {
                        this.fill_(context);
                        pendingFill = 0;
                    }
                    if (pendingStroke > batchSize) {
                        context.stroke();
                        pendingStroke = 0;
                    }
                    if (!pendingFill && !pendingStroke) {
                        context.beginPath();
                        prevX = NaN;
                        prevY = NaN;
                    }
                    ++i;
                    break;
                case (0, _instructionJsDefault.default).CIRCLE:
                    d = instruction[1];
                    var x1 = pixelCoordinates[d];
                    var y1 = pixelCoordinates[d + 1];
                    var x2 = pixelCoordinates[d + 2];
                    var y2 = pixelCoordinates[d + 3];
                    var dx = x2 - x1;
                    var dy = y2 - y1;
                    var r = Math.sqrt(dx * dx + dy * dy);
                    context.moveTo(x1 + r, y1);
                    context.arc(x1, y1, r, 0, 2 * Math.PI, true);
                    ++i;
                    break;
                case (0, _instructionJsDefault.default).CLOSE_PATH:
                    context.closePath();
                    ++i;
                    break;
                case (0, _instructionJsDefault.default).CUSTOM:
                    d = instruction[1];
                    dd = instruction[2];
                    var geometry = instruction[3];
                    var renderer = instruction[4];
                    var fn = instruction.length == 6 ? instruction[5] : undefined;
                    state.geometry = geometry;
                    state.feature = feature;
                    if (!(i in coordinateCache)) coordinateCache[i] = [];
                    var coords = coordinateCache[i];
                    if (fn) fn(pixelCoordinates, d, dd, 2, coords);
                    else {
                        coords[0] = pixelCoordinates[d];
                        coords[1] = pixelCoordinates[d + 1];
                        coords.length = 2;
                    }
                    renderer(coords, state);
                    ++i;
                    break;
                case (0, _instructionJsDefault.default).DRAW_IMAGE:
                    d = instruction[1];
                    dd = instruction[2];
                    image = instruction[3];
                    // Remaining arguments in DRAW_IMAGE are in alphabetical order
                    anchorX = instruction[4];
                    anchorY = instruction[5];
                    var height = instruction[6];
                    var opacity = instruction[7];
                    var originX = instruction[8];
                    var originY = instruction[9];
                    var rotateWithView = instruction[10];
                    var rotation = instruction[11];
                    var scale = instruction[12];
                    var width = instruction[13];
                    var declutterImageWithText = instruction[14];
                    if (!image && instruction.length >= 19) {
                        // create label images
                        text = instruction[18];
                        textKey = instruction[19];
                        strokeKey = instruction[20];
                        fillKey = instruction[21];
                        var labelWithAnchor = this.drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey);
                        image = labelWithAnchor.label;
                        instruction[3] = image;
                        var textOffsetX = instruction[22];
                        anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;
                        instruction[4] = anchorX;
                        var textOffsetY = instruction[23];
                        anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;
                        instruction[5] = anchorY;
                        height = image.height;
                        instruction[6] = height;
                        width = image.width;
                        instruction[13] = width;
                    }
                    var geometryWidths = void 0;
                    if (instruction.length > 24) geometryWidths = instruction[24];
                    var padding = void 0, backgroundFill = void 0, backgroundStroke = void 0;
                    if (instruction.length > 16) {
                        padding = instruction[15];
                        backgroundFill = instruction[16];
                        backgroundStroke = instruction[17];
                    } else {
                        padding = (0, _canvasJs.defaultPadding);
                        backgroundFill = false;
                        backgroundStroke = false;
                    }
                    if (rotateWithView && viewRotationFromTransform) // Canvas is expected to be rotated to reverse view rotation.
                    rotation += viewRotation;
                    else if (!rotateWithView && !viewRotationFromTransform) // Canvas is not rotated, images need to be rotated back to be north-up.
                    rotation -= viewRotation;
                    var widthIndex = 0;
                    for(; d < dd; d += 2){
                        if (geometryWidths && geometryWidths[widthIndex++] < width / this.pixelRatio) continue;
                        var dimensions = this.calculateImageOrLabelDimensions_(image.width, image.height, pixelCoordinates[d], pixelCoordinates[d + 1], width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, backgroundFill || backgroundStroke, feature);
                        /** @type {ReplayImageOrLabelArgs} */ var args = [
                            context,
                            contextScale,
                            image,
                            dimensions,
                            opacity,
                            backgroundFill ? lastFillInstruction : null,
                            backgroundStroke ? lastStrokeInstruction : null, 
                        ];
                        var imageArgs = void 0;
                        var imageDeclutterBox = void 0;
                        if (opt_declutterTree && declutterImageWithText) {
                            var index = dd - d;
                            if (!declutterImageWithText[index]) {
                                // We now have the image for an image+text combination.
                                declutterImageWithText[index] = args;
                                continue;
                            }
                            imageArgs = declutterImageWithText[index];
                            delete declutterImageWithText[index];
                            imageDeclutterBox = getDeclutterBox(imageArgs);
                            if (opt_declutterTree.collides(imageDeclutterBox)) continue;
                        }
                        if (opt_declutterTree && opt_declutterTree.collides(dimensions.declutterBox)) continue;
                        if (imageArgs) {
                            // We now have image and text for an image+text combination.
                            if (opt_declutterTree) opt_declutterTree.insert(imageDeclutterBox);
                            // Render the image before we render the text.
                            this.replayImageOrLabel_.apply(this, imageArgs);
                        }
                        if (opt_declutterTree) opt_declutterTree.insert(dimensions.declutterBox);
                        this.replayImageOrLabel_.apply(this, args);
                    }
                    ++i;
                    break;
                case (0, _instructionJsDefault.default).DRAW_CHARS:
                    var begin = instruction[1];
                    var end = instruction[2];
                    var baseline = instruction[3];
                    var overflow = instruction[4];
                    fillKey = instruction[5];
                    var maxAngle = instruction[6];
                    var measurePixelRatio = instruction[7];
                    var offsetY = instruction[8];
                    strokeKey = instruction[9];
                    var strokeWidth = instruction[10];
                    text = instruction[11];
                    textKey = instruction[12];
                    var pixelRatioScale = [
                        instruction[13],
                        instruction[13], 
                    ];
                    var textState = this.textStates[textKey];
                    var font = textState.font;
                    var textScale = [
                        textState.scale[0] * measurePixelRatio,
                        textState.scale[1] * measurePixelRatio, 
                    ];
                    var cachedWidths = void 0;
                    if (font in this.widths_) cachedWidths = this.widths_[font];
                    else {
                        cachedWidths = {};
                        this.widths_[font] = cachedWidths;
                    }
                    var pathLength = (0, _lengthJs.lineStringLength)(pixelCoordinates, begin, end, 2);
                    var textLength = Math.abs(textScale[0]) * (0, _canvasJs.measureAndCacheTextWidth)(font, text, cachedWidths);
                    if (overflow || textLength <= pathLength) {
                        var textAlign = this.textStates[textKey].textAlign;
                        var startM = (pathLength - textLength) * (0, _textBuilderJs.TEXT_ALIGN)[textAlign];
                        var parts = (0, _textpathJs.drawTextOnPath)(pixelCoordinates, begin, end, 2, text, startM, maxAngle, Math.abs(textScale[0]), (0, _canvasJs.measureAndCacheTextWidth), font, cachedWidths, viewRotationFromTransform ? 0 : this.viewRotation_);
                        drawChars: if (parts) {
                            /** @type {Array<ReplayImageOrLabelArgs>} */ var replayImageOrLabelArgs = [];
                            var c = void 0, cc = void 0, chars = void 0, label = void 0, part = void 0;
                            if (strokeKey) for(c = 0, cc = parts.length; c < cc; ++c){
                                part = parts[c]; // x, y, anchorX, rotation, chunk
                                chars = part[4];
                                label = this.createLabel(chars, textKey, "", strokeKey);
                                anchorX = /** @type {number} */ part[2] + (textScale[0] < 0 ? -strokeWidth : strokeWidth);
                                anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth * textScale[1] / textScale[0] - offsetY;
                                var dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, (0, _canvasJs.defaultPadding), false, feature);
                                if (opt_declutterTree && opt_declutterTree.collides(dimensions.declutterBox)) break drawChars;
                                replayImageOrLabelArgs.push([
                                    context,
                                    contextScale,
                                    label,
                                    dimensions,
                                    1,
                                    null,
                                    null, 
                                ]);
                            }
                            if (fillKey) for(c = 0, cc = parts.length; c < cc; ++c){
                                part = parts[c]; // x, y, anchorX, rotation, chunk
                                chars = part[4];
                                label = this.createLabel(chars, textKey, fillKey, "");
                                anchorX = part[2];
                                anchorY = baseline * label.height - offsetY;
                                var dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, (0, _canvasJs.defaultPadding), false, feature);
                                if (opt_declutterTree && opt_declutterTree.collides(dimensions.declutterBox)) break drawChars;
                                replayImageOrLabelArgs.push([
                                    context,
                                    contextScale,
                                    label,
                                    dimensions,
                                    1,
                                    null,
                                    null, 
                                ]);
                            }
                            if (opt_declutterTree) opt_declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));
                            for(var i_1 = 0, ii_1 = replayImageOrLabelArgs.length; i_1 < ii_1; ++i_1)this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i_1]);
                        }
                    }
                    ++i;
                    break;
                case (0, _instructionJsDefault.default).END_GEOMETRY:
                    if (opt_featureCallback !== undefined) {
                        feature = instruction[1];
                        var result = opt_featureCallback(feature, currentGeometry);
                        if (result) return result;
                    }
                    ++i;
                    break;
                case (0, _instructionJsDefault.default).FILL:
                    if (batchSize) pendingFill++;
                    else this.fill_(context);
                    ++i;
                    break;
                case (0, _instructionJsDefault.default).MOVE_TO_LINE_TO:
                    d = instruction[1];
                    dd = instruction[2];
                    x = pixelCoordinates[d];
                    y = pixelCoordinates[d + 1];
                    roundX = x + 0.5 | 0;
                    roundY = y + 0.5 | 0;
                    if (roundX !== prevX || roundY !== prevY) {
                        context.moveTo(x, y);
                        prevX = roundX;
                        prevY = roundY;
                    }
                    for(d += 2; d < dd; d += 2){
                        x = pixelCoordinates[d];
                        y = pixelCoordinates[d + 1];
                        roundX = x + 0.5 | 0;
                        roundY = y + 0.5 | 0;
                        if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
                            context.lineTo(x, y);
                            prevX = roundX;
                            prevY = roundY;
                        }
                    }
                    ++i;
                    break;
                case (0, _instructionJsDefault.default).SET_FILL_STYLE:
                    lastFillInstruction = instruction;
                    this.alignFill_ = instruction[2];
                    if (pendingFill) {
                        this.fill_(context);
                        pendingFill = 0;
                        if (pendingStroke) {
                            context.stroke();
                            pendingStroke = 0;
                        }
                    }
                    context.fillStyle = instruction[1];
                    ++i;
                    break;
                case (0, _instructionJsDefault.default).SET_STROKE_STYLE:
                    lastStrokeInstruction = instruction;
                    if (pendingStroke) {
                        context.stroke();
                        pendingStroke = 0;
                    }
                    this.setStrokeStyle_(context, instruction);
                    ++i;
                    break;
                case (0, _instructionJsDefault.default).STROKE:
                    if (batchSize) pendingStroke++;
                    else context.stroke();
                    ++i;
                    break;
                default:
                    ++i; // consume the instruction anyway, to avoid an infinite loop
                    break;
            }
        }
        if (pendingFill) this.fill_(context);
        if (pendingStroke) context.stroke();
        return undefined;
    };
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} contextScale Scale of the context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
     * @param {import("rbush").default} [opt_declutterTree] Declutter tree.
     */ Executor1.prototype.execute = function(context, contextScale, transform, viewRotation, snapToPixel, opt_declutterTree) {
        this.viewRotation_ = viewRotation;
        this.execute_(context, contextScale, transform, this.instructions, snapToPixel, undefined, undefined, opt_declutterTree);
    };
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {FeatureCallback<T>} [opt_featureCallback] Feature callback.
     * @param {import("../../extent.js").Extent} [opt_hitExtent] Only check
     *     features that intersect this extent.
     * @return {T|undefined} Callback result.
     * @template T
     */ Executor1.prototype.executeHitDetection = function(context, transform, viewRotation, opt_featureCallback, opt_hitExtent) {
        this.viewRotation_ = viewRotation;
        return this.execute_(context, 1, transform, this.hitDetectionInstructions, true, opt_featureCallback, opt_hitExtent);
    };
    return Executor1;
}();
exports.default = Executor;

},{"./Instruction.js":"9nhw8","./TextBuilder.js":"6mvke","../../has.js":"6BDNi","../../transform.js":"1BqUf","../../extent.js":"6YrVc","../canvas.js":"e85iQ","../../geom/flat/textpath.js":"hYFQq","../../array.js":"1Fbic","../../geom/flat/length.js":"X5sUU","../../geom/flat/transform.js":"cDA2L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hYFQq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {Array<number>} flatCoordinates Path to put text on.
 * @param {number} offset Start offset of the `flatCoordinates`.
 * @param {number} end End offset of the `flatCoordinates`.
 * @param {number} stride Stride.
 * @param {string} text Text to place on the path.
 * @param {number} startM m along the path where the text starts.
 * @param {number} maxAngle Max angle between adjacent chars in radians.
 * @param {number} scale The product of the text scale and the device pixel ratio.
 * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.
 * @param {string} font The font.
 * @param {Object<string, number>} cache A cache of measured widths.
 * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.
 * @return {Array<Array<*>>|null} The result array (or null if `maxAngle` was
 * exceeded). Entries of the array are x, y, anchorX, angle, chunk.
 */ parcelHelpers.export(exports, "drawTextOnPath", ()=>drawTextOnPath);
/**
 * @module ol/geom/flat/textpath
 */ var _mathJs = require("../../math.js");
var _transformJs = require("./transform.js");
function drawTextOnPath(flatCoordinates, offset, end, stride, text, startM, maxAngle, scale, measureAndCacheTextWidth, font, cache, rotation) {
    var x2 = flatCoordinates[offset];
    var y2 = flatCoordinates[offset + 1];
    var x1 = 0;
    var y1 = 0;
    var segmentLength = 0;
    var segmentM = 0;
    function advance() {
        x1 = x2;
        y1 = y2;
        offset += stride;
        x2 = flatCoordinates[offset];
        y2 = flatCoordinates[offset + 1];
        segmentM += segmentLength;
        segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    }
    do advance();
    while (offset < end - stride && segmentM + segmentLength < startM);
    var interpolate = segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;
    var beginX = (0, _mathJs.lerp)(x1, x2, interpolate);
    var beginY = (0, _mathJs.lerp)(y1, y2, interpolate);
    var startOffset = offset - stride;
    var startLength = segmentM;
    var endM = startM + scale * measureAndCacheTextWidth(font, text, cache);
    while(offset < end - stride && segmentM + segmentLength < endM)advance();
    interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;
    var endX = (0, _mathJs.lerp)(x1, x2, interpolate);
    var endY = (0, _mathJs.lerp)(y1, y2, interpolate);
    // Keep text upright
    var reverse;
    if (rotation) {
        var flat = [
            beginX,
            beginY,
            endX,
            endY
        ];
        (0, _transformJs.rotate)(flat, 0, 4, 2, rotation, flat, flat);
        reverse = flat[0] > flat[2];
    } else reverse = beginX > endX;
    var PI = Math.PI;
    var result = [];
    var singleSegment = startOffset + stride === offset;
    offset = startOffset;
    segmentLength = 0;
    segmentM = startLength;
    x2 = flatCoordinates[offset];
    y2 = flatCoordinates[offset + 1];
    var previousAngle;
    // All on the same segment
    if (singleSegment) {
        advance();
        previousAngle = Math.atan2(y2 - y1, x2 - x1);
        if (reverse) previousAngle += previousAngle > 0 ? -PI : PI;
        var x = (endX + beginX) / 2;
        var y = (endY + beginY) / 2;
        result[0] = [
            x,
            y,
            (endM - startM) / 2,
            previousAngle,
            text
        ];
        return result;
    }
    for(var i = 0, ii = text.length; i < ii;){
        advance();
        var angle = Math.atan2(y2 - y1, x2 - x1);
        if (reverse) angle += angle > 0 ? -PI : PI;
        if (previousAngle !== undefined) {
            var delta = angle - previousAngle;
            delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;
            if (Math.abs(delta) > maxAngle) return null;
        }
        previousAngle = angle;
        var iStart = i;
        var charLength = 0;
        for(; i < ii; ++i){
            var index = reverse ? ii - i - 1 : i;
            var len = scale * measureAndCacheTextWidth(font, text[index], cache);
            if (offset + stride < end && segmentM + segmentLength < startM + charLength + len / 2) break;
            charLength += len;
        }
        if (i === iStart) continue;
        var chars = reverse ? text.substring(ii - iStart, ii - i) : text.substring(iStart, i);
        interpolate = segmentLength === 0 ? 0 : (startM + charLength / 2 - segmentM) / segmentLength;
        var x = (0, _mathJs.lerp)(x1, x2, interpolate);
        var y = (0, _mathJs.lerp)(y1, y2, interpolate);
        result.push([
            x,
            y,
            charLength / 2,
            angle,
            chars
        ]);
        startM += charLength;
    }
    return result;
}

},{"../../math.js":"5jEFr","./transform.js":"cDA2L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hriIE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HIT_DETECT_RESOLUTION", ()=>HIT_DETECT_RESOLUTION);
/**
 * @param {import("../../size.js").Size} size Canvas size in css pixels.
 * @param {Array<import("../../transform.js").Transform>} transforms Transforms
 * for rendering features to all worlds of the viewport, from coordinates to css
 * pixels.
 * @param {Array<import("../../Feature.js").FeatureLike>} features
 * Features to consider for hit detection.
 * @param {import("../../style/Style.js").StyleFunction|undefined} styleFunction
 * Layer style function.
 * @param {import("../../extent.js").Extent} extent Extent.
 * @param {number} resolution Resolution.
 * @param {number} rotation Rotation.
 * @return {ImageData} Hit detection image data.
 */ parcelHelpers.export(exports, "createHitDetectionImageData", ()=>createHitDetectionImageData);
/**
 * @param {import("../../pixel").Pixel} pixel Pixel coordinate on the hit
 * detection canvas in css pixels.
 * @param {Array<import("../../Feature").FeatureLike>} features Features. Has to
 * match the `features` array that was passed to `createHitDetectionImageData()`.
 * @param {ImageData} imageData Hit detection image data generated by
 * `createHitDetectionImageData()`.
 * @return {Array<import("../../Feature").FeatureLike>} features Features.
 */ parcelHelpers.export(exports, "hitDetect", ()=>hitDetect);
/**
 * @module ol/render/canvas/hitdetect
 */ var _immediateJs = require("./Immediate.js");
var _immediateJsDefault = parcelHelpers.interopDefault(_immediateJs);
var _geometryTypeJs = require("../../geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _iconAnchorUnitsJs = require("../../style/IconAnchorUnits.js");
var _iconAnchorUnitsJsDefault = parcelHelpers.interopDefault(_iconAnchorUnitsJs);
var _styleJs = require("../../style.js");
var _mathJs = require("../../math.js");
var _domJs = require("../../dom.js");
var _extentJs = require("../../extent.js");
var _arrayJs = require("../../array.js");
var HIT_DETECT_RESOLUTION = 0.5;
function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {
    var width = size[0] * HIT_DETECT_RESOLUTION;
    var height = size[1] * HIT_DETECT_RESOLUTION;
    var context = (0, _domJs.createCanvasContext2D)(width, height);
    context.imageSmoothingEnabled = false;
    var canvas = context.canvas;
    var renderer = new (0, _immediateJsDefault.default)(context, HIT_DETECT_RESOLUTION, extent, null, rotation);
    var featureCount = features.length;
    // Stretch hit detection index to use the whole available color range
    var indexFactor = Math.floor(16777215 / featureCount);
    var featuresByZIndex = {};
    for(var i = 1; i <= featureCount; ++i){
        var feature = features[i - 1];
        var featureStyleFunction = feature.getStyleFunction() || styleFunction;
        if (!styleFunction) continue;
        var styles = featureStyleFunction(feature, resolution);
        if (!styles) continue;
        if (!Array.isArray(styles)) styles = [
            styles
        ];
        var index = i * indexFactor;
        var color = "#" + ("000000" + index.toString(16)).slice(-6);
        for(var j = 0, jj = styles.length; j < jj; ++j){
            var originalStyle = styles[j];
            var geometry = originalStyle.getGeometryFunction()(feature);
            if (!geometry || !(0, _extentJs.intersects)(extent, geometry.getExtent())) continue;
            var style = originalStyle.clone();
            var fill = style.getFill();
            if (fill) fill.setColor(color);
            var stroke = style.getStroke();
            if (stroke) {
                stroke.setColor(color);
                stroke.setLineDash(null);
            }
            style.setText(undefined);
            var image = originalStyle.getImage();
            if (image && image.getOpacity() !== 0) {
                var imgSize = image.getImageSize();
                if (!imgSize) continue;
                var imgContext = (0, _domJs.createCanvasContext2D)(imgSize[0], imgSize[1], undefined, {
                    alpha: false
                });
                var img = imgContext.canvas;
                imgContext.fillStyle = color;
                imgContext.fillRect(0, 0, img.width, img.height);
                style.setImage(new (0, _styleJs.Icon)({
                    img: img,
                    imgSize: imgSize,
                    anchor: image.getAnchor(),
                    anchorXUnits: (0, _iconAnchorUnitsJsDefault.default).PIXELS,
                    anchorYUnits: (0, _iconAnchorUnitsJsDefault.default).PIXELS,
                    offset: image.getOrigin(),
                    opacity: 1,
                    size: image.getSize(),
                    scale: image.getScale(),
                    rotation: image.getRotation(),
                    rotateWithView: image.getRotateWithView()
                }));
            }
            var zIndex = style.getZIndex() || 0;
            var byGeometryType = featuresByZIndex[zIndex];
            if (!byGeometryType) {
                byGeometryType = {};
                featuresByZIndex[zIndex] = byGeometryType;
                byGeometryType[(0, _geometryTypeJsDefault.default).POLYGON] = [];
                byGeometryType[(0, _geometryTypeJsDefault.default).CIRCLE] = [];
                byGeometryType[(0, _geometryTypeJsDefault.default).LINE_STRING] = [];
                byGeometryType[(0, _geometryTypeJsDefault.default).POINT] = [];
            }
            byGeometryType[geometry.getType().replace("Multi", "")].push(geometry, style);
        }
    }
    var zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort((0, _arrayJs.numberSafeCompareFunction));
    for(var i = 0, ii = zIndexKeys.length; i < ii; ++i){
        var byGeometryType = featuresByZIndex[zIndexKeys[i]];
        for(var type in byGeometryType){
            var geomAndStyle = byGeometryType[type];
            for(var j = 0, jj = geomAndStyle.length; j < jj; j += 2){
                renderer.setStyle(geomAndStyle[j + 1]);
                for(var k = 0, kk = transforms.length; k < kk; ++k){
                    renderer.setTransform(transforms[k]);
                    renderer.drawGeometry(geomAndStyle[j]);
                }
            }
        }
    }
    return context.getImageData(0, 0, canvas.width, canvas.height);
}
function hitDetect(pixel, features, imageData) {
    var resultFeatures = [];
    if (imageData) {
        var x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);
        var y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);
        // The pixel coordinate is clamped down to the hit-detect canvas' size to account
        // for browsers returning coordinates slightly larger than the actual canvas size
        // due to a non-integer pixel ratio.
        var index = ((0, _mathJs.clamp)(x, 0, imageData.width - 1) + (0, _mathJs.clamp)(y, 0, imageData.height - 1) * imageData.width) * 4;
        var r = imageData.data[index];
        var g = imageData.data[index + 1];
        var b = imageData.data[index + 2];
        var i = b + 256 * (g + 256 * r);
        var indexFactor = Math.floor(16777215 / features.length);
        if (i && i % indexFactor === 0) resultFeatures.push(features[i / indexFactor - 1]);
    }
    return resultFeatures;
}

},{"./Immediate.js":"j3fUk","../../geom/GeometryType.js":"j6daa","../../style/IconAnchorUnits.js":"DKiWZ","../../style.js":"hEQxF","../../math.js":"5jEFr","../../dom.js":"84QzQ","../../extent.js":"6YrVc","../../array.js":"1Fbic","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j3fUk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _geometryTypeJs = require("../../geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _vectorContextJs = require("../VectorContext.js");
var _vectorContextJsDefault = parcelHelpers.interopDefault(_vectorContextJs);
var _colorlikeJs = require("../../colorlike.js");
var _transformJs = require("../../transform.js");
var _canvasJs = require("../canvas.js");
var _arrayJs = require("../../array.js");
var _extentJs = require("../../extent.js");
var _transformJs1 = require("../../geom/flat/transform.js");
var _simpleGeometryJs = require("../../geom/SimpleGeometry.js");
/**
 * @module ol/render/canvas/Immediate
 */ // FIXME test, especially polygons with holes and multipolygons
// FIXME need to handle large thick features (where pixel size matters)
// FIXME add offset and end to ol/geom/flat/transform~transform2D?
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext VectorContext} that implements
 * direct rendering of features and geometries to an HTML5 Canvas context.
 * Instances of this class are created internally by the library and
 * provided to application code as vectorContext member of the
 * {@link module:ol/render/Event~RenderEvent RenderEvent} object associated with postcompose, precompose and
 * render events emitted by layers and maps.
 */ var CanvasImmediateRenderer = /** @class */ function(_super) {
    __extends(CanvasImmediateRenderer1, _super);
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {number} [opt_squaredTolerance] Optional squared tolerance for simplification.
     * @param {import("../../proj.js").TransformFunction} [opt_userTransform] Transform from user to view projection.
     */ function CanvasImmediateRenderer1(context, pixelRatio, extent, transform, viewRotation, opt_squaredTolerance, opt_userTransform) {
        var _this = _super.call(this) || this;
        /**
         * @private
         * @type {CanvasRenderingContext2D}
         */ _this.context_ = context;
        /**
         * @private
         * @type {number}
         */ _this.pixelRatio_ = pixelRatio;
        /**
         * @private
         * @type {import("../../extent.js").Extent}
         */ _this.extent_ = extent;
        /**
         * @private
         * @type {import("../../transform.js").Transform}
         */ _this.transform_ = transform;
        /**
         * @private
         * @type {number}
         */ _this.viewRotation_ = viewRotation;
        /**
         * @private
         * @type {number}
         */ _this.squaredTolerance_ = opt_squaredTolerance;
        /**
         * @private
         * @type {import("../../proj.js").TransformFunction}
         */ _this.userTransform_ = opt_userTransform;
        /**
         * @private
         * @type {?import("../canvas.js").FillState}
         */ _this.contextFillState_ = null;
        /**
         * @private
         * @type {?import("../canvas.js").StrokeState}
         */ _this.contextStrokeState_ = null;
        /**
         * @private
         * @type {?import("../canvas.js").TextState}
         */ _this.contextTextState_ = null;
        /**
         * @private
         * @type {?import("../canvas.js").FillState}
         */ _this.fillState_ = null;
        /**
         * @private
         * @type {?import("../canvas.js").StrokeState}
         */ _this.strokeState_ = null;
        /**
         * @private
         * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
         */ _this.image_ = null;
        /**
         * @private
         * @type {number}
         */ _this.imageAnchorX_ = 0;
        /**
         * @private
         * @type {number}
         */ _this.imageAnchorY_ = 0;
        /**
         * @private
         * @type {number}
         */ _this.imageHeight_ = 0;
        /**
         * @private
         * @type {number}
         */ _this.imageOpacity_ = 0;
        /**
         * @private
         * @type {number}
         */ _this.imageOriginX_ = 0;
        /**
         * @private
         * @type {number}
         */ _this.imageOriginY_ = 0;
        /**
         * @private
         * @type {boolean}
         */ _this.imageRotateWithView_ = false;
        /**
         * @private
         * @type {number}
         */ _this.imageRotation_ = 0;
        /**
         * @private
         * @type {import("../../size.js").Size}
         */ _this.imageScale_ = [
            0,
            0
        ];
        /**
         * @private
         * @type {number}
         */ _this.imageWidth_ = 0;
        /**
         * @private
         * @type {string}
         */ _this.text_ = "";
        /**
         * @private
         * @type {number}
         */ _this.textOffsetX_ = 0;
        /**
         * @private
         * @type {number}
         */ _this.textOffsetY_ = 0;
        /**
         * @private
         * @type {boolean}
         */ _this.textRotateWithView_ = false;
        /**
         * @private
         * @type {number}
         */ _this.textRotation_ = 0;
        /**
         * @private
         * @type {import("../../size.js").Size}
         */ _this.textScale_ = [
            0,
            0
        ];
        /**
         * @private
         * @type {?import("../canvas.js").FillState}
         */ _this.textFillState_ = null;
        /**
         * @private
         * @type {?import("../canvas.js").StrokeState}
         */ _this.textStrokeState_ = null;
        /**
         * @private
         * @type {?import("../canvas.js").TextState}
         */ _this.textState_ = null;
        /**
         * @private
         * @type {Array<number>}
         */ _this.pixelCoordinates_ = [];
        /**
         * @private
         * @type {import("../../transform.js").Transform}
         */ _this.tmpLocalTransform_ = (0, _transformJs.create)();
        return _this;
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     */ CanvasImmediateRenderer1.prototype.drawImages_ = function(flatCoordinates, offset, end, stride) {
        if (!this.image_) return;
        var pixelCoordinates = (0, _transformJs1.transform2D)(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
        var context = this.context_;
        var localTransform = this.tmpLocalTransform_;
        var alpha = context.globalAlpha;
        if (this.imageOpacity_ != 1) context.globalAlpha = alpha * this.imageOpacity_;
        var rotation = this.imageRotation_;
        if (this.imageRotateWithView_) rotation += this.viewRotation_;
        for(var i = 0, ii = pixelCoordinates.length; i < ii; i += 2){
            var x = pixelCoordinates[i] - this.imageAnchorX_;
            var y = pixelCoordinates[i + 1] - this.imageAnchorY_;
            if (rotation !== 0 || this.imageScale_[0] != 1 || this.imageScale_[1] != 1) {
                var centerX = x + this.imageAnchorX_;
                var centerY = y + this.imageAnchorY_;
                (0, _transformJs.compose)(localTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);
                context.setTransform.apply(context, localTransform);
                context.translate(centerX, centerY);
                context.scale(this.imageScale_[0], this.imageScale_[1]);
                context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, -this.imageAnchorX_, -this.imageAnchorY_, this.imageWidth_, this.imageHeight_);
                context.setTransform(1, 0, 0, 1, 0, 0);
            } else context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, x, y, this.imageWidth_, this.imageHeight_);
        }
        if (this.imageOpacity_ != 1) context.globalAlpha = alpha;
    };
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     */ CanvasImmediateRenderer1.prototype.drawText_ = function(flatCoordinates, offset, end, stride) {
        if (!this.textState_ || this.text_ === "") return;
        if (this.textFillState_) this.setContextFillState_(this.textFillState_);
        if (this.textStrokeState_) this.setContextStrokeState_(this.textStrokeState_);
        this.setContextTextState_(this.textState_);
        var pixelCoordinates = (0, _transformJs1.transform2D)(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
        var context = this.context_;
        var rotation = this.textRotation_;
        if (this.textRotateWithView_) rotation += this.viewRotation_;
        for(; offset < end; offset += stride){
            var x = pixelCoordinates[offset] + this.textOffsetX_;
            var y = pixelCoordinates[offset + 1] + this.textOffsetY_;
            if (rotation !== 0 || this.textScale_[0] != 1 || this.textScale_[1] != 1) {
                var localTransform = (0, _transformJs.compose)(this.tmpLocalTransform_, x, y, 1, 1, rotation, -x, -y);
                context.setTransform.apply(context, localTransform);
                context.translate(x, y);
                context.scale(this.textScale_[0], this.textScale_[1]);
                if (this.textStrokeState_) context.strokeText(this.text_, 0, 0);
                if (this.textFillState_) context.fillText(this.text_, 0, 0);
                context.setTransform(1, 0, 0, 1, 0, 0);
            } else {
                if (this.textStrokeState_) context.strokeText(this.text_, x, y);
                if (this.textFillState_) context.fillText(this.text_, x, y);
            }
        }
    };
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {boolean} close Close.
     * @private
     * @return {number} end End.
     */ CanvasImmediateRenderer1.prototype.moveToLineTo_ = function(flatCoordinates, offset, end, stride, close) {
        var context = this.context_;
        var pixelCoordinates = (0, _transformJs1.transform2D)(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
        context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);
        var length = pixelCoordinates.length;
        if (close) length -= 2;
        for(var i = 2; i < length; i += 2)context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);
        if (close) context.closePath();
        return end;
    };
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @private
     * @return {number} End.
     */ CanvasImmediateRenderer1.prototype.drawRings_ = function(flatCoordinates, offset, ends, stride) {
        for(var i = 0, ii = ends.length; i < ii; ++i)offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);
        return offset;
    };
    /**
     * Render a circle geometry into the canvas.  Rendering is immediate and uses
     * the current fill and stroke styles.
     *
     * @param {import("../../geom/Circle.js").default} geometry Circle geometry.
     * @api
     */ CanvasImmediateRenderer1.prototype.drawCircle = function(geometry) {
        if (!(0, _extentJs.intersects)(this.extent_, geometry.getExtent())) return;
        if (this.fillState_ || this.strokeState_) {
            if (this.fillState_) this.setContextFillState_(this.fillState_);
            if (this.strokeState_) this.setContextStrokeState_(this.strokeState_);
            var pixelCoordinates = (0, _simpleGeometryJs.transformGeom2D)(geometry, this.transform_, this.pixelCoordinates_);
            var dx = pixelCoordinates[2] - pixelCoordinates[0];
            var dy = pixelCoordinates[3] - pixelCoordinates[1];
            var radius = Math.sqrt(dx * dx + dy * dy);
            var context = this.context_;
            context.beginPath();
            context.arc(pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);
            if (this.fillState_) context.fill();
            if (this.strokeState_) context.stroke();
        }
        if (this.text_ !== "") this.drawText_(geometry.getCenter(), 0, 2, 2);
    };
    /**
     * Set the rendering style.  Note that since this is an immediate rendering API,
     * any `zIndex` on the provided style will be ignored.
     *
     * @param {import("../../style/Style.js").default} style The rendering style.
     * @api
     */ CanvasImmediateRenderer1.prototype.setStyle = function(style) {
        this.setFillStrokeStyle(style.getFill(), style.getStroke());
        this.setImageStyle(style.getImage());
        this.setTextStyle(style.getText());
    };
    /**
     * @param {import("../../transform.js").Transform} transform Transform.
     */ CanvasImmediateRenderer1.prototype.setTransform = function(transform) {
        this.transform_ = transform;
    };
    /**
     * Render a geometry into the canvas.  Call
     * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.
     *
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
     * @api
     */ CanvasImmediateRenderer1.prototype.drawGeometry = function(geometry) {
        var type = geometry.getType();
        switch(type){
            case (0, _geometryTypeJsDefault.default).POINT:
                this.drawPoint(geometry);
                break;
            case (0, _geometryTypeJsDefault.default).LINE_STRING:
                this.drawLineString(geometry);
                break;
            case (0, _geometryTypeJsDefault.default).POLYGON:
                this.drawPolygon(geometry);
                break;
            case (0, _geometryTypeJsDefault.default).MULTI_POINT:
                this.drawMultiPoint(geometry);
                break;
            case (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING:
                this.drawMultiLineString(geometry);
                break;
            case (0, _geometryTypeJsDefault.default).MULTI_POLYGON:
                this.drawMultiPolygon(geometry);
                break;
            case (0, _geometryTypeJsDefault.default).GEOMETRY_COLLECTION:
                this.drawGeometryCollection(geometry);
                break;
            case (0, _geometryTypeJsDefault.default).CIRCLE:
                this.drawCircle(geometry);
                break;
            default:
        }
    };
    /**
     * Render a feature into the canvas.  Note that any `zIndex` on the provided
     * style will be ignored - features are rendered immediately in the order that
     * this method is called.  If you need `zIndex` support, you should be using an
     * {@link module:ol/layer/Vector~VectorLayer VectorLayer} instead.
     *
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {import("../../style/Style.js").default} style Style.
     * @api
     */ CanvasImmediateRenderer1.prototype.drawFeature = function(feature, style) {
        var geometry = style.getGeometryFunction()(feature);
        if (!geometry || !(0, _extentJs.intersects)(this.extent_, geometry.getExtent())) return;
        this.setStyle(style);
        this.drawGeometry(geometry);
    };
    /**
     * Render a GeometryCollection to the canvas.  Rendering is immediate and
     * uses the current styles appropriate for each geometry in the collection.
     *
     * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.
     */ CanvasImmediateRenderer1.prototype.drawGeometryCollection = function(geometry) {
        var geometries = geometry.getGeometriesArray();
        for(var i = 0, ii = geometries.length; i < ii; ++i)this.drawGeometry(geometries[i]);
    };
    /**
     * Render a Point geometry into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.
     */ CanvasImmediateRenderer1.prototype.drawPoint = function(geometry) {
        if (this.squaredTolerance_) geometry = /** @type {import("../../geom/Point.js").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        var flatCoordinates = geometry.getFlatCoordinates();
        var stride = geometry.getStride();
        if (this.image_) this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
        if (this.text_ !== "") this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
    };
    /**
     * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
     * uses the current style.
     *
     * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.
     */ CanvasImmediateRenderer1.prototype.drawMultiPoint = function(geometry) {
        if (this.squaredTolerance_) geometry = /** @type {import("../../geom/MultiPoint.js").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        var flatCoordinates = geometry.getFlatCoordinates();
        var stride = geometry.getStride();
        if (this.image_) this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
        if (this.text_ !== "") this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
    };
    /**
     * Render a LineString into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.
     */ CanvasImmediateRenderer1.prototype.drawLineString = function(geometry) {
        if (this.squaredTolerance_) geometry = /** @type {import("../../geom/LineString.js").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        if (!(0, _extentJs.intersects)(this.extent_, geometry.getExtent())) return;
        if (this.strokeState_) {
            this.setContextStrokeState_(this.strokeState_);
            var context = this.context_;
            var flatCoordinates = geometry.getFlatCoordinates();
            context.beginPath();
            this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length, geometry.getStride(), false);
            context.stroke();
        }
        if (this.text_ !== "") {
            var flatMidpoint = geometry.getFlatMidpoint();
            this.drawText_(flatMidpoint, 0, 2, 2);
        }
    };
    /**
     * Render a MultiLineString geometry into the canvas.  Rendering is immediate
     * and uses the current style.
     *
     * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.
     */ CanvasImmediateRenderer1.prototype.drawMultiLineString = function(geometry) {
        if (this.squaredTolerance_) geometry = /** @type {import("../../geom/MultiLineString.js").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        var geometryExtent = geometry.getExtent();
        if (!(0, _extentJs.intersects)(this.extent_, geometryExtent)) return;
        if (this.strokeState_) {
            this.setContextStrokeState_(this.strokeState_);
            var context = this.context_;
            var flatCoordinates = geometry.getFlatCoordinates();
            var offset = 0;
            var ends = /** @type {Array<number>} */ geometry.getEnds();
            var stride = geometry.getStride();
            context.beginPath();
            for(var i = 0, ii = ends.length; i < ii; ++i)offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);
            context.stroke();
        }
        if (this.text_ !== "") {
            var flatMidpoints = geometry.getFlatMidpoints();
            this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);
        }
    };
    /**
     * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.
     */ CanvasImmediateRenderer1.prototype.drawPolygon = function(geometry) {
        if (this.squaredTolerance_) geometry = /** @type {import("../../geom/Polygon.js").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        if (!(0, _extentJs.intersects)(this.extent_, geometry.getExtent())) return;
        if (this.strokeState_ || this.fillState_) {
            if (this.fillState_) this.setContextFillState_(this.fillState_);
            if (this.strokeState_) this.setContextStrokeState_(this.strokeState_);
            var context = this.context_;
            context.beginPath();
            this.drawRings_(geometry.getOrientedFlatCoordinates(), 0, /** @type {Array<number>} */ geometry.getEnds(), geometry.getStride());
            if (this.fillState_) context.fill();
            if (this.strokeState_) context.stroke();
        }
        if (this.text_ !== "") {
            var flatInteriorPoint = geometry.getFlatInteriorPoint();
            this.drawText_(flatInteriorPoint, 0, 2, 2);
        }
    };
    /**
     * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
     * uses the current style.
     * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
     */ CanvasImmediateRenderer1.prototype.drawMultiPolygon = function(geometry) {
        if (this.squaredTolerance_) geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);
        if (!(0, _extentJs.intersects)(this.extent_, geometry.getExtent())) return;
        if (this.strokeState_ || this.fillState_) {
            if (this.fillState_) this.setContextFillState_(this.fillState_);
            if (this.strokeState_) this.setContextStrokeState_(this.strokeState_);
            var context = this.context_;
            var flatCoordinates = geometry.getOrientedFlatCoordinates();
            var offset = 0;
            var endss = geometry.getEndss();
            var stride = geometry.getStride();
            context.beginPath();
            for(var i = 0, ii = endss.length; i < ii; ++i){
                var ends = endss[i];
                offset = this.drawRings_(flatCoordinates, offset, ends, stride);
            }
            if (this.fillState_) context.fill();
            if (this.strokeState_) context.stroke();
        }
        if (this.text_ !== "") {
            var flatInteriorPoints = geometry.getFlatInteriorPoints();
            this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);
        }
    };
    /**
     * @param {import("../canvas.js").FillState} fillState Fill state.
     * @private
     */ CanvasImmediateRenderer1.prototype.setContextFillState_ = function(fillState) {
        var context = this.context_;
        var contextFillState = this.contextFillState_;
        if (!contextFillState) {
            context.fillStyle = fillState.fillStyle;
            this.contextFillState_ = {
                fillStyle: fillState.fillStyle
            };
        } else if (contextFillState.fillStyle != fillState.fillStyle) {
            contextFillState.fillStyle = fillState.fillStyle;
            context.fillStyle = fillState.fillStyle;
        }
    };
    /**
     * @param {import("../canvas.js").StrokeState} strokeState Stroke state.
     * @private
     */ CanvasImmediateRenderer1.prototype.setContextStrokeState_ = function(strokeState) {
        var context = this.context_;
        var contextStrokeState = this.contextStrokeState_;
        if (!contextStrokeState) {
            context.lineCap = strokeState.lineCap;
            if (context.setLineDash) {
                context.setLineDash(strokeState.lineDash);
                context.lineDashOffset = strokeState.lineDashOffset;
            }
            context.lineJoin = strokeState.lineJoin;
            context.lineWidth = strokeState.lineWidth;
            context.miterLimit = strokeState.miterLimit;
            context.strokeStyle = strokeState.strokeStyle;
            this.contextStrokeState_ = {
                lineCap: strokeState.lineCap,
                lineDash: strokeState.lineDash,
                lineDashOffset: strokeState.lineDashOffset,
                lineJoin: strokeState.lineJoin,
                lineWidth: strokeState.lineWidth,
                miterLimit: strokeState.miterLimit,
                strokeStyle: strokeState.strokeStyle
            };
        } else {
            if (contextStrokeState.lineCap != strokeState.lineCap) {
                contextStrokeState.lineCap = strokeState.lineCap;
                context.lineCap = strokeState.lineCap;
            }
            if (context.setLineDash) {
                if (!(0, _arrayJs.equals)(contextStrokeState.lineDash, strokeState.lineDash)) context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);
                if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {
                    contextStrokeState.lineDashOffset = strokeState.lineDashOffset;
                    context.lineDashOffset = strokeState.lineDashOffset;
                }
            }
            if (contextStrokeState.lineJoin != strokeState.lineJoin) {
                contextStrokeState.lineJoin = strokeState.lineJoin;
                context.lineJoin = strokeState.lineJoin;
            }
            if (contextStrokeState.lineWidth != strokeState.lineWidth) {
                contextStrokeState.lineWidth = strokeState.lineWidth;
                context.lineWidth = strokeState.lineWidth;
            }
            if (contextStrokeState.miterLimit != strokeState.miterLimit) {
                contextStrokeState.miterLimit = strokeState.miterLimit;
                context.miterLimit = strokeState.miterLimit;
            }
            if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {
                contextStrokeState.strokeStyle = strokeState.strokeStyle;
                context.strokeStyle = strokeState.strokeStyle;
            }
        }
    };
    /**
     * @param {import("../canvas.js").TextState} textState Text state.
     * @private
     */ CanvasImmediateRenderer1.prototype.setContextTextState_ = function(textState) {
        var context = this.context_;
        var contextTextState = this.contextTextState_;
        var textAlign = textState.textAlign ? textState.textAlign : (0, _canvasJs.defaultTextAlign);
        if (!contextTextState) {
            context.font = textState.font;
            context.textAlign = textAlign;
            context.textBaseline = textState.textBaseline;
            this.contextTextState_ = {
                font: textState.font,
                textAlign: textAlign,
                textBaseline: textState.textBaseline
            };
        } else {
            if (contextTextState.font != textState.font) {
                contextTextState.font = textState.font;
                context.font = textState.font;
            }
            if (contextTextState.textAlign != textAlign) {
                contextTextState.textAlign = textAlign;
                context.textAlign = textAlign;
            }
            if (contextTextState.textBaseline != textState.textBaseline) {
                contextTextState.textBaseline = textState.textBaseline;
                context.textBaseline = textState.textBaseline;
            }
        }
    };
    /**
     * Set the fill and stroke style for subsequent draw operations.  To clear
     * either fill or stroke styles, pass null for the appropriate parameter.
     *
     * @param {import("../../style/Fill.js").default} fillStyle Fill style.
     * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
     */ CanvasImmediateRenderer1.prototype.setFillStrokeStyle = function(fillStyle, strokeStyle) {
        var _this = this;
        if (!fillStyle) this.fillState_ = null;
        else {
            var fillStyleColor = fillStyle.getColor();
            this.fillState_ = {
                fillStyle: (0, _colorlikeJs.asColorLike)(fillStyleColor ? fillStyleColor : (0, _canvasJs.defaultFillStyle))
            };
        }
        if (!strokeStyle) this.strokeState_ = null;
        else {
            var strokeStyleColor = strokeStyle.getColor();
            var strokeStyleLineCap = strokeStyle.getLineCap();
            var strokeStyleLineDash = strokeStyle.getLineDash();
            var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
            var strokeStyleLineJoin = strokeStyle.getLineJoin();
            var strokeStyleWidth = strokeStyle.getWidth();
            var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
            var lineDash = strokeStyleLineDash ? strokeStyleLineDash : (0, _canvasJs.defaultLineDash);
            this.strokeState_ = {
                lineCap: strokeStyleLineCap !== undefined ? strokeStyleLineCap : (0, _canvasJs.defaultLineCap),
                lineDash: this.pixelRatio_ === 1 ? lineDash : lineDash.map(function(n) {
                    return n * _this.pixelRatio_;
                }),
                lineDashOffset: (strokeStyleLineDashOffset ? strokeStyleLineDashOffset : (0, _canvasJs.defaultLineDashOffset)) * this.pixelRatio_,
                lineJoin: strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : (0, _canvasJs.defaultLineJoin),
                lineWidth: (strokeStyleWidth !== undefined ? strokeStyleWidth : (0, _canvasJs.defaultLineWidth)) * this.pixelRatio_,
                miterLimit: strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : (0, _canvasJs.defaultMiterLimit),
                strokeStyle: (0, _colorlikeJs.asColorLike)(strokeStyleColor ? strokeStyleColor : (0, _canvasJs.defaultStrokeStyle))
            };
        }
    };
    /**
     * Set the image style for subsequent draw operations.  Pass null to remove
     * the image style.
     *
     * @param {import("../../style/Image.js").default} imageStyle Image style.
     */ CanvasImmediateRenderer1.prototype.setImageStyle = function(imageStyle) {
        var imageSize;
        if (!imageStyle || !(imageSize = imageStyle.getSize())) {
            this.image_ = null;
            return;
        }
        var imageAnchor = imageStyle.getAnchor();
        var imageOrigin = imageStyle.getOrigin();
        this.image_ = imageStyle.getImage(this.pixelRatio_);
        this.imageAnchorX_ = imageAnchor[0] * this.pixelRatio_;
        this.imageAnchorY_ = imageAnchor[1] * this.pixelRatio_;
        this.imageHeight_ = imageSize[1] * this.pixelRatio_;
        this.imageOpacity_ = imageStyle.getOpacity();
        this.imageOriginX_ = imageOrigin[0];
        this.imageOriginY_ = imageOrigin[1];
        this.imageRotateWithView_ = imageStyle.getRotateWithView();
        this.imageRotation_ = imageStyle.getRotation();
        this.imageScale_ = imageStyle.getScaleArray();
        this.imageWidth_ = imageSize[0] * this.pixelRatio_;
    };
    /**
     * Set the text style for subsequent draw operations.  Pass null to
     * remove the text style.
     *
     * @param {import("../../style/Text.js").default} textStyle Text style.
     */ CanvasImmediateRenderer1.prototype.setTextStyle = function(textStyle) {
        if (!textStyle) this.text_ = "";
        else {
            var textFillStyle = textStyle.getFill();
            if (!textFillStyle) this.textFillState_ = null;
            else {
                var textFillStyleColor = textFillStyle.getColor();
                this.textFillState_ = {
                    fillStyle: (0, _colorlikeJs.asColorLike)(textFillStyleColor ? textFillStyleColor : (0, _canvasJs.defaultFillStyle))
                };
            }
            var textStrokeStyle = textStyle.getStroke();
            if (!textStrokeStyle) this.textStrokeState_ = null;
            else {
                var textStrokeStyleColor = textStrokeStyle.getColor();
                var textStrokeStyleLineCap = textStrokeStyle.getLineCap();
                var textStrokeStyleLineDash = textStrokeStyle.getLineDash();
                var textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();
                var textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();
                var textStrokeStyleWidth = textStrokeStyle.getWidth();
                var textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();
                this.textStrokeState_ = {
                    lineCap: textStrokeStyleLineCap !== undefined ? textStrokeStyleLineCap : (0, _canvasJs.defaultLineCap),
                    lineDash: textStrokeStyleLineDash ? textStrokeStyleLineDash : (0, _canvasJs.defaultLineDash),
                    lineDashOffset: textStrokeStyleLineDashOffset ? textStrokeStyleLineDashOffset : (0, _canvasJs.defaultLineDashOffset),
                    lineJoin: textStrokeStyleLineJoin !== undefined ? textStrokeStyleLineJoin : (0, _canvasJs.defaultLineJoin),
                    lineWidth: textStrokeStyleWidth !== undefined ? textStrokeStyleWidth : (0, _canvasJs.defaultLineWidth),
                    miterLimit: textStrokeStyleMiterLimit !== undefined ? textStrokeStyleMiterLimit : (0, _canvasJs.defaultMiterLimit),
                    strokeStyle: (0, _colorlikeJs.asColorLike)(textStrokeStyleColor ? textStrokeStyleColor : (0, _canvasJs.defaultStrokeStyle))
                };
            }
            var textFont = textStyle.getFont();
            var textOffsetX = textStyle.getOffsetX();
            var textOffsetY = textStyle.getOffsetY();
            var textRotateWithView = textStyle.getRotateWithView();
            var textRotation = textStyle.getRotation();
            var textScale = textStyle.getScaleArray();
            var textText = textStyle.getText();
            var textTextAlign = textStyle.getTextAlign();
            var textTextBaseline = textStyle.getTextBaseline();
            this.textState_ = {
                font: textFont !== undefined ? textFont : (0, _canvasJs.defaultFont),
                textAlign: textTextAlign !== undefined ? textTextAlign : (0, _canvasJs.defaultTextAlign),
                textBaseline: textTextBaseline !== undefined ? textTextBaseline : (0, _canvasJs.defaultTextBaseline)
            };
            this.text_ = textText !== undefined ? Array.isArray(textText) ? textText.reduce(function(acc, t, i) {
                return acc += i % 2 ? " " : t;
            }, "") : textText : "";
            this.textOffsetX_ = textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;
            this.textOffsetY_ = textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;
            this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;
            this.textRotation_ = textRotation !== undefined ? textRotation : 0;
            this.textScale_ = [
                this.pixelRatio_ * textScale[0],
                this.pixelRatio_ * textScale[1], 
            ];
        }
    };
    return CanvasImmediateRenderer1;
}((0, _vectorContextJsDefault.default));
exports.default = CanvasImmediateRenderer;

},{"../../geom/GeometryType.js":"j6daa","../VectorContext.js":"ezpza","../../colorlike.js":"ftcFo","../../transform.js":"1BqUf","../canvas.js":"e85iQ","../../array.js":"1Fbic","../../extent.js":"6YrVc","../../geom/flat/transform.js":"cDA2L","../../geom/SimpleGeometry.js":"hLwk3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"DKiWZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/style/IconAnchorUnits
 */ /**
 * Icon anchor units. One of 'fraction', 'pixels'.
 * @enum {string}
 */ exports.default = {
    /**
     * Anchor is a fraction
     * @api
     */ FRACTION: "fraction",
    /**
     * Anchor is in pixels
     * @api
     */ PIXELS: "pixels"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hEQxF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/style
 */ parcelHelpers.export(exports, "Circle", ()=>(0, _circleJsDefault.default));
parcelHelpers.export(exports, "Fill", ()=>(0, _fillJsDefault.default));
parcelHelpers.export(exports, "Icon", ()=>(0, _iconJsDefault.default));
parcelHelpers.export(exports, "IconImage", ()=>(0, _iconImageJsDefault.default));
parcelHelpers.export(exports, "Image", ()=>(0, _imageJsDefault.default));
parcelHelpers.export(exports, "RegularShape", ()=>(0, _regularShapeJsDefault.default));
parcelHelpers.export(exports, "Stroke", ()=>(0, _strokeJsDefault.default));
parcelHelpers.export(exports, "Style", ()=>(0, _styleJsDefault.default));
parcelHelpers.export(exports, "Text", ()=>(0, _textJsDefault.default));
var _circleJs = require("./style/Circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _fillJs = require("./style/Fill.js");
var _fillJsDefault = parcelHelpers.interopDefault(_fillJs);
var _iconJs = require("./style/Icon.js");
var _iconJsDefault = parcelHelpers.interopDefault(_iconJs);
var _iconImageJs = require("./style/IconImage.js");
var _iconImageJsDefault = parcelHelpers.interopDefault(_iconImageJs);
var _imageJs = require("./style/Image.js");
var _imageJsDefault = parcelHelpers.interopDefault(_imageJs);
var _regularShapeJs = require("./style/RegularShape.js");
var _regularShapeJsDefault = parcelHelpers.interopDefault(_regularShapeJs);
var _strokeJs = require("./style/Stroke.js");
var _strokeJsDefault = parcelHelpers.interopDefault(_strokeJs);
var _styleJs = require("./style/Style.js");
var _styleJsDefault = parcelHelpers.interopDefault(_styleJs);
var _textJs = require("./style/Text.js");
var _textJsDefault = parcelHelpers.interopDefault(_textJs);

},{"./style/Circle.js":"cSS3Y","./style/Fill.js":"4fB56","./style/Icon.js":"dJiIs","./style/IconImage.js":"8WrYM","./style/Image.js":"eyoR9","./style/RegularShape.js":"44xDg","./style/Stroke.js":"5Cq04","./style/Style.js":"fW7vC","./style/Text.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dJiIs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/style/Icon
 */ var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _iconAnchorUnitsJs = require("./IconAnchorUnits.js");
var _iconAnchorUnitsJsDefault = parcelHelpers.interopDefault(_iconAnchorUnitsJs);
var _iconOriginJs = require("./IconOrigin.js");
var _iconOriginJsDefault = parcelHelpers.interopDefault(_iconOriginJs);
var _imageStateJs = require("../ImageState.js");
var _imageStateJsDefault = parcelHelpers.interopDefault(_imageStateJs);
var _imageJs = require("./Image.js");
var _imageJsDefault = parcelHelpers.interopDefault(_imageJs);
var _colorJs = require("../color.js");
var _assertsJs = require("../asserts.js");
var _iconImageJs = require("./IconImage.js");
var _utilJs = require("../util.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.
 * @property {import("./IconOrigin.js").default} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,
 * `top-left` or `top-right`.
 * @property {import("./IconAnchorUnits.js").default} [anchorXUnits='fraction'] Units in which the anchor x value is
 * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates
 * the x value in pixels.
 * @property {import("./IconAnchorUnits.js").default} [anchorYUnits='fraction'] Units in which the anchor y value is
 * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates
 * the y value in pixels.
 * @property {import("../color.js").Color|string} [color] Color to tint the icon. If not specified,
 * the icon will be left as is.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a
 * `crossOrigin` value if you want to access pixel data with the Canvas renderer.
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
 * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the
 * provided image must already be loaded. And in that case, it is required
 * to provide the size of the image, with the `imgSize` option.
 * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the
 * sub-rectangle to use from the original icon image.
 * @property {Array<number>} [displacement=[0,0]] Displacement of the icon.
 * @property {import("./IconOrigin.js").default} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,
 * `top-left` or `top-right`.
 * @property {number} [opacity=1] Opacity of the icon.
 * @property {number|import("../size.js").Size} [scale=1] Scale.
 * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.
 * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
 * @property {import("../size.js").Size} [size] Icon size in pixel. Can be used together with `offset` to define the
 * sub-rectangle to use from the origin (sprite) icon image.
 * @property {import("../size.js").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and
 * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.
 * @property {string} [src] Image source URI.
 */ /**
 * @classdesc
 * Set icon style for vector features.
 * @api
 */ var Icon = /** @class */ function(_super) {
    __extends(Icon1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function Icon1(opt_options) {
        var _this = this;
        var options = opt_options || {};
        /**
         * @type {number}
         */ var opacity = options.opacity !== undefined ? options.opacity : 1;
        /**
         * @type {number}
         */ var rotation = options.rotation !== undefined ? options.rotation : 0;
        /**
         * @type {number|import("../size.js").Size}
         */ var scale = options.scale !== undefined ? options.scale : 1;
        /**
         * @type {boolean}
         */ var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;
        _this = _super.call(this, {
            opacity: opacity,
            rotation: rotation,
            scale: scale,
            displacement: options.displacement !== undefined ? options.displacement : [
                0,
                0
            ],
            rotateWithView: rotateWithView
        }) || this;
        /**
         * @private
         * @type {Array<number>}
         */ _this.anchor_ = options.anchor !== undefined ? options.anchor : [
            0.5,
            0.5
        ];
        /**
         * @private
         * @type {Array<number>}
         */ _this.normalizedAnchor_ = null;
        /**
         * @private
         * @type {import("./IconOrigin.js").default}
         */ _this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : (0, _iconOriginJsDefault.default).TOP_LEFT;
        /**
         * @private
         * @type {import("./IconAnchorUnits.js").default}
         */ _this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : (0, _iconAnchorUnitsJsDefault.default).FRACTION;
        /**
         * @private
         * @type {import("./IconAnchorUnits.js").default}
         */ _this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : (0, _iconAnchorUnitsJsDefault.default).FRACTION;
        /**
         * @private
         * @type {?string}
         */ _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;
        /**
         * @type {HTMLImageElement|HTMLCanvasElement}
         */ var image = options.img !== undefined ? options.img : null;
        /**
         * @private
         * @type {import("../size.js").Size|undefined}
         */ _this.imgSize_ = options.imgSize;
        /**
         * @type {string|undefined}
         */ var src = options.src;
        (0, _assertsJs.assert)(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time
        (0, _assertsJs.assert)(!image || image && _this.imgSize_, 5); // `imgSize` must be set when `image` is provided
        if ((src === undefined || src.length === 0) && image) src = /** @type {HTMLImageElement} */ image.src || (0, _utilJs.getUid)(image);
        (0, _assertsJs.assert)(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided
        /**
         * @type {import("../ImageState.js").default}
         */ var imageState = options.src !== undefined ? (0, _imageStateJsDefault.default).IDLE : (0, _imageStateJsDefault.default).LOADED;
        /**
         * @private
         * @type {import("../color.js").Color}
         */ _this.color_ = options.color !== undefined ? (0, _colorJs.asArray)(options.color) : null;
        /**
         * @private
         * @type {import("./IconImage.js").default}
         */ _this.iconImage_ = (0, _iconImageJs.get)(image, src, _this.imgSize_ !== undefined ? _this.imgSize_ : null, _this.crossOrigin_, imageState, _this.color_);
        /**
         * @private
         * @type {Array<number>}
         */ _this.offset_ = options.offset !== undefined ? options.offset : [
            0,
            0
        ];
        /**
         * @private
         * @type {import("./IconOrigin.js").default}
         */ _this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : (0, _iconOriginJsDefault.default).TOP_LEFT;
        /**
         * @private
         * @type {Array<number>}
         */ _this.origin_ = null;
        /**
         * @private
         * @type {import("../size.js").Size}
         */ _this.size_ = options.size !== undefined ? options.size : null;
        return _this;
    }
    /**
     * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.
     * @return {Icon} The cloned style.
     * @api
     */ Icon1.prototype.clone = function() {
        var scale = this.getScale();
        return new Icon1({
            anchor: this.anchor_.slice(),
            anchorOrigin: this.anchorOrigin_,
            anchorXUnits: this.anchorXUnits_,
            anchorYUnits: this.anchorYUnits_,
            color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,
            crossOrigin: this.crossOrigin_,
            imgSize: this.imgSize_,
            offset: this.offset_.slice(),
            offsetOrigin: this.offsetOrigin_,
            opacity: this.getOpacity(),
            rotateWithView: this.getRotateWithView(),
            rotation: this.getRotation(),
            scale: Array.isArray(scale) ? scale.slice() : scale,
            size: this.size_ !== null ? this.size_.slice() : undefined,
            src: this.getSrc()
        });
    };
    /**
     * Get the anchor point in pixels. The anchor determines the center point for the
     * symbolizer.
     * @return {Array<number>} Anchor.
     * @api
     */ Icon1.prototype.getAnchor = function() {
        var anchor = this.normalizedAnchor_;
        if (!anchor) {
            anchor = this.anchor_;
            var size = this.getSize();
            if (this.anchorXUnits_ == (0, _iconAnchorUnitsJsDefault.default).FRACTION || this.anchorYUnits_ == (0, _iconAnchorUnitsJsDefault.default).FRACTION) {
                if (!size) return null;
                anchor = this.anchor_.slice();
                if (this.anchorXUnits_ == (0, _iconAnchorUnitsJsDefault.default).FRACTION) anchor[0] *= size[0];
                if (this.anchorYUnits_ == (0, _iconAnchorUnitsJsDefault.default).FRACTION) anchor[1] *= size[1];
            }
            if (this.anchorOrigin_ != (0, _iconOriginJsDefault.default).TOP_LEFT) {
                if (!size) return null;
                if (anchor === this.anchor_) anchor = this.anchor_.slice();
                if (this.anchorOrigin_ == (0, _iconOriginJsDefault.default).TOP_RIGHT || this.anchorOrigin_ == (0, _iconOriginJsDefault.default).BOTTOM_RIGHT) anchor[0] = -anchor[0] + size[0];
                if (this.anchorOrigin_ == (0, _iconOriginJsDefault.default).BOTTOM_LEFT || this.anchorOrigin_ == (0, _iconOriginJsDefault.default).BOTTOM_RIGHT) anchor[1] = -anchor[1] + size[1];
            }
            this.normalizedAnchor_ = anchor;
        }
        var displacement = this.getDisplacement();
        return [
            anchor[0] - displacement[0],
            anchor[1] + displacement[1]
        ];
    };
    /**
     * Set the anchor point. The anchor determines the center point for the
     * symbolizer.
     *
     * @param {Array<number>} anchor Anchor.
     * @api
     */ Icon1.prototype.setAnchor = function(anchor) {
        this.anchor_ = anchor;
        this.normalizedAnchor_ = null;
    };
    /**
     * Get the icon color.
     * @return {import("../color.js").Color} Color.
     * @api
     */ Icon1.prototype.getColor = function() {
        return this.color_;
    };
    /**
     * Get the image icon.
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
     * @api
     */ Icon1.prototype.getImage = function(pixelRatio) {
        return this.iconImage_.getImage(pixelRatio);
    };
    /**
     * Get the pixel ratio.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} The pixel ratio of the image.
     * @api
     */ Icon1.prototype.getPixelRatio = function(pixelRatio) {
        return this.iconImage_.getPixelRatio(pixelRatio);
    };
    /**
     * @return {import("../size.js").Size} Image size.
     */ Icon1.prototype.getImageSize = function() {
        return this.iconImage_.getSize();
    };
    /**
     * @return {import("../ImageState.js").default} Image state.
     */ Icon1.prototype.getImageState = function() {
        return this.iconImage_.getImageState();
    };
    /**
     * @return {HTMLImageElement|HTMLCanvasElement} Image element.
     */ Icon1.prototype.getHitDetectionImage = function() {
        return this.iconImage_.getHitDetectionImage();
    };
    /**
     * Get the origin of the symbolizer.
     * @return {Array<number>} Origin.
     * @api
     */ Icon1.prototype.getOrigin = function() {
        if (this.origin_) return this.origin_;
        var offset = this.offset_;
        if (this.offsetOrigin_ != (0, _iconOriginJsDefault.default).TOP_LEFT) {
            var size = this.getSize();
            var iconImageSize = this.iconImage_.getSize();
            if (!size || !iconImageSize) return null;
            offset = offset.slice();
            if (this.offsetOrigin_ == (0, _iconOriginJsDefault.default).TOP_RIGHT || this.offsetOrigin_ == (0, _iconOriginJsDefault.default).BOTTOM_RIGHT) offset[0] = iconImageSize[0] - size[0] - offset[0];
            if (this.offsetOrigin_ == (0, _iconOriginJsDefault.default).BOTTOM_LEFT || this.offsetOrigin_ == (0, _iconOriginJsDefault.default).BOTTOM_RIGHT) offset[1] = iconImageSize[1] - size[1] - offset[1];
        }
        this.origin_ = offset;
        return this.origin_;
    };
    /**
     * Get the image URL.
     * @return {string|undefined} Image src.
     * @api
     */ Icon1.prototype.getSrc = function() {
        return this.iconImage_.getSrc();
    };
    /**
     * Get the size of the icon (in pixels).
     * @return {import("../size.js").Size} Image size.
     * @api
     */ Icon1.prototype.getSize = function() {
        return !this.size_ ? this.iconImage_.getSize() : this.size_;
    };
    /**
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */ Icon1.prototype.listenImageChange = function(listener) {
        this.iconImage_.addEventListener((0, _eventTypeJsDefault.default).CHANGE, listener);
    };
    /**
     * Load not yet loaded URI.
     * When rendering a feature with an icon style, the vector renderer will
     * automatically call this method. However, you might want to call this
     * method yourself for preloading or other purposes.
     * @api
     */ Icon1.prototype.load = function() {
        this.iconImage_.load();
    };
    /**
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */ Icon1.prototype.unlistenImageChange = function(listener) {
        this.iconImage_.removeEventListener((0, _eventTypeJsDefault.default).CHANGE, listener);
    };
    return Icon1;
}((0, _imageJsDefault.default));
exports.default = Icon;

},{"../events/EventType.js":"hrQJ6","./IconAnchorUnits.js":"DKiWZ","./IconOrigin.js":"dwecA","../ImageState.js":"c4jJS","./Image.js":"eyoR9","../color.js":"4tahz","../asserts.js":"e4TiF","./IconImage.js":"8WrYM","../util.js":"pLBjQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dwecA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/style/IconOrigin
 */ /**
 * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.
 * @enum {string}
 */ exports.default = {
    /**
     * Origin is at bottom left
     * @api
     */ BOTTOM_LEFT: "bottom-left",
    /**
     * Origin is at bottom right
     * @api
     */ BOTTOM_RIGHT: "bottom-right",
    /**
     * Origin is at top left
     * @api
     */ TOP_LEFT: "top-left",
    /**
     * Origin is at top right
     * @api
     */ TOP_RIGHT: "top-right"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8WrYM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {HTMLImageElement|HTMLCanvasElement} image Image.
 * @param {string} src Src.
 * @param {import("../size.js").Size} size Size.
 * @param {?string} crossOrigin Cross origin.
 * @param {import("../ImageState.js").default} imageState Image state.
 * @param {import("../color.js").Color} color Color.
 * @return {IconImage} Icon image.
 */ parcelHelpers.export(exports, "get", ()=>get);
var _targetJs = require("../events/Target.js");
var _targetJsDefault = parcelHelpers.interopDefault(_targetJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _imageStateJs = require("../ImageState.js");
var _imageStateJsDefault = parcelHelpers.interopDefault(_imageStateJs);
var _colorJs = require("../color.js");
var _domJs = require("../dom.js");
var _iconImageCacheJs = require("./IconImageCache.js");
var _imageJs = require("../Image.js");
/**
 * @module ol/style/IconImage
 */ var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @type {CanvasRenderingContext2D}
 */ var taintedTestContext = null;
var IconImage = /** @class */ function(_super) {
    __extends(IconImage1, _super);
    /**
     * @param {HTMLImageElement|HTMLCanvasElement} image Image.
     * @param {string|undefined} src Src.
     * @param {import("../size.js").Size} size Size.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../ImageState.js").default} imageState Image state.
     * @param {import("../color.js").Color} color Color.
     */ function IconImage1(image, src, size, crossOrigin, imageState, color) {
        var _this = _super.call(this) || this;
        /**
         * @private
         * @type {HTMLImageElement|HTMLCanvasElement}
         */ _this.hitDetectionImage_ = null;
        /**
         * @private
         * @type {HTMLImageElement|HTMLCanvasElement}
         */ _this.image_ = !image ? new Image() : image;
        if (crossOrigin !== null) /** @type {HTMLImageElement} */ _this.image_.crossOrigin = crossOrigin;
        /**
         * @private
         * @type {Object<number, HTMLCanvasElement>}
         */ _this.canvas_ = {};
        /**
         * @private
         * @type {import("../color.js").Color}
         */ _this.color_ = color;
        /**
         * @private
         * @type {?function():void}
         */ _this.unlisten_ = null;
        /**
         * @private
         * @type {import("../ImageState.js").default}
         */ _this.imageState_ = imageState;
        /**
         * @private
         * @type {import("../size.js").Size}
         */ _this.size_ = size;
        /**
         * @private
         * @type {string|undefined}
         */ _this.src_ = src;
        /**
         * @private
         */ _this.tainted_;
        return _this;
    }
    /**
     * @private
     * @return {boolean} The image canvas is tainted.
     */ IconImage1.prototype.isTainted_ = function() {
        if (this.tainted_ === undefined && this.imageState_ === (0, _imageStateJsDefault.default).LOADED) {
            if (!taintedTestContext) taintedTestContext = (0, _domJs.createCanvasContext2D)(1, 1);
            taintedTestContext.drawImage(this.image_, 0, 0);
            try {
                taintedTestContext.getImageData(0, 0, 1, 1);
                this.tainted_ = false;
            } catch (e) {
                taintedTestContext = null;
                this.tainted_ = true;
            }
        }
        return this.tainted_ === true;
    };
    /**
     * @private
     */ IconImage1.prototype.dispatchChangeEvent_ = function() {
        this.dispatchEvent((0, _eventTypeJsDefault.default).CHANGE);
    };
    /**
     * @private
     */ IconImage1.prototype.handleImageError_ = function() {
        this.imageState_ = (0, _imageStateJsDefault.default).ERROR;
        this.unlistenImage_();
        this.dispatchChangeEvent_();
    };
    /**
     * @private
     */ IconImage1.prototype.handleImageLoad_ = function() {
        this.imageState_ = (0, _imageStateJsDefault.default).LOADED;
        if (this.size_) {
            this.image_.width = this.size_[0];
            this.image_.height = this.size_[1];
        } else this.size_ = [
            this.image_.width,
            this.image_.height
        ];
        this.unlistenImage_();
        this.dispatchChangeEvent_();
    };
    /**
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
     */ IconImage1.prototype.getImage = function(pixelRatio) {
        this.replaceColor_(pixelRatio);
        return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;
    };
    /**
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Image or Canvas element.
     */ IconImage1.prototype.getPixelRatio = function(pixelRatio) {
        this.replaceColor_(pixelRatio);
        return this.canvas_[pixelRatio] ? pixelRatio : 1;
    };
    /**
     * @return {import("../ImageState.js").default} Image state.
     */ IconImage1.prototype.getImageState = function() {
        return this.imageState_;
    };
    /**
     * @return {HTMLImageElement|HTMLCanvasElement} Image element.
     */ IconImage1.prototype.getHitDetectionImage = function() {
        if (!this.hitDetectionImage_) {
            if (this.isTainted_()) {
                var width = this.size_[0];
                var height = this.size_[1];
                var context = (0, _domJs.createCanvasContext2D)(width, height);
                context.fillRect(0, 0, width, height);
                this.hitDetectionImage_ = context.canvas;
            } else this.hitDetectionImage_ = this.image_;
        }
        return this.hitDetectionImage_;
    };
    /**
     * Get the size of the icon (in pixels).
     * @return {import("../size.js").Size} Image size.
     */ IconImage1.prototype.getSize = function() {
        return this.size_;
    };
    /**
     * @return {string|undefined} Image src.
     */ IconImage1.prototype.getSrc = function() {
        return this.src_;
    };
    /**
     * Load not yet loaded URI.
     */ IconImage1.prototype.load = function() {
        if (this.imageState_ == (0, _imageStateJsDefault.default).IDLE) {
            this.imageState_ = (0, _imageStateJsDefault.default).LOADING;
            try {
                /** @type {HTMLImageElement} */ this.image_.src = this.src_;
            } catch (e) {
                this.handleImageError_();
            }
            this.unlisten_ = (0, _imageJs.listenImage)(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
        }
    };
    /**
     * @param {number} pixelRatio Pixel ratio.
     * @private
     */ IconImage1.prototype.replaceColor_ = function(pixelRatio) {
        if (!this.color_ || this.canvas_[pixelRatio] || this.imageState_ !== (0, _imageStateJsDefault.default).LOADED) return;
        var canvas = document.createElement("canvas");
        this.canvas_[pixelRatio] = canvas;
        canvas.width = Math.ceil(this.image_.width * pixelRatio);
        canvas.height = Math.ceil(this.image_.height * pixelRatio);
        var ctx = canvas.getContext("2d");
        ctx.scale(pixelRatio, pixelRatio);
        ctx.drawImage(this.image_, 0, 0);
        ctx.globalCompositeOperation = "multiply";
        // Internet Explorer 11 does not support the multiply operation.
        // If the canvas is tainted in Internet Explorer this still produces
        // a solid color image with the shape of the icon.
        if (ctx.globalCompositeOperation === "multiply" || this.isTainted_()) {
            ctx.fillStyle = (0, _colorJs.asString)(this.color_);
            ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);
            ctx.globalCompositeOperation = "destination-in";
            ctx.drawImage(this.image_, 0, 0);
        } else {
            var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            var data = imgData.data;
            var r = this.color_[0] / 255.0;
            var g = this.color_[1] / 255.0;
            var b = this.color_[2] / 255.0;
            var a = this.color_[3];
            for(var i = 0, ii = data.length; i < ii; i += 4){
                data[i] *= r;
                data[i + 1] *= g;
                data[i + 2] *= b;
                data[i + 3] *= a;
            }
            ctx.putImageData(imgData, 0, 0);
        }
    };
    /**
     * Discards event handlers which listen for load completion or errors.
     *
     * @private
     */ IconImage1.prototype.unlistenImage_ = function() {
        if (this.unlisten_) {
            this.unlisten_();
            this.unlisten_ = null;
        }
    };
    return IconImage1;
}((0, _targetJsDefault.default));
function get(image, src, size, crossOrigin, imageState, color) {
    var iconImage = (0, _iconImageCacheJs.shared).get(src, crossOrigin, color);
    if (!iconImage) {
        iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);
        (0, _iconImageCacheJs.shared).set(src, crossOrigin, color, iconImage);
    }
    return iconImage;
}
exports.default = IconImage;

},{"../events/Target.js":"7T5Yi","../events/EventType.js":"hrQJ6","../ImageState.js":"c4jJS","../color.js":"4tahz","../dom.js":"84QzQ","./IconImageCache.js":"2uEpE","../Image.js":"c0Egp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c0Egp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.
 * @param {function():any} loadHandler Load callback function.
 * @param {function():any} errorHandler Error callback function.
 * @return {function():void} Callback to stop listening.
 */ parcelHelpers.export(exports, "listenImage", ()=>listenImage);
/**
 * @module ol/Image
 */ var _eventTypeJs = require("./events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _imageBaseJs = require("./ImageBase.js");
var _imageBaseJsDefault = parcelHelpers.interopDefault(_imageBaseJs);
var _imageStateJs = require("./ImageState.js");
var _imageStateJsDefault = parcelHelpers.interopDefault(_imageStateJs);
var _hasJs = require("./has.js");
var _extentJs = require("./extent.js");
var _eventsJs = require("./events.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a
 * `{string}` for the src as arguments. It is supposed to make it so the
 * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the
 * content specified by the src. If not specified, the default is
 *
 *     function(image, src) {
 *       image.getImage().src = src;
 *     }
 *
 * Providing a custom `imageLoadFunction` can be useful to load images with
 * post requests or - in general - through XHR requests, where the src of the
 * image element would be set to a data URI when the content is loaded.
 *
 * @typedef {function(ImageWrapper, string): void} LoadFunction
 * @api
 */ var ImageWrapper = /** @class */ function(_super) {
    __extends(ImageWrapper1, _super);
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number|undefined} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {string} src Image source URI.
     * @param {?string} crossOrigin Cross origin.
     * @param {LoadFunction} imageLoadFunction Image load function.
     */ function ImageWrapper1(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {
        var _this = _super.call(this, extent, resolution, pixelRatio, (0, _imageStateJsDefault.default).IDLE) || this;
        /**
         * @private
         * @type {string}
         */ _this.src_ = src;
        /**
         * @private
         * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
         */ _this.image_ = new Image();
        if (crossOrigin !== null) _this.image_.crossOrigin = crossOrigin;
        /**
         * @private
         * @type {?function():void}
         */ _this.unlisten_ = null;
        /**
         * @protected
         * @type {import("./ImageState.js").default}
         */ _this.state = (0, _imageStateJsDefault.default).IDLE;
        /**
         * @private
         * @type {LoadFunction}
         */ _this.imageLoadFunction_ = imageLoadFunction;
        return _this;
    }
    /**
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @api
     */ ImageWrapper1.prototype.getImage = function() {
        return this.image_;
    };
    /**
     * Tracks loading or read errors.
     *
     * @private
     */ ImageWrapper1.prototype.handleImageError_ = function() {
        this.state = (0, _imageStateJsDefault.default).ERROR;
        this.unlistenImage_();
        this.changed();
    };
    /**
     * Tracks successful image load.
     *
     * @private
     */ ImageWrapper1.prototype.handleImageLoad_ = function() {
        if (this.resolution === undefined) this.resolution = (0, _extentJs.getHeight)(this.extent) / this.image_.height;
        this.state = (0, _imageStateJsDefault.default).LOADED;
        this.unlistenImage_();
        this.changed();
    };
    /**
     * Load the image or retry if loading previously failed.
     * Loading is taken care of by the tile queue, and calling this method is
     * only needed for preloading or for reloading in case of an error.
     * @api
     */ ImageWrapper1.prototype.load = function() {
        if (this.state == (0, _imageStateJsDefault.default).IDLE || this.state == (0, _imageStateJsDefault.default).ERROR) {
            this.state = (0, _imageStateJsDefault.default).LOADING;
            this.changed();
            this.imageLoadFunction_(this, this.src_);
            this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
        }
    };
    /**
     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
     */ ImageWrapper1.prototype.setImage = function(image) {
        this.image_ = image;
        this.resolution = (0, _extentJs.getHeight)(this.extent) / this.image_.height;
    };
    /**
     * Discards event handlers which listen for load completion or errors.
     *
     * @private
     */ ImageWrapper1.prototype.unlistenImage_ = function() {
        if (this.unlisten_) {
            this.unlisten_();
            this.unlisten_ = null;
        }
    };
    return ImageWrapper1;
}((0, _imageBaseJsDefault.default));
function listenImage(image, loadHandler, errorHandler) {
    var img = image;
    var listening = true;
    var decoding = false;
    var loaded = false;
    var listenerKeys = [
        (0, _eventsJs.listenOnce)(img, (0, _eventTypeJsDefault.default).LOAD, function() {
            loaded = true;
            if (!decoding) loadHandler();
        }), 
    ];
    if (img.src && (0, _hasJs.IMAGE_DECODE)) {
        decoding = true;
        img.decode().then(function() {
            if (listening) loadHandler();
        }).catch(function(error) {
            if (listening) {
                if (loaded) loadHandler();
                else errorHandler();
            }
        });
    } else listenerKeys.push((0, _eventsJs.listenOnce)(img, (0, _eventTypeJsDefault.default).ERROR, errorHandler));
    return function unlisten() {
        listening = false;
        listenerKeys.forEach((0, _eventsJs.unlistenByKey));
    };
}
exports.default = ImageWrapper;

},{"./events/EventType.js":"hrQJ6","./ImageBase.js":"2yGE2","./ImageState.js":"c4jJS","./has.js":"6BDNi","./extent.js":"6YrVc","./events.js":"dcspA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2yGE2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/ImageBase
 */ var _targetJs = require("./events/Target.js");
var _targetJsDefault = parcelHelpers.interopDefault(_targetJs);
var _eventTypeJs = require("./events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _utilJs = require("./util.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @abstract
 */ var ImageBase = /** @class */ function(_super) {
    __extends(ImageBase1, _super);
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number|undefined} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("./ImageState.js").default} state State.
     */ function ImageBase1(extent, resolution, pixelRatio, state) {
        var _this = _super.call(this) || this;
        /**
         * @protected
         * @type {import("./extent.js").Extent}
         */ _this.extent = extent;
        /**
         * @private
         * @type {number}
         */ _this.pixelRatio_ = pixelRatio;
        /**
         * @protected
         * @type {number|undefined}
         */ _this.resolution = resolution;
        /**
         * @protected
         * @type {import("./ImageState.js").default}
         */ _this.state = state;
        return _this;
    }
    /**
     * @protected
     */ ImageBase1.prototype.changed = function() {
        this.dispatchEvent((0, _eventTypeJsDefault.default).CHANGE);
    };
    /**
     * @return {import("./extent.js").Extent} Extent.
     */ ImageBase1.prototype.getExtent = function() {
        return this.extent;
    };
    /**
     * @abstract
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     */ ImageBase1.prototype.getImage = function() {
        return (0, _utilJs.abstract)();
    };
    /**
     * @return {number} PixelRatio.
     */ ImageBase1.prototype.getPixelRatio = function() {
        return this.pixelRatio_;
    };
    /**
     * @return {number} Resolution.
     */ ImageBase1.prototype.getResolution = function() {
        return this.resolution;
    };
    /**
     * @return {import("./ImageState.js").default} State.
     */ ImageBase1.prototype.getState = function() {
        return this.state;
    };
    /**
     * Load not yet loaded URI.
     * @abstract
     */ ImageBase1.prototype.load = function() {
        (0, _utilJs.abstract)();
    };
    return ImageBase1;
}((0, _targetJsDefault.default));
exports.default = ImageBase;

},{"./events/Target.js":"7T5Yi","./events/EventType.js":"hrQJ6","./util.js":"pLBjQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"liv8a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {import("../Feature.js").FeatureLike} feature1 Feature 1.
 * @param {import("../Feature.js").FeatureLike} feature2 Feature 2.
 * @return {number} Order.
 */ parcelHelpers.export(exports, "defaultOrder", ()=>defaultOrder);
/**
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @return {number} Squared pixel tolerance.
 */ parcelHelpers.export(exports, "getSquaredTolerance", ()=>getSquaredTolerance);
/**
 * @param {number} resolution Resolution.
 * @param {number} pixelRatio Pixel ratio.
 * @return {number} Pixel tolerance.
 */ parcelHelpers.export(exports, "getTolerance", ()=>getTolerance);
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../style/Style.js").default} style Style.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {function(import("../events/Event.js").default): void} listener Listener function.
 * @param {import("../proj.js").TransformFunction} [opt_transform] Transform from user to view projection.
 * @param {import("../render/canvas/BuilderGroup.js").default} [opt_declutterBuilderGroup] Builder for decluttering.
 * @return {boolean} `true` if style is loading.
 */ parcelHelpers.export(exports, "renderFeature", ()=>renderFeature);
/**
 * @module ol/renderer/vector
 */ var _builderTypeJs = require("../render/canvas/BuilderType.js");
var _builderTypeJsDefault = parcelHelpers.interopDefault(_builderTypeJs);
var _geometryTypeJs = require("../geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _imageStateJs = require("../ImageState.js");
var _imageStateJsDefault = parcelHelpers.interopDefault(_imageStateJs);
var _utilJs = require("../util.js");
/**
 * Feature callback. The callback will be called with three arguments. The first
 * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}
 * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for
 * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features
 * with a GeometryCollection geometry, it will be the first detected geometry from the collection.
 * @template T
 * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default<import("../source/Source").default>, import("../geom/SimpleGeometry.js").default): T} FeatureCallback
 */ /**
 * Tolerance for geometry simplification in device pixels.
 * @type {number}
 */ var SIMPLIFY_TOLERANCE = 0.5;
/**
 * @const
 * @type {Object<import("../geom/GeometryType.js").default,
 *                function(import("../render/canvas/BuilderGroup.js").default, import("../geom/Geometry.js").default,
 *                         import("../style/Style.js").default, Object): void>}
 */ var GEOMETRY_RENDERERS = {
    "Point": renderPointGeometry,
    "LineString": renderLineStringGeometry,
    "Polygon": renderPolygonGeometry,
    "MultiPoint": renderMultiPointGeometry,
    "MultiLineString": renderMultiLineStringGeometry,
    "MultiPolygon": renderMultiPolygonGeometry,
    "GeometryCollection": renderGeometryCollectionGeometry,
    "Circle": renderCircleGeometry
};
function defaultOrder(feature1, feature2) {
    return parseInt((0, _utilJs.getUid)(feature1), 10) - parseInt((0, _utilJs.getUid)(feature2), 10);
}
function getSquaredTolerance(resolution, pixelRatio) {
    var tolerance = getTolerance(resolution, pixelRatio);
    return tolerance * tolerance;
}
function getTolerance(resolution, pixelRatio) {
    return SIMPLIFY_TOLERANCE * resolution / pixelRatio;
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
 * @param {import("../geom/Circle.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").default} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [opt_declutterBuilderGroup] Builder for decluttering.
 */ function renderCircleGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
    var fillStyle = style.getFill();
    var strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
        var circleReplay = builderGroup.getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).CIRCLE);
        circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);
        circleReplay.drawCircle(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).TEXT);
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature);
    }
}
function renderFeature(replayGroup, feature, style, squaredTolerance, listener, opt_transform, opt_declutterBuilderGroup) {
    var loading = false;
    var imageStyle = style.getImage();
    if (imageStyle) {
        var imageState = imageStyle.getImageState();
        if (imageState == (0, _imageStateJsDefault.default).LOADED || imageState == (0, _imageStateJsDefault.default).ERROR) imageStyle.unlistenImageChange(listener);
        else {
            if (imageState == (0, _imageStateJsDefault.default).IDLE) imageStyle.load();
            imageState = imageStyle.getImageState();
            imageStyle.listenImageChange(listener);
            loading = true;
        }
    }
    renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform, opt_declutterBuilderGroup);
    return loading;
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../style/Style.js").default} style Style.
 * @param {number} squaredTolerance Squared tolerance.
 * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
 * @param {import("../render/canvas/BuilderGroup.js").default} [opt_declutterBuilderGroup] Builder for decluttering.
 */ function renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform, opt_declutterBuilderGroup) {
    var geometry = style.getGeometryFunction()(feature);
    if (!geometry) return;
    var simplifiedGeometry = geometry.simplifyTransformed(squaredTolerance, opt_transform);
    var renderer = style.getRenderer();
    if (renderer) renderGeometry(replayGroup, simplifiedGeometry, style, feature);
    else {
        var geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];
        geometryRenderer(replayGroup, simplifiedGeometry, style, feature, opt_declutterBuilderGroup);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
 * @param {import("../geom/Geometry.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 */ function renderGeometry(replayGroup, geometry, style, feature) {
    if (geometry.getType() == (0, _geometryTypeJsDefault.default).GEOMETRY_COLLECTION) {
        var geometries = /** @type {import("../geom/GeometryCollection.js").default} */ geometry.getGeometries();
        for(var i = 0, ii = geometries.length; i < ii; ++i)renderGeometry(replayGroup, geometries[i], style, feature);
        return;
    }
    var replay = replayGroup.getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).DEFAULT);
    replay.drawCustom(geometry, feature, style.getRenderer(), style.getHitDetectionRenderer());
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
 * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").default} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [opt_declutterBuilderGroup] Builder for decluttering.
 */ function renderGeometryCollectionGeometry(replayGroup, geometry, style, feature, opt_declutterBuilderGroup) {
    var geometries = geometry.getGeometriesArray();
    var i, ii;
    for(i = 0, ii = geometries.length; i < ii; ++i){
        var geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];
        geometryRenderer(replayGroup, geometries[i], style, feature, opt_declutterBuilderGroup);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/LineString.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [opt_declutterBuilderGroup] Builder for decluttering.
 */ function renderLineStringGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
    var strokeStyle = style.getStroke();
    if (strokeStyle) {
        var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).LINE_STRING);
        lineStringReplay.setFillStrokeStyle(null, strokeStyle);
        lineStringReplay.drawLineString(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).TEXT);
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/MultiLineString.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [opt_declutterBuilderGroup] Builder for decluttering.
 */ function renderMultiLineStringGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
    var strokeStyle = style.getStroke();
    if (strokeStyle) {
        var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).LINE_STRING);
        lineStringReplay.setFillStrokeStyle(null, strokeStyle);
        lineStringReplay.drawMultiLineString(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).TEXT);
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").default} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [opt_declutterBuilderGroup] Builder for decluttering.
 */ function renderMultiPolygonGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
    var fillStyle = style.getFill();
    var strokeStyle = style.getStroke();
    if (strokeStyle || fillStyle) {
        var polygonReplay = builderGroup.getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).POLYGON);
        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
        polygonReplay.drawMultiPolygon(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).TEXT);
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/Point.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [opt_declutterBuilderGroup] Builder for decluttering.
 */ function renderPointGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
    var imageStyle = style.getImage();
    var textStyle = style.getText();
    /** @type {import("../render/canvas.js").DeclutterImageWithText} */ var declutterImageWithText;
    if (opt_declutterBuilderGroup) {
        builderGroup = opt_declutterBuilderGroup;
        declutterImageWithText = imageStyle && textStyle && textStyle.getText() ? {} : undefined;
    }
    if (imageStyle) {
        if (imageStyle.getImageState() != (0, _imageStateJsDefault.default).LOADED) return;
        var imageReplay = builderGroup.getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).IMAGE);
        imageReplay.setImageStyle(imageStyle, declutterImageWithText);
        imageReplay.drawPoint(geometry, feature);
    }
    if (textStyle && textStyle.getText()) {
        var textReplay = builderGroup.getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).TEXT);
        textReplay.setTextStyle(textStyle, declutterImageWithText);
        textReplay.drawText(geometry, feature);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/MultiPoint.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [opt_declutterBuilderGroup] Builder for decluttering.
 */ function renderMultiPointGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
    var imageStyle = style.getImage();
    var textStyle = style.getText();
    /** @type {import("../render/canvas.js").DeclutterImageWithText} */ var declutterImageWithText;
    if (opt_declutterBuilderGroup) {
        builderGroup = opt_declutterBuilderGroup;
        declutterImageWithText = imageStyle && textStyle && textStyle.getText() ? {} : undefined;
    }
    if (imageStyle) {
        if (imageStyle.getImageState() != (0, _imageStateJsDefault.default).LOADED) return;
        var imageReplay = builderGroup.getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).IMAGE);
        imageReplay.setImageStyle(imageStyle, declutterImageWithText);
        imageReplay.drawMultiPoint(geometry, feature);
    }
    if (textStyle && textStyle.getText()) {
        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).TEXT);
        textReplay.setTextStyle(textStyle, declutterImageWithText);
        textReplay.drawText(geometry, feature);
    }
}
/**
 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
 * @param {import("../geom/Polygon.js").default|import("../render/Feature.js").default} geometry Geometry.
 * @param {import("../style/Style.js").default} style Style.
 * @param {import("../Feature.js").FeatureLike} feature Feature.
 * @param {import("../render/canvas/BuilderGroup.js").default} [opt_declutterBuilderGroup] Builder for decluttering.
 */ function renderPolygonGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {
    var fillStyle = style.getFill();
    var strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
        var polygonReplay = builderGroup.getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).POLYGON);
        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
        polygonReplay.drawPolygon(geometry, feature);
    }
    var textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), (0, _builderTypeJsDefault.default).TEXT);
        textReplay.setTextStyle(textStyle);
        textReplay.drawText(geometry, feature);
    }
}

},{"../render/canvas/BuilderType.js":"26rms","../geom/GeometryType.js":"j6daa","../ImageState.js":"c4jJS","../util.js":"pLBjQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9w7Fr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VectorSourceEvent", ()=>VectorSourceEvent);
var _collectionJs = require("../Collection.js");
var _collectionJsDefault = parcelHelpers.interopDefault(_collectionJs);
var _collectionEventTypeJs = require("../CollectionEventType.js");
var _collectionEventTypeJsDefault = parcelHelpers.interopDefault(_collectionEventTypeJs);
var _eventJs = require("../events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _objectEventTypeJs = require("../ObjectEventType.js");
var _objectEventTypeJsDefault = parcelHelpers.interopDefault(_objectEventTypeJs);
var _rbushJs = require("../structs/RBush.js");
var _rbushJsDefault = parcelHelpers.interopDefault(_rbushJs);
var _sourceJs = require("./Source.js");
var _sourceJsDefault = parcelHelpers.interopDefault(_sourceJs);
var _stateJs = require("./State.js");
var _stateJsDefault = parcelHelpers.interopDefault(_stateJs);
var _vectorEventTypeJs = require("./VectorEventType.js");
var _vectorEventTypeJsDefault = parcelHelpers.interopDefault(_vectorEventTypeJs);
var _functionsJs = require("../functions.js");
var _loadingstrategyJs = require("../loadingstrategy.js");
var _assertsJs = require("../asserts.js");
var _extentJs = require("../extent.js");
var _arrayJs = require("../array.js");
var _utilJs = require("../util.js");
var _objJs = require("../obj.js");
var _eventsJs = require("../events.js");
var _featureloaderJs = require("../featureloader.js");
/**
 * @module ol/source/Vector
 */ var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and
 * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this
 * is one of the standard {@link module:ol/loadingstrategy} strategies.
 *
 * @typedef {function(import("../extent.js").Extent, number, import("../proj/Projection.js").default): Array<import("../extent.js").Extent>} LoadingStrategy
 * @api
 */ /**
 * @classdesc
 * Events emitted by {@link module:ol/source/Vector~VectorSource} instances are instances of this
 * type.
 * @template {import("../geom/Geometry.js").default} [Geometry=import("../geom/Geometry.js").default]
 */ var VectorSourceEvent = /** @class */ function(_super) {
    __extends(VectorSourceEvent1, _super);
    /**
     * @param {string} type Type.
     * @param {import("../Feature.js").default<Geometry>} [opt_feature] Feature.
     * @param {Array<import("../Feature.js").default<Geometry>>} [opt_features] Features.
     */ function VectorSourceEvent1(type, opt_feature, opt_features) {
        var _this = _super.call(this, type) || this;
        /**
         * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.
         * @type {import("../Feature.js").default<Geometry>|undefined}
         * @api
         */ _this.feature = opt_feature;
        /**
         * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.
         * @type {Array<import("../Feature.js").default<Geometry>>|undefined}
         * @api
         */ _this.features = opt_features;
        return _this;
    }
    return VectorSourceEvent1;
}((0, _eventJsDefault.default));
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<import("./VectorEventType").VectorSourceEventTypes, VectorSourceEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     import("./VectorEventType").VectorSourceEventTypes, Return>} VectorSourceOnSignature
 */ /**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {Array<import("../Feature.js").default>|Collection<import("../Feature.js").default>} [features]
 * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source
 * and the collection will stay in sync.
 * @property {import("../format/Feature.js").default} [format] The feature format used by the XHR
 * feature loader when `url` is set. Required if `url` is set, otherwise ignored.
 * @property {import("../featureloader.js").FeatureLoader} [loader]
 * The loader function used to load features, from a remote source for example.
 * If this is not set and `url` is set, the source will create and use an XHR
 * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events
 * will only fire if the `success` and `failure` callbacks are used.
 *
 * Example:
 *
 * ```js
 * import {Vector} from 'ol/source';
 * import {GeoJSON} from 'ol/format';
 * import {bbox} from 'ol/loadingstrategy';
 *
 * var vectorSource = new Vector({
 *   format: new GeoJSON(),
 *   loader: function(extent, resolution, projection, success, failure) {
 *      var proj = projection.getCode();
 *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +
 *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +
 *          'outputFormat=application/json&srsname=' + proj + '&' +
 *          'bbox=' + extent.join(',') + ',' + proj;
 *      var xhr = new XMLHttpRequest();
 *      xhr.open('GET', url);
 *      var onError = function() {
 *        vectorSource.removeLoadedExtent(extent);
 *        failure();
 *      }
 *      xhr.onerror = onError;
 *      xhr.onload = function() {
 *        if (xhr.status == 200) {
 *          var features = vectorSource.getFormat().readFeatures(xhr.responseText);
 *          vectorSource.addFeatures(features);
 *          success(features);
 *        } else {
 *          onError();
 *        }
 *      }
 *      xhr.send();
 *    },
 *    strategy: bbox
 *  });
 * ```
 * @property {boolean} [overlaps=true] This source may have overlapping geometries.
 * Setting this to `false` (e.g. for sources with polygons that represent administrative
 * boundaries or TopoJSON sources) allows the renderer to optimise fill and
 * stroke operations.
 * @property {LoadingStrategy} [strategy] The loading strategy to use.
 * By default an {@link module:ol/loadingstrategy.all}
 * strategy is used, a one-off strategy which loads all features at once.
 * @property {string|import("../featureloader.js").FeatureUrlFunction} [url]
 * Setting this option instructs the source to load features using an XHR loader
 * (see {@link module:ol/featureloader.xhr}). Use a `string` and an
 * {@link module:ol/loadingstrategy.all} for a one-off download of all features from
 * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with
 * other loading strategies.
 * Requires `format` to be set as well.
 * When default XHR feature loader is provided, the features will
 * be transformed from the data projection to the view projection
 * during parsing. If your remote data source does not advertise its projection
 * properly, this transformation will be incorrect. For some formats, the
 * default projection (usually EPSG:4326) can be overridden by setting the
 * dataProjection constructor option on the format.
 * Note that if a source contains non-feature data, such as a GeoJSON geometry
 * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.
 * @property {boolean} [useSpatialIndex=true]
 * By default, an RTree is used as spatial index. When features are removed and
 * added frequently, and the total number of features is low, setting this to
 * `false` may improve performance.
 *
 * Note that
 * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},
 * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and
 * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is
 * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop
 * through all features.
 *
 * When set to `false`, the features will be maintained in an
 * {@link module:ol/Collection~Collection}, which can be retrieved through
 * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.
 * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the
 * -180° and 180° meridians to work properly, this should be set to `false`. The
 * resulting geometry coordinates will then exceed the world bounds.
 */ /**
 * @classdesc
 * Provides a source of features for vector layers. Vector features provided
 * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for
 * vector data that is optimized for rendering.
 *
 * @fires VectorSourceEvent
 * @api
 * @template {import("../geom/Geometry.js").default} [Geometry=import("../geom/Geometry.js").default]
 */ var VectorSource = /** @class */ function(_super) {
    __extends(VectorSource1, _super);
    /**
     * @param {Options} [opt_options] Vector source options.
     */ function VectorSource1(opt_options) {
        var _this = this;
        var options = opt_options || {};
        _this = _super.call(this, {
            attributions: options.attributions,
            interpolate: true,
            projection: undefined,
            state: (0, _stateJsDefault.default).READY,
            wrapX: options.wrapX !== undefined ? options.wrapX : true
        }) || this;
        /***
         * @type {VectorSourceOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {VectorSourceOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {VectorSourceOnSignature<void>}
         */ _this.un;
        /**
         * @private
         * @type {import("../featureloader.js").FeatureLoader}
         */ _this.loader_ = (0, _functionsJs.VOID);
        /**
         * @private
         * @type {import("../format/Feature.js").default|undefined}
         */ _this.format_ = options.format;
        /**
         * @private
         * @type {boolean}
         */ _this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;
        /**
         * @private
         * @type {string|import("../featureloader.js").FeatureUrlFunction|undefined}
         */ _this.url_ = options.url;
        if (options.loader !== undefined) _this.loader_ = options.loader;
        else if (_this.url_ !== undefined) {
            (0, _assertsJs.assert)(_this.format_, 7); // `format` must be set when `url` is set
            // create a XHR feature loader for "url" and "format"
            _this.loader_ = (0, _featureloaderJs.xhr)(_this.url_, _this.format_);
        }
        /**
         * @private
         * @type {LoadingStrategy}
         */ _this.strategy_ = options.strategy !== undefined ? options.strategy : (0, _loadingstrategyJs.all);
        var useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;
        /**
         * @private
         * @type {RBush<import("../Feature.js").default<Geometry>>}
         */ _this.featuresRtree_ = useSpatialIndex ? new (0, _rbushJsDefault.default)() : null;
        /**
         * @private
         * @type {RBush<{extent: import("../extent.js").Extent}>}
         */ _this.loadedExtentsRtree_ = new (0, _rbushJsDefault.default)();
        /**
         * @type {number}
         * @private
         */ _this.loadingExtentsCount_ = 0;
        /**
         * @private
         * @type {!Object<string, import("../Feature.js").default<Geometry>>}
         */ _this.nullGeometryFeatures_ = {};
        /**
         * A lookup of features by id (the return from feature.getId()).
         * @private
         * @type {!Object<string, import("../Feature.js").default<Geometry>>}
         */ _this.idIndex_ = {};
        /**
         * A lookup of features by uid (using getUid(feature)).
         * @private
         * @type {!Object<string, import("../Feature.js").default<Geometry>>}
         */ _this.uidIndex_ = {};
        /**
         * @private
         * @type {Object<string, Array<import("../events.js").EventsKey>>}
         */ _this.featureChangeKeys_ = {};
        /**
         * @private
         * @type {Collection<import("../Feature.js").default<Geometry>>|null}
         */ _this.featuresCollection_ = null;
        var collection, features;
        if (Array.isArray(options.features)) features = options.features;
        else if (options.features) {
            collection = options.features;
            features = collection.getArray();
        }
        if (!useSpatialIndex && collection === undefined) collection = new (0, _collectionJsDefault.default)(features);
        if (features !== undefined) _this.addFeaturesInternal(features);
        if (collection !== undefined) _this.bindFeaturesCollection_(collection);
        return _this;
    }
    /**
     * Add a single feature to the source.  If you want to add a batch of features
     * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}
     * instead. A feature will not be added to the source if feature with
     * the same id is already there. The reason for this behavior is to avoid
     * feature duplication when using bbox or tile loading strategies.
     * Note: this also applies if an {@link module:ol/Collection~Collection} is used for features,
     * meaning that if a feature with a duplicate id is added in the collection, it will
     * be removed from it right away.
     * @param {import("../Feature.js").default<Geometry>} feature Feature to add.
     * @api
     */ VectorSource1.prototype.addFeature = function(feature) {
        this.addFeatureInternal(feature);
        this.changed();
    };
    /**
     * Add a feature without firing a `change` event.
     * @param {import("../Feature.js").default<Geometry>} feature Feature.
     * @protected
     */ VectorSource1.prototype.addFeatureInternal = function(feature) {
        var featureKey = (0, _utilJs.getUid)(feature);
        if (!this.addToIndex_(featureKey, feature)) {
            if (this.featuresCollection_) this.featuresCollection_.remove(feature);
            return;
        }
        this.setupChangeEvents_(featureKey, feature);
        var geometry = feature.getGeometry();
        if (geometry) {
            var extent = geometry.getExtent();
            if (this.featuresRtree_) this.featuresRtree_.insert(extent, feature);
        } else this.nullGeometryFeatures_[featureKey] = feature;
        this.dispatchEvent(new VectorSourceEvent((0, _vectorEventTypeJsDefault.default).ADDFEATURE, feature));
    };
    /**
     * @param {string} featureKey Unique identifier for the feature.
     * @param {import("../Feature.js").default<Geometry>} feature The feature.
     * @private
     */ VectorSource1.prototype.setupChangeEvents_ = function(featureKey, feature) {
        this.featureChangeKeys_[featureKey] = [
            (0, _eventsJs.listen)(feature, (0, _eventTypeJsDefault.default).CHANGE, this.handleFeatureChange_, this),
            (0, _eventsJs.listen)(feature, (0, _objectEventTypeJsDefault.default).PROPERTYCHANGE, this.handleFeatureChange_, this), 
        ];
    };
    /**
     * @param {string} featureKey Unique identifier for the feature.
     * @param {import("../Feature.js").default<Geometry>} feature The feature.
     * @return {boolean} The feature is "valid", in the sense that it is also a
     *     candidate for insertion into the Rtree.
     * @private
     */ VectorSource1.prototype.addToIndex_ = function(featureKey, feature) {
        var valid = true;
        var id = feature.getId();
        if (id !== undefined) {
            if (!(id.toString() in this.idIndex_)) this.idIndex_[id.toString()] = feature;
            else valid = false;
        }
        if (valid) {
            (0, _assertsJs.assert)(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source
            this.uidIndex_[featureKey] = feature;
        }
        return valid;
    };
    /**
     * Add a batch of features to the source.
     * @param {Array<import("../Feature.js").default<Geometry>>} features Features to add.
     * @api
     */ VectorSource1.prototype.addFeatures = function(features) {
        this.addFeaturesInternal(features);
        this.changed();
    };
    /**
     * Add features without firing a `change` event.
     * @param {Array<import("../Feature.js").default<Geometry>>} features Features.
     * @protected
     */ VectorSource1.prototype.addFeaturesInternal = function(features) {
        var extents = [];
        var newFeatures = [];
        var geometryFeatures = [];
        for(var i = 0, length_1 = features.length; i < length_1; i++){
            var feature = features[i];
            var featureKey = (0, _utilJs.getUid)(feature);
            if (this.addToIndex_(featureKey, feature)) newFeatures.push(feature);
        }
        for(var i = 0, length_2 = newFeatures.length; i < length_2; i++){
            var feature = newFeatures[i];
            var featureKey = (0, _utilJs.getUid)(feature);
            this.setupChangeEvents_(featureKey, feature);
            var geometry = feature.getGeometry();
            if (geometry) {
                var extent = geometry.getExtent();
                extents.push(extent);
                geometryFeatures.push(feature);
            } else this.nullGeometryFeatures_[featureKey] = feature;
        }
        if (this.featuresRtree_) this.featuresRtree_.load(extents, geometryFeatures);
        if (this.hasListener((0, _vectorEventTypeJsDefault.default).ADDFEATURE)) for(var i = 0, length_3 = newFeatures.length; i < length_3; i++)this.dispatchEvent(new VectorSourceEvent((0, _vectorEventTypeJsDefault.default).ADDFEATURE, newFeatures[i]));
    };
    /**
     * @param {!Collection<import("../Feature.js").default<Geometry>>} collection Collection.
     * @private
     */ VectorSource1.prototype.bindFeaturesCollection_ = function(collection) {
        var modifyingCollection = false;
        this.addEventListener((0, _vectorEventTypeJsDefault.default).ADDFEATURE, /**
         * @param {VectorSourceEvent<Geometry>} evt The vector source event
         */ function(evt) {
            if (!modifyingCollection) {
                modifyingCollection = true;
                collection.push(evt.feature);
                modifyingCollection = false;
            }
        });
        this.addEventListener((0, _vectorEventTypeJsDefault.default).REMOVEFEATURE, /**
         * @param {VectorSourceEvent<Geometry>} evt The vector source event
         */ function(evt) {
            if (!modifyingCollection) {
                modifyingCollection = true;
                collection.remove(evt.feature);
                modifyingCollection = false;
            }
        });
        collection.addEventListener((0, _collectionEventTypeJsDefault.default).ADD, /**
         * @param {import("../Collection.js").CollectionEvent} evt The collection event
         */ (function(evt) {
            if (!modifyingCollection) {
                modifyingCollection = true;
                this.addFeature(evt.element);
                modifyingCollection = false;
            }
        }).bind(this));
        collection.addEventListener((0, _collectionEventTypeJsDefault.default).REMOVE, /**
         * @param {import("../Collection.js").CollectionEvent} evt The collection event
         */ (function(evt) {
            if (!modifyingCollection) {
                modifyingCollection = true;
                this.removeFeature(evt.element);
                modifyingCollection = false;
            }
        }).bind(this));
        this.featuresCollection_ = collection;
    };
    /**
     * Remove all features from the source.
     * @param {boolean} [opt_fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature removefeature} events.
     * @api
     */ VectorSource1.prototype.clear = function(opt_fast) {
        if (opt_fast) {
            for(var featureId in this.featureChangeKeys_){
                var keys = this.featureChangeKeys_[featureId];
                keys.forEach((0, _eventsJs.unlistenByKey));
            }
            if (!this.featuresCollection_) {
                this.featureChangeKeys_ = {};
                this.idIndex_ = {};
                this.uidIndex_ = {};
            }
        } else if (this.featuresRtree_) {
            var removeAndIgnoreReturn = (function(feature) {
                this.removeFeatureInternal(feature);
            }).bind(this);
            this.featuresRtree_.forEach(removeAndIgnoreReturn);
            for(var id in this.nullGeometryFeatures_)this.removeFeatureInternal(this.nullGeometryFeatures_[id]);
        }
        if (this.featuresCollection_) this.featuresCollection_.clear();
        if (this.featuresRtree_) this.featuresRtree_.clear();
        this.nullGeometryFeatures_ = {};
        var clearEvent = new VectorSourceEvent((0, _vectorEventTypeJsDefault.default).CLEAR);
        this.dispatchEvent(clearEvent);
        this.changed();
    };
    /**
     * Iterate through all features on the source, calling the provided callback
     * with each one.  If the callback returns any "truthy" value, iteration will
     * stop and the function will return the same value.
     * Note: this function only iterate through the feature that have a defined geometry.
     *
     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
     *     on the source.  Return a truthy value to stop iteration.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */ VectorSource1.prototype.forEachFeature = function(callback) {
        if (this.featuresRtree_) return this.featuresRtree_.forEach(callback);
        else if (this.featuresCollection_) this.featuresCollection_.forEach(callback);
    };
    /**
     * Iterate through all features whose geometries contain the provided
     * coordinate, calling the callback with each feature.  If the callback returns
     * a "truthy" value, iteration will stop and the function will return the same
     * value.
     *
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
     *     whose goemetry contains the provided coordinate.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     */ VectorSource1.prototype.forEachFeatureAtCoordinateDirect = function(coordinate, callback) {
        var extent = [
            coordinate[0],
            coordinate[1],
            coordinate[0],
            coordinate[1]
        ];
        return this.forEachFeatureInExtent(extent, function(feature) {
            var geometry = feature.getGeometry();
            if (geometry.intersectsCoordinate(coordinate)) return callback(feature);
            else return undefined;
        });
    };
    /**
     * Iterate through all features whose bounding box intersects the provided
     * extent (note that the feature's geometry may not intersect the extent),
     * calling the callback with each feature.  If the callback returns a "truthy"
     * value, iteration will stop and the function will return the same value.
     *
     * If you are interested in features whose geometry intersects an extent, call
     * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.
     *
     * When `useSpatialIndex` is set to false, this method will loop through all
     * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
     *     whose bounding box intersects the provided extent.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */ VectorSource1.prototype.forEachFeatureInExtent = function(extent, callback) {
        if (this.featuresRtree_) return this.featuresRtree_.forEachInExtent(extent, callback);
        else if (this.featuresCollection_) this.featuresCollection_.forEach(callback);
    };
    /**
     * Iterate through all features whose geometry intersects the provided extent,
     * calling the callback with each feature.  If the callback returns a "truthy"
     * value, iteration will stop and the function will return the same value.
     *
     * If you only want to test for bounding box intersection, call the
     * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
     *     whose geometry intersects the provided extent.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */ VectorSource1.prototype.forEachFeatureIntersectingExtent = function(extent, callback) {
        return this.forEachFeatureInExtent(extent, /**
         * @param {import("../Feature.js").default<Geometry>} feature Feature.
         * @return {T|undefined} The return value from the last call to the callback.
         */ function(feature) {
            var geometry = feature.getGeometry();
            if (geometry.intersectsExtent(extent)) {
                var result = callback(feature);
                if (result) return result;
            }
        });
    };
    /**
     * Get the features collection associated with this source. Will be `null`
     * unless the source was configured with `useSpatialIndex` set to `false`, or
     * with an {@link module:ol/Collection~Collection} as `features`.
     * @return {Collection<import("../Feature.js").default<Geometry>>|null} The collection of features.
     * @api
     */ VectorSource1.prototype.getFeaturesCollection = function() {
        return this.featuresCollection_;
    };
    /**
     * Get a snapshot of the features currently on the source in random order. The returned array
     * is a copy, the features are references to the features in the source.
     * @return {Array<import("../Feature.js").default<Geometry>>} Features.
     * @api
     */ VectorSource1.prototype.getFeatures = function() {
        var features;
        if (this.featuresCollection_) features = this.featuresCollection_.getArray().slice(0);
        else if (this.featuresRtree_) {
            features = this.featuresRtree_.getAll();
            if (!(0, _objJs.isEmpty)(this.nullGeometryFeatures_)) (0, _arrayJs.extend)(features, (0, _objJs.getValues)(this.nullGeometryFeatures_));
        }
        return features;
    };
    /**
     * Get all features whose geometry intersects the provided coordinate.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {Array<import("../Feature.js").default<Geometry>>} Features.
     * @api
     */ VectorSource1.prototype.getFeaturesAtCoordinate = function(coordinate) {
        var features = [];
        this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {
            features.push(feature);
        });
        return features;
    };
    /**
     * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of
     * all features intersecting the given extent in random order (so it may include
     * features whose geometries do not intersect the extent).
     *
     * When `useSpatialIndex` is set to false, this method will return all
     * features.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {Array<import("../Feature.js").default<Geometry>>} Features.
     * @api
     */ VectorSource1.prototype.getFeaturesInExtent = function(extent) {
        if (this.featuresRtree_) return this.featuresRtree_.getInExtent(extent);
        else if (this.featuresCollection_) return this.featuresCollection_.getArray().slice(0);
        else return [];
    };
    /**
     * Get the closest feature to the provided coordinate.
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(import("../Feature.js").default<Geometry>):boolean} [opt_filter] Feature filter function.
     *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}
     *     and it should return a boolean value. By default, no filtering is made.
     * @return {import("../Feature.js").default<Geometry>} Closest feature.
     * @api
     */ VectorSource1.prototype.getClosestFeatureToCoordinate = function(coordinate, opt_filter) {
        // Find the closest feature using branch and bound.  We start searching an
        // infinite extent, and find the distance from the first feature found.  This
        // becomes the closest feature.  We then compute a smaller extent which any
        // closer feature must intersect.  We continue searching with this smaller
        // extent, trying to find a closer feature.  Every time we find a closer
        // feature, we update the extent being searched so that any even closer
        // feature must intersect it.  We continue until we run out of features.
        var x = coordinate[0];
        var y = coordinate[1];
        var closestFeature = null;
        var closestPoint = [
            NaN,
            NaN
        ];
        var minSquaredDistance = Infinity;
        var extent = [
            -Infinity,
            -Infinity,
            Infinity,
            Infinity
        ];
        var filter = opt_filter ? opt_filter : (0, _functionsJs.TRUE);
        this.featuresRtree_.forEachInExtent(extent, /**
         * @param {import("../Feature.js").default<Geometry>} feature Feature.
         */ function(feature) {
            if (filter(feature)) {
                var geometry = feature.getGeometry();
                var previousMinSquaredDistance = minSquaredDistance;
                minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);
                if (minSquaredDistance < previousMinSquaredDistance) {
                    closestFeature = feature;
                    // This is sneaky.  Reduce the extent that it is currently being
                    // searched while the R-Tree traversal using this same extent object
                    // is still in progress.  This is safe because the new extent is
                    // strictly contained by the old extent.
                    var minDistance = Math.sqrt(minSquaredDistance);
                    extent[0] = x - minDistance;
                    extent[1] = y - minDistance;
                    extent[2] = x + minDistance;
                    extent[3] = y + minDistance;
                }
            }
        });
        return closestFeature;
    };
    /**
     * Get the extent of the features currently in the source.
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../extent.js").Extent} [opt_extent] Destination extent. If provided, no new extent
     *     will be created. Instead, that extent's coordinates will be overwritten.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */ VectorSource1.prototype.getExtent = function(opt_extent) {
        return this.featuresRtree_.getExtent(opt_extent);
    };
    /**
     * Get a feature by its identifier (the value returned by feature.getId()).
     * Note that the index treats string and numeric identifiers as the same.  So
     * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
     *
     * @param {string|number} id Feature identifier.
     * @return {import("../Feature.js").default<Geometry>|null} The feature (or `null` if not found).
     * @api
     */ VectorSource1.prototype.getFeatureById = function(id) {
        var feature = this.idIndex_[id.toString()];
        return feature !== undefined ? feature : null;
    };
    /**
     * Get a feature by its internal unique identifier (using `getUid`).
     *
     * @param {string} uid Feature identifier.
     * @return {import("../Feature.js").default<Geometry>|null} The feature (or `null` if not found).
     */ VectorSource1.prototype.getFeatureByUid = function(uid) {
        var feature = this.uidIndex_[uid];
        return feature !== undefined ? feature : null;
    };
    /**
     * Get the format associated with this source.
     *
     * @return {import("../format/Feature.js").default|undefined} The feature format.
     * @api
     */ VectorSource1.prototype.getFormat = function() {
        return this.format_;
    };
    /**
     * @return {boolean} The source can have overlapping geometries.
     */ VectorSource1.prototype.getOverlaps = function() {
        return this.overlaps_;
    };
    /**
     * Get the url associated with this source.
     *
     * @return {string|import("../featureloader.js").FeatureUrlFunction|undefined} The url.
     * @api
     */ VectorSource1.prototype.getUrl = function() {
        return this.url_;
    };
    /**
     * @param {Event} event Event.
     * @private
     */ VectorSource1.prototype.handleFeatureChange_ = function(event) {
        var feature = event.target;
        var featureKey = (0, _utilJs.getUid)(feature);
        var geometry = feature.getGeometry();
        if (!geometry) {
            if (!(featureKey in this.nullGeometryFeatures_)) {
                if (this.featuresRtree_) this.featuresRtree_.remove(feature);
                this.nullGeometryFeatures_[featureKey] = feature;
            }
        } else {
            var extent = geometry.getExtent();
            if (featureKey in this.nullGeometryFeatures_) {
                delete this.nullGeometryFeatures_[featureKey];
                if (this.featuresRtree_) this.featuresRtree_.insert(extent, feature);
            } else if (this.featuresRtree_) this.featuresRtree_.update(extent, feature);
        }
        var id = feature.getId();
        if (id !== undefined) {
            var sid = id.toString();
            if (this.idIndex_[sid] !== feature) {
                this.removeFromIdIndex_(feature);
                this.idIndex_[sid] = feature;
            }
        } else {
            this.removeFromIdIndex_(feature);
            this.uidIndex_[featureKey] = feature;
        }
        this.changed();
        this.dispatchEvent(new VectorSourceEvent((0, _vectorEventTypeJsDefault.default).CHANGEFEATURE, feature));
    };
    /**
     * Returns true if the feature is contained within the source.
     * @param {import("../Feature.js").default<Geometry>} feature Feature.
     * @return {boolean} Has feature.
     * @api
     */ VectorSource1.prototype.hasFeature = function(feature) {
        var id = feature.getId();
        if (id !== undefined) return id in this.idIndex_;
        else return (0, _utilJs.getUid)(feature) in this.uidIndex_;
    };
    /**
     * @return {boolean} Is empty.
     */ VectorSource1.prototype.isEmpty = function() {
        if (this.featuresRtree_) return this.featuresRtree_.isEmpty() && (0, _objJs.isEmpty)(this.nullGeometryFeatures_);
        if (this.featuresCollection_) return this.featuresCollection_.getLength() === 0;
        return true;
    };
    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */ VectorSource1.prototype.loadFeatures = function(extent, resolution, projection) {
        var loadedExtentsRtree = this.loadedExtentsRtree_;
        var extentsToLoad = this.strategy_(extent, resolution, projection);
        var _loop_1 = function(i, ii) {
            var extentToLoad = extentsToLoad[i];
            var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad, /**
             * @param {{extent: import("../extent.js").Extent}} object Object.
             * @return {boolean} Contains.
             */ function(object) {
                return (0, _extentJs.containsExtent)(object.extent, extentToLoad);
            });
            if (!alreadyLoaded) {
                ++this_1.loadingExtentsCount_;
                this_1.dispatchEvent(new VectorSourceEvent((0, _vectorEventTypeJsDefault.default).FEATURESLOADSTART));
                this_1.loader_.call(this_1, extentToLoad, resolution, projection, (function(features) {
                    --this.loadingExtentsCount_;
                    this.dispatchEvent(new VectorSourceEvent((0, _vectorEventTypeJsDefault.default).FEATURESLOADEND, undefined, features));
                }).bind(this_1), (function() {
                    --this.loadingExtentsCount_;
                    this.dispatchEvent(new VectorSourceEvent((0, _vectorEventTypeJsDefault.default).FEATURESLOADERROR));
                }).bind(this_1));
                loadedExtentsRtree.insert(extentToLoad, {
                    extent: extentToLoad.slice()
                });
            }
        };
        var this_1 = this;
        for(var i1 = 0, ii = extentsToLoad.length; i1 < ii; ++i1)_loop_1(i1, ii);
        this.loading = this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;
    };
    VectorSource1.prototype.refresh = function() {
        this.clear(true);
        this.loadedExtentsRtree_.clear();
        _super.prototype.refresh.call(this);
    };
    /**
     * Remove an extent from the list of loaded extents.
     * @param {import("../extent.js").Extent} extent Extent.
     * @api
     */ VectorSource1.prototype.removeLoadedExtent = function(extent) {
        var loadedExtentsRtree = this.loadedExtentsRtree_;
        var obj;
        loadedExtentsRtree.forEachInExtent(extent, function(object) {
            if ((0, _extentJs.equals)(object.extent, extent)) {
                obj = object;
                return true;
            }
        });
        if (obj) loadedExtentsRtree.remove(obj);
    };
    /**
     * Remove a single feature from the source.  If you want to remove all features
     * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
     * instead.
     * @param {import("../Feature.js").default<Geometry>} feature Feature to remove.
     * @api
     */ VectorSource1.prototype.removeFeature = function(feature) {
        if (!feature) return;
        var featureKey = (0, _utilJs.getUid)(feature);
        if (featureKey in this.nullGeometryFeatures_) delete this.nullGeometryFeatures_[featureKey];
        else if (this.featuresRtree_) this.featuresRtree_.remove(feature);
        var result = this.removeFeatureInternal(feature);
        if (result) this.changed();
    };
    /**
     * Remove feature without firing a `change` event.
     * @param {import("../Feature.js").default<Geometry>} feature Feature.
     * @return {import("../Feature.js").default<Geometry>|undefined} The removed feature
     *     (or undefined if the feature was not found).
     * @protected
     */ VectorSource1.prototype.removeFeatureInternal = function(feature) {
        var featureKey = (0, _utilJs.getUid)(feature);
        var featureChangeKeys = this.featureChangeKeys_[featureKey];
        if (!featureChangeKeys) return;
        featureChangeKeys.forEach((0, _eventsJs.unlistenByKey));
        delete this.featureChangeKeys_[featureKey];
        var id = feature.getId();
        if (id !== undefined) delete this.idIndex_[id.toString()];
        delete this.uidIndex_[featureKey];
        this.dispatchEvent(new VectorSourceEvent((0, _vectorEventTypeJsDefault.default).REMOVEFEATURE, feature));
        return feature;
    };
    /**
     * Remove a feature from the id index.  Called internally when the feature id
     * may have changed.
     * @param {import("../Feature.js").default<Geometry>} feature The feature.
     * @return {boolean} Removed the feature from the index.
     * @private
     */ VectorSource1.prototype.removeFromIdIndex_ = function(feature) {
        var removed = false;
        for(var id in this.idIndex_)if (this.idIndex_[id] === feature) {
            delete this.idIndex_[id];
            removed = true;
            break;
        }
        return removed;
    };
    /**
     * Set the new loader of the source. The next render cycle will use the
     * new loader.
     * @param {import("../featureloader.js").FeatureLoader} loader The loader to set.
     * @api
     */ VectorSource1.prototype.setLoader = function(loader) {
        this.loader_ = loader;
    };
    /**
     * Points the source to a new url. The next render cycle will use the new url.
     * @param {string|import("../featureloader.js").FeatureUrlFunction} url Url.
     * @api
     */ VectorSource1.prototype.setUrl = function(url) {
        (0, _assertsJs.assert)(this.format_, 7); // `format` must be set when `url` is set
        this.url_ = url;
        this.setLoader((0, _featureloaderJs.xhr)(url, this.format_));
    };
    return VectorSource1;
}((0, _sourceJsDefault.default));
exports.default = VectorSource;

},{"../Collection.js":"gReoh","../CollectionEventType.js":"82Ksf","../events/Event.js":"hwXQP","../events/EventType.js":"hrQJ6","../ObjectEventType.js":"f2U6i","../structs/RBush.js":"ewGrv","./Source.js":"bgZ4G","./State.js":"gW573","./VectorEventType.js":"6IruY","../functions.js":"iqv8I","../loadingstrategy.js":"i1BBH","../asserts.js":"e4TiF","../extent.js":"6YrVc","../array.js":"1Fbic","../util.js":"pLBjQ","../obj.js":"3ssAG","../events.js":"dcspA","../featureloader.js":"csnhK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ewGrv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/structs/RBush
 */ var _rbush = require("rbush");
var _rbushDefault = parcelHelpers.interopDefault(_rbush);
var _extentJs = require("../extent.js");
var _utilJs = require("../util.js");
var _objJs = require("../obj.js");
/**
 * @typedef {Object} Entry
 * @property {number} minX MinX.
 * @property {number} minY MinY.
 * @property {number} maxX MaxX.
 * @property {number} maxY MaxY.
 * @property {Object} [value] Value.
 */ /**
 * @classdesc
 * Wrapper around the RBush by Vladimir Agafonkin.
 * See https://github.com/mourner/rbush.
 *
 * @template T
 */ var RBush = /** @class */ function() {
    /**
     * @param {number} [opt_maxEntries] Max entries.
     */ function RBush1(opt_maxEntries) {
        /**
         * @private
         */ this.rbush_ = new (0, _rbushDefault.default)(opt_maxEntries);
        /**
         * A mapping between the objects added to this rbush wrapper
         * and the objects that are actually added to the internal rbush.
         * @private
         * @type {Object<string, Entry>}
         */ this.items_ = {};
    }
    /**
     * Insert a value into the RBush.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {T} value Value.
     */ RBush1.prototype.insert = function(extent, value) {
        /** @type {Entry} */ var item = {
            minX: extent[0],
            minY: extent[1],
            maxX: extent[2],
            maxY: extent[3],
            value: value
        };
        this.rbush_.insert(item);
        this.items_[(0, _utilJs.getUid)(value)] = item;
    };
    /**
     * Bulk-insert values into the RBush.
     * @param {Array<import("../extent.js").Extent>} extents Extents.
     * @param {Array<T>} values Values.
     */ RBush1.prototype.load = function(extents, values) {
        var items = new Array(values.length);
        for(var i = 0, l = values.length; i < l; i++){
            var extent = extents[i];
            var value = values[i];
            /** @type {Entry} */ var item = {
                minX: extent[0],
                minY: extent[1],
                maxX: extent[2],
                maxY: extent[3],
                value: value
            };
            items[i] = item;
            this.items_[(0, _utilJs.getUid)(value)] = item;
        }
        this.rbush_.load(items);
    };
    /**
     * Remove a value from the RBush.
     * @param {T} value Value.
     * @return {boolean} Removed.
     */ RBush1.prototype.remove = function(value) {
        var uid = (0, _utilJs.getUid)(value);
        // get the object in which the value was wrapped when adding to the
        // internal rbush. then use that object to do the removal.
        var item = this.items_[uid];
        delete this.items_[uid];
        return this.rbush_.remove(item) !== null;
    };
    /**
     * Update the extent of a value in the RBush.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {T} value Value.
     */ RBush1.prototype.update = function(extent, value) {
        var item = this.items_[(0, _utilJs.getUid)(value)];
        var bbox = [
            item.minX,
            item.minY,
            item.maxX,
            item.maxY
        ];
        if (!(0, _extentJs.equals)(bbox, extent)) {
            this.remove(value);
            this.insert(extent, value);
        }
    };
    /**
     * Return all values in the RBush.
     * @return {Array<T>} All.
     */ RBush1.prototype.getAll = function() {
        var items = this.rbush_.all();
        return items.map(function(item) {
            return item.value;
        });
    };
    /**
     * Return all values in the given extent.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {Array<T>} All in extent.
     */ RBush1.prototype.getInExtent = function(extent) {
        /** @type {Entry} */ var bbox = {
            minX: extent[0],
            minY: extent[1],
            maxX: extent[2],
            maxY: extent[3]
        };
        var items = this.rbush_.search(bbox);
        return items.map(function(item) {
            return item.value;
        });
    };
    /**
     * Calls a callback function with each value in the tree.
     * If the callback returns a truthy value, this value is returned without
     * checking the rest of the tree.
     * @param {function(T): *} callback Callback.
     * @return {*} Callback return value.
     */ RBush1.prototype.forEach = function(callback) {
        return this.forEach_(this.getAll(), callback);
    };
    /**
     * Calls a callback function with each value in the provided extent.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(T): *} callback Callback.
     * @return {*} Callback return value.
     */ RBush1.prototype.forEachInExtent = function(extent, callback) {
        return this.forEach_(this.getInExtent(extent), callback);
    };
    /**
     * @param {Array<T>} values Values.
     * @param {function(T): *} callback Callback.
     * @private
     * @return {*} Callback return value.
     */ RBush1.prototype.forEach_ = function(values, callback) {
        var result;
        for(var i = 0, l = values.length; i < l; i++){
            result = callback(values[i]);
            if (result) return result;
        }
        return result;
    };
    /**
     * @return {boolean} Is empty.
     */ RBush1.prototype.isEmpty = function() {
        return (0, _objJs.isEmpty)(this.items_);
    };
    /**
     * Remove all values from the RBush.
     */ RBush1.prototype.clear = function() {
        this.rbush_.clear();
        this.items_ = {};
    };
    /**
     * @param {import("../extent.js").Extent} [opt_extent] Extent.
     * @return {import("../extent.js").Extent} Extent.
     */ RBush1.prototype.getExtent = function(opt_extent) {
        var data = this.rbush_.toJSON();
        return (0, _extentJs.createOrUpdate)(data.minX, data.minY, data.maxX, data.maxY, opt_extent);
    };
    /**
     * @param {RBush} rbush R-Tree.
     */ RBush1.prototype.concat = function(rbush) {
        this.rbush_.load(rbush.rbush_.all());
        for(var i in rbush.items_)this.items_[i] = rbush.items_[i];
    };
    return RBush1;
}();
exports.default = RBush;

},{"rbush":"k2VZu","../extent.js":"6YrVc","../util.js":"pLBjQ","../obj.js":"3ssAG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bgZ4G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/source/Source
 */ var _objectJs = require("../Object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _stateJs = require("./State.js");
var _stateJsDefault = parcelHelpers.interopDefault(_stateJs);
var _utilJs = require("../util.js");
var _projJs = require("../proj.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * A function that takes a {@link module:ol/PluggableMap~FrameState} and returns a string or
 * an array of strings representing source attributions.
 *
 * @typedef {function(import("../PluggableMap.js").FrameState): (string|Array<string>)} Attribution
 */ /**
 * A type that can be used to provide attribution information for data sources.
 *
 * It represents either
 * * a simple string (e.g. `'© Acme Inc.'`)
 * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)
 * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})
 *
 * @typedef {string|Array<string>|Attribution} AttributionLike
 */ /**
 * @typedef {Object} Options
 * @property {AttributionLike} [attributions] Attributions.
 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
 * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
 * @property {import("./State.js").default} [state='ready'] State.
 * @property {boolean} [wrapX=false] WrapX.
 * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
 * the nearest neighbor is used when resampling.
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for {@link module:ol/layer/Layer~Layer} sources.
 *
 * A generic `change` event is triggered when the state of the source changes.
 * @abstract
 * @api
 */ var Source = /** @class */ function(_super) {
    __extends(Source1, _super);
    /**
     * @param {Options} options Source options.
     */ function Source1(options) {
        var _this = _super.call(this) || this;
        /**
         * @protected
         * @type {import("../proj/Projection.js").default}
         */ _this.projection = (0, _projJs.get)(options.projection);
        /**
         * @private
         * @type {?Attribution}
         */ _this.attributions_ = adaptAttributions(options.attributions);
        /**
         * @private
         * @type {boolean}
         */ _this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ? options.attributionsCollapsible : true;
        /**
         * This source is currently loading data. Sources that defer loading to the
         * map's tile queue never set this to `true`.
         * @type {boolean}
         */ _this.loading = false;
        /**
         * @private
         * @type {import("./State.js").default}
         */ _this.state_ = options.state !== undefined ? options.state : (0, _stateJsDefault.default).READY;
        /**
         * @private
         * @type {boolean}
         */ _this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;
        /**
         * @private
         * @type {boolean}
         */ _this.interpolate_ = !!options.interpolate;
        /**
         * @protected
         * @type {function(import("../View.js").ViewOptions):void}
         */ _this.viewResolver = null;
        /**
         * @protected
         * @type {function(Error):void}
         */ _this.viewRejector = null;
        var self = _this;
        /**
         * @private
         * @type {Promise<import("../View.js").ViewOptions>}
         */ _this.viewPromise_ = new Promise(function(resolve, reject) {
            self.viewResolver = resolve;
            self.viewRejector = reject;
        });
        return _this;
    }
    /**
     * Get the attribution function for the source.
     * @return {?Attribution} Attribution function.
     * @api
     */ Source1.prototype.getAttributions = function() {
        return this.attributions_;
    };
    /**
     * @return {boolean} Attributions are collapsible.
     * @api
     */ Source1.prototype.getAttributionsCollapsible = function() {
        return this.attributionsCollapsible_;
    };
    /**
     * Get the projection of the source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     */ Source1.prototype.getProjection = function() {
        return this.projection;
    };
    /**
     * @abstract
     * @return {Array<number>|null} Resolutions.
     */ Source1.prototype.getResolutions = function() {
        return (0, _utilJs.abstract)();
    };
    /**
     * @return {Promise<import("../View.js").ViewOptions>} A promise for view-related properties.
     */ Source1.prototype.getView = function() {
        return this.viewPromise_;
    };
    /**
     * Get the state of the source, see {@link module:ol/source/State~State} for possible states.
     * @return {import("./State.js").default} State.
     * @api
     */ Source1.prototype.getState = function() {
        return this.state_;
    };
    /**
     * @return {boolean|undefined} Wrap X.
     */ Source1.prototype.getWrapX = function() {
        return this.wrapX_;
    };
    /**
     * @return {boolean} Use linear interpolation when resampling.
     */ Source1.prototype.getInterpolate = function() {
        return this.interpolate_;
    };
    /**
     * Refreshes the source. The source will be cleared, and data from the server will be reloaded.
     * @api
     */ Source1.prototype.refresh = function() {
        this.changed();
    };
    /**
     * Set the attributions of the source.
     * @param {AttributionLike|undefined} attributions Attributions.
     *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},
     *     or `undefined`.
     * @api
     */ Source1.prototype.setAttributions = function(attributions) {
        this.attributions_ = adaptAttributions(attributions);
        this.changed();
    };
    /**
     * Set the state of the source.
     * @param {import("./State.js").default} state State.
     */ Source1.prototype.setState = function(state) {
        this.state_ = state;
        this.changed();
    };
    return Source1;
}((0, _objectJsDefault.default));
/**
 * Turns the attributions option into an attributions function.
 * @param {AttributionLike|undefined} attributionLike The attribution option.
 * @return {Attribution|null} An attribution function (or null).
 */ function adaptAttributions(attributionLike) {
    if (!attributionLike) return null;
    if (Array.isArray(attributionLike)) return function(frameState) {
        return attributionLike;
    };
    if (typeof attributionLike === "function") return attributionLike;
    return function(frameState) {
        return [
            attributionLike
        ];
    };
}
exports.default = Source;

},{"../Object.js":"1zG8z","./State.js":"gW573","../util.js":"pLBjQ","../proj.js":"SznqC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6IruY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/source/VectorEventType
 */ /**
 * @enum {string}
 */ exports.default = {
    /**
     * Triggered when a feature is added to the source.
     * @event module:ol/source/Vector.VectorSourceEvent#addfeature
     * @api
     */ ADDFEATURE: "addfeature",
    /**
     * Triggered when a feature is updated.
     * @event module:ol/source/Vector.VectorSourceEvent#changefeature
     * @api
     */ CHANGEFEATURE: "changefeature",
    /**
     * Triggered when the clear method is called on the source.
     * @event module:ol/source/Vector.VectorSourceEvent#clear
     * @api
     */ CLEAR: "clear",
    /**
     * Triggered when a feature is removed from the source.
     * See {@link module:ol/source/Vector~VectorSource#clear source.clear()} for exceptions.
     * @event module:ol/source/Vector.VectorSourceEvent#removefeature
     * @api
     */ REMOVEFEATURE: "removefeature",
    /**
     * Triggered when features starts loading.
     * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart
     * @api
     */ FEATURESLOADSTART: "featuresloadstart",
    /**
     * Triggered when features finishes loading.
     * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend
     * @api
     */ FEATURESLOADEND: "featuresloadend",
    /**
     * Triggered if feature loading results in an error.
     * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror
     * @api
     */ FEATURESLOADERROR: "featuresloaderror"
}; /**
 * @typedef {'addfeature'|'changefeature'|'clear'|'removefeature'|'featuresloadstart'|'featuresloadend'|'featuresloaderror'} VectorSourceEventTypes
 */ 

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i1BBH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Strategy function for loading all features with a single request.
 * @param {import("./extent.js").Extent} extent Extent.
 * @param {number} resolution Resolution.
 * @return {Array<import("./extent.js").Extent>} Extents.
 * @api
 */ parcelHelpers.export(exports, "all", ()=>all);
/**
 * Strategy function for loading features based on the view's extent and
 * resolution.
 * @param {import("./extent.js").Extent} extent Extent.
 * @param {number} resolution Resolution.
 * @return {Array<import("./extent.js").Extent>} Extents.
 * @api
 */ parcelHelpers.export(exports, "bbox", ()=>bbox);
/**
 * Creates a strategy function for loading features based on a tile grid.
 * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
 * @return {function(import("./extent.js").Extent, number, import("./proj.js").Projection): Array<import("./extent.js").Extent>} Loading strategy.
 * @api
 */ parcelHelpers.export(exports, "tile", ()=>tile);
/**
 * @module ol/loadingstrategy
 */ var _projJs = require("./proj.js");
function all(extent, resolution) {
    return [
        [
            -Infinity,
            -Infinity,
            Infinity,
            Infinity
        ]
    ];
}
function bbox(extent, resolution) {
    return [
        extent
    ];
}
function tile(tileGrid) {
    return(/**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("./proj.js").Projection} projection Projection.
     * @return {Array<import("./extent.js").Extent>} Extents.
     */ function(extent, resolution, projection) {
        var z = tileGrid.getZForResolution((0, _projJs.fromUserResolution)(resolution, projection));
        var tileRange = tileGrid.getTileRangeForExtentAndZ((0, _projJs.fromUserExtent)(extent, projection), z);
        /** @type {Array<import("./extent.js").Extent>} */ var extents = [];
        /** @type {import("./tilecoord.js").TileCoord} */ var tileCoord = [
            z,
            0,
            0
        ];
        for(tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1])for(tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2])extents.push((0, _projJs.toUserExtent)(tileGrid.getTileCoordExtent(tileCoord), projection));
        return extents;
    });
}

},{"./proj.js":"SznqC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"csnhK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to
 * load features.
 *
 * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing
 * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an
 * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get
 * the loaded features passed as an argument and an optional failure callback with no arguments. If
 * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and
 * `'featuresloaderror'` events. `this` within the function is bound to the
 * {@link module:ol/source/Vector~VectorSource} it's called from.
 *
 * The function is responsible for loading the features and adding them to the
 * source.
 * @typedef {function(this:(import("./source/Vector").default|import("./VectorTile.js").default),
 *           import("./extent.js").Extent,
 *           number,
 *           import("./proj/Projection.js").default,
 *           function(Array<import("./Feature.js").default>): void=,
 *           function(): void=): void} FeatureLoader
 * @api
 */ /**
 * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to
 * get the url to load features from.
 *
 * This function takes an {@link module:ol/extent~Extent} representing the area
 * to be loaded, a `{number}` representing the resolution (map units per pixel)
 * and an {@link module:ol/proj/Projection~Projection} for the projection  as
 * arguments and returns a `{string}` representing the URL.
 * @typedef {function(import("./extent.js").Extent, number, import("./proj/Projection.js").default): string} FeatureUrlFunction
 * @api
 */ /**
 * @param {string|FeatureUrlFunction} url Feature URL service.
 * @param {import("./format/Feature.js").default} format Feature format.
 * @param {import("./extent.js").Extent} extent Extent.
 * @param {number} resolution Resolution.
 * @param {import("./proj/Projection.js").default} projection Projection.
 * @param {function(Array<import("./Feature.js").default>, import("./proj/Projection.js").default): void} success Success
 *      Function called with the loaded features and optionally with the data projection.
 * @param {function(): void} failure Failure
 *      Function called when loading failed.
 */ parcelHelpers.export(exports, "loadFeaturesXhr", ()=>loadFeaturesXhr);
/**
 * Create an XHR feature loader for a `url` and `format`. The feature loader
 * loads features (with XHR), parses the features, and adds them to the
 * vector source.
 * @param {string|FeatureUrlFunction} url Feature URL service.
 * @param {import("./format/Feature.js").default} format Feature format.
 * @return {FeatureLoader} The feature loader.
 * @api
 */ parcelHelpers.export(exports, "xhr", ()=>xhr);
/**
 * Setter for the withCredentials configuration for the XHR.
 *
 * @param {boolean} xhrWithCredentials The value of withCredentials to set.
 * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/
 * @api
 */ parcelHelpers.export(exports, "setWithCredentials", ()=>setWithCredentials);
/**
 * @module ol/featureloader
 */ var _formatTypeJs = require("./format/FormatType.js");
var _formatTypeJsDefault = parcelHelpers.interopDefault(_formatTypeJs);
var _functionsJs = require("./functions.js");
/**
 *
 * @type {boolean}
 * @private
 */ var withCredentials = false;
function loadFeaturesXhr(url, format, extent, resolution, projection, success, failure) {
    var xhr1 = new XMLHttpRequest();
    xhr1.open("GET", typeof url === "function" ? url(extent, resolution, projection) : url, true);
    if (format.getType() == (0, _formatTypeJsDefault.default).ARRAY_BUFFER) xhr1.responseType = "arraybuffer";
    xhr1.withCredentials = withCredentials;
    /**
     * @param {Event} event Event.
     * @private
     */ xhr1.onload = function(event) {
        // status will be 0 for file:// urls
        if (!xhr1.status || xhr1.status >= 200 && xhr1.status < 300) {
            var type = format.getType();
            /** @type {Document|Node|Object|string|undefined} */ var source = void 0;
            if (type == (0, _formatTypeJsDefault.default).JSON || type == (0, _formatTypeJsDefault.default).TEXT) source = xhr1.responseText;
            else if (type == (0, _formatTypeJsDefault.default).XML) {
                source = xhr1.responseXML;
                if (!source) source = new DOMParser().parseFromString(xhr1.responseText, "application/xml");
            } else if (type == (0, _formatTypeJsDefault.default).ARRAY_BUFFER) source = xhr1.response;
            if (source) success(/** @type {Array<import("./Feature.js").default>} */ format.readFeatures(source, {
                extent: extent,
                featureProjection: projection
            }), format.readProjection(source));
            else failure();
        } else failure();
    };
    /**
     * @private
     */ xhr1.onerror = failure;
    xhr1.send();
}
function xhr(url, format) {
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @param {function(Array<import("./Feature.js").default>): void} [success] Success
     *      Function called when loading succeeded.
     * @param {function(): void} [failure] Failure
     *      Function called when loading failed.
     * @this {import("./source/Vector").default}
     */ return function(extent, resolution, projection, success, failure) {
        var source = this;
        loadFeaturesXhr(url, format, extent, resolution, projection, /**
         * @param {Array<import("./Feature.js").default>} features The loaded features.
         * @param {import("./proj/Projection.js").default} dataProjection Data
         * projection.
         */ function(features, dataProjection) {
            source.addFeatures(features);
            if (success !== undefined) success(features);
        }, /* FIXME handle error */ failure ? failure : (0, _functionsJs.VOID));
    };
}
function setWithCredentials(xhrWithCredentials) {
    withCredentials = xhrWithCredentials;
}

},{"./format/FormatType.js":"cQiMP","./functions.js":"iqv8I","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hCfsz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ExtentEvent", ()=>ExtentEvent);
/**
 * @module ol/interaction/Extent
 */ var _eventJs = require("../events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _featureJs = require("../Feature.js");
var _featureJsDefault = parcelHelpers.interopDefault(_featureJs);
var _geometryTypeJs = require("../geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _mapBrowserEventTypeJs = require("../MapBrowserEventType.js");
var _mapBrowserEventTypeJsDefault = parcelHelpers.interopDefault(_mapBrowserEventTypeJs);
var _pointJs = require("../geom/Point.js");
var _pointJsDefault = parcelHelpers.interopDefault(_pointJs);
var _pointerJs = require("./Pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _vectorJs = require("../layer/Vector.js");
var _vectorJsDefault = parcelHelpers.interopDefault(_vectorJs);
var _vectorJs1 = require("../source/Vector.js");
var _vectorJsDefault1 = parcelHelpers.interopDefault(_vectorJs1);
var _conditionJs = require("../events/condition.js");
var _extentJs = require("../extent.js");
var _coordinateJs = require("../coordinate.js");
var _styleJs = require("../style/Style.js");
var _polygonJs = require("../geom/Polygon.js");
var _projJs = require("../proj.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled.
 * Default is {@link module:ol/events/condition.always}.
 * @property {import("../extent.js").Extent} [extent] Initial extent. Defaults to no
 * initial extent.
 * @property {import("../style/Style.js").StyleLike} [boxStyle]
 * Style for the drawn extent box. Defaults to the `Polygon` editing style
 * documented in {@link module:ol/style/Style~Style}
 * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
 * pointer close enough to a segment or vertex for editing.
 * @property {import("../style/Style.js").StyleLike} [pointerStyle]
 * Style for the cursor used to draw the extent. Defaults to the `Point` editing style
 * documented in {@link module:ol/style/Style~Style}
 * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps
 * in the X direction? Only affects visuals, not functionality.
 */ /**
 * @enum {string}
 */ var ExtentEventType = {
    /**
     * Triggered after the extent is changed
     * @event ExtentEvent#extentchanged
     * @api
     */ EXTENTCHANGED: "extentchanged"
};
/**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are
 * instances of this type.
 */ var ExtentEvent = /** @class */ function(_super) {
    __extends(ExtentEvent1, _super);
    /**
     * @param {import("../extent.js").Extent} extent the new extent
     */ function ExtentEvent1(extent) {
        var _this = _super.call(this, ExtentEventType.EXTENTCHANGED) || this;
        /**
         * The current extent.
         * @type {import("../extent.js").Extent}
         * @api
         */ _this.extent = extent;
        return _this;
    }
    return ExtentEvent1;
}((0, _eventJsDefault.default));
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
 *     'change:active', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<'extentchanged', ExtentEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     'change:active'|'extentchanged', Return>} ExtentOnSignature
 */ /**
 * @classdesc
 * Allows the user to draw a vector box by clicking and dragging on the map.
 * Once drawn, the vector box can be modified by dragging its vertices or edges.
 * This interaction is only supported for mouse devices.
 *
 * @fires ExtentEvent
 * @api
 */ var Extent = /** @class */ function(_super) {
    __extends(Extent1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function Extent1(opt_options) {
        var _this = this;
        var options = opt_options || {};
        _this = _super.call(this, options) || this;
        /***
         * @type {ExtentOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {ExtentOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {ExtentOnSignature<void>}
         */ _this.un;
        /**
         * Condition
         * @type {import("../events/condition.js").Condition}
         * @private
         */ _this.condition_ = options.condition ? options.condition : (0, _conditionJs.always);
        /**
         * Extent of the drawn box
         * @type {import("../extent.js").Extent}
         * @private
         */ _this.extent_ = null;
        /**
         * Handler for pointer move events
         * @type {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent|null}
         * @private
         */ _this.pointerHandler_ = null;
        /**
         * Pixel threshold to snap to extent
         * @type {number}
         * @private
         */ _this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;
        /**
         * Is the pointer snapped to an extent vertex
         * @type {boolean}
         * @private
         */ _this.snappedToVertex_ = false;
        /**
         * Feature for displaying the visible extent
         * @type {Feature}
         * @private
         */ _this.extentFeature_ = null;
        /**
         * Feature for displaying the visible pointer
         * @type {Feature<Point>}
         * @private
         */ _this.vertexFeature_ = null;
        if (!opt_options) opt_options = {};
        /**
         * Layer for the extentFeature
         * @type {VectorLayer}
         * @private
         */ _this.extentOverlay_ = new (0, _vectorJsDefault.default)({
            source: new (0, _vectorJsDefault1.default)({
                useSpatialIndex: false,
                wrapX: !!opt_options.wrapX
            }),
            style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),
            updateWhileAnimating: true,
            updateWhileInteracting: true
        });
        /**
         * Layer for the vertexFeature
         * @type {VectorLayer}
         * @private
         */ _this.vertexOverlay_ = new (0, _vectorJsDefault.default)({
            source: new (0, _vectorJsDefault1.default)({
                useSpatialIndex: false,
                wrapX: !!opt_options.wrapX
            }),
            style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),
            updateWhileAnimating: true,
            updateWhileInteracting: true
        });
        if (opt_options.extent) _this.setExtent(opt_options.extent);
        return _this;
    }
    /**
     * @param {import("../pixel.js").Pixel} pixel cursor location
     * @param {import("../PluggableMap.js").default} map map
     * @return {import("../coordinate.js").Coordinate|null} snapped vertex on extent
     * @private
     */ Extent1.prototype.snapToVertex_ = function(pixel, map) {
        var pixelCoordinate = map.getCoordinateFromPixelInternal(pixel);
        var sortByDistance = function(a, b) {
            return (0, _coordinateJs.squaredDistanceToSegment)(pixelCoordinate, a) - (0, _coordinateJs.squaredDistanceToSegment)(pixelCoordinate, b);
        };
        var extent = this.getExtentInternal();
        if (extent) {
            //convert extents to line segments and find the segment closest to pixelCoordinate
            var segments = getSegments(extent);
            segments.sort(sortByDistance);
            var closestSegment = segments[0];
            var vertex = (0, _coordinateJs.closestOnSegment)(pixelCoordinate, closestSegment);
            var vertexPixel = map.getPixelFromCoordinateInternal(vertex);
            //if the distance is within tolerance, snap to the segment
            if ((0, _coordinateJs.distance)(pixel, vertexPixel) <= this.pixelTolerance_) {
                //test if we should further snap to a vertex
                var pixel1 = map.getPixelFromCoordinateInternal(closestSegment[0]);
                var pixel2 = map.getPixelFromCoordinateInternal(closestSegment[1]);
                var squaredDist1 = (0, _coordinateJs.squaredDistance)(vertexPixel, pixel1);
                var squaredDist2 = (0, _coordinateJs.squaredDistance)(vertexPixel, pixel2);
                var dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
                this.snappedToVertex_ = dist <= this.pixelTolerance_;
                if (this.snappedToVertex_) vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
                return vertex;
            }
        }
        return null;
    };
    /**
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent pointer move event
     * @private
     */ Extent1.prototype.handlePointerMove_ = function(mapBrowserEvent) {
        var pixel = mapBrowserEvent.pixel;
        var map = mapBrowserEvent.map;
        var vertex = this.snapToVertex_(pixel, map);
        if (!vertex) vertex = map.getCoordinateFromPixelInternal(pixel);
        this.createOrUpdatePointerFeature_(vertex);
    };
    /**
     * @param {import("../extent.js").Extent} extent extent
     * @return {Feature} extent as featrue
     * @private
     */ Extent1.prototype.createOrUpdateExtentFeature_ = function(extent) {
        var extentFeature = this.extentFeature_;
        if (!extentFeature) {
            if (!extent) extentFeature = new (0, _featureJsDefault.default)({});
            else extentFeature = new (0, _featureJsDefault.default)((0, _polygonJs.fromExtent)(extent));
            this.extentFeature_ = extentFeature;
            this.extentOverlay_.getSource().addFeature(extentFeature);
        } else if (!extent) extentFeature.setGeometry(undefined);
        else extentFeature.setGeometry((0, _polygonJs.fromExtent)(extent));
        return extentFeature;
    };
    /**
     * @param {import("../coordinate.js").Coordinate} vertex location of feature
     * @return {Feature} vertex as feature
     * @private
     */ Extent1.prototype.createOrUpdatePointerFeature_ = function(vertex) {
        var vertexFeature = this.vertexFeature_;
        if (!vertexFeature) {
            vertexFeature = new (0, _featureJsDefault.default)(new (0, _pointJsDefault.default)(vertex));
            this.vertexFeature_ = vertexFeature;
            this.vertexOverlay_.getSource().addFeature(vertexFeature);
        } else {
            var geometry = vertexFeature.getGeometry();
            geometry.setCoordinates(vertex);
        }
        return vertexFeature;
    };
    /**
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     */ Extent1.prototype.handleEvent = function(mapBrowserEvent) {
        if (!mapBrowserEvent.originalEvent || !this.condition_(mapBrowserEvent)) return true;
        //display pointer (if not dragging)
        if (mapBrowserEvent.type == (0, _mapBrowserEventTypeJsDefault.default).POINTERMOVE && !this.handlingDownUpSequence) this.handlePointerMove_(mapBrowserEvent);
        //call pointer to determine up/down/drag
        _super.prototype.handleEvent.call(this, mapBrowserEvent);
        //return false to stop propagation
        return false;
    };
    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ Extent1.prototype.handleDownEvent = function(mapBrowserEvent) {
        var pixel = mapBrowserEvent.pixel;
        var map = mapBrowserEvent.map;
        var extent = this.getExtentInternal();
        var vertex = this.snapToVertex_(pixel, map);
        //find the extent corner opposite the passed corner
        var getOpposingPoint = function(point) {
            var x_ = null;
            var y_ = null;
            if (point[0] == extent[0]) x_ = extent[2];
            else if (point[0] == extent[2]) x_ = extent[0];
            if (point[1] == extent[1]) y_ = extent[3];
            else if (point[1] == extent[3]) y_ = extent[1];
            if (x_ !== null && y_ !== null) return [
                x_,
                y_
            ];
            return null;
        };
        if (vertex && extent) {
            var x = vertex[0] == extent[0] || vertex[0] == extent[2] ? vertex[0] : null;
            var y = vertex[1] == extent[1] || vertex[1] == extent[3] ? vertex[1] : null;
            //snap to point
            if (x !== null && y !== null) this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));
            else if (x !== null) this.pointerHandler_ = getEdgeHandler(getOpposingPoint([
                x,
                extent[1]
            ]), getOpposingPoint([
                x,
                extent[3]
            ]));
            else if (y !== null) this.pointerHandler_ = getEdgeHandler(getOpposingPoint([
                extent[0],
                y
            ]), getOpposingPoint([
                extent[2],
                y
            ]));
        //no snap - new bbox
        } else {
            vertex = map.getCoordinateFromPixelInternal(pixel);
            this.setExtent([
                vertex[0],
                vertex[1],
                vertex[0],
                vertex[1]
            ]);
            this.pointerHandler_ = getPointHandler(vertex);
        }
        return true; //event handled; start downup sequence
    };
    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */ Extent1.prototype.handleDragEvent = function(mapBrowserEvent) {
        if (this.pointerHandler_) {
            var pixelCoordinate = mapBrowserEvent.coordinate;
            this.setExtent(this.pointerHandler_(pixelCoordinate));
            this.createOrUpdatePointerFeature_(pixelCoordinate);
        }
    };
    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */ Extent1.prototype.handleUpEvent = function(mapBrowserEvent) {
        this.pointerHandler_ = null;
        //If bbox is zero area, set to null;
        var extent = this.getExtentInternal();
        if (!extent || (0, _extentJs.getArea)(extent) === 0) this.setExtent(null);
        return false; //Stop handling downup sequence
    };
    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default} map Map.
     */ Extent1.prototype.setMap = function(map) {
        this.extentOverlay_.setMap(map);
        this.vertexOverlay_.setMap(map);
        _super.prototype.setMap.call(this, map);
    };
    /**
     * Returns the current drawn extent in the view projection (or user projection if set)
     *
     * @return {import("../extent.js").Extent} Drawn extent in the view projection.
     * @api
     */ Extent1.prototype.getExtent = function() {
        return (0, _projJs.toUserExtent)(this.getExtentInternal(), this.getMap().getView().getProjection());
    };
    /**
     * Returns the current drawn extent in the view projection
     *
     * @return {import("../extent.js").Extent} Drawn extent in the view projection.
     * @api
     */ Extent1.prototype.getExtentInternal = function() {
        return this.extent_;
    };
    /**
     * Manually sets the drawn extent, using the view projection.
     *
     * @param {import("../extent.js").Extent} extent Extent
     * @api
     */ Extent1.prototype.setExtent = function(extent) {
        //Null extent means no bbox
        this.extent_ = extent ? extent : null;
        this.createOrUpdateExtentFeature_(extent);
        this.dispatchEvent(new ExtentEvent(this.extent_));
    };
    return Extent1;
}((0, _pointerJsDefault.default));
/**
 * Returns the default style for the drawn bbox
 *
 * @return {import("../style/Style.js").StyleFunction} Default Extent style
 */ function getDefaultExtentStyleFunction() {
    var style = (0, _styleJs.createEditingStyle)();
    return function(feature, resolution) {
        return style[(0, _geometryTypeJsDefault.default).POLYGON];
    };
}
/**
 * Returns the default style for the pointer
 *
 * @return {import("../style/Style.js").StyleFunction} Default pointer style
 */ function getDefaultPointerStyleFunction() {
    var style = (0, _styleJs.createEditingStyle)();
    return function(feature, resolution) {
        return style[(0, _geometryTypeJsDefault.default).POINT];
    };
}
/**
 * @param {import("../coordinate.js").Coordinate} fixedPoint corner that will be unchanged in the new extent
 * @return {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent} event handler
 */ function getPointHandler(fixedPoint) {
    return function(point) {
        return (0, _extentJs.boundingExtent)([
            fixedPoint,
            point
        ]);
    };
}
/**
 * @param {import("../coordinate.js").Coordinate} fixedP1 first corner that will be unchanged in the new extent
 * @param {import("../coordinate.js").Coordinate} fixedP2 second corner that will be unchanged in the new extent
 * @return {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent|null} event handler
 */ function getEdgeHandler(fixedP1, fixedP2) {
    if (fixedP1[0] == fixedP2[0]) return function(point) {
        return (0, _extentJs.boundingExtent)([
            fixedP1,
            [
                point[0],
                fixedP2[1]
            ]
        ]);
    };
    else if (fixedP1[1] == fixedP2[1]) return function(point) {
        return (0, _extentJs.boundingExtent)([
            fixedP1,
            [
                fixedP2[0],
                point[1]
            ]
        ]);
    };
    else return null;
}
/**
 * @param {import("../extent.js").Extent} extent extent
 * @return {Array<Array<import("../coordinate.js").Coordinate>>} extent line segments
 */ function getSegments(extent) {
    return [
        [
            [
                extent[0],
                extent[1]
            ],
            [
                extent[0],
                extent[3]
            ], 
        ],
        [
            [
                extent[0],
                extent[3]
            ],
            [
                extent[2],
                extent[3]
            ], 
        ],
        [
            [
                extent[2],
                extent[3]
            ],
            [
                extent[2],
                extent[1]
            ], 
        ],
        [
            [
                extent[2],
                extent[1]
            ],
            [
                extent[0],
                extent[1]
            ], 
        ], 
    ];
}
exports.default = Extent;

},{"../events/Event.js":"hwXQP","../Feature.js":"liabO","../geom/GeometryType.js":"j6daa","../MapBrowserEventType.js":"fB9ae","../geom/Point.js":"hx2Ar","./Pointer.js":"1GIxf","../layer/Vector.js":"iTrAy","../source/Vector.js":"9w7Fr","../events/condition.js":"iQTYY","../extent.js":"6YrVc","../coordinate.js":"85Vu7","../style/Style.js":"fW7vC","../geom/Polygon.js":"cJuQF","../proj.js":"SznqC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4T7TT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModifyEvent", ()=>ModifyEvent);
/**
 * @module ol/interaction/Modify
 */ var _collectionJs = require("../Collection.js");
var _collectionJsDefault = parcelHelpers.interopDefault(_collectionJs);
var _collectionEventTypeJs = require("../CollectionEventType.js");
var _collectionEventTypeJsDefault = parcelHelpers.interopDefault(_collectionEventTypeJs);
var _eventJs = require("../events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _featureJs = require("../Feature.js");
var _featureJsDefault = parcelHelpers.interopDefault(_featureJs);
var _geometryTypeJs = require("../geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _mapBrowserEventTypeJs = require("../MapBrowserEventType.js");
var _mapBrowserEventTypeJsDefault = parcelHelpers.interopDefault(_mapBrowserEventTypeJs);
var _pointJs = require("../geom/Point.js");
var _pointJsDefault = parcelHelpers.interopDefault(_pointJs);
var _pointerJs = require("./Pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _rbushJs = require("../structs/RBush.js");
var _rbushJsDefault = parcelHelpers.interopDefault(_rbushJs);
var _vectorEventTypeJs = require("../source/VectorEventType.js");
var _vectorEventTypeJsDefault = parcelHelpers.interopDefault(_vectorEventTypeJs);
var _vectorJs = require("../layer/Vector.js");
var _vectorJsDefault = parcelHelpers.interopDefault(_vectorJs);
var _vectorJs1 = require("../source/Vector.js");
var _vectorJsDefault1 = parcelHelpers.interopDefault(_vectorJs1);
var _conditionJs = require("../events/condition.js");
var _extentJs = require("../extent.js");
var _coordinateJs = require("../coordinate.js");
var _styleJs = require("../style/Style.js");
var _arrayJs = require("../array.js");
var _polygonJs = require("../geom/Polygon.js");
var _projJs = require("../proj.js");
var _utilJs = require("../util.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * The segment index assigned to a circle's center when
 * breaking up a circle into ModifySegmentDataType segments.
 * @type {number}
 */ var CIRCLE_CENTER_INDEX = 0;
/**
 * The segment index assigned to a circle's circumference when
 * breaking up a circle into ModifySegmentDataType segments.
 * @type {number}
 */ var CIRCLE_CIRCUMFERENCE_INDEX = 1;
var tempExtent = [
    0,
    0,
    0,
    0
];
var tempSegment = [];
/**
 * @enum {string}
 */ var ModifyEventType = {
    /**
     * Triggered upon feature modification start
     * @event ModifyEvent#modifystart
     * @api
     */ MODIFYSTART: "modifystart",
    /**
     * Triggered upon feature modification end
     * @event ModifyEvent#modifyend
     * @api
     */ MODIFYEND: "modifyend"
};
/**
 * @typedef {Object} SegmentData
 * @property {Array<number>} [depth] Depth.
 * @property {import("../Feature").FeatureLike} feature Feature.
 * @property {import("../geom/SimpleGeometry.js").default} geometry Geometry.
 * @property {number} [index] Index.
 * @property {Array<Array<number>>} segment Segment.
 * @property {Array<SegmentData>} [featureSegments] FeatureSegments.
 */ /**
 * @typedef {Object} Options
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event will be considered to add or move a
 * vertex to the sketch. Default is
 * {@link module:ol/events/condition.primaryAction}.
 * @property {import("../events/condition.js").Condition} [deleteCondition] A function
 * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. By default,
 * {@link module:ol/events/condition.singleClick} with
 * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.
 * @property {import("../events/condition.js").Condition} [insertVertexCondition] A
 * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
 * returns a boolean to indicate whether a new vertex should be added to the sketch
 * features. Default is {@link module:ol/events/condition.always}.
 * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
 * pointer close enough to a segment or vertex for editing.
 * @property {import("../style/Style.js").StyleLike} [style]
 * Style used for the modification point or vertex. For linestrings and polygons, this will
 * be the affected vertex, for circles a point along the circle, and for points the actual
 * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).
 * When using a style function, the point feature passed to the function will have a `features`
 * property - an array whose entries are the features that are being modified, and a `geometries`
 * property - an array whose entries are the geometries that are being modified. Both arrays are
 * in the same order. The `geometries` are only useful when modifying geometry collections, where
 * the geometry will be the particular geometry from the collection that is being modified.
 * @property {VectorSource} [source] The vector source with
 * features to modify.  If a vector source is not provided, a feature collection
 * must be provided with the `features` option.
 * @property {boolean|import("../layer/BaseVector").default} [hitDetection] When configured, point
 * features will be considered for modification based on their visual appearance, instead of being within
 * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is
 * provided, only the rendered representation of the features on that layer will be considered.
 * @property {Collection<Feature>} [features]
 * The features the interaction works on.  If a feature collection is not
 * provided, a vector source must be provided with the `source` option.
 * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
 * overlay.
 * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the
 * pointer coordinate when clicked within the `pixelTolerance`.
 */ /**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are
 * instances of this type.
 */ var ModifyEvent = /** @class */ function(_super) {
    __extends(ModifyEvent1, _super);
    /**
     * @param {ModifyEventType} type Type.
     * @param {Collection<import("../Feature").FeatureLike>} features
     * The features modified.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent
     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
     */ function ModifyEvent1(type, features, mapBrowserEvent) {
        var _this = _super.call(this, type) || this;
        /**
         * The features being modified.
         * @type {Collection<import("../Feature").FeatureLike>}
         * @api
         */ _this.features = features;
        /**
         * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
         * @type {import("../MapBrowserEvent.js").default}
         * @api
         */ _this.mapBrowserEvent = mapBrowserEvent;
        return _this;
    }
    return ModifyEvent1;
}((0, _eventJsDefault.default));
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
 *     'change:active', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature
 */ /**
 * @classdesc
 * Interaction for modifying feature geometries.  To modify features that have
 * been added to an existing source, construct the modify interaction with the
 * `source` option.  If you want to modify features in a collection (for example,
 * the collection used by a select interaction), construct the interaction with
 * the `features` option.  The interaction must be constructed with either a
 * `source` or `features` option.
 *
 * Cartesian distance from the pointer is used to determine the features that
 * will be modified. This means that geometries will only be considered for
 * modification when they are within the configured `pixelTolerance`. For point
 * geometries, the `hitDetection` option can be used to match their visual
 * appearance.
 *
 * By default, the interaction will allow deletion of vertices when the `alt`
 * key is pressed.  To configure the interaction with a different condition
 * for deletion, use the `deleteCondition` option.
 * @fires ModifyEvent
 * @api
 */ var Modify = /** @class */ function(_super) {
    __extends(Modify1, _super);
    /**
     * @param {Options} options Options.
     */ function Modify1(options) {
        var _this = _super.call(this, options) || this;
        /***
         * @type {ModifyOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {ModifyOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {ModifyOnSignature<void>}
         */ _this.un;
        /** @private */ _this.boundHandleFeatureChange_ = _this.handleFeatureChange_.bind(_this);
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.condition_ = options.condition ? options.condition : (0, _conditionJs.primaryAction);
        /**
         * @private
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
         * @return {boolean} Combined condition result.
         */ _this.defaultDeleteCondition_ = function(mapBrowserEvent) {
            return (0, _conditionJs.altKeyOnly)(mapBrowserEvent) && (0, _conditionJs.singleClick)(mapBrowserEvent);
        };
        /**
         * @type {import("../events/condition.js").Condition}
         * @private
         */ _this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : _this.defaultDeleteCondition_;
        /**
         * @type {import("../events/condition.js").Condition}
         * @private
         */ _this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : (0, _conditionJs.always);
        /**
         * Editing vertex.
         * @type {Feature<Point>}
         * @private
         */ _this.vertexFeature_ = null;
        /**
         * Segments intersecting {@link this.vertexFeature_} by segment uid.
         * @type {Object<string, boolean>}
         * @private
         */ _this.vertexSegments_ = null;
        /**
         * @type {import("../pixel.js").Pixel}
         * @private
         */ _this.lastPixel_ = [
            0,
            0
        ];
        /**
         * Tracks if the next `singleclick` event should be ignored to prevent
         * accidental deletion right after vertex creation.
         * @type {boolean}
         * @private
         */ _this.ignoreNextSingleClick_ = false;
        /**
         * @type {Collection<import("../Feature").FeatureLike>}
         * @private
         */ _this.featuresBeingModified_ = null;
        /**
         * Segment RTree for each layer
         * @type {RBush<SegmentData>}
         * @private
         */ _this.rBush_ = new (0, _rbushJsDefault.default)();
        /**
         * @type {number}
         * @private
         */ _this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;
        /**
         * @type {boolean}
         * @private
         */ _this.snappedToVertex_ = false;
        /**
         * Indicate whether the interaction is currently changing a feature's
         * coordinates.
         * @type {boolean}
         * @private
         */ _this.changingFeature_ = false;
        /**
         * @type {Array}
         * @private
         */ _this.dragSegments_ = [];
        /**
         * Draw overlay where sketch features are drawn.
         * @type {VectorLayer}
         * @private
         */ _this.overlay_ = new (0, _vectorJsDefault.default)({
            source: new (0, _vectorJsDefault1.default)({
                useSpatialIndex: false,
                wrapX: !!options.wrapX
            }),
            style: options.style ? options.style : getDefaultStyleFunction(),
            updateWhileAnimating: true,
            updateWhileInteracting: true
        });
        /**
         * @const
         * @private
         * @type {!Object<string, function(Feature, import("../geom/Geometry.js").default): void>}
         */ _this.SEGMENT_WRITERS_ = {
            "Point": _this.writePointGeometry_.bind(_this),
            "LineString": _this.writeLineStringGeometry_.bind(_this),
            "LinearRing": _this.writeLineStringGeometry_.bind(_this),
            "Polygon": _this.writePolygonGeometry_.bind(_this),
            "MultiPoint": _this.writeMultiPointGeometry_.bind(_this),
            "MultiLineString": _this.writeMultiLineStringGeometry_.bind(_this),
            "MultiPolygon": _this.writeMultiPolygonGeometry_.bind(_this),
            "Circle": _this.writeCircleGeometry_.bind(_this),
            "GeometryCollection": _this.writeGeometryCollectionGeometry_.bind(_this)
        };
        /**
         * @type {VectorSource}
         * @private
         */ _this.source_ = null;
        /**
         * @type {boolean|import("../layer/BaseVector").default}
         */ _this.hitDetection_ = null;
        var features;
        if (options.features) features = options.features;
        else if (options.source) {
            _this.source_ = options.source;
            features = new (0, _collectionJsDefault.default)(_this.source_.getFeatures());
            _this.source_.addEventListener((0, _vectorEventTypeJsDefault.default).ADDFEATURE, _this.handleSourceAdd_.bind(_this));
            _this.source_.addEventListener((0, _vectorEventTypeJsDefault.default).REMOVEFEATURE, _this.handleSourceRemove_.bind(_this));
        }
        if (!features) throw new Error("The modify interaction requires features, a source or a layer");
        if (options.hitDetection) _this.hitDetection_ = options.hitDetection;
        /**
         * @type {Collection<import("../Feature.js").FeatureLike>}
         * @private
         */ _this.features_ = features;
        _this.features_.forEach(_this.addFeature_.bind(_this));
        _this.features_.addEventListener((0, _collectionEventTypeJsDefault.default).ADD, _this.handleFeatureAdd_.bind(_this));
        _this.features_.addEventListener((0, _collectionEventTypeJsDefault.default).REMOVE, _this.handleFeatureRemove_.bind(_this));
        /**
         * @type {import("../MapBrowserEvent.js").default}
         * @private
         */ _this.lastPointerEvent_ = null;
        /**
         * Delta (x, y in map units) between matched rtree vertex and pointer vertex.
         * @type {Array<number>}
         */ _this.delta_ = [
            0,
            0
        ];
        /**
         * @private
         */ _this.snapToPointer_ = options.snapToPointer === undefined ? !_this.hitDetection_ : options.snapToPointer;
        return _this;
    }
    /**
     * @param {Feature} feature Feature.
     * @private
     */ Modify1.prototype.addFeature_ = function(feature) {
        var geometry = feature.getGeometry();
        if (geometry) {
            var writer = this.SEGMENT_WRITERS_[geometry.getType()];
            if (writer) writer(feature, geometry);
        }
        var map = this.getMap();
        if (map && map.isRendered() && this.getActive()) this.handlePointerAtPixel_(this.lastPixel_, map);
        feature.addEventListener((0, _eventTypeJsDefault.default).CHANGE, this.boundHandleFeatureChange_);
    };
    /**
     * @param {import("../MapBrowserEvent.js").default} evt Map browser event.
     * @param {Array<Array<SegmentData>>} segments The segments subject to modification.
     * @private
     */ Modify1.prototype.willModifyFeatures_ = function(evt, segments) {
        if (!this.featuresBeingModified_) {
            this.featuresBeingModified_ = new (0, _collectionJsDefault.default)();
            var features = this.featuresBeingModified_.getArray();
            for(var i = 0, ii = segments.length; i < ii; ++i){
                var segment = segments[i];
                for(var s = 0, ss = segment.length; s < ss; ++s){
                    var feature = segment[s].feature;
                    if (feature && features.indexOf(feature) === -1) this.featuresBeingModified_.push(feature);
                }
            }
            if (this.featuresBeingModified_.getLength() === 0) this.featuresBeingModified_ = null;
            else this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.featuresBeingModified_, evt));
        }
    };
    /**
     * @param {Feature} feature Feature.
     * @private
     */ Modify1.prototype.removeFeature_ = function(feature) {
        this.removeFeatureSegmentData_(feature);
        // Remove the vertex feature if the collection of candidate features is empty.
        if (this.vertexFeature_ && this.features_.getLength() === 0) {
            this.overlay_.getSource().removeFeature(this.vertexFeature_);
            this.vertexFeature_ = null;
        }
        feature.removeEventListener((0, _eventTypeJsDefault.default).CHANGE, this.boundHandleFeatureChange_);
    };
    /**
     * @param {Feature} feature Feature.
     * @private
     */ Modify1.prototype.removeFeatureSegmentData_ = function(feature) {
        var rBush = this.rBush_;
        /** @type {Array<SegmentData>} */ var nodesToRemove = [];
        rBush.forEach(/**
         * @param {SegmentData} node RTree node.
         */ function(node) {
            if (feature === node.feature) nodesToRemove.push(node);
        });
        for(var i = nodesToRemove.length - 1; i >= 0; --i){
            var nodeToRemove = nodesToRemove[i];
            for(var j = this.dragSegments_.length - 1; j >= 0; --j)if (this.dragSegments_[j][0] === nodeToRemove) this.dragSegments_.splice(j, 1);
            rBush.remove(nodeToRemove);
        }
    };
    /**
     * Activate or deactivate the interaction.
     * @param {boolean} active Active.
     * @observable
     * @api
     */ Modify1.prototype.setActive = function(active) {
        if (this.vertexFeature_ && !active) {
            this.overlay_.getSource().removeFeature(this.vertexFeature_);
            this.vertexFeature_ = null;
        }
        _super.prototype.setActive.call(this, active);
    };
    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default} map Map.
     */ Modify1.prototype.setMap = function(map) {
        this.overlay_.setMap(map);
        _super.prototype.setMap.call(this, map);
    };
    /**
     * Get the overlay layer that this interaction renders the modification point or vertex to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */ Modify1.prototype.getOverlay = function() {
        return this.overlay_;
    };
    /**
     * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */ Modify1.prototype.handleSourceAdd_ = function(event) {
        if (event.feature) this.features_.push(event.feature);
    };
    /**
     * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */ Modify1.prototype.handleSourceRemove_ = function(event) {
        if (event.feature) this.features_.remove(event.feature);
    };
    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */ Modify1.prototype.handleFeatureAdd_ = function(evt) {
        this.addFeature_(evt.element);
    };
    /**
     * @param {import("../events/Event.js").default} evt Event.
     * @private
     */ Modify1.prototype.handleFeatureChange_ = function(evt) {
        if (!this.changingFeature_) {
            var feature = evt.target;
            this.removeFeature_(feature);
            this.addFeature_(feature);
        }
    };
    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */ Modify1.prototype.handleFeatureRemove_ = function(evt) {
        var feature = evt.element;
        this.removeFeature_(feature);
    };
    /**
     * @param {Feature} feature Feature
     * @param {Point} geometry Geometry.
     * @private
     */ Modify1.prototype.writePointGeometry_ = function(feature, geometry) {
        var coordinates = geometry.getCoordinates();
        /** @type {SegmentData} */ var segmentData = {
            feature: feature,
            geometry: geometry,
            segment: [
                coordinates,
                coordinates
            ]
        };
        this.rBush_.insert(geometry.getExtent(), segmentData);
    };
    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
     * @private
     */ Modify1.prototype.writeMultiPointGeometry_ = function(feature, geometry) {
        var points = geometry.getCoordinates();
        for(var i = 0, ii = points.length; i < ii; ++i){
            var coordinates = points[i];
            /** @type {SegmentData} */ var segmentData = {
                feature: feature,
                geometry: geometry,
                depth: [
                    i
                ],
                index: i,
                segment: [
                    coordinates,
                    coordinates
                ]
            };
            this.rBush_.insert(geometry.getExtent(), segmentData);
        }
    };
    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/LineString.js").default} geometry Geometry.
     * @private
     */ Modify1.prototype.writeLineStringGeometry_ = function(feature, geometry) {
        var coordinates = geometry.getCoordinates();
        for(var i = 0, ii = coordinates.length - 1; i < ii; ++i){
            var segment = coordinates.slice(i, i + 2);
            /** @type {SegmentData} */ var segmentData = {
                feature: feature,
                geometry: geometry,
                index: i,
                segment: segment
            };
            this.rBush_.insert((0, _extentJs.boundingExtent)(segment), segmentData);
        }
    };
    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
     * @private
     */ Modify1.prototype.writeMultiLineStringGeometry_ = function(feature, geometry) {
        var lines = geometry.getCoordinates();
        for(var j = 0, jj = lines.length; j < jj; ++j){
            var coordinates = lines[j];
            for(var i = 0, ii = coordinates.length - 1; i < ii; ++i){
                var segment = coordinates.slice(i, i + 2);
                /** @type {SegmentData} */ var segmentData = {
                    feature: feature,
                    geometry: geometry,
                    depth: [
                        j
                    ],
                    index: i,
                    segment: segment
                };
                this.rBush_.insert((0, _extentJs.boundingExtent)(segment), segmentData);
            }
        }
    };
    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/Polygon.js").default} geometry Geometry.
     * @private
     */ Modify1.prototype.writePolygonGeometry_ = function(feature, geometry) {
        var rings = geometry.getCoordinates();
        for(var j = 0, jj = rings.length; j < jj; ++j){
            var coordinates = rings[j];
            for(var i = 0, ii = coordinates.length - 1; i < ii; ++i){
                var segment = coordinates.slice(i, i + 2);
                /** @type {SegmentData} */ var segmentData = {
                    feature: feature,
                    geometry: geometry,
                    depth: [
                        j
                    ],
                    index: i,
                    segment: segment
                };
                this.rBush_.insert((0, _extentJs.boundingExtent)(segment), segmentData);
            }
        }
    };
    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @private
     */ Modify1.prototype.writeMultiPolygonGeometry_ = function(feature, geometry) {
        var polygons = geometry.getCoordinates();
        for(var k = 0, kk = polygons.length; k < kk; ++k){
            var rings = polygons[k];
            for(var j = 0, jj = rings.length; j < jj; ++j){
                var coordinates = rings[j];
                for(var i = 0, ii = coordinates.length - 1; i < ii; ++i){
                    var segment = coordinates.slice(i, i + 2);
                    /** @type {SegmentData} */ var segmentData = {
                        feature: feature,
                        geometry: geometry,
                        depth: [
                            j,
                            k
                        ],
                        index: i,
                        segment: segment
                    };
                    this.rBush_.insert((0, _extentJs.boundingExtent)(segment), segmentData);
                }
            }
        }
    };
    /**
     * We convert a circle into two segments.  The segment at index
     * {@link CIRCLE_CENTER_INDEX} is the
     * circle's center (a point).  The segment at index
     * {@link CIRCLE_CIRCUMFERENCE_INDEX} is
     * the circumference, and is not a line segment.
     *
     * @param {Feature} feature Feature.
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @private
     */ Modify1.prototype.writeCircleGeometry_ = function(feature, geometry) {
        var coordinates = geometry.getCenter();
        /** @type {SegmentData} */ var centerSegmentData = {
            feature: feature,
            geometry: geometry,
            index: CIRCLE_CENTER_INDEX,
            segment: [
                coordinates,
                coordinates
            ]
        };
        /** @type {SegmentData} */ var circumferenceSegmentData = {
            feature: feature,
            geometry: geometry,
            index: CIRCLE_CIRCUMFERENCE_INDEX,
            segment: [
                coordinates,
                coordinates
            ]
        };
        var featureSegments = [
            centerSegmentData,
            circumferenceSegmentData
        ];
        centerSegmentData.featureSegments = featureSegments;
        circumferenceSegmentData.featureSegments = featureSegments;
        this.rBush_.insert((0, _extentJs.createOrUpdateFromCoordinate)(coordinates), centerSegmentData);
        var circleGeometry = geometry;
        var userProjection = (0, _projJs.getUserProjection)();
        if (userProjection && this.getMap()) {
            var projection = this.getMap().getView().getProjection();
            circleGeometry = circleGeometry.clone().transform(userProjection, projection);
            circleGeometry = (0, _polygonJs.fromCircle)(circleGeometry).transform(projection, userProjection);
        }
        this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);
    };
    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @private
     */ Modify1.prototype.writeGeometryCollectionGeometry_ = function(feature, geometry) {
        var geometries = geometry.getGeometriesArray();
        for(var i = 0; i < geometries.length; ++i){
            var geometry_1 = geometries[i];
            var writer = this.SEGMENT_WRITERS_[geometry_1.getType()];
            writer(feature, geometry_1);
        }
    };
    /**
     * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
     * @param {Array<import("../Feature").FeatureLike>} features The features being modified.
     * @param {Array<import("../geom/SimpleGeometry.js").default>} geometries The geometries being modified.
     * @return {Feature} Vertex feature.
     * @private
     */ Modify1.prototype.createOrUpdateVertexFeature_ = function(coordinates, features, geometries) {
        var vertexFeature = this.vertexFeature_;
        if (!vertexFeature) {
            vertexFeature = new (0, _featureJsDefault.default)(new (0, _pointJsDefault.default)(coordinates));
            this.vertexFeature_ = vertexFeature;
            this.overlay_.getSource().addFeature(vertexFeature);
        } else {
            var geometry = vertexFeature.getGeometry();
            geometry.setCoordinates(coordinates);
        }
        vertexFeature.set("features", features);
        vertexFeature.set("geometries", geometries);
        return vertexFeature;
    };
    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     */ Modify1.prototype.handleEvent = function(mapBrowserEvent) {
        if (!mapBrowserEvent.originalEvent) return true;
        this.lastPointerEvent_ = mapBrowserEvent;
        var handled;
        if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == (0, _mapBrowserEventTypeJsDefault.default).POINTERMOVE && !this.handlingDownUpSequence) this.handlePointerMove_(mapBrowserEvent);
        if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {
            if (mapBrowserEvent.type != (0, _mapBrowserEventTypeJsDefault.default).SINGLECLICK || !this.ignoreNextSingleClick_) handled = this.removePoint();
            else handled = true;
        }
        if (mapBrowserEvent.type == (0, _mapBrowserEventTypeJsDefault.default).SINGLECLICK) this.ignoreNextSingleClick_ = false;
        return _super.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;
    };
    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     */ Modify1.prototype.handleDragEvent = function(evt) {
        this.ignoreNextSingleClick_ = false;
        this.willModifyFeatures_(evt, this.dragSegments_);
        var vertex = [
            evt.coordinate[0] + this.delta_[0],
            evt.coordinate[1] + this.delta_[1], 
        ];
        var features = [];
        var geometries = [];
        for(var i = 0, ii = this.dragSegments_.length; i < ii; ++i){
            var dragSegment = this.dragSegments_[i];
            var segmentData = dragSegment[0];
            var feature = segmentData.feature;
            if (features.indexOf(feature) === -1) features.push(feature);
            var geometry = segmentData.geometry;
            if (geometries.indexOf(geometry) === -1) geometries.push(geometry);
            var depth = segmentData.depth;
            var coordinates = void 0;
            var segment = segmentData.segment;
            var index = dragSegment[1];
            while(vertex.length < geometry.getStride())vertex.push(segment[index][vertex.length]);
            switch(geometry.getType()){
                case (0, _geometryTypeJsDefault.default).POINT:
                    coordinates = vertex;
                    segment[0] = vertex;
                    segment[1] = vertex;
                    break;
                case (0, _geometryTypeJsDefault.default).MULTI_POINT:
                    coordinates = geometry.getCoordinates();
                    coordinates[segmentData.index] = vertex;
                    segment[0] = vertex;
                    segment[1] = vertex;
                    break;
                case (0, _geometryTypeJsDefault.default).LINE_STRING:
                    coordinates = geometry.getCoordinates();
                    coordinates[segmentData.index + index] = vertex;
                    segment[index] = vertex;
                    break;
                case (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING:
                    coordinates = geometry.getCoordinates();
                    coordinates[depth[0]][segmentData.index + index] = vertex;
                    segment[index] = vertex;
                    break;
                case (0, _geometryTypeJsDefault.default).POLYGON:
                    coordinates = geometry.getCoordinates();
                    coordinates[depth[0]][segmentData.index + index] = vertex;
                    segment[index] = vertex;
                    break;
                case (0, _geometryTypeJsDefault.default).MULTI_POLYGON:
                    coordinates = geometry.getCoordinates();
                    coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;
                    segment[index] = vertex;
                    break;
                case (0, _geometryTypeJsDefault.default).CIRCLE:
                    segment[0] = vertex;
                    segment[1] = vertex;
                    if (segmentData.index === CIRCLE_CENTER_INDEX) {
                        this.changingFeature_ = true;
                        geometry.setCenter(vertex);
                        this.changingFeature_ = false;
                    } else {
                        // We're dragging the circle's circumference:
                        this.changingFeature_ = true;
                        var projection = evt.map.getView().getProjection();
                        var radius = (0, _coordinateJs.distance)((0, _projJs.fromUserCoordinate)(geometry.getCenter(), projection), (0, _projJs.fromUserCoordinate)(vertex, projection));
                        var userProjection = (0, _projJs.getUserProjection)();
                        if (userProjection) {
                            var circleGeometry = geometry.clone().transform(userProjection, projection);
                            circleGeometry.setRadius(radius);
                            radius = circleGeometry.transform(projection, userProjection).getRadius();
                        }
                        geometry.setRadius(radius);
                        this.changingFeature_ = false;
                    }
                    break;
                default:
            }
            if (coordinates) this.setGeometryCoordinates_(geometry, coordinates);
        }
        this.createOrUpdateVertexFeature_(vertex, features, geometries);
    };
    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @return {boolean} If the event was consumed.
     */ Modify1.prototype.handleDownEvent = function(evt) {
        if (!this.condition_(evt)) return false;
        var pixelCoordinate = evt.coordinate;
        this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);
        this.dragSegments_.length = 0;
        this.featuresBeingModified_ = null;
        var vertexFeature = this.vertexFeature_;
        if (vertexFeature) {
            var projection = evt.map.getView().getProjection();
            var insertVertices = [];
            var vertex = vertexFeature.getGeometry().getCoordinates();
            var vertexExtent = (0, _extentJs.boundingExtent)([
                vertex
            ]);
            var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);
            var componentSegments = {};
            segmentDataMatches.sort(compareIndexes);
            for(var i = 0, ii = segmentDataMatches.length; i < ii; ++i){
                var segmentDataMatch = segmentDataMatches[i];
                var segment = segmentDataMatch.segment;
                var uid = (0, _utilJs.getUid)(segmentDataMatch.geometry);
                var depth = segmentDataMatch.depth;
                if (depth) uid += "-" + depth.join("-"); // separate feature components
                if (!componentSegments[uid]) componentSegments[uid] = new Array(2);
                if (segmentDataMatch.geometry.getType() === (0, _geometryTypeJsDefault.default).CIRCLE && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {
                    var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);
                    if ((0, _coordinateJs.equals)(closestVertex, vertex) && !componentSegments[uid][0]) {
                        this.dragSegments_.push([
                            segmentDataMatch,
                            0
                        ]);
                        componentSegments[uid][0] = segmentDataMatch;
                    }
                    continue;
                }
                if ((0, _coordinateJs.equals)(segment[0], vertex) && !componentSegments[uid][0]) {
                    this.dragSegments_.push([
                        segmentDataMatch,
                        0
                    ]);
                    componentSegments[uid][0] = segmentDataMatch;
                    continue;
                }
                if ((0, _coordinateJs.equals)(segment[1], vertex) && !componentSegments[uid][1]) {
                    // prevent dragging closed linestrings by the connecting node
                    if ((segmentDataMatch.geometry.getType() === (0, _geometryTypeJsDefault.default).LINE_STRING || segmentDataMatch.geometry.getType() === (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING) && componentSegments[uid][0] && componentSegments[uid][0].index === 0) continue;
                    this.dragSegments_.push([
                        segmentDataMatch,
                        1
                    ]);
                    componentSegments[uid][1] = segmentDataMatch;
                    continue;
                }
                if ((0, _utilJs.getUid)(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1] && this.insertVertexCondition_(evt)) insertVertices.push(segmentDataMatch);
            }
            if (insertVertices.length) this.willModifyFeatures_(evt, [
                insertVertices
            ]);
            for(var j = insertVertices.length - 1; j >= 0; --j)this.insertVertex_(insertVertices[j], vertex);
        }
        return !!this.vertexFeature_;
    };
    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @return {boolean} If the event was consumed.
     */ Modify1.prototype.handleUpEvent = function(evt) {
        for(var i = this.dragSegments_.length - 1; i >= 0; --i){
            var segmentData = this.dragSegments_[i][0];
            var geometry = segmentData.geometry;
            if (geometry.getType() === (0, _geometryTypeJsDefault.default).CIRCLE) {
                // Update a circle object in the R* bush:
                var coordinates = geometry.getCenter();
                var centerSegmentData = segmentData.featureSegments[0];
                var circumferenceSegmentData = segmentData.featureSegments[1];
                centerSegmentData.segment[0] = coordinates;
                centerSegmentData.segment[1] = coordinates;
                circumferenceSegmentData.segment[0] = coordinates;
                circumferenceSegmentData.segment[1] = coordinates;
                this.rBush_.update((0, _extentJs.createOrUpdateFromCoordinate)(coordinates), centerSegmentData);
                var circleGeometry = geometry;
                var userProjection = (0, _projJs.getUserProjection)();
                if (userProjection) {
                    var projection = evt.map.getView().getProjection();
                    circleGeometry = circleGeometry.clone().transform(userProjection, projection);
                    circleGeometry = (0, _polygonJs.fromCircle)(circleGeometry).transform(projection, userProjection);
                }
                this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);
            } else this.rBush_.update((0, _extentJs.boundingExtent)(segmentData.segment), segmentData);
        }
        if (this.featuresBeingModified_) {
            this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));
            this.featuresBeingModified_ = null;
        }
        return false;
    };
    /**
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @private
     */ Modify1.prototype.handlePointerMove_ = function(evt) {
        this.lastPixel_ = evt.pixel;
        this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);
    };
    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel
     * @param {import("../PluggableMap.js").default} map Map.
     * @param {import("../coordinate.js").Coordinate} [opt_coordinate] The pixel Coordinate.
     * @private
     */ Modify1.prototype.handlePointerAtPixel_ = function(pixel, map, opt_coordinate) {
        var _this = this;
        var pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);
        var projection = map.getView().getProjection();
        var sortByDistance = function(a, b) {
            return projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) - projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection);
        };
        /** @type {Array<SegmentData>|undefined} */ var nodes;
        var hitPointGeometry;
        if (this.hitDetection_) {
            var layerFilter = typeof this.hitDetection_ === "object" ? function(layer) {
                return layer === _this.hitDetection_;
            } : undefined;
            map.forEachFeatureAtPixel(pixel, function(feature, layer, geometry) {
                geometry = geometry || /** @type {import("../geom/SimpleGeometry").default} */ feature.getGeometry();
                if (geometry.getType() === (0, _geometryTypeJsDefault.default).POINT && (0, _arrayJs.includes)(_this.features_.getArray(), feature)) {
                    hitPointGeometry = geometry;
                    var coordinate = geometry.getFlatCoordinates().slice(0, 2);
                    nodes = [
                        {
                            feature: feature,
                            geometry: geometry,
                            segment: [
                                coordinate,
                                coordinate
                            ]
                        }, 
                    ];
                }
                return true;
            }, {
                layerFilter: layerFilter
            });
        }
        if (!nodes) {
            var viewExtent = (0, _projJs.fromUserExtent)((0, _extentJs.createOrUpdateFromCoordinate)(pixelCoordinate, tempExtent), projection);
            var buffer = map.getView().getResolution() * this.pixelTolerance_;
            var box = (0, _projJs.toUserExtent)((0, _extentJs.buffer)(viewExtent, buffer, tempExtent), projection);
            nodes = this.rBush_.getInExtent(box);
        }
        if (nodes && nodes.length > 0) {
            var node = nodes.sort(sortByDistance)[0];
            var closestSegment = node.segment;
            var vertex = closestOnSegmentData(pixelCoordinate, node, projection);
            var vertexPixel = map.getPixelFromCoordinate(vertex);
            var dist = (0, _coordinateJs.distance)(pixel, vertexPixel);
            if (hitPointGeometry || dist <= this.pixelTolerance_) {
                /** @type {Object<string, boolean>} */ var vertexSegments = {};
                vertexSegments[(0, _utilJs.getUid)(closestSegment)] = true;
                if (!this.snapToPointer_) {
                    this.delta_[0] = vertex[0] - pixelCoordinate[0];
                    this.delta_[1] = vertex[1] - pixelCoordinate[1];
                }
                if (node.geometry.getType() === (0, _geometryTypeJsDefault.default).CIRCLE && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {
                    this.snappedToVertex_ = true;
                    this.createOrUpdateVertexFeature_(vertex, [
                        node.feature
                    ], [
                        node.geometry
                    ]);
                } else {
                    var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
                    var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
                    var squaredDist1 = (0, _coordinateJs.squaredDistance)(vertexPixel, pixel1);
                    var squaredDist2 = (0, _coordinateJs.squaredDistance)(vertexPixel, pixel2);
                    dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
                    this.snappedToVertex_ = dist <= this.pixelTolerance_;
                    if (this.snappedToVertex_) vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
                    this.createOrUpdateVertexFeature_(vertex, [
                        node.feature
                    ], [
                        node.geometry
                    ]);
                    var geometries = {};
                    geometries[(0, _utilJs.getUid)(node.geometry)] = true;
                    for(var i = 1, ii = nodes.length; i < ii; ++i){
                        var segment = nodes[i].segment;
                        if ((0, _coordinateJs.equals)(closestSegment[0], segment[0]) && (0, _coordinateJs.equals)(closestSegment[1], segment[1]) || (0, _coordinateJs.equals)(closestSegment[0], segment[1]) && (0, _coordinateJs.equals)(closestSegment[1], segment[0])) {
                            var geometryUid = (0, _utilJs.getUid)(nodes[i].geometry);
                            if (!(geometryUid in geometries)) {
                                geometries[geometryUid] = true;
                                vertexSegments[(0, _utilJs.getUid)(segment)] = true;
                            }
                        } else break;
                    }
                }
                this.vertexSegments_ = vertexSegments;
                return;
            }
        }
        if (this.vertexFeature_) {
            this.overlay_.getSource().removeFeature(this.vertexFeature_);
            this.vertexFeature_ = null;
        }
    };
    /**
     * @param {SegmentData} segmentData Segment data.
     * @param {import("../coordinate.js").Coordinate} vertex Vertex.
     * @private
     */ Modify1.prototype.insertVertex_ = function(segmentData, vertex) {
        var segment = segmentData.segment;
        var feature = segmentData.feature;
        var geometry = segmentData.geometry;
        var depth = segmentData.depth;
        var index = segmentData.index;
        var coordinates;
        while(vertex.length < geometry.getStride())vertex.push(0);
        switch(geometry.getType()){
            case (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING:
                coordinates = geometry.getCoordinates();
                coordinates[depth[0]].splice(index + 1, 0, vertex);
                break;
            case (0, _geometryTypeJsDefault.default).POLYGON:
                coordinates = geometry.getCoordinates();
                coordinates[depth[0]].splice(index + 1, 0, vertex);
                break;
            case (0, _geometryTypeJsDefault.default).MULTI_POLYGON:
                coordinates = geometry.getCoordinates();
                coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);
                break;
            case (0, _geometryTypeJsDefault.default).LINE_STRING:
                coordinates = geometry.getCoordinates();
                coordinates.splice(index + 1, 0, vertex);
                break;
            default:
                return;
        }
        this.setGeometryCoordinates_(geometry, coordinates);
        var rTree = this.rBush_;
        rTree.remove(segmentData);
        this.updateSegmentIndices_(geometry, index, depth, 1);
        /** @type {SegmentData} */ var newSegmentData = {
            segment: [
                segment[0],
                vertex
            ],
            feature: feature,
            geometry: geometry,
            depth: depth,
            index: index
        };
        rTree.insert((0, _extentJs.boundingExtent)(newSegmentData.segment), newSegmentData);
        this.dragSegments_.push([
            newSegmentData,
            1
        ]);
        /** @type {SegmentData} */ var newSegmentData2 = {
            segment: [
                vertex,
                segment[1]
            ],
            feature: feature,
            geometry: geometry,
            depth: depth,
            index: index + 1
        };
        rTree.insert((0, _extentJs.boundingExtent)(newSegmentData2.segment), newSegmentData2);
        this.dragSegments_.push([
            newSegmentData2,
            0
        ]);
        this.ignoreNextSingleClick_ = true;
    };
    /**
     * Removes the vertex currently being pointed.
     * @return {boolean} True when a vertex was removed.
     * @api
     */ Modify1.prototype.removePoint = function() {
        if (this.lastPointerEvent_ && this.lastPointerEvent_.type != (0, _mapBrowserEventTypeJsDefault.default).POINTERDRAG) {
            var evt = this.lastPointerEvent_;
            this.willModifyFeatures_(evt, this.dragSegments_);
            var removed = this.removeVertex_();
            if (this.featuresBeingModified_) this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));
            this.featuresBeingModified_ = null;
            return removed;
        }
        return false;
    };
    /**
     * Removes a vertex from all matching features.
     * @return {boolean} True when a vertex was removed.
     * @private
     */ Modify1.prototype.removeVertex_ = function() {
        var dragSegments = this.dragSegments_;
        var segmentsByFeature = {};
        var deleted = false;
        var component, coordinates, dragSegment, geometry, i, index, left;
        var newIndex, right, segmentData, uid;
        for(i = dragSegments.length - 1; i >= 0; --i){
            dragSegment = dragSegments[i];
            segmentData = dragSegment[0];
            uid = (0, _utilJs.getUid)(segmentData.feature);
            if (segmentData.depth) // separate feature components
            uid += "-" + segmentData.depth.join("-");
            if (!(uid in segmentsByFeature)) segmentsByFeature[uid] = {};
            if (dragSegment[1] === 0) {
                segmentsByFeature[uid].right = segmentData;
                segmentsByFeature[uid].index = segmentData.index;
            } else if (dragSegment[1] == 1) {
                segmentsByFeature[uid].left = segmentData;
                segmentsByFeature[uid].index = segmentData.index + 1;
            }
        }
        for(uid in segmentsByFeature){
            right = segmentsByFeature[uid].right;
            left = segmentsByFeature[uid].left;
            index = segmentsByFeature[uid].index;
            newIndex = index - 1;
            if (left !== undefined) segmentData = left;
            else segmentData = right;
            if (newIndex < 0) newIndex = 0;
            geometry = segmentData.geometry;
            coordinates = geometry.getCoordinates();
            component = coordinates;
            deleted = false;
            switch(geometry.getType()){
                case (0, _geometryTypeJsDefault.default).MULTI_LINE_STRING:
                    if (coordinates[segmentData.depth[0]].length > 2) {
                        coordinates[segmentData.depth[0]].splice(index, 1);
                        deleted = true;
                    }
                    break;
                case (0, _geometryTypeJsDefault.default).LINE_STRING:
                    if (coordinates.length > 2) {
                        coordinates.splice(index, 1);
                        deleted = true;
                    }
                    break;
                case (0, _geometryTypeJsDefault.default).MULTI_POLYGON:
                    component = component[segmentData.depth[1]];
                /* falls through */ case (0, _geometryTypeJsDefault.default).POLYGON:
                    component = component[segmentData.depth[0]];
                    if (component.length > 4) {
                        if (index == component.length - 1) index = 0;
                        component.splice(index, 1);
                        deleted = true;
                        if (index === 0) {
                            // close the ring again
                            component.pop();
                            component.push(component[0]);
                            newIndex = component.length - 1;
                        }
                    }
                    break;
                default:
            }
            if (deleted) {
                this.setGeometryCoordinates_(geometry, coordinates);
                var segments = [];
                if (left !== undefined) {
                    this.rBush_.remove(left);
                    segments.push(left.segment[0]);
                }
                if (right !== undefined) {
                    this.rBush_.remove(right);
                    segments.push(right.segment[1]);
                }
                if (left !== undefined && right !== undefined) {
                    /** @type {SegmentData} */ var newSegmentData = {
                        depth: segmentData.depth,
                        feature: segmentData.feature,
                        geometry: segmentData.geometry,
                        index: newIndex,
                        segment: segments
                    };
                    this.rBush_.insert((0, _extentJs.boundingExtent)(newSegmentData.segment), newSegmentData);
                }
                this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);
                if (this.vertexFeature_) {
                    this.overlay_.getSource().removeFeature(this.vertexFeature_);
                    this.vertexFeature_ = null;
                }
                dragSegments.length = 0;
            }
        }
        return deleted;
    };
    /**
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {Array} coordinates Coordinates.
     * @private
     */ Modify1.prototype.setGeometryCoordinates_ = function(geometry, coordinates) {
        this.changingFeature_ = true;
        geometry.setCoordinates(coordinates);
        this.changingFeature_ = false;
    };
    /**
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {number} index Index.
     * @param {Array<number>|undefined} depth Depth.
     * @param {number} delta Delta (1 or -1).
     * @private
     */ Modify1.prototype.updateSegmentIndices_ = function(geometry, index, depth, delta) {
        this.rBush_.forEachInExtent(geometry.getExtent(), function(segmentDataMatch) {
            if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || (0, _arrayJs.equals)(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) segmentDataMatch.index += delta;
        });
    };
    return Modify1;
}((0, _pointerJsDefault.default));
/**
 * @param {SegmentData} a The first segment data.
 * @param {SegmentData} b The second segment data.
 * @return {number} The difference in indexes.
 */ function compareIndexes(a, b) {
    return a.index - b.index;
}
/**
 * Returns the distance from a point to a line segment.
 *
 * @param {import("../coordinate.js").Coordinate} pointCoordinates The coordinates of the point from
 *        which to calculate the distance.
 * @param {SegmentData} segmentData The object describing the line
 *        segment we are calculating the distance to.
 * @param {import("../proj/Projection.js").default} projection The view projection.
 * @return {number} The square of the distance between a point and a line segment.
 */ function projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {
    var geometry = segmentData.geometry;
    if (geometry.getType() === (0, _geometryTypeJsDefault.default).CIRCLE) {
        var circleGeometry = geometry;
        if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
            var userProjection = (0, _projJs.getUserProjection)();
            if (userProjection) circleGeometry = /** @type {import("../geom/Circle.js").default} */ circleGeometry.clone().transform(userProjection, projection);
            var distanceToCenterSquared = (0, _coordinateJs.squaredDistance)(circleGeometry.getCenter(), (0, _projJs.fromUserCoordinate)(pointCoordinates, projection));
            var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();
            return distanceToCircumference * distanceToCircumference;
        }
    }
    var coordinate = (0, _projJs.fromUserCoordinate)(pointCoordinates, projection);
    tempSegment[0] = (0, _projJs.fromUserCoordinate)(segmentData.segment[0], projection);
    tempSegment[1] = (0, _projJs.fromUserCoordinate)(segmentData.segment[1], projection);
    return (0, _coordinateJs.squaredDistanceToSegment)(coordinate, tempSegment);
}
/**
 * Returns the point closest to a given line segment.
 *
 * @param {import("../coordinate.js").Coordinate} pointCoordinates The point to which a closest point
 *        should be found.
 * @param {SegmentData} segmentData The object describing the line
 *        segment which should contain the closest point.
 * @param {import("../proj/Projection.js").default} projection The view projection.
 * @return {import("../coordinate.js").Coordinate} The point closest to the specified line segment.
 */ function closestOnSegmentData(pointCoordinates, segmentData, projection) {
    var geometry = segmentData.geometry;
    if (geometry.getType() === (0, _geometryTypeJsDefault.default).CIRCLE && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
        var circleGeometry = geometry;
        var userProjection = (0, _projJs.getUserProjection)();
        if (userProjection) circleGeometry = /** @type {import("../geom/Circle.js").default} */ circleGeometry.clone().transform(userProjection, projection);
        return (0, _projJs.toUserCoordinate)(circleGeometry.getClosestPoint((0, _projJs.fromUserCoordinate)(pointCoordinates, projection)), projection);
    }
    var coordinate = (0, _projJs.fromUserCoordinate)(pointCoordinates, projection);
    tempSegment[0] = (0, _projJs.fromUserCoordinate)(segmentData.segment[0], projection);
    tempSegment[1] = (0, _projJs.fromUserCoordinate)(segmentData.segment[1], projection);
    return (0, _projJs.toUserCoordinate)((0, _coordinateJs.closestOnSegment)(coordinate, tempSegment), projection);
}
/**
 * @return {import("../style/Style.js").StyleFunction} Styles.
 */ function getDefaultStyleFunction() {
    var style = (0, _styleJs.createEditingStyle)();
    return function(feature, resolution) {
        return style[(0, _geometryTypeJsDefault.default).POINT];
    };
}
exports.default = Modify;

},{"../Collection.js":"gReoh","../CollectionEventType.js":"82Ksf","../events/Event.js":"hwXQP","../events/EventType.js":"hrQJ6","../Feature.js":"liabO","../geom/GeometryType.js":"j6daa","../MapBrowserEventType.js":"fB9ae","../geom/Point.js":"hx2Ar","./Pointer.js":"1GIxf","../structs/RBush.js":"ewGrv","../source/VectorEventType.js":"6IruY","../layer/Vector.js":"iTrAy","../source/Vector.js":"9w7Fr","../events/condition.js":"iQTYY","../extent.js":"6YrVc","../coordinate.js":"85Vu7","../style/Style.js":"fW7vC","../array.js":"1Fbic","../geom/Polygon.js":"cJuQF","../proj.js":"SznqC","../util.js":"pLBjQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iBBOO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SelectEvent", ()=>SelectEvent);
/**
 * @module ol/interaction/Select
 */ var _collectionJs = require("../Collection.js");
var _collectionJsDefault = parcelHelpers.interopDefault(_collectionJs);
var _collectionEventTypeJs = require("../CollectionEventType.js");
var _collectionEventTypeJsDefault = parcelHelpers.interopDefault(_collectionEventTypeJs);
var _eventJs = require("../events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _geometryTypeJs = require("../geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _interactionJs = require("./Interaction.js");
var _interactionJsDefault = parcelHelpers.interopDefault(_interactionJs);
var _vectorJs = require("../layer/Vector.js");
var _vectorJsDefault = parcelHelpers.interopDefault(_vectorJs);
var _functionsJs = require("../functions.js");
var _objJs = require("../obj.js");
var _styleJs = require("../style/Style.js");
var _arrayJs = require("../array.js");
var _utilJs = require("../util.js");
var _conditionJs = require("../events/condition.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @enum {string}
 */ var SelectEventType = {
    /**
     * Triggered when feature(s) has been (de)selected.
     * @event SelectEvent#select
     * @api
     */ SELECT: "select"
};
/**
 * A function that takes an {@link module:ol/Feature~Feature} or
 * {@link module:ol/render/Feature~RenderFeature} and an
 * {@link module:ol/layer/Layer~Layer} and returns `true` if the feature may be
 * selected or `false` otherwise.
 * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default<import("../source/Source").default>):boolean} FilterFunction
 */ /**
 * @typedef {Object} Options
 * @property {import("../events/condition.js").Condition} [addCondition] A function
 * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled.
 * By default, this is {@link module:ol/events/condition.never}. Use this if you
 * want to use different events for add and remove instead of `toggle`.
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. This is the event
 * for the selected features as a whole. By default, this is
 * {@link module:ol/events/condition.singleClick}. Clicking on a feature selects that
 * feature and removes any that were in the selection. Clicking outside any
 * feature removes all from the selection.
 * See `toggle`, `add`, `remove` options for adding/removing extra features to/
 * from the selection.
 * @property {Array<import("../layer/Layer.js").default>|function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean} [layers]
 * A list of layers from which features should be selected. Alternatively, a
 * filter function can be provided. The function will be called for each layer
 * in the map and should return `true` for layers that you want to be
 * selectable. If the option is absent, all visible layers will be considered
 * selectable.
 * @property {import("../style/Style.js").StyleLike|null} [style]
 * Style for the selected features. By default the default edit style is used
 * (see {@link module:ol/style/Style~Style}). Set to `null` if this interaction should not apply
 * any style changes for selected features.
 * If set to a falsey value, the selected feature's style will not change.
 * @property {import("../events/condition.js").Condition} [removeCondition] A function
 * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled.
 * By default, this is {@link module:ol/events/condition.never}. Use this if you
 * want to use different events for add and remove instead of `toggle`.
 * @property {import("../events/condition.js").Condition} [toggleCondition] A function
 * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled. This is in addition
 * to the `condition` event. By default,
 * {@link module:ol/events/condition.shiftKeyOnly}, i.e. pressing `shift` as
 * well as the `condition` event, adds that feature to the current selection if
 * it is not currently selected, and removes it if it is. See `add` and `remove`
 * if you want to use different events instead of a toggle.
 * @property {boolean} [multi=false] A boolean that determines if the default
 * behaviour should select only single features or all (overlapping) features at
 * the clicked map position. The default of `false` means single select.
 * @property {import("../Collection.js").default<import("../Feature.js").default>} [features]
 * Collection where the interaction will place selected features. Optional. If
 * not set the interaction will create a collection. In any case the collection
 * used by the interaction is returned by
 * {@link module:ol/interaction/Select~Select#getFeatures}.
 * @property {FilterFunction} [filter] A function
 * that takes an {@link module:ol/Feature~Feature} and an
 * {@link module:ol/layer/Layer~Layer} and returns `true` if the feature may be
 * selected or `false` otherwise.
 * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside
 * the radius around the given position will be checked for features.
 */ /**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/Select~Select} instances are instances of
 * this type.
 */ var SelectEvent = /** @class */ function(_super) {
    __extends(SelectEvent1, _super);
    /**
     * @param {SelectEventType} type The event type.
     * @param {Array<import("../Feature.js").default>} selected Selected features.
     * @param {Array<import("../Feature.js").default>} deselected Deselected features.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Associated
     *     {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
     */ function SelectEvent1(type, selected, deselected, mapBrowserEvent) {
        var _this = _super.call(this, type) || this;
        /**
         * Selected features array.
         * @type {Array<import("../Feature.js").default>}
         * @api
         */ _this.selected = selected;
        /**
         * Deselected features array.
         * @type {Array<import("../Feature.js").default>}
         * @api
         */ _this.deselected = deselected;
        /**
         * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
         * @type {import("../MapBrowserEvent.js").default}
         * @api
         */ _this.mapBrowserEvent = mapBrowserEvent;
        return _this;
    }
    return SelectEvent1;
}((0, _eventJsDefault.default));
/**
 * Original feature styles to reset to when features are no longer selected.
 * @type {Object<number, import("../style/Style.js").default|Array<import("../style/Style.js").default>|import("../style/Style.js").StyleFunction>}
 */ var originalFeatureStyles = {};
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
 *     'change:active', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<'select', SelectEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     'change:active'|'select', Return>} SelectOnSignature
 */ /**
 * @classdesc
 * Interaction for selecting vector features. By default, selected features are
 * styled differently, so this interaction can be used for visual highlighting,
 * as well as selecting features for other actions, such as modification or
 * output. There are three ways of controlling which features are selected:
 * using the browser event as defined by the `condition` and optionally the
 * `toggle`, `add`/`remove`, and `multi` options; a `layers` filter; and a
 * further feature filter using the `filter` option.
 *
 * @fires SelectEvent
 * @api
 */ var Select = /** @class */ function(_super) {
    __extends(Select1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function Select1(opt_options) {
        var _this = _super.call(this) || this;
        /***
         * @type {SelectOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {SelectOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {SelectOnSignature<void>}
         */ _this.un;
        var options = opt_options ? opt_options : {};
        /**
         * @private
         */ _this.boundAddFeature_ = _this.addFeature_.bind(_this);
        /**
         * @private
         */ _this.boundRemoveFeature_ = _this.removeFeature_.bind(_this);
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.condition_ = options.condition ? options.condition : (0, _conditionJs.singleClick);
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.addCondition_ = options.addCondition ? options.addCondition : (0, _conditionJs.never);
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.removeCondition_ = options.removeCondition ? options.removeCondition : (0, _conditionJs.never);
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.toggleCondition_ = options.toggleCondition ? options.toggleCondition : (0, _conditionJs.shiftKeyOnly);
        /**
         * @private
         * @type {boolean}
         */ _this.multi_ = options.multi ? options.multi : false;
        /**
         * @private
         * @type {FilterFunction}
         */ _this.filter_ = options.filter ? options.filter : (0, _functionsJs.TRUE);
        /**
         * @private
         * @type {number}
         */ _this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;
        /**
         * @private
         * @type {import("../style/Style.js").default|Array<import("../style/Style.js").default>|import("../style/Style.js").StyleFunction|null}
         */ _this.style_ = options.style !== undefined ? options.style : getDefaultStyleFunction();
        /**
         * @private
         * @type {import("../Collection.js").default}
         */ _this.features_ = options.features || new (0, _collectionJsDefault.default)();
        /** @type {function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean} */ var layerFilter;
        if (options.layers) {
            if (typeof options.layers === "function") layerFilter = options.layers;
            else {
                var layers_1 = options.layers;
                layerFilter = function(layer) {
                    return (0, _arrayJs.includes)(layers_1, layer);
                };
            }
        } else layerFilter = (0, _functionsJs.TRUE);
        /**
         * @private
         * @type {function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean}
         */ _this.layerFilter_ = layerFilter;
        /**
         * An association between selected feature (key)
         * and layer (value)
         * @private
         * @type {Object<string, import("../layer/Layer.js").default>}
         */ _this.featureLayerAssociation_ = {};
        return _this;
    }
    /**
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../layer/Layer.js").default} layer Layer.
     * @private
     */ Select1.prototype.addFeatureLayerAssociation_ = function(feature, layer) {
        this.featureLayerAssociation_[(0, _utilJs.getUid)(feature)] = layer;
    };
    /**
     * Get the selected features.
     * @return {import("../Collection.js").default<import("../Feature.js").default>} Features collection.
     * @api
     */ Select1.prototype.getFeatures = function() {
        return this.features_;
    };
    /**
     * Returns the Hit-detection tolerance.
     * @return {number} Hit tolerance in pixels.
     * @api
     */ Select1.prototype.getHitTolerance = function() {
        return this.hitTolerance_;
    };
    /**
     * Returns the associated {@link module:ol/layer/Vector~VectorLayer vector layer} of
     * a selected feature.
     * @param {import("../Feature.js").FeatureLike} feature Feature
     * @return {import('../layer/Vector.js').default} Layer.
     * @api
     */ Select1.prototype.getLayer = function(feature) {
        return this.featureLayerAssociation_[(0, _utilJs.getUid)(feature)];
    };
    /**
     * Hit-detection tolerance. Pixels inside the radius around the given position
     * will be checked for features.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @api
     */ Select1.prototype.setHitTolerance = function(hitTolerance) {
        this.hitTolerance_ = hitTolerance;
    };
    /**
     * Remove the interaction from its current map, if any,  and attach it to a new
     * map, if any. Pass `null` to just remove the interaction from the current map.
     * @param {import("../PluggableMap.js").default|null} map Map.
     * @api
     */ Select1.prototype.setMap = function(map) {
        var currentMap = this.getMap();
        if (currentMap && this.style_) this.features_.forEach(this.restorePreviousStyle_.bind(this));
        _super.prototype.setMap.call(this, map);
        if (map) {
            this.features_.addEventListener((0, _collectionEventTypeJsDefault.default).ADD, this.boundAddFeature_);
            this.features_.addEventListener((0, _collectionEventTypeJsDefault.default).REMOVE, this.boundRemoveFeature_);
            if (this.style_) this.features_.forEach(this.applySelectedStyle_.bind(this));
        } else {
            this.features_.removeEventListener((0, _collectionEventTypeJsDefault.default).ADD, this.boundAddFeature_);
            this.features_.removeEventListener((0, _collectionEventTypeJsDefault.default).REMOVE, this.boundRemoveFeature_);
        }
    };
    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */ Select1.prototype.addFeature_ = function(evt) {
        var feature = evt.element;
        if (this.style_) this.applySelectedStyle_(feature);
        if (!this.getLayer(feature)) {
            var layer1 = /** @type {VectorLayer} */ this.getMap().getAllLayers().find(function(layer) {
                if (layer instanceof (0, _vectorJsDefault.default) && layer.getSource() && layer.getSource().hasFeature(feature)) return layer;
            });
            if (layer1) this.addFeatureLayerAssociation_(feature, layer1);
        }
    };
    /**
     * @param {import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */ Select1.prototype.removeFeature_ = function(evt) {
        var feature = evt.element;
        if (this.style_) this.restorePreviousStyle_(feature);
    };
    /**
     * @return {import("../style/Style.js").StyleLike|null} Select style.
     */ Select1.prototype.getStyle = function() {
        return this.style_;
    };
    /**
     * @param {import("../Feature.js").default} feature Feature
     * @private
     */ Select1.prototype.applySelectedStyle_ = function(feature) {
        var key = (0, _utilJs.getUid)(feature);
        if (!(key in originalFeatureStyles)) originalFeatureStyles[key] = feature.getStyle();
        feature.setStyle(this.style_);
    };
    /**
     * @param {import("../Feature.js").default} feature Feature
     * @private
     */ Select1.prototype.restorePreviousStyle_ = function(feature) {
        var interactions = this.getMap().getInteractions().getArray();
        for(var i = interactions.length - 1; i >= 0; --i){
            var interaction = interactions[i];
            if (interaction !== this && interaction instanceof Select1 && interaction.getStyle() && interaction.getFeatures().getArray().lastIndexOf(feature) !== -1) {
                feature.setStyle(interaction.getStyle());
                return;
            }
        }
        var key = (0, _utilJs.getUid)(feature);
        feature.setStyle(originalFeatureStyles[key]);
        delete originalFeatureStyles[key];
    };
    /**
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @private
     */ Select1.prototype.removeFeatureLayerAssociation_ = function(feature) {
        delete this.featureLayerAssociation_[(0, _utilJs.getUid)(feature)];
    };
    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may change the
     * selected state of features.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @this {Select}
     */ Select1.prototype.handleEvent = function(mapBrowserEvent) {
        if (!this.condition_(mapBrowserEvent)) return true;
        var add = this.addCondition_(mapBrowserEvent);
        var remove = this.removeCondition_(mapBrowserEvent);
        var toggle = this.toggleCondition_(mapBrowserEvent);
        var set = !add && !remove && !toggle;
        var map = mapBrowserEvent.map;
        var features = this.getFeatures();
        var deselected = [];
        var selected = [];
        if (set) {
            // Replace the currently selected feature(s) with the feature(s) at the
            // pixel, or clear the selected feature(s) if there is no feature at
            // the pixel.
            (0, _objJs.clear)(this.featureLayerAssociation_);
            map.forEachFeatureAtPixel(mapBrowserEvent.pixel, /**
             * @param {import("../Feature.js").FeatureLike} feature Feature.
             * @param {import("../layer/Layer.js").default} layer Layer.
             * @return {boolean|undefined} Continue to iterate over the features.
             */ (function(feature, layer) {
                if (this.filter_(feature, layer)) {
                    this.addFeatureLayerAssociation_(feature, layer);
                    selected.push(feature);
                    return !this.multi_;
                }
            }).bind(this), {
                layerFilter: this.layerFilter_,
                hitTolerance: this.hitTolerance_
            });
            for(var i = features.getLength() - 1; i >= 0; --i){
                var feature1 = features.item(i);
                var index = selected.indexOf(feature1);
                if (index > -1) // feature is already selected
                selected.splice(index, 1);
                else {
                    features.remove(feature1);
                    deselected.push(feature1);
                }
            }
            if (selected.length !== 0) features.extend(selected);
        } else {
            // Modify the currently selected feature(s).
            map.forEachFeatureAtPixel(mapBrowserEvent.pixel, /**
             * @param {import("../Feature.js").FeatureLike} feature Feature.
             * @param {import("../layer/Layer.js").default} layer Layer.
             * @return {boolean|undefined} Continue to iterate over the features.
             */ (function(feature, layer) {
                if (this.filter_(feature, layer)) {
                    if ((add || toggle) && !(0, _arrayJs.includes)(features.getArray(), feature)) {
                        this.addFeatureLayerAssociation_(feature, layer);
                        selected.push(feature);
                    } else if ((remove || toggle) && (0, _arrayJs.includes)(features.getArray(), feature)) {
                        deselected.push(feature);
                        this.removeFeatureLayerAssociation_(feature);
                    }
                    return !this.multi_;
                }
            }).bind(this), {
                layerFilter: this.layerFilter_,
                hitTolerance: this.hitTolerance_
            });
            for(var j = deselected.length - 1; j >= 0; --j)features.remove(deselected[j]);
            features.extend(selected);
        }
        if (selected.length > 0 || deselected.length > 0) this.dispatchEvent(new SelectEvent(SelectEventType.SELECT, selected, deselected, mapBrowserEvent));
        return true;
    };
    return Select1;
}((0, _interactionJsDefault.default));
/**
 * @return {import("../style/Style.js").StyleFunction} Styles.
 */ function getDefaultStyleFunction() {
    var styles = (0, _styleJs.createEditingStyle)();
    (0, _arrayJs.extend)(styles[(0, _geometryTypeJsDefault.default).POLYGON], styles[(0, _geometryTypeJsDefault.default).LINE_STRING]);
    (0, _arrayJs.extend)(styles[(0, _geometryTypeJsDefault.default).GEOMETRY_COLLECTION], styles[(0, _geometryTypeJsDefault.default).LINE_STRING]);
    return function(feature) {
        if (!feature.getGeometry()) return null;
        return styles[feature.getGeometry().getType()];
    };
}
exports.default = Select;

},{"../Collection.js":"gReoh","../CollectionEventType.js":"82Ksf","../events/Event.js":"hwXQP","../geom/GeometryType.js":"j6daa","./Interaction.js":"g1FUs","../layer/Vector.js":"iTrAy","../functions.js":"iqv8I","../obj.js":"3ssAG","../style/Style.js":"fW7vC","../array.js":"1Fbic","../util.js":"pLBjQ","../events/condition.js":"iQTYY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"0zhsh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/interaction/Snap
 */ var _collectionEventTypeJs = require("../CollectionEventType.js");
var _collectionEventTypeJsDefault = parcelHelpers.interopDefault(_collectionEventTypeJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _geometryTypeJs = require("../geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _pointerJs = require("./Pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _rbushJs = require("../structs/RBush.js");
var _rbushJsDefault = parcelHelpers.interopDefault(_rbushJs);
var _vectorEventTypeJs = require("../source/VectorEventType.js");
var _vectorEventTypeJsDefault = parcelHelpers.interopDefault(_vectorEventTypeJs);
var _functionsJs = require("../functions.js");
var _extentJs = require("../extent.js");
var _coordinateJs = require("../coordinate.js");
var _polygonJs = require("../geom/Polygon.js");
var _projJs = require("../proj.js");
var _utilJs = require("../util.js");
var _objJs = require("../obj.js");
var _eventsJs = require("../events.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Result
 * @property {import("../coordinate.js").Coordinate|null} vertex Vertex.
 * @property {import("../pixel.js").Pixel|null} vertexPixel VertexPixel.
 */ /**
 * @typedef {Object} SegmentData
 * @property {import("../Feature.js").default} feature Feature.
 * @property {Array<import("../coordinate.js").Coordinate>} segment Segment.
 */ /**
 * @typedef {Object} Options
 * @property {import("../Collection.js").default<import("../Feature.js").default>} [features] Snap to these features. Either this option or source should be provided.
 * @property {boolean} [edge=true] Snap to edges.
 * @property {boolean} [vertex=true] Snap to vertices.
 * @property {number} [pixelTolerance=10] Pixel tolerance for considering the pointer close enough to a segment or
 * vertex for snapping.
 * @property {import("../source/Vector.js").default} [source] Snap to features from this source. Either this option or features should be provided
 */ /**
 * @param  {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
 * @return {import("../Feature.js").default} Feature.
 */ function getFeatureFromEvent(evt) {
    if (/** @type {import("../source/Vector.js").VectorSourceEvent} */ evt.feature) return /** @type {import("../source/Vector.js").VectorSourceEvent} */ evt.feature;
    else if (/** @type {import("../Collection.js").CollectionEvent} */ evt.element) return /** @type {import("../Collection.js").CollectionEvent} */ evt.element;
}
var tempSegment = [];
/**
 * @classdesc
 * Handles snapping of vector features while modifying or drawing them.  The
 * features can come from a {@link module:ol/source/Vector~VectorSource} or {@link module:ol/Collection~Collection}
 * Any interaction object that allows the user to interact
 * with the features using the mouse can benefit from the snapping, as long
 * as it is added before.
 *
 * The snap interaction modifies map browser event `coordinate` and `pixel`
 * properties to force the snap to occur to any interaction that them.
 *
 * Example:
 *
 *     import Snap from 'ol/interaction/Snap';
 *
 *     const snap = new Snap({
 *       source: source
 *     });
 *
 *     map.addInteraction(snap);
 *
 * @api
 */ var Snap = /** @class */ function(_super) {
    __extends(Snap1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function Snap1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        var pointerOptions = options;
        if (!pointerOptions.handleDownEvent) pointerOptions.handleDownEvent = (0, _functionsJs.TRUE);
        if (!pointerOptions.stopDown) pointerOptions.stopDown = (0, _functionsJs.FALSE);
        _this = _super.call(this, pointerOptions) || this;
        /**
         * @type {import("../source/Vector.js").default|null}
         * @private
         */ _this.source_ = options.source ? options.source : null;
        /**
         * @private
         * @type {boolean}
         */ _this.vertex_ = options.vertex !== undefined ? options.vertex : true;
        /**
         * @private
         * @type {boolean}
         */ _this.edge_ = options.edge !== undefined ? options.edge : true;
        /**
         * @type {import("../Collection.js").default<import("../Feature.js").default>|null}
         * @private
         */ _this.features_ = options.features ? options.features : null;
        /**
         * @type {Array<import("../events.js").EventsKey>}
         * @private
         */ _this.featuresListenerKeys_ = [];
        /**
         * @type {Object<string, import("../events.js").EventsKey>}
         * @private
         */ _this.featureChangeListenerKeys_ = {};
        /**
         * Extents are preserved so indexed segment can be quickly removed
         * when its feature geometry changes
         * @type {Object<string, import("../extent.js").Extent>}
         * @private
         */ _this.indexedFeaturesExtents_ = {};
        /**
         * If a feature geometry changes while a pointer drag|move event occurs, the
         * feature doesn't get updated right away.  It will be at the next 'pointerup'
         * event fired.
         * @type {!Object<string, import("../Feature.js").default>}
         * @private
         */ _this.pendingFeatures_ = {};
        /**
         * @type {number}
         * @private
         */ _this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;
        /**
         * Segment RTree for each layer
         * @type {import("../structs/RBush.js").default<SegmentData>}
         * @private
         */ _this.rBush_ = new (0, _rbushJsDefault.default)();
        /**
         * @const
         * @private
         * @type {Object<string, function(Array<Array<import('../coordinate.js').Coordinate>>, import("../geom/Geometry.js").default): void>}
         */ _this.GEOMETRY_SEGMENTERS_ = {
            "Point": _this.segmentPointGemetry_.bind(_this),
            "LineString": _this.segmentLineStringGemetry_.bind(_this),
            "LinearRing": _this.segmentLineStringGemetry_.bind(_this),
            "Polygon": _this.segmentPolygonGemetry_.bind(_this),
            "MultiPoint": _this.segmentMultiPointGemetry_.bind(_this),
            "MultiLineString": _this.segmentMultiLineStringGemetry_.bind(_this),
            "MultiPolygon": _this.segmentMultiPolygonGemetry_.bind(_this),
            "GeometryCollection": _this.segmentGeometryCollectionGemetry_.bind(_this),
            "Circle": _this.segmentCircleGemetry_.bind(_this)
        };
        return _this;
    }
    /**
     * Add a feature to the collection of features that we may snap to.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {boolean} [opt_listen] Whether to listen to the feature change or not
     *     Defaults to `true`.
     * @api
     */ Snap1.prototype.addFeature = function(feature, opt_listen) {
        var register = opt_listen !== undefined ? opt_listen : true;
        var feature_uid = (0, _utilJs.getUid)(feature);
        var geometry = feature.getGeometry();
        if (geometry) {
            var segmenter = this.GEOMETRY_SEGMENTERS_[geometry.getType()];
            if (segmenter) {
                this.indexedFeaturesExtents_[feature_uid] = geometry.getExtent((0, _extentJs.createEmpty)());
                var segments = [];
                segmenter(segments, geometry);
                if (segments.length === 1) this.rBush_.insert((0, _extentJs.boundingExtent)(segments[0]), {
                    feature: feature,
                    segment: segments[0]
                });
                else if (segments.length > 1) {
                    var extents = segments.map(function(s) {
                        return (0, _extentJs.boundingExtent)(s);
                    });
                    var segmentsData = segments.map(function(segment) {
                        return {
                            feature: feature,
                            segment: segment
                        };
                    });
                    this.rBush_.load(extents, segmentsData);
                }
            }
        }
        if (register) this.featureChangeListenerKeys_[feature_uid] = (0, _eventsJs.listen)(feature, (0, _eventTypeJsDefault.default).CHANGE, this.handleFeatureChange_, this);
    };
    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @private
     */ Snap1.prototype.forEachFeatureAdd_ = function(feature) {
        this.addFeature(feature);
    };
    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @private
     */ Snap1.prototype.forEachFeatureRemove_ = function(feature) {
        this.removeFeature(feature);
    };
    /**
     * @return {import("../Collection.js").default<import("../Feature.js").default>|Array<import("../Feature.js").default>} Features.
     * @private
     */ Snap1.prototype.getFeatures_ = function() {
        var features;
        if (this.features_) features = this.features_;
        else if (this.source_) features = this.source_.getFeatures();
        return features;
    };
    /**
     * @param {import("../MapBrowserEvent.js").default} evt Map browser event.
     * @return {boolean} `false` to stop event propagation.
     */ Snap1.prototype.handleEvent = function(evt) {
        var result = this.snapTo(evt.pixel, evt.coordinate, evt.map);
        if (result) {
            evt.coordinate = result.vertex.slice(0, 2);
            evt.pixel = result.vertexPixel;
        }
        return _super.prototype.handleEvent.call(this, evt);
    };
    /**
     * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */ Snap1.prototype.handleFeatureAdd_ = function(evt) {
        var feature = getFeatureFromEvent(evt);
        this.addFeature(feature);
    };
    /**
     * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
     * @private
     */ Snap1.prototype.handleFeatureRemove_ = function(evt) {
        var feature = getFeatureFromEvent(evt);
        this.removeFeature(feature);
    };
    /**
     * @param {import("../events/Event.js").default} evt Event.
     * @private
     */ Snap1.prototype.handleFeatureChange_ = function(evt) {
        var feature = evt.target;
        if (this.handlingDownUpSequence) {
            var uid = (0, _utilJs.getUid)(feature);
            if (!(uid in this.pendingFeatures_)) this.pendingFeatures_[uid] = feature;
        } else this.updateFeature_(feature);
    };
    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @return {boolean} If the event was consumed.
     */ Snap1.prototype.handleUpEvent = function(evt) {
        var featuresToUpdate = (0, _objJs.getValues)(this.pendingFeatures_);
        if (featuresToUpdate.length) {
            featuresToUpdate.forEach(this.updateFeature_.bind(this));
            this.pendingFeatures_ = {};
        }
        return false;
    };
    /**
     * Remove a feature from the collection of features that we may snap to.
     * @param {import("../Feature.js").default} feature Feature
     * @param {boolean} [opt_unlisten] Whether to unlisten to the feature change
     *     or not. Defaults to `true`.
     * @api
     */ Snap1.prototype.removeFeature = function(feature, opt_unlisten) {
        var unregister = opt_unlisten !== undefined ? opt_unlisten : true;
        var feature_uid = (0, _utilJs.getUid)(feature);
        var extent = this.indexedFeaturesExtents_[feature_uid];
        if (extent) {
            var rBush = this.rBush_;
            var nodesToRemove_1 = [];
            rBush.forEachInExtent(extent, function(node) {
                if (feature === node.feature) nodesToRemove_1.push(node);
            });
            for(var i = nodesToRemove_1.length - 1; i >= 0; --i)rBush.remove(nodesToRemove_1[i]);
        }
        if (unregister) {
            (0, _eventsJs.unlistenByKey)(this.featureChangeListenerKeys_[feature_uid]);
            delete this.featureChangeListenerKeys_[feature_uid];
        }
    };
    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default} map Map.
     */ Snap1.prototype.setMap = function(map) {
        var currentMap = this.getMap();
        var keys = this.featuresListenerKeys_;
        var features = /** @type {Array<import("../Feature.js").default>} */ this.getFeatures_();
        if (currentMap) {
            keys.forEach((0, _eventsJs.unlistenByKey));
            keys.length = 0;
            features.forEach(this.forEachFeatureRemove_.bind(this));
        }
        _super.prototype.setMap.call(this, map);
        if (map) {
            if (this.features_) keys.push((0, _eventsJs.listen)(this.features_, (0, _collectionEventTypeJsDefault.default).ADD, this.handleFeatureAdd_, this), (0, _eventsJs.listen)(this.features_, (0, _collectionEventTypeJsDefault.default).REMOVE, this.handleFeatureRemove_, this));
            else if (this.source_) keys.push((0, _eventsJs.listen)(this.source_, (0, _vectorEventTypeJsDefault.default).ADDFEATURE, this.handleFeatureAdd_, this), (0, _eventsJs.listen)(this.source_, (0, _vectorEventTypeJsDefault.default).REMOVEFEATURE, this.handleFeatureRemove_, this));
            features.forEach(this.forEachFeatureAdd_.bind(this));
        }
    };
    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel
     * @param {import("../coordinate.js").Coordinate} pixelCoordinate Coordinate
     * @param {import("../PluggableMap.js").default} map Map.
     * @return {Result|null} Snap result
     */ Snap1.prototype.snapTo = function(pixel, pixelCoordinate, map) {
        var lowerLeft = map.getCoordinateFromPixel([
            pixel[0] - this.pixelTolerance_,
            pixel[1] + this.pixelTolerance_, 
        ]);
        var upperRight = map.getCoordinateFromPixel([
            pixel[0] + this.pixelTolerance_,
            pixel[1] - this.pixelTolerance_, 
        ]);
        var box = (0, _extentJs.boundingExtent)([
            lowerLeft,
            upperRight
        ]);
        var segments = this.rBush_.getInExtent(box);
        var segmentsLength = segments.length;
        if (segmentsLength === 0) return null;
        var projection = map.getView().getProjection();
        var projectedCoordinate = (0, _projJs.fromUserCoordinate)(pixelCoordinate, projection);
        var closestVertex;
        var minSquaredDistance = Infinity;
        var squaredPixelTolerance = this.pixelTolerance_ * this.pixelTolerance_;
        var getResult = function() {
            if (closestVertex) {
                var vertexPixel = map.getPixelFromCoordinate(closestVertex);
                var squaredPixelDistance = (0, _coordinateJs.squaredDistance)(pixel, vertexPixel);
                if (squaredPixelDistance <= squaredPixelTolerance) return {
                    vertex: closestVertex,
                    vertexPixel: [
                        Math.round(vertexPixel[0]),
                        Math.round(vertexPixel[1]), 
                    ]
                };
            }
            return null;
        };
        if (this.vertex_) {
            for(var i = 0; i < segmentsLength; ++i){
                var segmentData = segments[i];
                if (segmentData.feature.getGeometry().getType() !== (0, _geometryTypeJsDefault.default).CIRCLE) segmentData.segment.forEach(function(vertex) {
                    var tempVertexCoord = (0, _projJs.fromUserCoordinate)(vertex, projection);
                    var delta = (0, _coordinateJs.squaredDistance)(projectedCoordinate, tempVertexCoord);
                    if (delta < minSquaredDistance) {
                        closestVertex = vertex;
                        minSquaredDistance = delta;
                    }
                });
            }
            var result = getResult();
            if (result) return result;
        }
        if (this.edge_) {
            for(var i = 0; i < segmentsLength; ++i){
                var vertex1 = null;
                var segmentData = segments[i];
                if (segmentData.feature.getGeometry().getType() === (0, _geometryTypeJsDefault.default).CIRCLE) {
                    var circleGeometry = segmentData.feature.getGeometry();
                    var userProjection = (0, _projJs.getUserProjection)();
                    if (userProjection) circleGeometry = circleGeometry.clone().transform(userProjection, projection);
                    vertex1 = (0, _projJs.toUserCoordinate)((0, _coordinateJs.closestOnCircle)(projectedCoordinate, circleGeometry), projection);
                } else {
                    var _a = segmentData.segment, segmentStart = _a[0], segmentEnd = _a[1];
                    // points have only one coordinate
                    if (segmentEnd) {
                        tempSegment[0] = (0, _projJs.fromUserCoordinate)(segmentStart, projection);
                        tempSegment[1] = (0, _projJs.fromUserCoordinate)(segmentEnd, projection);
                        vertex1 = (0, _coordinateJs.closestOnSegment)(projectedCoordinate, tempSegment);
                    }
                }
                if (vertex1) {
                    var delta1 = (0, _coordinateJs.squaredDistance)(projectedCoordinate, vertex1);
                    if (delta1 < minSquaredDistance) {
                        closestVertex = vertex1;
                        minSquaredDistance = delta1;
                    }
                }
            }
            var result = getResult();
            if (result) return result;
        }
        return null;
    };
    /**
     * @param {import("../Feature.js").default} feature Feature
     * @private
     */ Snap1.prototype.updateFeature_ = function(feature) {
        this.removeFeature(feature, false);
        this.addFeature(feature, false);
    };
    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @private
     */ Snap1.prototype.segmentCircleGemetry_ = function(segments, geometry) {
        var projection = this.getMap().getView().getProjection();
        var circleGeometry = geometry;
        var userProjection = (0, _projJs.getUserProjection)();
        if (userProjection) circleGeometry = /** @type {import("../geom/Circle.js").default} */ circleGeometry.clone().transform(userProjection, projection);
        var polygon = (0, _polygonJs.fromCircle)(circleGeometry);
        if (userProjection) polygon.transform(projection, userProjection);
        var coordinates = polygon.getCoordinates()[0];
        for(var i = 0, ii = coordinates.length - 1; i < ii; ++i)segments.push(coordinates.slice(i, i + 2));
    };
    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @private
     */ Snap1.prototype.segmentGeometryCollectionGemetry_ = function(segments, geometry) {
        var geometries = geometry.getGeometriesArray();
        for(var i = 0; i < geometries.length; ++i){
            var segmenter = this.GEOMETRY_SEGMENTERS_[geometries[i].getType()];
            if (segmenter) segmenter(segments, geometries[i]);
        }
    };
    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/LineString.js").default} geometry Geometry.
     * @private
     */ Snap1.prototype.segmentLineStringGemetry_ = function(segments, geometry) {
        var coordinates = geometry.getCoordinates();
        for(var i = 0, ii = coordinates.length - 1; i < ii; ++i)segments.push(coordinates.slice(i, i + 2));
    };
    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
     * @private
     */ Snap1.prototype.segmentMultiLineStringGemetry_ = function(segments, geometry) {
        var lines = geometry.getCoordinates();
        for(var j = 0, jj = lines.length; j < jj; ++j){
            var coordinates = lines[j];
            for(var i = 0, ii = coordinates.length - 1; i < ii; ++i)segments.push(coordinates.slice(i, i + 2));
        }
    };
    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
     * @private
     */ Snap1.prototype.segmentMultiPointGemetry_ = function(segments, geometry) {
        geometry.getCoordinates().forEach(function(point) {
            segments.push([
                point
            ]);
        });
    };
    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @private
     */ Snap1.prototype.segmentMultiPolygonGemetry_ = function(segments, geometry) {
        var polygons = geometry.getCoordinates();
        for(var k = 0, kk = polygons.length; k < kk; ++k){
            var rings = polygons[k];
            for(var j = 0, jj = rings.length; j < jj; ++j){
                var coordinates = rings[j];
                for(var i = 0, ii = coordinates.length - 1; i < ii; ++i)segments.push(coordinates.slice(i, i + 2));
            }
        }
    };
    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/Point.js").default} geometry Geometry.
     * @private
     */ Snap1.prototype.segmentPointGemetry_ = function(segments, geometry) {
        segments.push([
            geometry.getCoordinates()
        ]);
    };
    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/Polygon.js").default} geometry Geometry.
     * @private
     */ Snap1.prototype.segmentPolygonGemetry_ = function(segments, geometry) {
        var rings = geometry.getCoordinates();
        for(var j = 0, jj = rings.length; j < jj; ++j){
            var coordinates = rings[j];
            for(var i = 0, ii = coordinates.length - 1; i < ii; ++i)segments.push(coordinates.slice(i, i + 2));
        }
    };
    return Snap1;
}((0, _pointerJsDefault.default));
exports.default = Snap;

},{"../CollectionEventType.js":"82Ksf","../events/EventType.js":"hrQJ6","../geom/GeometryType.js":"j6daa","./Pointer.js":"1GIxf","../structs/RBush.js":"ewGrv","../source/VectorEventType.js":"6IruY","../functions.js":"iqv8I","../extent.js":"6YrVc","../coordinate.js":"85Vu7","../geom/Polygon.js":"cJuQF","../proj.js":"SznqC","../util.js":"pLBjQ","../obj.js":"3ssAG","../events.js":"dcspA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bfZjJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TranslateEvent", ()=>TranslateEvent);
/**
 * @module ol/interaction/Translate
 */ var _collectionJs = require("../Collection.js");
var _collectionJsDefault = parcelHelpers.interopDefault(_collectionJs);
var _eventJs = require("../events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _propertyJs = require("./Property.js");
var _propertyJsDefault = parcelHelpers.interopDefault(_propertyJs);
var _pointerJs = require("./Pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _functionsJs = require("../functions.js");
var _conditionJs = require("../events/condition.js");
var _arrayJs = require("../array.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @enum {string}
 */ var TranslateEventType = {
    /**
     * Triggered upon feature translation start.
     * @event TranslateEvent#translatestart
     * @api
     */ TRANSLATESTART: "translatestart",
    /**
     * Triggered upon feature translation.
     * @event TranslateEvent#translating
     * @api
     */ TRANSLATING: "translating",
    /**
     * Triggered upon feature translation end.
     * @event TranslateEvent#translateend
     * @api
     */ TRANSLATEEND: "translateend"
};
/**
 * A function that takes an {@link module:ol/Feature~Feature} or
 * {@link module:ol/render/Feature~RenderFeature} and an
 * {@link module:ol/layer/Layer~Layer} and returns `true` if the feature may be
 * translated or `false` otherwise.
 * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default<import("../source/Source").default>):boolean} FilterFunction
 */ /**
 * @typedef {Object} Options
 * @property {import("../events/condition.js").Condition} [condition] A function that
 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
 * boolean to indicate whether that event should be handled.
 * Default is {@link module:ol/events/condition.always}.
 * @property {Collection<import("../Feature.js").default>} [features] Features contained in this collection will be able to be translated together.
 * @property {Array<import("../layer/Layer.js").default>|function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean} [layers] A list of layers from which features should be
 * translated. Alternatively, a filter function can be provided. The
 * function will be called for each layer in the map and should return
 * `true` for layers that you want to be translatable. If the option is
 * absent, all visible layers will be considered translatable.
 * Not used if `features` is provided.
 * @property {FilterFunction} [filter] A function
 * that takes an {@link module:ol/Feature~Feature} and an
 * {@link module:ol/layer/Layer~Layer} and returns `true` if the feature may be
 * translated or `false` otherwise. Not used if `features` is provided.
 * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside the radius around the given position
 * will be checked for features.
 */ /**
 * @classdesc
 * Events emitted by {@link module:ol/interaction/Translate~Translate} instances
 * are instances of this type.
 */ var TranslateEvent = /** @class */ function(_super) {
    __extends(TranslateEvent1, _super);
    /**
     * @param {TranslateEventType} type Type.
     * @param {Collection<import("../Feature.js").default>} features The features translated.
     * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
     * @param {import("../coordinate.js").Coordinate} startCoordinate The original coordinates before.translation started
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     */ function TranslateEvent1(type, features, coordinate, startCoordinate, mapBrowserEvent) {
        var _this = _super.call(this, type) || this;
        /**
         * The features being translated.
         * @type {Collection<import("../Feature.js").default>}
         * @api
         */ _this.features = features;
        /**
         * The coordinate of the drag event.
         * @const
         * @type {import("../coordinate.js").Coordinate}
         * @api
         */ _this.coordinate = coordinate;
        /**
         * The coordinate of the start position before translation started.
         * @const
         * @type {import("../coordinate.js").Coordinate}
         * @api
         */ _this.startCoordinate = startCoordinate;
        /**
         * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
         * @type {import("../MapBrowserEvent.js").default}
         * @api
         */ _this.mapBrowserEvent = mapBrowserEvent;
        return _this;
    }
    return TranslateEvent1;
}((0, _eventJsDefault.default));
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
 *     'change:active', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<'translateend'|'translatestart'|'translating', TranslateEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     'change:active'|'translateend'|'translatestart'|'translating', Return>} TranslateOnSignature
 */ /**
 * @classdesc
 * Interaction for translating (moving) features.
 * If you want to translate multiple features in a single action (for example,
 * the collection used by a select interaction), construct the interaction with
 * the `features` option.
 *
 * @fires TranslateEvent
 * @api
 */ var Translate = /** @class */ function(_super) {
    __extends(Translate1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function Translate1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        _this = _super.call(this, options) || this;
        /***
         * @type {TranslateOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {TranslateOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {TranslateOnSignature<void>}
         */ _this.un;
        /**
         * The last position we translated to.
         * @type {import("../coordinate.js").Coordinate}
         * @private
         */ _this.lastCoordinate_ = null;
        /**
         * The start position before translation started.
         * @type {import("../coordinate.js").Coordinate}
         * @private
         */ _this.startCoordinate_ = null;
        /**
         * @type {Collection<import("../Feature.js").default>|null}
         * @private
         */ _this.features_ = options.features !== undefined ? options.features : null;
        /** @type {function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean} */ var layerFilter;
        if (options.layers && !_this.features_) {
            if (typeof options.layers === "function") layerFilter = options.layers;
            else {
                var layers_1 = options.layers;
                layerFilter = function(layer) {
                    return (0, _arrayJs.includes)(layers_1, layer);
                };
            }
        } else layerFilter = (0, _functionsJs.TRUE);
        /**
         * @private
         * @type {function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean}
         */ _this.layerFilter_ = layerFilter;
        /**
         * @private
         * @type {FilterFunction}
         */ _this.filter_ = options.filter && !_this.features_ ? options.filter : (0, _functionsJs.TRUE);
        /**
         * @private
         * @type {number}
         */ _this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;
        /**
         * @private
         * @type {import("../events/condition.js").Condition}
         */ _this.condition_ = options.condition ? options.condition : (0, _conditionJs.always);
        /**
         * @type {import("../Feature.js").default}
         * @private
         */ _this.lastFeature_ = null;
        _this.addChangeListener((0, _propertyJsDefault.default).ACTIVE, _this.handleActiveChanged_);
        return _this;
    }
    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} If the event was consumed.
     */ Translate1.prototype.handleDownEvent = function(event) {
        if (!event.originalEvent || !this.condition_(event)) return false;
        this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);
        if (!this.lastCoordinate_ && this.lastFeature_) {
            this.startCoordinate_ = event.coordinate;
            this.lastCoordinate_ = event.coordinate;
            this.handleMoveEvent(event);
            var features = this.features_ || new (0, _collectionJsDefault.default)([
                this.lastFeature_
            ]);
            this.dispatchEvent(new TranslateEvent(TranslateEventType.TRANSLATESTART, features, event.coordinate, this.startCoordinate_, event));
            return true;
        }
        return false;
    };
    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} If the event was consumed.
     */ Translate1.prototype.handleUpEvent = function(event) {
        if (this.lastCoordinate_) {
            this.lastCoordinate_ = null;
            this.handleMoveEvent(event);
            var features = this.features_ || new (0, _collectionJsDefault.default)([
                this.lastFeature_
            ]);
            this.dispatchEvent(new TranslateEvent(TranslateEventType.TRANSLATEEND, features, event.coordinate, this.startCoordinate_, event));
            // cleanup
            this.startCoordinate_ = null;
            return true;
        }
        return false;
    };
    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     */ Translate1.prototype.handleDragEvent = function(event) {
        if (this.lastCoordinate_) {
            var newCoordinate = event.coordinate;
            var deltaX_1 = newCoordinate[0] - this.lastCoordinate_[0];
            var deltaY_1 = newCoordinate[1] - this.lastCoordinate_[1];
            var features = this.features_ || new (0, _collectionJsDefault.default)([
                this.lastFeature_
            ]);
            features.forEach(function(feature) {
                var geom = feature.getGeometry();
                geom.translate(deltaX_1, deltaY_1);
                feature.setGeometry(geom);
            });
            this.lastCoordinate_ = newCoordinate;
            this.dispatchEvent(new TranslateEvent(TranslateEventType.TRANSLATING, features, newCoordinate, this.startCoordinate_, event));
        }
    };
    /**
     * Handle pointer move events.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     */ Translate1.prototype.handleMoveEvent = function(event) {
        var elem = event.map.getViewport();
        // Change the cursor to grab/grabbing if hovering any of the features managed
        // by the interaction
        if (this.featuresAtPixel_(event.pixel, event.map)) {
            elem.classList.remove(this.lastCoordinate_ ? "ol-grab" : "ol-grabbing");
            elem.classList.add(this.lastCoordinate_ ? "ol-grabbing" : "ol-grab");
        } else elem.classList.remove("ol-grab", "ol-grabbing");
    };
    /**
     * Tests to see if the given coordinates intersects any of our selected
     * features.
     * @param {import("../pixel.js").Pixel} pixel Pixel coordinate to test for intersection.
     * @param {import("../PluggableMap.js").default} map Map to test the intersection on.
     * @return {import("../Feature.js").default} Returns the feature found at the specified pixel
     * coordinates.
     * @private
     */ Translate1.prototype.featuresAtPixel_ = function(pixel, map) {
        return map.forEachFeatureAtPixel(pixel, (function(feature, layer) {
            if (this.filter_(feature, layer)) {
                if (!this.features_ || (0, _arrayJs.includes)(this.features_.getArray(), feature)) return feature;
            }
        }).bind(this), {
            layerFilter: this.layerFilter_,
            hitTolerance: this.hitTolerance_
        });
    };
    /**
     * Returns the Hit-detection tolerance.
     * @return {number} Hit tolerance in pixels.
     * @api
     */ Translate1.prototype.getHitTolerance = function() {
        return this.hitTolerance_;
    };
    /**
     * Hit-detection tolerance. Pixels inside the radius around the given position
     * will be checked for features.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @api
     */ Translate1.prototype.setHitTolerance = function(hitTolerance) {
        this.hitTolerance_ = hitTolerance;
    };
    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../PluggableMap.js").default} map Map.
     */ Translate1.prototype.setMap = function(map) {
        var oldMap = this.getMap();
        _super.prototype.setMap.call(this, map);
        this.updateState_(oldMap);
    };
    /**
     * @private
     */ Translate1.prototype.handleActiveChanged_ = function() {
        this.updateState_(null);
    };
    /**
     * @param {import("../PluggableMap.js").default} oldMap Old map.
     * @private
     */ Translate1.prototype.updateState_ = function(oldMap) {
        var map = this.getMap();
        var active = this.getActive();
        if (!map || !active) {
            map = map || oldMap;
            if (map) {
                var elem = map.getViewport();
                elem.classList.remove("ol-grab", "ol-grabbing");
            }
        }
    };
    return Translate1;
}((0, _pointerJsDefault.default));
exports.default = Translate;

},{"../Collection.js":"gReoh","../events/Event.js":"hwXQP","./Property.js":"lHt12","./Pointer.js":"1GIxf","../functions.js":"iqv8I","../events/condition.js":"iQTYY","../array.js":"1Fbic","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dmxOv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ATTRIBUTION", ()=>ATTRIBUTION);
var _xyzJs = require("./XYZ.js");
var _xyzJsDefault = parcelHelpers.interopDefault(_xyzJs);
/**
 * @module ol/source/OSM
 */ var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var ATTRIBUTION = '&#169; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.';
/**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
 * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
 * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.
 * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
 * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
 * @property {number} [maxZoom=19] Max zoom.
 * @property {boolean} [opaque=true] Whether the layer is opaque.
 * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {number} [transition=250] Duration of the opacity transition for rendering.
 * To disable the opacity transition, pass `transition: 0`.
 * @property {string} [url='https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.
 * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
 * Choose whether to use tiles with a higher or lower zoom level when between integer
 * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
 */ /**
 * @classdesc
 * Layer source for the OpenStreetMap tile server.
 * @api
 */ var OSM = /** @class */ function(_super) {
    __extends(OSM1, _super);
    /**
     * @param {Options} [opt_options] Open Street Map options.
     */ function OSM1(opt_options) {
        var options = opt_options || {};
        var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;
        if (options.interpolate !== undefined) interpolate = options.interpolate;
        var attributions;
        if (options.attributions !== undefined) attributions = options.attributions;
        else attributions = [
            ATTRIBUTION
        ];
        var crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : "anonymous";
        var url = options.url !== undefined ? options.url : "https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png";
        return _super.call(this, {
            attributions: attributions,
            attributionsCollapsible: false,
            cacheSize: options.cacheSize,
            crossOrigin: crossOrigin,
            interpolate: interpolate,
            maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,
            opaque: options.opaque !== undefined ? options.opaque : true,
            reprojectionErrorThreshold: options.reprojectionErrorThreshold,
            tileLoadFunction: options.tileLoadFunction,
            transition: options.transition,
            url: url,
            wrapX: options.wrapX,
            zDirection: options.zDirection
        }) || this;
    }
    return OSM1;
}((0, _xyzJsDefault.default));
exports.default = OSM;

},{"./XYZ.js":"7BJTx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7BJTx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tileImageJs = require("./TileImage.js");
var _tileImageJsDefault = parcelHelpers.interopDefault(_tileImageJs);
var _tilegridJs = require("../tilegrid.js");
/**
 * @module ol/source/XYZ
 */ var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
 * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
 * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.
 * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
 * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
 * @property {boolean} [opaque=false] Whether the layer is opaque.
 * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection.
 * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.
 * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.
 * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.
 * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
 * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
 * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
 * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
 * should be set to `2`.
 * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
 * Not used if `tileGrid` is provided.
 * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get
 * tile URL given a tile coordinate and the projection.
 * Required if `url` or `urls` are not provided.
 * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,
 * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,
 * may be used instead of defining each one separately in the `urls` option.
 * @property {Array<string>} [urls] An array of URL templates.
 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
 * @property {number} [transition=250] Duration of the opacity transition for rendering.
 * To disable the opacity transition, pass `transition: 0`.
 * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
 * Choose whether to use tiles with a higher or lower zoom level when between integer
 * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
 */ /**
 * @classdesc
 * Layer source for tile data with URLs in a set XYZ format that are
 * defined in a URL template. By default, this follows the widely-used
 * Google grid where `x` 0 and `y` 0 are in the top left. Grids like
 * TMS where `x` 0 and `y` 0 are in the bottom left can be used by
 * using the `{-y}` placeholder in the URL template, so long as the
 * source does not have a custom tile grid. In this case
 * a `tileUrlFunction` can be used, such as:
 * ```js
 *  tileUrlFunction: function(coordinate) {
 *    return 'http://mapserver.com/' + coordinate[0] + '/' +
 *      coordinate[1] + '/' + (-coordinate[2] - 1) + '.png';
 *  }
 * ```
 * @api
 */ var XYZ = /** @class */ function(_super) {
    __extends(XYZ1, _super);
    /**
     * @param {Options} [opt_options] XYZ options.
     */ function XYZ1(opt_options) {
        var options = opt_options || {};
        var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;
        if (options.interpolate !== undefined) interpolate = options.interpolate;
        var projection = options.projection !== undefined ? options.projection : "EPSG:3857";
        var tileGrid = options.tileGrid !== undefined ? options.tileGrid : (0, _tilegridJs.createXYZ)({
            extent: (0, _tilegridJs.extentFromProjection)(projection),
            maxResolution: options.maxResolution,
            maxZoom: options.maxZoom,
            minZoom: options.minZoom,
            tileSize: options.tileSize
        });
        return _super.call(this, {
            attributions: options.attributions,
            cacheSize: options.cacheSize,
            crossOrigin: options.crossOrigin,
            interpolate: interpolate,
            opaque: options.opaque,
            projection: projection,
            reprojectionErrorThreshold: options.reprojectionErrorThreshold,
            tileGrid: tileGrid,
            tileLoadFunction: options.tileLoadFunction,
            tilePixelRatio: options.tilePixelRatio,
            tileUrlFunction: options.tileUrlFunction,
            url: options.url,
            urls: options.urls,
            wrapX: options.wrapX !== undefined ? options.wrapX : true,
            transition: options.transition,
            attributionsCollapsible: options.attributionsCollapsible,
            zDirection: options.zDirection
        }) || this;
    }
    return XYZ1;
}((0, _tileImageJsDefault.default));
exports.default = XYZ;

},{"./TileImage.js":"2cBKP","../tilegrid.js":"1Yr4i","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2cBKP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/source/TileImage
 */ var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _imageTileJs = require("../ImageTile.js");
var _imageTileJsDefault = parcelHelpers.interopDefault(_imageTileJs);
var _tileJs = require("../reproj/Tile.js");
var _tileJsDefault = parcelHelpers.interopDefault(_tileJs);
var _tileCacheJs = require("../TileCache.js");
var _tileCacheJsDefault = parcelHelpers.interopDefault(_tileCacheJs);
var _tileStateJs = require("../TileState.js");
var _tileStateJsDefault = parcelHelpers.interopDefault(_tileStateJs);
var _urlTileJs = require("./UrlTile.js");
var _urlTileJsDefault = parcelHelpers.interopDefault(_urlTileJs);
var _commonJs = require("../reproj/common.js");
var _projJs = require("../proj.js");
var _tilecoordJs = require("../tilecoord.js");
var _tilegridJs = require("../tilegrid.js");
var _utilJs = require("../util.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
 * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
 * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
 * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.
 * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
 * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
 * @property {boolean} [opaque=false] Whether the layer is opaque.
 * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
 * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
 * Higher values can increase reprojection performance, but decrease precision.
 * @property {import("./State.js").default} [state] Source state.
 * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
 * Default is {@link module:ol/ImageTile~ImageTile}.
 * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
 * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
 * ```js
 * function(imageTile, src) {
 *   imageTile.getImage().src = src;
 * };
 * ```
 * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile
 * service advertizes 256px by 256px tiles but actually sends 512px
 * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
 * should be set to `2`.
 * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
 * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
 * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
 * used instead of defining each one separately in the `urls` option.
 * @property {Array<string>} [urls] An array of URL templates.
 * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to
 * request out-of-bounds tiles from the server. When set to `false`, only one
 * world will be rendered. When set to `true`, tiles will be requested for one
 * world only, but they will be wrapped horizontally to render multiple worlds.
 * @property {number} [transition] Duration of the opacity transition for rendering.
 * To disable the opacity transition, pass `transition: 0`.
 * @property {string} [key] Optional tile key for proper cache fetching
 * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
 * Choose whether to use tiles with a higher or lower zoom level when between integer
 * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
 */ /**
 * @classdesc
 * Base class for sources providing images divided into a tile grid.
 *
 * @fires import("./Tile.js").TileSourceEvent
 * @api
 */ var TileImage = /** @class */ function(_super) {
    __extends(TileImage1, _super);
    /**
     * @param {!Options} options Image tile options.
     */ function TileImage1(options) {
        var _this = this;
        var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;
        if (options.interpolate !== undefined) interpolate = options.interpolate;
        _this = _super.call(this, {
            attributions: options.attributions,
            cacheSize: options.cacheSize,
            opaque: options.opaque,
            projection: options.projection,
            state: options.state,
            tileGrid: options.tileGrid,
            tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,
            tilePixelRatio: options.tilePixelRatio,
            tileUrlFunction: options.tileUrlFunction,
            url: options.url,
            urls: options.urls,
            wrapX: options.wrapX,
            transition: options.transition,
            interpolate: interpolate,
            key: options.key,
            attributionsCollapsible: options.attributionsCollapsible,
            zDirection: options.zDirection
        }) || this;
        /**
         * @protected
         * @type {?string}
         */ _this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;
        /**
         * @protected
         * @type {typeof ImageTile}
         */ _this.tileClass = options.tileClass !== undefined ? options.tileClass : (0, _imageTileJsDefault.default);
        /**
         * @protected
         * @type {!Object<string, TileCache>}
         */ _this.tileCacheForProjection = {};
        /**
         * @protected
         * @type {!Object<string, import("../tilegrid/TileGrid.js").default>}
         */ _this.tileGridForProjection = {};
        /**
         * @private
         * @type {number|undefined}
         */ _this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;
        /**
         * @private
         * @type {boolean}
         */ _this.renderReprojectionEdges_ = false;
        return _this;
    }
    /**
     * @return {boolean} Can expire cache.
     */ TileImage1.prototype.canExpireCache = function() {
        if (!(0, _commonJs.ENABLE_RASTER_REPROJECTION)) return _super.prototype.canExpireCache.call(this);
        if (this.tileCache.canExpireCache()) return true;
        else for(var key in this.tileCacheForProjection){
            if (this.tileCacheForProjection[key].canExpireCache()) return true;
        }
        return false;
    };
    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {!Object<string, boolean>} usedTiles Used tiles.
     */ TileImage1.prototype.expireCache = function(projection, usedTiles) {
        if (!(0, _commonJs.ENABLE_RASTER_REPROJECTION)) {
            _super.prototype.expireCache.call(this, projection, usedTiles);
            return;
        }
        var usedTileCache = this.getTileCacheForProjection(projection);
        this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});
        for(var id in this.tileCacheForProjection){
            var tileCache = this.tileCacheForProjection[id];
            tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});
        }
    };
    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {number} Gutter.
     */ TileImage1.prototype.getGutterForProjection = function(projection) {
        if ((0, _commonJs.ENABLE_RASTER_REPROJECTION) && this.getProjection() && projection && !(0, _projJs.equivalent)(this.getProjection(), projection)) return 0;
        else return this.getGutter();
    };
    /**
     * @return {number} Gutter.
     */ TileImage1.prototype.getGutter = function() {
        return 0;
    };
    /**
     * Return the key to be used for all tiles in the source.
     * @return {string} The key for all tiles.
     */ TileImage1.prototype.getKey = function() {
        var key = _super.prototype.getKey.call(this);
        if (!this.getInterpolate()) key += ":disable-interpolation";
        return key;
    };
    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {boolean} Opaque.
     */ TileImage1.prototype.getOpaque = function(projection) {
        if ((0, _commonJs.ENABLE_RASTER_REPROJECTION) && this.getProjection() && projection && !(0, _projJs.equivalent)(this.getProjection(), projection)) return false;
        else return _super.prototype.getOpaque.call(this, projection);
    };
    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
     */ TileImage1.prototype.getTileGridForProjection = function(projection) {
        if (!(0, _commonJs.ENABLE_RASTER_REPROJECTION)) return _super.prototype.getTileGridForProjection.call(this, projection);
        var thisProj = this.getProjection();
        if (this.tileGrid && (!thisProj || (0, _projJs.equivalent)(thisProj, projection))) return this.tileGrid;
        else {
            var projKey = (0, _utilJs.getUid)(projection);
            if (!(projKey in this.tileGridForProjection)) this.tileGridForProjection[projKey] = (0, _tilegridJs.getForProjection)(projection);
            return this.tileGridForProjection[projKey];
        }
    };
    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../TileCache.js").default} Tile cache.
     */ TileImage1.prototype.getTileCacheForProjection = function(projection) {
        if (!(0, _commonJs.ENABLE_RASTER_REPROJECTION)) return _super.prototype.getTileCacheForProjection.call(this, projection);
        var thisProj = this.getProjection();
        if (!thisProj || (0, _projJs.equivalent)(thisProj, projection)) return this.tileCache;
        else {
            var projKey = (0, _utilJs.getUid)(projection);
            if (!(projKey in this.tileCacheForProjection)) this.tileCacheForProjection[projKey] = new (0, _tileCacheJsDefault.default)(this.tileCache.highWaterMark);
            return this.tileCacheForProjection[projKey];
        }
    };
    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {string} key The key set on the tile.
     * @return {!ImageTile} Tile.
     * @private
     */ TileImage1.prototype.createTile_ = function(z, x, y, pixelRatio, projection, key) {
        var tileCoord = [
            z,
            x,
            y
        ];
        var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
        var tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;
        var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? (0, _tileStateJsDefault.default).IDLE : (0, _tileStateJsDefault.default).EMPTY, tileUrl !== undefined ? tileUrl : "", this.crossOrigin, this.tileLoadFunction, this.tileOptions);
        tile.key = key;
        tile.addEventListener((0, _eventTypeJsDefault.default).CHANGE, this.handleTileChange.bind(this));
        return tile;
    };
    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!(ImageTile|ReprojTile)} Tile.
     */ TileImage1.prototype.getTile = function(z1, x1, y1, pixelRatio1, projection) {
        var sourceProjection = this.getProjection();
        if (!(0, _commonJs.ENABLE_RASTER_REPROJECTION) || !sourceProjection || !projection || (0, _projJs.equivalent)(sourceProjection, projection)) return this.getTileInternal(z1, x1, y1, pixelRatio1, sourceProjection || projection);
        else {
            var cache = this.getTileCacheForProjection(projection);
            var tileCoord = [
                z1,
                x1,
                y1
            ];
            var tile = void 0;
            var tileCoordKey = (0, _tilecoordJs.getKey)(tileCoord);
            if (cache.containsKey(tileCoordKey)) tile = cache.get(tileCoordKey);
            var key = this.getKey();
            if (tile && tile.key == key) return tile;
            else {
                var sourceTileGrid = this.getTileGridForProjection(sourceProjection);
                var targetTileGrid = this.getTileGridForProjection(projection);
                var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
                var newTile = new (0, _tileJsDefault.default)(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio1), this.getGutter(), (function(z, x, y, pixelRatio) {
                    return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);
                }).bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.getInterpolate());
                newTile.key = key;
                if (tile) {
                    newTile.interimTile = tile;
                    newTile.refreshInterimChain();
                    cache.replace(tileCoordKey, newTile);
                } else cache.set(tileCoordKey, newTile);
                return newTile;
            }
        }
    };
    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {!import("../proj/Projection.js").default} projection Projection.
     * @return {!(ImageTile|ReprojTile)} Tile.
     * @protected
     */ TileImage1.prototype.getTileInternal = function(z, x, y, pixelRatio, projection) {
        var tile = null;
        var tileCoordKey = (0, _tilecoordJs.getKeyZXY)(z, x, y);
        var key = this.getKey();
        if (!this.tileCache.containsKey(tileCoordKey)) {
            tile = this.createTile_(z, x, y, pixelRatio, projection, key);
            this.tileCache.set(tileCoordKey, tile);
        } else {
            tile = this.tileCache.get(tileCoordKey);
            if (tile.key != key) {
                // The source's params changed. If the tile has an interim tile and if we
                // can use it then we use it. Otherwise we create a new tile.  In both
                // cases we attempt to assign an interim tile to the new tile.
                var interimTile = tile;
                tile = this.createTile_(z, x, y, pixelRatio, projection, key);
                //make the new tile the head of the list,
                if (interimTile.getState() == (0, _tileStateJsDefault.default).IDLE) //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it
                tile.interimTile = interimTile.interimTile;
                else tile.interimTile = interimTile;
                tile.refreshInterimChain();
                this.tileCache.replace(tileCoordKey, tile);
            }
        }
        return tile;
    };
    /**
     * Sets whether to render reprojection edges or not (usually for debugging).
     * @param {boolean} render Render the edges.
     * @api
     */ TileImage1.prototype.setRenderReprojectionEdges = function(render) {
        if (!(0, _commonJs.ENABLE_RASTER_REPROJECTION) || this.renderReprojectionEdges_ == render) return;
        this.renderReprojectionEdges_ = render;
        for(var id in this.tileCacheForProjection)this.tileCacheForProjection[id].clear();
        this.changed();
    };
    /**
     * Sets the tile grid to use when reprojecting the tiles to the given
     * projection instead of the default tile grid for the projection.
     *
     * This can be useful when the default tile grid cannot be created
     * (e.g. projection has no extent defined) or
     * for optimization reasons (custom tile size, resolutions, ...).
     *
     * @param {import("../proj.js").ProjectionLike} projection Projection.
     * @param {import("../tilegrid/TileGrid.js").default} tilegrid Tile grid to use for the projection.
     * @api
     */ TileImage1.prototype.setTileGridForProjection = function(projection, tilegrid) {
        if (0, _commonJs.ENABLE_RASTER_REPROJECTION) {
            var proj = (0, _projJs.get)(projection);
            if (proj) {
                var projKey = (0, _utilJs.getUid)(proj);
                if (!(projKey in this.tileGridForProjection)) this.tileGridForProjection[projKey] = tilegrid;
            }
        }
    };
    return TileImage1;
}((0, _urlTileJsDefault.default));
/**
 * @param {ImageTile} imageTile Image tile.
 * @param {string} src Source.
 */ function defaultTileLoadFunction(imageTile, src) {
    /** @type {HTMLImageElement|HTMLVideoElement} */ imageTile.getImage().src = src;
}
exports.default = TileImage;

},{"../events/EventType.js":"hrQJ6","../ImageTile.js":"bGt2E","../reproj/Tile.js":"lR1TX","../TileCache.js":"3AgyC","../TileState.js":"2fodI","./UrlTile.js":"2X3sL","../reproj/common.js":"qh92B","../proj.js":"SznqC","../tilecoord.js":"bZ2LT","../tilegrid.js":"1Yr4i","../util.js":"pLBjQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bGt2E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/ImageTile
 */ var _tileJs = require("./Tile.js");
var _tileJsDefault = parcelHelpers.interopDefault(_tileJs);
var _tileStateJs = require("./TileState.js");
var _tileStateJsDefault = parcelHelpers.interopDefault(_tileStateJs);
var _domJs = require("./dom.js");
var _imageJs = require("./Image.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var ImageTile = /** @class */ function(_super) {
    __extends(ImageTile1, _super);
    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("./TileState.js").default} state State.
     * @param {string} src Image source URI.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
     * @param {import("./Tile.js").Options} [opt_options] Tile options.
     */ function ImageTile1(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {
        var _this = _super.call(this, tileCoord, state, opt_options) || this;
        /**
         * @private
         * @type {?string}
         */ _this.crossOrigin_ = crossOrigin;
        /**
         * Image URI
         *
         * @private
         * @type {string}
         */ _this.src_ = src;
        _this.key = src;
        /**
         * @private
         * @type {HTMLImageElement|HTMLCanvasElement}
         */ _this.image_ = new Image();
        if (crossOrigin !== null) _this.image_.crossOrigin = crossOrigin;
        /**
         * @private
         * @type {?function():void}
         */ _this.unlisten_ = null;
        /**
         * @private
         * @type {import("./Tile.js").LoadFunction}
         */ _this.tileLoadFunction_ = tileLoadFunction;
        return _this;
    }
    /**
     * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @api
     */ ImageTile1.prototype.getImage = function() {
        return this.image_;
    };
    /**
     * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).
     * @param {HTMLCanvasElement|HTMLImageElement} element Element.
     */ ImageTile1.prototype.setImage = function(element) {
        this.image_ = element;
        this.state = (0, _tileStateJsDefault.default).LOADED;
        this.unlistenImage_();
        this.changed();
    };
    /**
     * Tracks loading or read errors.
     *
     * @private
     */ ImageTile1.prototype.handleImageError_ = function() {
        this.state = (0, _tileStateJsDefault.default).ERROR;
        this.unlistenImage_();
        this.image_ = getBlankImage();
        this.changed();
    };
    /**
     * Tracks successful image load.
     *
     * @private
     */ ImageTile1.prototype.handleImageLoad_ = function() {
        var image = this.image_;
        if (image.naturalWidth && image.naturalHeight) this.state = (0, _tileStateJsDefault.default).LOADED;
        else this.state = (0, _tileStateJsDefault.default).EMPTY;
        this.unlistenImage_();
        this.changed();
    };
    /**
     * Load not yet loaded URI.
     * @api
     */ ImageTile1.prototype.load = function() {
        if (this.state == (0, _tileStateJsDefault.default).ERROR) {
            this.state = (0, _tileStateJsDefault.default).IDLE;
            this.image_ = new Image();
            if (this.crossOrigin_ !== null) this.image_.crossOrigin = this.crossOrigin_;
        }
        if (this.state == (0, _tileStateJsDefault.default).IDLE) {
            this.state = (0, _tileStateJsDefault.default).LOADING;
            this.changed();
            this.tileLoadFunction_(this, this.src_);
            this.unlisten_ = (0, _imageJs.listenImage)(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
        }
    };
    /**
     * Discards event handlers which listen for load completion or errors.
     *
     * @private
     */ ImageTile1.prototype.unlistenImage_ = function() {
        if (this.unlisten_) {
            this.unlisten_();
            this.unlisten_ = null;
        }
    };
    return ImageTile1;
}((0, _tileJsDefault.default));
/**
 * Get a 1-pixel blank image.
 * @return {HTMLCanvasElement} Blank image.
 */ function getBlankImage() {
    var ctx = (0, _domJs.createCanvasContext2D)(1, 1);
    ctx.fillStyle = "rgba(0,0,0,0)";
    ctx.fillRect(0, 0, 1, 1);
    return ctx.canvas;
}
exports.default = ImageTile;

},{"./Tile.js":"4sqb5","./TileState.js":"2fodI","./dom.js":"84QzQ","./Image.js":"c0Egp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4sqb5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/Tile
 */ var _targetJs = require("./events/Target.js");
var _targetJsDefault = parcelHelpers.interopDefault(_targetJs);
var _eventTypeJs = require("./events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _tileStateJs = require("./TileState.js");
var _tileStateJsDefault = parcelHelpers.interopDefault(_tileStateJs);
var _utilJs = require("./util.js");
var _easingJs = require("./easing.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * A function that takes an {@link module:ol/Tile~Tile} for the tile and a
 * `{string}` for the url as arguments. The default is
 * ```js
 * source.setTileLoadFunction(function(tile, src) {
 *   tile.getImage().src = src;
 * });
 * ```
 * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve
 * error handling:
 *
 * ```js
 * import TileState from 'ol/TileState';
 *
 * source.setTileLoadFunction(function(tile, src) {
 *   var xhr = new XMLHttpRequest();
 *   xhr.responseType = 'blob';
 *   xhr.addEventListener('loadend', function (evt) {
 *     var data = this.response;
 *     if (data !== undefined) {
 *       tile.getImage().src = URL.createObjectURL(data);
 *     } else {
 *       tile.setState(TileState.ERROR);
 *     }
 *   });
 *   xhr.addEventListener('error', function () {
 *     tile.setState(TileState.ERROR);
 *   });
 *   xhr.open('GET', src);
 *   xhr.send();
 * });
 * ```
 *
 * @typedef {function(Tile, string): void} LoadFunction
 * @api
 */ /**
 * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get
 * the url that provides a tile for a given tile coordinate.
 *
 * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile
 * coordinate, a `{number}` representing the pixel ratio and a
 * {@link module:ol/proj/Projection~Projection} for the projection  as arguments
 * and returns a `{string}` representing the tile URL, or undefined if no tile
 * should be requested for the passed tile coordinate.
 *
 * @typedef {function(import("./tilecoord.js").TileCoord, number,
 *           import("./proj/Projection.js").default): (string|undefined)} UrlFunction
 * @api
 */ /**
 * @typedef {Object} Options
 * @property {number} [transition=250] A duration for tile opacity
 * transitions in milliseconds. A duration of 0 disables the opacity transition.
 * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
 * the nearest neighbor is used when resampling.
 * @api
 */ /**
 * @classdesc
 * Base class for tiles.
 *
 * @abstract
 */ var Tile = /** @class */ function(_super) {
    __extends(Tile1, _super);
    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("./TileState.js").default} state State.
     * @param {Options} [opt_options] Tile options.
     */ function Tile1(tileCoord, state, opt_options) {
        var _this = _super.call(this) || this;
        var options = opt_options ? opt_options : {};
        /**
         * @type {import("./tilecoord.js").TileCoord}
         */ _this.tileCoord = tileCoord;
        /**
         * @protected
         * @type {import("./TileState.js").default}
         */ _this.state = state;
        /**
         * An "interim" tile for this tile. The interim tile may be used while this
         * one is loading, for "smooth" transitions when changing params/dimensions
         * on the source.
         * @type {Tile}
         */ _this.interimTile = null;
        /**
         * A key assigned to the tile. This is used by the tile source to determine
         * if this tile can effectively be used, or if a new tile should be created
         * and this one be used as an interim tile for this new tile.
         * @type {string}
         */ _this.key = "";
        /**
         * The duration for the opacity transition.
         * @type {number}
         */ _this.transition_ = options.transition === undefined ? 250 : options.transition;
        /**
         * Lookup of start times for rendering transitions.  If the start time is
         * equal to -1, the transition is complete.
         * @type {Object<string, number>}
         */ _this.transitionStarts_ = {};
        /**
         * @type {boolean}
         */ _this.interpolate = !!options.interpolate;
        return _this;
    }
    /**
     * @protected
     */ Tile1.prototype.changed = function() {
        this.dispatchEvent((0, _eventTypeJsDefault.default).CHANGE);
    };
    /**
     * Called by the tile cache when the tile is removed from the cache due to expiry
     */ Tile1.prototype.release = function() {};
    /**
     * @return {string} Key.
     */ Tile1.prototype.getKey = function() {
        return this.key + "/" + this.tileCoord;
    };
    /**
     * Get the interim tile most suitable for rendering using the chain of interim
     * tiles. This corresponds to the  most recent tile that has been loaded, if no
     * such tile exists, the original tile is returned.
     * @return {!Tile} Best tile for rendering.
     */ Tile1.prototype.getInterimTile = function() {
        if (!this.interimTile) //empty chain
        return this;
        var tile = this.interimTile;
        // find the first loaded tile and return it. Since the chain is sorted in
        // decreasing order of creation time, there is no need to search the remainder
        // of the list (all those tiles correspond to older requests and will be
        // cleaned up by refreshInterimChain)
        do {
            if (tile.getState() == (0, _tileStateJsDefault.default).LOADED) {
                // Show tile immediately instead of fading it in after loading, because
                // the interim tile is in place already
                this.transition_ = 0;
                return tile;
            }
            tile = tile.interimTile;
        }while (tile);
        // we can not find a better tile
        return this;
    };
    /**
     * Goes through the chain of interim tiles and discards sections of the chain
     * that are no longer relevant.
     */ Tile1.prototype.refreshInterimChain = function() {
        if (!this.interimTile) return;
        var tile = this.interimTile;
        /**
         * @type {Tile}
         */ var prev = this;
        do {
            if (tile.getState() == (0, _tileStateJsDefault.default).LOADED) {
                //we have a loaded tile, we can discard the rest of the list
                //we would could abort any LOADING tile request
                //older than this tile (i.e. any LOADING tile following this entry in the chain)
                tile.interimTile = null;
                break;
            } else if (tile.getState() == (0, _tileStateJsDefault.default).LOADING) //keep this LOADING tile any loaded tiles later in the chain are
            //older than this tile, so we're still interested in the request
            prev = tile;
            else if (tile.getState() == (0, _tileStateJsDefault.default).IDLE) //the head of the list is the most current tile, we don't need
            //to start any other requests for this chain
            prev.interimTile = tile.interimTile;
            else prev = tile;
            tile = prev.interimTile;
        }while (tile);
    };
    /**
     * Get the tile coordinate for this tile.
     * @return {import("./tilecoord.js").TileCoord} The tile coordinate.
     * @api
     */ Tile1.prototype.getTileCoord = function() {
        return this.tileCoord;
    };
    /**
     * @return {import("./TileState.js").default} State.
     */ Tile1.prototype.getState = function() {
        return this.state;
    };
    /**
     * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,
     * it is important to set the state correctly to {@link module:ol/TileState~ERROR}
     * when the tile cannot be loaded. Otherwise the tile cannot be removed from
     * the tile queue and will block other requests.
     * @param {import("./TileState.js").default} state State.
     * @api
     */ Tile1.prototype.setState = function(state) {
        if (this.state !== (0, _tileStateJsDefault.default).ERROR && this.state > state) throw new Error("Tile load sequence violation");
        this.state = state;
        this.changed();
    };
    /**
     * Load the image or retry if loading previously failed.
     * Loading is taken care of by the tile queue, and calling this method is
     * only needed for preloading or for reloading in case of an error.
     * @abstract
     * @api
     */ Tile1.prototype.load = function() {
        (0, _utilJs.abstract)();
    };
    /**
     * Get the alpha value for rendering.
     * @param {string} id An id for the renderer.
     * @param {number} time The render frame time.
     * @return {number} A number between 0 and 1.
     */ Tile1.prototype.getAlpha = function(id, time) {
        if (!this.transition_) return 1;
        var start = this.transitionStarts_[id];
        if (!start) {
            start = time;
            this.transitionStarts_[id] = start;
        } else if (start === -1) return 1;
        var delta = time - start + 1000 / 60; // avoid rendering at 0
        if (delta >= this.transition_) return 1;
        return (0, _easingJs.easeIn)(delta / this.transition_);
    };
    /**
     * Determine if a tile is in an alpha transition.  A tile is considered in
     * transition if tile.getAlpha() has not yet been called or has been called
     * and returned 1.
     * @param {string} id An id for the renderer.
     * @return {boolean} The tile is in transition.
     */ Tile1.prototype.inTransition = function(id) {
        if (!this.transition_) return false;
        return this.transitionStarts_[id] !== -1;
    };
    /**
     * Mark a transition as complete.
     * @param {string} id An id for the renderer.
     */ Tile1.prototype.endTransition = function(id) {
        if (this.transition_) this.transitionStarts_[id] = -1;
    };
    return Tile1;
}((0, _targetJsDefault.default));
exports.default = Tile;

},{"./events/Target.js":"7T5Yi","./events/EventType.js":"hrQJ6","./TileState.js":"2fodI","./util.js":"pLBjQ","./easing.js":"fYITA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lR1TX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/reproj/Tile
 */ var _commonJs = require("./common.js");
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _tileJs = require("../Tile.js");
var _tileJsDefault = parcelHelpers.interopDefault(_tileJs);
var _tileStateJs = require("../TileState.js");
var _tileStateJsDefault = parcelHelpers.interopDefault(_tileStateJs);
var _triangulationJs = require("./Triangulation.js");
var _triangulationJsDefault = parcelHelpers.interopDefault(_triangulationJs);
var _reprojJs = require("../reproj.js");
var _mathJs = require("../math.js");
var _extentJs = require("../extent.js");
var _eventsJs = require("../events.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {function(number, number, number, number) : import("../Tile.js").default} FunctionType
 */ /**
 * @classdesc
 * Class encapsulating single reprojected tile.
 * See {@link module:ol/source/TileImage~TileImage}.
 *
 */ var ReprojTile = /** @class */ function(_super) {
    __extends(ReprojTile1, _super);
    /**
     * @param {import("../proj/Projection.js").default} sourceProj Source projection.
     * @param {import("../tilegrid/TileGrid.js").default} sourceTileGrid Source tile grid.
     * @param {import("../proj/Projection.js").default} targetProj Target projection.
     * @param {import("../tilegrid/TileGrid.js").default} targetTileGrid Target tile grid.
     * @param {import("../tilecoord.js").TileCoord} tileCoord Coordinate of the tile.
     * @param {import("../tilecoord.js").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} gutter Gutter of the source tiles.
     * @param {FunctionType} getTileFunction
     *     Function returning source tiles (z, x, y, pixelRatio).
     * @param {number} [opt_errorThreshold] Acceptable reprojection error (in px).
     * @param {boolean} [opt_renderEdges] Render reprojection edges.
     * @param {boolean} [opt_interpolate] Use linear interpolation when resampling.
     */ function ReprojTile1(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, opt_errorThreshold, opt_renderEdges, opt_interpolate) {
        var _this = _super.call(this, tileCoord, (0, _tileStateJsDefault.default).IDLE, {
            interpolate: !!opt_interpolate
        }) || this;
        /**
         * @private
         * @type {boolean}
         */ _this.renderEdges_ = opt_renderEdges !== undefined ? opt_renderEdges : false;
        /**
         * @private
         * @type {number}
         */ _this.pixelRatio_ = pixelRatio;
        /**
         * @private
         * @type {number}
         */ _this.gutter_ = gutter;
        /**
         * @private
         * @type {HTMLCanvasElement}
         */ _this.canvas_ = null;
        /**
         * @private
         * @type {import("../tilegrid/TileGrid.js").default}
         */ _this.sourceTileGrid_ = sourceTileGrid;
        /**
         * @private
         * @type {import("../tilegrid/TileGrid.js").default}
         */ _this.targetTileGrid_ = targetTileGrid;
        /**
         * @private
         * @type {import("../tilecoord.js").TileCoord}
         */ _this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;
        /**
         * @private
         * @type {!Array<import("../Tile.js").default>}
         */ _this.sourceTiles_ = [];
        /**
         * @private
         * @type {?Array<import("../events.js").EventsKey>}
         */ _this.sourcesListenerKeys_ = null;
        /**
         * @private
         * @type {number}
         */ _this.sourceZ_ = 0;
        var targetExtent = targetTileGrid.getTileCoordExtent(_this.wrappedTileCoord_);
        var maxTargetExtent = _this.targetTileGrid_.getExtent();
        var maxSourceExtent = _this.sourceTileGrid_.getExtent();
        var limitedTargetExtent = maxTargetExtent ? (0, _extentJs.getIntersection)(targetExtent, maxTargetExtent) : targetExtent;
        if ((0, _extentJs.getArea)(limitedTargetExtent) === 0) {
            // Tile is completely outside range -> EMPTY
            // TODO: is it actually correct that the source even creates the tile ?
            _this.state = (0, _tileStateJsDefault.default).EMPTY;
            return _this;
        }
        var sourceProjExtent = sourceProj.getExtent();
        if (sourceProjExtent) {
            if (!maxSourceExtent) maxSourceExtent = sourceProjExtent;
            else maxSourceExtent = (0, _extentJs.getIntersection)(maxSourceExtent, sourceProjExtent);
        }
        var targetResolution = targetTileGrid.getResolution(_this.wrappedTileCoord_[0]);
        var sourceResolution = (0, _reprojJs.calculateSourceExtentResolution)(sourceProj, targetProj, limitedTargetExtent, targetResolution);
        if (!isFinite(sourceResolution) || sourceResolution <= 0) {
            // invalid sourceResolution -> EMPTY
            // probably edges of the projections when no extent is defined
            _this.state = (0, _tileStateJsDefault.default).EMPTY;
            return _this;
        }
        var errorThresholdInPixels = opt_errorThreshold !== undefined ? opt_errorThreshold : (0, _commonJs.ERROR_THRESHOLD);
        /**
         * @private
         * @type {!import("./Triangulation.js").default}
         */ _this.triangulation_ = new (0, _triangulationJsDefault.default)(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);
        if (_this.triangulation_.getTriangles().length === 0) {
            // no valid triangles -> EMPTY
            _this.state = (0, _tileStateJsDefault.default).EMPTY;
            return _this;
        }
        _this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);
        var sourceExtent = _this.triangulation_.calculateSourceExtent();
        if (maxSourceExtent) {
            if (sourceProj.canWrapX()) {
                sourceExtent[1] = (0, _mathJs.clamp)(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);
                sourceExtent[3] = (0, _mathJs.clamp)(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);
            } else sourceExtent = (0, _extentJs.getIntersection)(sourceExtent, maxSourceExtent);
        }
        if (!(0, _extentJs.getArea)(sourceExtent)) _this.state = (0, _tileStateJsDefault.default).EMPTY;
        else {
            var sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(sourceExtent, _this.sourceZ_);
            for(var srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++)for(var srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++){
                var tile = getTileFunction(_this.sourceZ_, srcX, srcY, pixelRatio);
                if (tile) _this.sourceTiles_.push(tile);
            }
            if (_this.sourceTiles_.length === 0) _this.state = (0, _tileStateJsDefault.default).EMPTY;
        }
        return _this;
    }
    /**
     * Get the HTML Canvas element for this tile.
     * @return {HTMLCanvasElement} Canvas.
     */ ReprojTile1.prototype.getImage = function() {
        return this.canvas_;
    };
    /**
     * @private
     */ ReprojTile1.prototype.reproject_ = function() {
        var sources = [];
        this.sourceTiles_.forEach((function(tile, i, arr) {
            if (tile && tile.getState() == (0, _tileStateJsDefault.default).LOADED) sources.push({
                extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),
                image: tile.getImage()
            });
        }).bind(this));
        this.sourceTiles_.length = 0;
        if (sources.length === 0) this.state = (0, _tileStateJsDefault.default).ERROR;
        else {
            var z = this.wrappedTileCoord_[0];
            var size = this.targetTileGrid_.getTileSize(z);
            var width = typeof size === "number" ? size : size[0];
            var height = typeof size === "number" ? size : size[1];
            var targetResolution = this.targetTileGrid_.getResolution(z);
            var sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);
            var targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);
            this.canvas_ = (0, _reprojJs.render)(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_, this.interpolate);
            this.state = (0, _tileStateJsDefault.default).LOADED;
        }
        this.changed();
    };
    /**
     * Load not yet loaded URI.
     */ ReprojTile1.prototype.load = function() {
        if (this.state == (0, _tileStateJsDefault.default).IDLE) {
            this.state = (0, _tileStateJsDefault.default).LOADING;
            this.changed();
            var leftToLoad_1 = 0;
            this.sourcesListenerKeys_ = [];
            this.sourceTiles_.forEach((function(tile, i, arr) {
                var state1 = tile.getState();
                if (state1 == (0, _tileStateJsDefault.default).IDLE || state1 == (0, _tileStateJsDefault.default).LOADING) {
                    leftToLoad_1++;
                    var sourceListenKey_1 = (0, _eventsJs.listen)(tile, (0, _eventTypeJsDefault.default).CHANGE, function(e) {
                        var state = tile.getState();
                        if (state == (0, _tileStateJsDefault.default).LOADED || state == (0, _tileStateJsDefault.default).ERROR || state == (0, _tileStateJsDefault.default).EMPTY) {
                            (0, _eventsJs.unlistenByKey)(sourceListenKey_1);
                            leftToLoad_1--;
                            if (leftToLoad_1 === 0) {
                                this.unlistenSources_();
                                this.reproject_();
                            }
                        }
                    }, this);
                    this.sourcesListenerKeys_.push(sourceListenKey_1);
                }
            }).bind(this));
            if (leftToLoad_1 === 0) setTimeout(this.reproject_.bind(this), 0);
            else this.sourceTiles_.forEach(function(tile, i, arr) {
                var state = tile.getState();
                if (state == (0, _tileStateJsDefault.default).IDLE) tile.load();
            });
        }
    };
    /**
     * @private
     */ ReprojTile1.prototype.unlistenSources_ = function() {
        this.sourcesListenerKeys_.forEach((0, _eventsJs.unlistenByKey));
        this.sourcesListenerKeys_ = null;
    };
    return ReprojTile1;
}((0, _tileJsDefault.default));
exports.default = ReprojTile;

},{"./common.js":"qh92B","../events/EventType.js":"hrQJ6","../Tile.js":"4sqb5","../TileState.js":"2fodI","./Triangulation.js":"3jZUN","../reproj.js":"jbreX","../math.js":"5jEFr","../extent.js":"6YrVc","../events.js":"dcspA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"qh92B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ERROR_THRESHOLD", ()=>ERROR_THRESHOLD);
parcelHelpers.export(exports, "ENABLE_RASTER_REPROJECTION", ()=>ENABLE_RASTER_REPROJECTION);
var ERROR_THRESHOLD = 0.5;
var ENABLE_RASTER_REPROJECTION = true;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3jZUN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/reproj/Triangulation
 */ var _extentJs = require("../extent.js");
var _projJs = require("../proj.js");
var _mathJs = require("../math.js");
/**
 * Single triangle; consists of 3 source points and 3 target points.
 * @typedef {Object} Triangle
 * @property {Array<import("../coordinate.js").Coordinate>} source Source.
 * @property {Array<import("../coordinate.js").Coordinate>} target Target.
 */ /**
 * Maximum number of subdivision steps during raster reprojection triangulation.
 * Prevents high memory usage and large number of proj4 calls (for certain
 * transformations and areas). At most `2*(2^this)` triangles are created for
 * each triangulated extent (tile/image).
 * @type {number}
 */ var MAX_SUBDIVISION = 10;
/**
 * Maximum allowed size of triangle relative to world width. When transforming
 * corners of world extent between certain projections, the resulting
 * triangulation seems to have zero error and no subdivision is performed. If
 * the triangle width is more than this (relative to world width; 0-1),
 * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.
 * @type {number}
 */ var MAX_TRIANGLE_WIDTH = 0.25;
/**
 * @classdesc
 * Class containing triangulation of the given target extent.
 * Used for determining source data and the reprojection itself.
 */ var Triangulation = /** @class */ function() {
    /**
     * @param {import("../proj/Projection.js").default} sourceProj Source projection.
     * @param {import("../proj/Projection.js").default} targetProj Target projection.
     * @param {import("../extent.js").Extent} targetExtent Target extent to triangulate.
     * @param {import("../extent.js").Extent} maxSourceExtent Maximal source extent that can be used.
     * @param {number} errorThreshold Acceptable error (in source units).
     * @param {?number} opt_destinationResolution The (optional) resolution of the destination.
     */ function Triangulation1(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold, opt_destinationResolution) {
        /**
         * @type {import("../proj/Projection.js").default}
         * @private
         */ this.sourceProj_ = sourceProj;
        /**
         * @type {import("../proj/Projection.js").default}
         * @private
         */ this.targetProj_ = targetProj;
        /** @type {!Object<string, import("../coordinate.js").Coordinate>} */ var transformInvCache = {};
        var transformInv = (0, _projJs.getTransform)(this.targetProj_, this.sourceProj_);
        /**
         * @param {import("../coordinate.js").Coordinate} c A coordinate.
         * @return {import("../coordinate.js").Coordinate} Transformed coordinate.
         * @private
         */ this.transformInv_ = function(c) {
            var key = c[0] + "/" + c[1];
            if (!transformInvCache[key]) transformInvCache[key] = transformInv(c);
            return transformInvCache[key];
        };
        /**
         * @type {import("../extent.js").Extent}
         * @private
         */ this.maxSourceExtent_ = maxSourceExtent;
        /**
         * @type {number}
         * @private
         */ this.errorThresholdSquared_ = errorThreshold * errorThreshold;
        /**
         * @type {Array<Triangle>}
         * @private
         */ this.triangles_ = [];
        /**
         * Indicates that the triangulation crosses edge of the source projection.
         * @type {boolean}
         * @private
         */ this.wrapsXInSource_ = false;
        /**
         * @type {boolean}
         * @private
         */ this.canWrapXInSource_ = this.sourceProj_.canWrapX() && !!maxSourceExtent && !!this.sourceProj_.getExtent() && (0, _extentJs.getWidth)(maxSourceExtent) == (0, _extentJs.getWidth)(this.sourceProj_.getExtent());
        /**
         * @type {?number}
         * @private
         */ this.sourceWorldWidth_ = this.sourceProj_.getExtent() ? (0, _extentJs.getWidth)(this.sourceProj_.getExtent()) : null;
        /**
         * @type {?number}
         * @private
         */ this.targetWorldWidth_ = this.targetProj_.getExtent() ? (0, _extentJs.getWidth)(this.targetProj_.getExtent()) : null;
        var destinationTopLeft = (0, _extentJs.getTopLeft)(targetExtent);
        var destinationTopRight = (0, _extentJs.getTopRight)(targetExtent);
        var destinationBottomRight = (0, _extentJs.getBottomRight)(targetExtent);
        var destinationBottomLeft = (0, _extentJs.getBottomLeft)(targetExtent);
        var sourceTopLeft = this.transformInv_(destinationTopLeft);
        var sourceTopRight = this.transformInv_(destinationTopRight);
        var sourceBottomRight = this.transformInv_(destinationBottomRight);
        var sourceBottomLeft = this.transformInv_(destinationBottomLeft);
        /*
         * The maxSubdivision controls how many splittings of the target area can
         * be done. The idea here is to do a linear mapping of the target areas
         * but the actual overal reprojection (can be) extremely non-linear. The
         * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256
         * tile size. However this function is also called to remap canvas rendered
         * layers which can be much larger. This calculation increases the maxSubdivision
         * value by the right factor so that each 256x256 pixel area has
         * MAX_SUBDIVISION divisions.
         */ var maxSubdivision = MAX_SUBDIVISION + (opt_destinationResolution ? Math.max(0, Math.ceil((0, _mathJs.log2)((0, _extentJs.getArea)(targetExtent) / (opt_destinationResolution * opt_destinationResolution * 65536)))) : 0);
        this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, maxSubdivision);
        if (this.wrapsXInSource_) {
            var leftBound_1 = Infinity;
            this.triangles_.forEach(function(triangle, i, arr) {
                leftBound_1 = Math.min(leftBound_1, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);
            });
            // Shift triangles to be as close to `leftBound` as possible
            // (if the distance is more than `worldWidth / 2` it can be closer.
            this.triangles_.forEach((function(triangle) {
                if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) - leftBound_1 > this.sourceWorldWidth_ / 2) {
                    var newTriangle = [
                        [
                            triangle.source[0][0],
                            triangle.source[0][1]
                        ],
                        [
                            triangle.source[1][0],
                            triangle.source[1][1]
                        ],
                        [
                            triangle.source[2][0],
                            triangle.source[2][1]
                        ], 
                    ];
                    if (newTriangle[0][0] - leftBound_1 > this.sourceWorldWidth_ / 2) newTriangle[0][0] -= this.sourceWorldWidth_;
                    if (newTriangle[1][0] - leftBound_1 > this.sourceWorldWidth_ / 2) newTriangle[1][0] -= this.sourceWorldWidth_;
                    if (newTriangle[2][0] - leftBound_1 > this.sourceWorldWidth_ / 2) newTriangle[2][0] -= this.sourceWorldWidth_;
                    // Rarely (if the extent contains both the dateline and prime meridian)
                    // the shift can in turn break some triangles.
                    // Detect this here and don't shift in such cases.
                    var minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
                    var maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
                    if (maxX - minX < this.sourceWorldWidth_ / 2) triangle.source = newTriangle;
                }
            }).bind(this));
        }
        transformInvCache = {};
    }
    /**
     * Adds triangle to the triangulation.
     * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
     * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
     * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
     * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
     * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
     * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
     * @private
     */ Triangulation1.prototype.addTriangle_ = function(a, b, c, aSrc, bSrc, cSrc) {
        this.triangles_.push({
            source: [
                aSrc,
                bSrc,
                cSrc
            ],
            target: [
                a,
                b,
                c
            ]
        });
    };
    /**
     * Adds quad (points in clock-wise order) to the triangulation
     * (and reprojects the vertices) if valid.
     * Performs quad subdivision if needed to increase precision.
     *
     * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
     * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
     * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
     * @param {import("../coordinate.js").Coordinate} d The target d coordinate.
     * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
     * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
     * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
     * @param {import("../coordinate.js").Coordinate} dSrc The source d coordinate.
     * @param {number} maxSubdivision Maximal allowed subdivision of the quad.
     * @private
     */ Triangulation1.prototype.addQuad_ = function(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {
        var sourceQuadExtent = (0, _extentJs.boundingExtent)([
            aSrc,
            bSrc,
            cSrc,
            dSrc
        ]);
        var sourceCoverageX = this.sourceWorldWidth_ ? (0, _extentJs.getWidth)(sourceQuadExtent) / this.sourceWorldWidth_ : null;
        var sourceWorldWidth = this.sourceWorldWidth_;
        // when the quad is wrapped in the source projection
        // it covers most of the projection extent, but not fully
        var wrapsX = this.sourceProj_.canWrapX() && sourceCoverageX > 0.5 && sourceCoverageX < 1;
        var needsSubdivision = false;
        if (maxSubdivision > 0) {
            if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {
                var targetQuadExtent = (0, _extentJs.boundingExtent)([
                    a,
                    b,
                    c,
                    d
                ]);
                var targetCoverageX = (0, _extentJs.getWidth)(targetQuadExtent) / this.targetWorldWidth_;
                needsSubdivision = targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;
            }
            if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) needsSubdivision = sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;
        }
        if (!needsSubdivision && this.maxSourceExtent_) {
            if (isFinite(sourceQuadExtent[0]) && isFinite(sourceQuadExtent[1]) && isFinite(sourceQuadExtent[2]) && isFinite(sourceQuadExtent[3])) {
                if (!(0, _extentJs.intersects)(sourceQuadExtent, this.maxSourceExtent_)) // whole quad outside source projection extent -> ignore
                return;
            }
        }
        var isNotFinite = 0;
        if (!needsSubdivision) {
            if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) || !isFinite(bSrc[0]) || !isFinite(bSrc[1]) || !isFinite(cSrc[0]) || !isFinite(cSrc[1]) || !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {
                if (maxSubdivision > 0) needsSubdivision = true;
                else {
                    // It might be the case that only 1 of the points is infinite. In this case
                    // we can draw a single triangle with the other three points
                    isNotFinite = (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) + (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) + (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) + (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);
                    if (isNotFinite != 1 && isNotFinite != 2 && isNotFinite != 4 && isNotFinite != 8) return;
                }
            }
        }
        if (maxSubdivision > 0) {
            if (!needsSubdivision) {
                var center = [
                    (a[0] + c[0]) / 2,
                    (a[1] + c[1]) / 2
                ];
                var centerSrc = this.transformInv_(center);
                var dx = void 0;
                if (wrapsX) {
                    var centerSrcEstimX = ((0, _mathJs.modulo)(aSrc[0], sourceWorldWidth) + (0, _mathJs.modulo)(cSrc[0], sourceWorldWidth)) / 2;
                    dx = centerSrcEstimX - (0, _mathJs.modulo)(centerSrc[0], sourceWorldWidth);
                } else dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];
                var dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];
                var centerSrcErrorSquared = dx * dx + dy * dy;
                needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;
            }
            if (needsSubdivision) {
                if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {
                    // split horizontally (top & bottom)
                    var bc = [
                        (b[0] + c[0]) / 2,
                        (b[1] + c[1]) / 2
                    ];
                    var bcSrc = this.transformInv_(bc);
                    var da = [
                        (d[0] + a[0]) / 2,
                        (d[1] + a[1]) / 2
                    ];
                    var daSrc = this.transformInv_(da);
                    this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);
                    this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);
                } else {
                    // split vertically (left & right)
                    var ab = [
                        (a[0] + b[0]) / 2,
                        (a[1] + b[1]) / 2
                    ];
                    var abSrc = this.transformInv_(ab);
                    var cd = [
                        (c[0] + d[0]) / 2,
                        (c[1] + d[1]) / 2
                    ];
                    var cdSrc = this.transformInv_(cd);
                    this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);
                    this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);
                }
                return;
            }
        }
        if (wrapsX) {
            if (!this.canWrapXInSource_) return;
            this.wrapsXInSource_ = true;
        }
        // Exactly zero or one of *Src is not finite
        // The triangles must have the diagonal line as the first side
        // This is to allow easy code in reproj.s to make it straight for broken
        // browsers that can't handle diagonal clipping
        if ((isNotFinite & 0xb) == 0) this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);
        if ((isNotFinite & 0xe) == 0) this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);
        if (isNotFinite) {
            // Try the other two triangles
            if ((isNotFinite & 0xd) == 0) this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);
            if ((isNotFinite & 0x7) == 0) this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);
        }
    };
    /**
     * Calculates extent of the `source` coordinates from all the triangles.
     *
     * @return {import("../extent.js").Extent} Calculated extent.
     */ Triangulation1.prototype.calculateSourceExtent = function() {
        var extent = (0, _extentJs.createEmpty)();
        this.triangles_.forEach(function(triangle, i, arr) {
            var src = triangle.source;
            (0, _extentJs.extendCoordinate)(extent, src[0]);
            (0, _extentJs.extendCoordinate)(extent, src[1]);
            (0, _extentJs.extendCoordinate)(extent, src[2]);
        });
        return extent;
    };
    /**
     * @return {Array<Triangle>} Array of the calculated triangles.
     */ Triangulation1.prototype.getTriangles = function() {
        return this.triangles_;
    };
    return Triangulation1;
}();
exports.default = Triangulation;

},{"../extent.js":"6YrVc","../proj.js":"SznqC","../math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jbreX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Calculates ideal resolution to use from the source in order to achieve
 * pixel mapping as close as possible to 1:1 during reprojection.
 * The resolution is calculated regardless of what resolutions
 * are actually available in the dataset (TileGrid, Image, ...).
 *
 * @param {import("./proj/Projection.js").default} sourceProj Source projection.
 * @param {import("./proj/Projection.js").default} targetProj Target projection.
 * @param {import("./coordinate.js").Coordinate} targetCenter Target center.
 * @param {number} targetResolution Target resolution.
 * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
 */ parcelHelpers.export(exports, "calculateSourceResolution", ()=>calculateSourceResolution);
/**
 * Calculates ideal resolution to use from the source in order to achieve
 * pixel mapping as close as possible to 1:1 during reprojection.
 * The resolution is calculated regardless of what resolutions
 * are actually available in the dataset (TileGrid, Image, ...).
 *
 * @param {import("./proj/Projection.js").default} sourceProj Source projection.
 * @param {import("./proj/Projection.js").default} targetProj Target projection.
 * @param {import("./extent.js").Extent} targetExtent Target extent
 * @param {number} targetResolution Target resolution.
 * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
 */ parcelHelpers.export(exports, "calculateSourceExtentResolution", ()=>calculateSourceExtentResolution);
/**
 * @typedef {Object} ImageExtent
 * @property {import("./extent.js").Extent} extent Extent.
 * @property {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
 */ /**
 * Renders the source data into new canvas based on the triangulation.
 *
 * @param {number} width Width of the canvas.
 * @param {number} height Height of the canvas.
 * @param {number} pixelRatio Pixel ratio.
 * @param {number} sourceResolution Source resolution.
 * @param {import("./extent.js").Extent} sourceExtent Extent of the data source.
 * @param {number} targetResolution Target resolution.
 * @param {import("./extent.js").Extent} targetExtent Target extent.
 * @param {import("./reproj/Triangulation.js").default} triangulation Calculated triangulation.
 * @param {Array<ImageExtent>} sources Array of sources.
 * @param {number} gutter Gutter of the sources.
 * @param {boolean} [opt_renderEdges] Render reprojection edges.
 * @param {object} [opt_interpolate] Use linear interpolation when resampling.
 * @return {HTMLCanvasElement} Canvas with reprojected data.
 */ parcelHelpers.export(exports, "render", ()=>render);
/**
 * @module ol/reproj
 */ var _commonJs = require("./renderer/canvas/common.js");
var _objJs = require("./obj.js");
var _extentJs = require("./extent.js");
var _domJs = require("./dom.js");
var _projJs = require("./proj.js");
var _mathJs = require("./math.js");
var brokenDiagonalRendering_;
/**
 * This draws a small triangle into a canvas by setting the triangle as the clip region
 * and then drawing a (too large) rectangle
 *
 * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle
 * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.
 * @param {number} v1 The y-coordinate of the second point.
 * @param {number} u2 The x-coordinate of the third point.
 * @param {number} v2 The y-coordinate of the third point.
 */ function drawTestTriangle(ctx, u1, v1, u2, v2) {
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(u1, v1);
    ctx.lineTo(u2, v2);
    ctx.closePath();
    ctx.save();
    ctx.clip();
    ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));
    ctx.restore();
}
/**
 * Given the data from getImageData, see if the right values appear at the provided offset.
 * Returns true if either the color or transparency is off
 *
 * @param {Uint8ClampedArray} data The data returned from getImageData
 * @param {number} offset The pixel offset from the start of data.
 * @return {boolean} true if the diagonal rendering is broken
 */ function verifyBrokenDiagonalRendering(data, offset) {
    // the values ought to be close to the rgba(210, 0, 0, 0.75)
    return Math.abs(data[offset * 4] - 210) > 2 || Math.abs(data[offset * 4 + 3] - 191.25) > 2;
}
/**
 * Determines if the current browser configuration can render triangular clip regions correctly.
 * This value is cached so the function is only expensive the first time called.
 * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976
 * IE also doesn't. Chrome works, and everything seems to work on OSX and Android. This function caches the
 * result. I suppose that it is conceivably possible that a browser might flip modes while the app is
 * running, but lets hope not.
 *
 * @return {boolean} true if the Diagonal Rendering is broken.
 */ function isBrokenDiagonalRendering() {
    if (brokenDiagonalRendering_ === undefined) {
        var ctx = document.createElement("canvas").getContext("2d");
        ctx.globalCompositeOperation = "lighter";
        ctx.fillStyle = "rgba(210, 0, 0, 0.75)";
        drawTestTriangle(ctx, 4, 5, 4, 0);
        drawTestTriangle(ctx, 4, 5, 0, 5);
        var data = ctx.getImageData(0, 0, 3, 3).data;
        brokenDiagonalRendering_ = verifyBrokenDiagonalRendering(data, 0) || verifyBrokenDiagonalRendering(data, 4) || verifyBrokenDiagonalRendering(data, 8);
    }
    return brokenDiagonalRendering_;
}
function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {
    var sourceCenter = (0, _projJs.transform)(targetCenter, targetProj, sourceProj);
    // calculate the ideal resolution of the source data
    var sourceResolution = (0, _projJs.getPointResolution)(targetProj, targetResolution, targetCenter);
    var targetMetersPerUnit = targetProj.getMetersPerUnit();
    if (targetMetersPerUnit !== undefined) sourceResolution *= targetMetersPerUnit;
    var sourceMetersPerUnit = sourceProj.getMetersPerUnit();
    if (sourceMetersPerUnit !== undefined) sourceResolution /= sourceMetersPerUnit;
    // Based on the projection properties, the point resolution at the specified
    // coordinates may be slightly different. We need to reverse-compensate this
    // in order to achieve optimal results.
    var sourceExtent = sourceProj.getExtent();
    if (!sourceExtent || (0, _extentJs.containsCoordinate)(sourceExtent, sourceCenter)) {
        var compensationFactor = (0, _projJs.getPointResolution)(sourceProj, sourceResolution, sourceCenter) / sourceResolution;
        if (isFinite(compensationFactor) && compensationFactor > 0) sourceResolution /= compensationFactor;
    }
    return sourceResolution;
}
function calculateSourceExtentResolution(sourceProj, targetProj, targetExtent, targetResolution) {
    var targetCenter = (0, _extentJs.getCenter)(targetExtent);
    var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);
    if (!isFinite(sourceResolution) || sourceResolution <= 0) (0, _extentJs.forEachCorner)(targetExtent, function(corner) {
        sourceResolution = calculateSourceResolution(sourceProj, targetProj, corner, targetResolution);
        return isFinite(sourceResolution) && sourceResolution > 0;
    });
    return sourceResolution;
}
function render(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, opt_renderEdges, opt_interpolate) {
    var context = (0, _domJs.createCanvasContext2D)(Math.round(pixelRatio * width), Math.round(pixelRatio * height));
    if (!opt_interpolate) (0, _objJs.assign)(context, (0, _commonJs.IMAGE_SMOOTHING_DISABLED));
    if (sources.length === 0) return context.canvas;
    context.scale(pixelRatio, pixelRatio);
    function pixelRound(value) {
        return Math.round(value * pixelRatio) / pixelRatio;
    }
    context.globalCompositeOperation = "lighter";
    var sourceDataExtent = (0, _extentJs.createEmpty)();
    sources.forEach(function(src, i, arr) {
        (0, _extentJs.extend)(sourceDataExtent, src.extent);
    });
    var canvasWidthInUnits = (0, _extentJs.getWidth)(sourceDataExtent);
    var canvasHeightInUnits = (0, _extentJs.getHeight)(sourceDataExtent);
    var stitchContext = (0, _domJs.createCanvasContext2D)(Math.round(pixelRatio * canvasWidthInUnits / sourceResolution), Math.round(pixelRatio * canvasHeightInUnits / sourceResolution));
    if (!opt_interpolate) (0, _objJs.assign)(stitchContext, (0, _commonJs.IMAGE_SMOOTHING_DISABLED));
    var stitchScale = pixelRatio / sourceResolution;
    sources.forEach(function(src, i, arr) {
        var xPos = src.extent[0] - sourceDataExtent[0];
        var yPos = -(src.extent[3] - sourceDataExtent[3]);
        var srcWidth = (0, _extentJs.getWidth)(src.extent);
        var srcHeight = (0, _extentJs.getHeight)(src.extent);
        // This test should never fail -- but it does. Need to find a fix the upstream condition
        if (src.image.width > 0 && src.image.height > 0) stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);
    });
    var targetTopLeft = (0, _extentJs.getTopLeft)(targetExtent);
    triangulation.getTriangles().forEach(function(triangle, i, arr) {
        /* Calculate affine transform (src -> dst)
         * Resulting matrix can be used to transform coordinate
         * from `sourceProjection` to destination pixels.
         *
         * To optimize number of context calls and increase numerical stability,
         * we also do the following operations:
         * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)
         * here before solving the linear system so [ui, vi] are pixel coordinates.
         *
         * Src points: xi, yi
         * Dst points: ui, vi
         * Affine coefficients: aij
         *
         * | x0 y0 1  0  0 0 |   |a00|   |u0|
         * | x1 y1 1  0  0 0 |   |a01|   |u1|
         * | x2 y2 1  0  0 0 | x |a02| = |u2|
         * |  0  0 0 x0 y0 1 |   |a10|   |v0|
         * |  0  0 0 x1 y1 1 |   |a11|   |v1|
         * |  0  0 0 x2 y2 1 |   |a12|   |v2|
         */ var source = triangle.source;
        var target = triangle.target;
        var x0 = source[0][0], y0 = source[0][1];
        var x1 = source[1][0], y1 = source[1][1];
        var x2 = source[2][0], y2 = source[2][1];
        // Make sure that everything is on pixel boundaries
        var u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);
        var v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);
        var u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);
        var v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);
        var u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);
        var v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution);
        // Shift all the source points to improve numerical stability
        // of all the subsequent calculations. The [x0, y0] is used here.
        // This is also used to simplify the linear system.
        var sourceNumericalShiftX = x0;
        var sourceNumericalShiftY = y0;
        x0 = 0;
        y0 = 0;
        x1 -= sourceNumericalShiftX;
        y1 -= sourceNumericalShiftY;
        x2 -= sourceNumericalShiftX;
        y2 -= sourceNumericalShiftY;
        var augmentedMatrix = [
            [
                x1,
                y1,
                0,
                0,
                u1 - u0
            ],
            [
                x2,
                y2,
                0,
                0,
                u2 - u0
            ],
            [
                0,
                0,
                x1,
                y1,
                v1 - v0
            ],
            [
                0,
                0,
                x2,
                y2,
                v2 - v0
            ], 
        ];
        var affineCoefs = (0, _mathJs.solveLinearSystem)(augmentedMatrix);
        if (!affineCoefs) return;
        context.save();
        context.beginPath();
        if (isBrokenDiagonalRendering() || !opt_interpolate) {
            // Make sure that all lines are horizontal or vertical
            context.moveTo(u1, v1);
            // This is the diagonal line. Do it in 4 steps
            var steps = 4;
            var ud = u0 - u1;
            var vd = v0 - v1;
            for(var step = 0; step < steps; step++){
                // Go horizontally
                context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound(step * vd / (steps - 1)));
                // Go vertically
                if (step != steps - 1) context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound((step + 1) * vd / (steps - 1)));
            }
            // We are almost at u0r, v0r
            context.lineTo(u2, v2);
        } else {
            context.moveTo(u1, v1);
            context.lineTo(u0, v0);
            context.lineTo(u2, v2);
        }
        context.clip();
        context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);
        context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);
        context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);
        context.drawImage(stitchContext.canvas, 0, 0);
        context.restore();
    });
    if (opt_renderEdges) {
        context.save();
        context.globalCompositeOperation = "source-over";
        context.strokeStyle = "black";
        context.lineWidth = 1;
        triangulation.getTriangles().forEach(function(triangle, i, arr) {
            var target = triangle.target;
            var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
            var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
            var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
            var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
            var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
            var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;
            context.beginPath();
            context.moveTo(u1, v1);
            context.lineTo(u0, v0);
            context.lineTo(u2, v2);
            context.closePath();
            context.stroke();
        });
        context.restore();
    }
    return context.canvas;
}

},{"./renderer/canvas/common.js":"fBoyo","./obj.js":"3ssAG","./extent.js":"6YrVc","./dom.js":"84QzQ","./proj.js":"SznqC","./math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fBoyo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IMAGE_SMOOTHING_DISABLED", ()=>IMAGE_SMOOTHING_DISABLED);
parcelHelpers.export(exports, "IMAGE_SMOOTHING_ENABLED", ()=>IMAGE_SMOOTHING_ENABLED);
var IMAGE_SMOOTHING_DISABLED = {
    imageSmoothingEnabled: false,
    msImageSmoothingEnabled: false
};
var IMAGE_SMOOTHING_ENABLED = {
    imageSmoothingEnabled: true,
    msImageSmoothingEnabled: true
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3AgyC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/TileCache
 */ var _lrucacheJs = require("./structs/LRUCache.js");
var _lrucacheJsDefault = parcelHelpers.interopDefault(_lrucacheJs);
var _tilecoordJs = require("./tilecoord.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var TileCache = /** @class */ function(_super) {
    __extends(TileCache1, _super);
    function TileCache1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {!Object<string, boolean>} usedTiles Used tiles.
     */ TileCache1.prototype.expireCache = function(usedTiles) {
        while(this.canExpireCache()){
            var tile = this.peekLast();
            if (tile.getKey() in usedTiles) break;
            else this.pop().release();
        }
    };
    /**
     * Prune all tiles from the cache that don't have the same z as the newest tile.
     */ TileCache1.prototype.pruneExceptNewestZ = function() {
        if (this.getCount() === 0) return;
        var key = this.peekFirstKey();
        var tileCoord = (0, _tilecoordJs.fromKey)(key);
        var z = tileCoord[0];
        this.forEach((function(tile) {
            if (tile.tileCoord[0] !== z) {
                this.remove((0, _tilecoordJs.getKey)(tile.tileCoord));
                tile.release();
            }
        }).bind(this));
    };
    return TileCache1;
}((0, _lrucacheJsDefault.default));
exports.default = TileCache;

},{"./structs/LRUCache.js":"cmjR9","./tilecoord.js":"bZ2LT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cmjR9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/structs/LRUCache
 */ var _assertsJs = require("../asserts.js");
/**
 * @typedef {Object} Entry
 * @property {string} key_ Key.
 * @property {Object} newer Newer.
 * @property {Object} older Older.
 * @property {*} value_ Value.
 */ /**
 * @classdesc
 * Implements a Least-Recently-Used cache where the keys do not conflict with
 * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring
 * items from the cache is the responsibility of the user.
 *
 * @fires import("../events/Event.js").default
 * @template T
 */ var LRUCache = /** @class */ function() {
    /**
     * @param {number} [opt_highWaterMark] High water mark.
     */ function LRUCache1(opt_highWaterMark) {
        /**
         * Desired max cache size after expireCache(). If set to 0, no cache entries
         * will be pruned at all.
         * @type {number}
         */ this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;
        /**
         * @private
         * @type {number}
         */ this.count_ = 0;
        /**
         * @private
         * @type {!Object<string, Entry>}
         */ this.entries_ = {};
        /**
         * @private
         * @type {?Entry}
         */ this.oldest_ = null;
        /**
         * @private
         * @type {?Entry}
         */ this.newest_ = null;
    }
    /**
     * @return {boolean} Can expire cache.
     */ LRUCache1.prototype.canExpireCache = function() {
        return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;
    };
    /**
     * Expire the cache.
     * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.
     */ LRUCache1.prototype.expireCache = function(keep) {
        while(this.canExpireCache())this.pop();
    };
    /**
     * FIXME empty description for jsdoc
     */ LRUCache1.prototype.clear = function() {
        this.count_ = 0;
        this.entries_ = {};
        this.oldest_ = null;
        this.newest_ = null;
    };
    /**
     * @param {string} key Key.
     * @return {boolean} Contains key.
     */ LRUCache1.prototype.containsKey = function(key) {
        return this.entries_.hasOwnProperty(key);
    };
    /**
     * @param {function(T, string, LRUCache<T>): ?} f The function
     *     to call for every entry from the oldest to the newer. This function takes
     *     3 arguments (the entry value, the entry key and the LRUCache object).
     *     The return value is ignored.
     */ LRUCache1.prototype.forEach = function(f) {
        var entry = this.oldest_;
        while(entry){
            f(entry.value_, entry.key_, this);
            entry = entry.newer;
        }
    };
    /**
     * @param {string} key Key.
     * @param {*} [opt_options] Options (reserved for subclasses).
     * @return {T} Value.
     */ LRUCache1.prototype.get = function(key, opt_options) {
        var entry = this.entries_[key];
        (0, _assertsJs.assert)(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
        if (entry === this.newest_) return entry.value_;
        else if (entry === this.oldest_) {
            this.oldest_ = this.oldest_.newer;
            this.oldest_.older = null;
        } else {
            entry.newer.older = entry.older;
            entry.older.newer = entry.newer;
        }
        entry.newer = null;
        entry.older = this.newest_;
        this.newest_.newer = entry;
        this.newest_ = entry;
        return entry.value_;
    };
    /**
     * Remove an entry from the cache.
     * @param {string} key The entry key.
     * @return {T} The removed entry.
     */ LRUCache1.prototype.remove = function(key) {
        var entry = this.entries_[key];
        (0, _assertsJs.assert)(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
        if (entry === this.newest_) {
            this.newest_ = entry.older;
            if (this.newest_) this.newest_.newer = null;
        } else if (entry === this.oldest_) {
            this.oldest_ = entry.newer;
            if (this.oldest_) this.oldest_.older = null;
        } else {
            entry.newer.older = entry.older;
            entry.older.newer = entry.newer;
        }
        delete this.entries_[key];
        --this.count_;
        return entry.value_;
    };
    /**
     * @return {number} Count.
     */ LRUCache1.prototype.getCount = function() {
        return this.count_;
    };
    /**
     * @return {Array<string>} Keys.
     */ LRUCache1.prototype.getKeys = function() {
        var keys = new Array(this.count_);
        var i = 0;
        var entry;
        for(entry = this.newest_; entry; entry = entry.older)keys[i++] = entry.key_;
        return keys;
    };
    /**
     * @return {Array<T>} Values.
     */ LRUCache1.prototype.getValues = function() {
        var values = new Array(this.count_);
        var i = 0;
        var entry;
        for(entry = this.newest_; entry; entry = entry.older)values[i++] = entry.value_;
        return values;
    };
    /**
     * @return {T} Last value.
     */ LRUCache1.prototype.peekLast = function() {
        return this.oldest_.value_;
    };
    /**
     * @return {string} Last key.
     */ LRUCache1.prototype.peekLastKey = function() {
        return this.oldest_.key_;
    };
    /**
     * Get the key of the newest item in the cache.  Throws if the cache is empty.
     * @return {string} The newest key.
     */ LRUCache1.prototype.peekFirstKey = function() {
        return this.newest_.key_;
    };
    /**
     * @return {T} value Value.
     */ LRUCache1.prototype.pop = function() {
        var entry = this.oldest_;
        delete this.entries_[entry.key_];
        if (entry.newer) entry.newer.older = null;
        this.oldest_ = entry.newer;
        if (!this.oldest_) this.newest_ = null;
        --this.count_;
        return entry.value_;
    };
    /**
     * @param {string} key Key.
     * @param {T} value Value.
     */ LRUCache1.prototype.replace = function(key, value) {
        this.get(key); // update `newest_`
        this.entries_[key].value_ = value;
    };
    /**
     * @param {string} key Key.
     * @param {T} value Value.
     */ LRUCache1.prototype.set = function(key, value) {
        (0, _assertsJs.assert)(!(key in this.entries_), 16); // Tried to set a value for a key that is used already
        var entry = {
            key_: key,
            newer: null,
            older: this.newest_,
            value_: value
        };
        if (!this.newest_) this.oldest_ = entry;
        else this.newest_.newer = entry;
        this.newest_ = entry;
        this.entries_[key] = entry;
        ++this.count_;
    };
    /**
     * Set a maximum number of entries for the cache.
     * @param {number} size Cache size.
     * @api
     */ LRUCache1.prototype.setSize = function(size) {
        this.highWaterMark = size;
    };
    return LRUCache1;
}();
exports.default = LRUCache;

},{"../asserts.js":"e4TiF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bZ2LT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/tilecoord
 */ /**
 * An array of three numbers representing the location of a tile in a tile
 * grid. The order is `z` (zoom level), `x` (column), and `y` (row).
 * @typedef {Array<number>} TileCoord
 * @api
 */ /**
 * @param {number} z Z.
 * @param {number} x X.
 * @param {number} y Y.
 * @param {TileCoord} [opt_tileCoord] Tile coordinate.
 * @return {TileCoord} Tile coordinate.
 */ parcelHelpers.export(exports, "createOrUpdate", ()=>createOrUpdate);
/**
 * @param {number} z Z.
 * @param {number} x X.
 * @param {number} y Y.
 * @return {string} Key.
 */ parcelHelpers.export(exports, "getKeyZXY", ()=>getKeyZXY);
/**
 * Get the key for a tile coord.
 * @param {TileCoord} tileCoord The tile coord.
 * @return {string} Key.
 */ parcelHelpers.export(exports, "getKey", ()=>getKey);
/**
 * Get the tile cache key for a tile key obtained through `tile.getKey()`.
 * @param {string} tileKey The tile key.
 * @return {string} The cache key.
 */ parcelHelpers.export(exports, "getCacheKeyForTileKey", ()=>getCacheKeyForTileKey);
/**
 * Get a tile coord given a key.
 * @param {string} key The tile coord key.
 * @return {TileCoord} The tile coord.
 */ parcelHelpers.export(exports, "fromKey", ()=>fromKey);
/**
 * @param {TileCoord} tileCoord Tile coord.
 * @return {number} Hash.
 */ parcelHelpers.export(exports, "hash", ()=>hash);
/**
 * @param {TileCoord} tileCoord Tile coordinate.
 * @param {!import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
 * @return {boolean} Tile coordinate is within extent and zoom level range.
 */ parcelHelpers.export(exports, "withinExtentAndZ", ()=>withinExtentAndZ);
function createOrUpdate(z, x, y, opt_tileCoord) {
    if (opt_tileCoord !== undefined) {
        opt_tileCoord[0] = z;
        opt_tileCoord[1] = x;
        opt_tileCoord[2] = y;
        return opt_tileCoord;
    } else return [
        z,
        x,
        y
    ];
}
function getKeyZXY(z, x, y) {
    return z + "/" + x + "/" + y;
}
function getKey(tileCoord) {
    return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);
}
function getCacheKeyForTileKey(tileKey) {
    var _a = tileKey.substring(tileKey.lastIndexOf("/") + 1, tileKey.length).split(",").map(Number), z = _a[0], x = _a[1], y = _a[2];
    return getKeyZXY(z, x, y);
}
function fromKey(key) {
    return key.split("/").map(Number);
}
function hash(tileCoord) {
    return (tileCoord[1] << tileCoord[0]) + tileCoord[2];
}
function withinExtentAndZ(tileCoord, tileGrid) {
    var z = tileCoord[0];
    var x = tileCoord[1];
    var y = tileCoord[2];
    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) return false;
    var tileRange = tileGrid.getFullTileRange(z);
    if (!tileRange) return true;
    else return tileRange.containsXY(x, y);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2X3sL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/source/UrlTile
 */ var _tileEventTypeJs = require("./TileEventType.js");
var _tileEventTypeJsDefault = parcelHelpers.interopDefault(_tileEventTypeJs);
var _tileJs = require("./Tile.js");
var _tileJsDefault = parcelHelpers.interopDefault(_tileJs);
var _tileStateJs = require("../TileState.js");
var _tileStateJsDefault = parcelHelpers.interopDefault(_tileStateJs);
var _tileurlfunctionJs = require("../tileurlfunction.js");
var _tilecoordJs = require("../tilecoord.js");
var _utilJs = require("../util.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
 * @property {number} [cacheSize] Cache size.
 * @property {boolean} [opaque=false] Whether the layer is opaque.
 * @property {import("../proj.js").ProjectionLike} [projection] Projection.
 * @property {import("./State.js").default} [state] State.
 * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] TileGrid.
 * @property {import("../Tile.js").LoadFunction} tileLoadFunction TileLoadFunction.
 * @property {number} [tilePixelRatio] TilePixelRatio.
 * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] TileUrlFunction.
 * @property {string} [url] Url.
 * @property {Array<string>} [urls] Urls.
 * @property {boolean} [wrapX=true] WrapX.
 * @property {number} [transition] Transition.
 * @property {string} [key] Key.
 * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0] ZDirection.
 * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
 * the nearest neighbor is used when resampling.
 */ /**
 * @classdesc
 * Base class for sources providing tiles divided into a tile grid over http.
 *
 * @fires import("./Tile.js").TileSourceEvent
 */ var UrlTile = /** @class */ function(_super) {
    __extends(UrlTile1, _super);
    /**
     * @param {Options} options Image tile options.
     */ function UrlTile1(options) {
        var _this = _super.call(this, {
            attributions: options.attributions,
            cacheSize: options.cacheSize,
            opaque: options.opaque,
            projection: options.projection,
            state: options.state,
            tileGrid: options.tileGrid,
            tilePixelRatio: options.tilePixelRatio,
            wrapX: options.wrapX,
            transition: options.transition,
            interpolate: options.interpolate,
            key: options.key,
            attributionsCollapsible: options.attributionsCollapsible,
            zDirection: options.zDirection
        }) || this;
        /**
         * @private
         * @type {boolean}
         */ _this.generateTileUrlFunction_ = _this.tileUrlFunction === UrlTile1.prototype.tileUrlFunction;
        /**
         * @protected
         * @type {import("../Tile.js").LoadFunction}
         */ _this.tileLoadFunction = options.tileLoadFunction;
        if (options.tileUrlFunction) _this.tileUrlFunction = options.tileUrlFunction;
        /**
         * @protected
         * @type {!Array<string>|null}
         */ _this.urls = null;
        if (options.urls) _this.setUrls(options.urls);
        else if (options.url) _this.setUrl(options.url);
        /**
         * @private
         * @type {!Object<string, boolean>}
         */ _this.tileLoadingKeys_ = {};
        return _this;
    }
    /**
     * Return the tile load function of the source.
     * @return {import("../Tile.js").LoadFunction} TileLoadFunction
     * @api
     */ UrlTile1.prototype.getTileLoadFunction = function() {
        return this.tileLoadFunction;
    };
    /**
     * Return the tile URL function of the source.
     * @return {import("../Tile.js").UrlFunction} TileUrlFunction
     * @api
     */ UrlTile1.prototype.getTileUrlFunction = function() {
        return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;
    };
    /**
     * Return the URLs used for this source.
     * When a tileUrlFunction is used instead of url or urls,
     * null will be returned.
     * @return {!Array<string>|null} URLs.
     * @api
     */ UrlTile1.prototype.getUrls = function() {
        return this.urls;
    };
    /**
     * Handle tile change events.
     * @param {import("../events/Event.js").default} event Event.
     * @protected
     */ UrlTile1.prototype.handleTileChange = function(event) {
        var tile = event.target;
        var uid = (0, _utilJs.getUid)(tile);
        var tileState = tile.getState();
        var type;
        if (tileState == (0, _tileStateJsDefault.default).LOADING) {
            this.tileLoadingKeys_[uid] = true;
            type = (0, _tileEventTypeJsDefault.default).TILELOADSTART;
        } else if (uid in this.tileLoadingKeys_) {
            delete this.tileLoadingKeys_[uid];
            type = tileState == (0, _tileStateJsDefault.default).ERROR ? (0, _tileEventTypeJsDefault.default).TILELOADERROR : tileState == (0, _tileStateJsDefault.default).LOADED ? (0, _tileEventTypeJsDefault.default).TILELOADEND : undefined;
        }
        if (type != undefined) this.dispatchEvent(new (0, _tileJs.TileSourceEvent)(type, tile));
    };
    /**
     * Set the tile load function of the source.
     * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
     * @api
     */ UrlTile1.prototype.setTileLoadFunction = function(tileLoadFunction) {
        this.tileCache.clear();
        this.tileLoadFunction = tileLoadFunction;
        this.changed();
    };
    /**
     * Set the tile URL function of the source.
     * @param {import("../Tile.js").UrlFunction} tileUrlFunction Tile URL function.
     * @param {string} [key] Optional new tile key for the source.
     * @api
     */ UrlTile1.prototype.setTileUrlFunction = function(tileUrlFunction, key) {
        this.tileUrlFunction = tileUrlFunction;
        this.tileCache.pruneExceptNewestZ();
        if (typeof key !== "undefined") this.setKey(key);
        else this.changed();
    };
    /**
     * Set the URL to use for requests.
     * @param {string} url URL.
     * @api
     */ UrlTile1.prototype.setUrl = function(url) {
        var urls = (0, _tileurlfunctionJs.expandUrl)(url);
        this.urls = urls;
        this.setUrls(urls);
    };
    /**
     * Set the URLs to use for requests.
     * @param {Array<string>} urls URLs.
     * @api
     */ UrlTile1.prototype.setUrls = function(urls) {
        this.urls = urls;
        var key = urls.join("\n");
        if (this.generateTileUrlFunction_) this.setTileUrlFunction((0, _tileurlfunctionJs.createFromTemplates)(urls, this.tileGrid), key);
        else this.setKey(key);
    };
    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {string|undefined} Tile URL.
     */ UrlTile1.prototype.tileUrlFunction = function(tileCoord, pixelRatio, projection) {
        return undefined;
    };
    /**
     * Marks a tile coord as being used, without triggering a load.
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     */ UrlTile1.prototype.useTile = function(z, x, y) {
        var tileCoordKey = (0, _tilecoordJs.getKeyZXY)(z, x, y);
        if (this.tileCache.containsKey(tileCoordKey)) this.tileCache.get(tileCoordKey);
    };
    return UrlTile1;
}((0, _tileJsDefault.default));
exports.default = UrlTile;

},{"./TileEventType.js":"9ZOYi","./Tile.js":"3ySVS","../TileState.js":"2fodI","../tileurlfunction.js":"gOwFC","../tilecoord.js":"bZ2LT","../util.js":"pLBjQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9ZOYi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/source/TileEventType
 */ /**
 * @enum {string}
 */ exports.default = {
    /**
     * Triggered when a tile starts loading.
     * @event module:ol/source/Tile.TileSourceEvent#tileloadstart
     * @api
     */ TILELOADSTART: "tileloadstart",
    /**
     * Triggered when a tile finishes loading, either when its data is loaded,
     * or when loading was aborted because the tile is no longer needed.
     * @event module:ol/source/Tile.TileSourceEvent#tileloadend
     * @api
     */ TILELOADEND: "tileloadend",
    /**
     * Triggered if tile loading results in an error.
     * @event module:ol/source/Tile.TileSourceEvent#tileloaderror
     * @api
     */ TILELOADERROR: "tileloaderror"
}; /**
 * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes
 */ 

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ySVS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TileSourceEvent", ()=>TileSourceEvent);
/**
 * @module ol/source/Tile
 */ var _eventJs = require("../events/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _sourceJs = require("./Source.js");
var _sourceJsDefault = parcelHelpers.interopDefault(_sourceJs);
var _tileCacheJs = require("../TileCache.js");
var _tileCacheJsDefault = parcelHelpers.interopDefault(_tileCacheJs);
var _tileStateJs = require("../TileState.js");
var _tileStateJsDefault = parcelHelpers.interopDefault(_tileStateJs);
var _utilJs = require("../util.js");
var _assertsJs = require("../asserts.js");
var _projJs = require("../proj.js");
var _tilecoordJs = require("../tilecoord.js");
var _tilegridJs = require("../tilegrid.js");
var _sizeJs = require("../size.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<import("./TileEventType").TileSourceEventTypes, TileSourceEvent, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
 *     import("./TileEventType").TileSourceEventTypes, Return>} TileSourceOnSignature
 */ /**
 * @typedef {Object} Options
 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
 * @property {number} [cacheSize] CacheSize.
 * @property {boolean} [opaque=false] Whether the layer is opaque.
 * @property {number} [tilePixelRatio] TilePixelRatio.
 * @property {import("../proj.js").ProjectionLike} [projection] Projection.
 * @property {import("./State.js").default} [state] State.
 * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] TileGrid.
 * @property {boolean} [wrapX=false] WrapX.
 * @property {number} [transition] Transition.
 * @property {string} [key] Key.
 * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0] ZDirection.
 * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
 * the nearest neighbor is used when resampling.
 */ /**
 * @classdesc
 * Abstract base class; normally only used for creating subclasses and not
 * instantiated in apps.
 * Base class for sources providing images divided into a tile grid.
 * @abstract
 * @api
 */ var TileSource = /** @class */ function(_super) {
    __extends(TileSource1, _super);
    /**
     * @param {Options} options SourceTile source options.
     */ function TileSource1(options) {
        var _this = _super.call(this, {
            attributions: options.attributions,
            attributionsCollapsible: options.attributionsCollapsible,
            projection: options.projection,
            state: options.state,
            wrapX: options.wrapX,
            interpolate: options.interpolate
        }) || this;
        /***
         * @type {TileSourceOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {TileSourceOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {TileSourceOnSignature<void>}
         */ _this.un;
        /**
         * @private
         * @type {boolean}
         */ _this.opaque_ = options.opaque !== undefined ? options.opaque : false;
        /**
         * @private
         * @type {number}
         */ _this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;
        /**
         * @type {import("../tilegrid/TileGrid.js").default|null}
         */ _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;
        var tileSize = [
            256,
            256
        ];
        if (_this.tileGrid) (0, _sizeJs.toSize)(_this.tileGrid.getTileSize(_this.tileGrid.getMinZoom()), tileSize);
        /**
         * @protected
         * @type {import("../TileCache.js").default}
         */ _this.tileCache = new (0, _tileCacheJsDefault.default)(options.cacheSize || 0);
        /**
         * @protected
         * @type {import("../size.js").Size}
         */ _this.tmpSize = [
            0,
            0
        ];
        /**
         * @private
         * @type {string}
         */ _this.key_ = options.key || "";
        /**
         * @protected
         * @type {import("../Tile.js").Options}
         */ _this.tileOptions = {
            transition: options.transition,
            interpolate: options.interpolate
        };
        /**
         * zDirection hint, read by the renderer. Indicates which resolution should be used
         * by a renderer if the views resolution does not match any resolution of the tile source.
         * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
         * will be used. If -1, the nearest higher resolution will be used.
         * @type {number|import("../array.js").NearestDirectionFunction}
         */ _this.zDirection = options.zDirection ? options.zDirection : 0;
        return _this;
    }
    /**
     * @return {boolean} Can expire cache.
     */ TileSource1.prototype.canExpireCache = function() {
        return this.tileCache.canExpireCache();
    };
    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {!Object<string, boolean>} usedTiles Used tiles.
     */ TileSource1.prototype.expireCache = function(projection, usedTiles) {
        var tileCache = this.getTileCacheForProjection(projection);
        if (tileCache) tileCache.expireCache(usedTiles);
    };
    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {number} z Zoom level.
     * @param {import("../TileRange.js").default} tileRange Tile range.
     * @param {function(import("../Tile.js").default):(boolean|void)} callback Called with each
     *     loaded tile.  If the callback returns `false`, the tile will not be
     *     considered loaded.
     * @return {boolean} The tile range is fully covered with loaded tiles.
     */ TileSource1.prototype.forEachLoadedTile = function(projection, z, tileRange, callback) {
        var tileCache = this.getTileCacheForProjection(projection);
        if (!tileCache) return false;
        var covered = true;
        var tile, tileCoordKey, loaded;
        for(var x = tileRange.minX; x <= tileRange.maxX; ++x)for(var y = tileRange.minY; y <= tileRange.maxY; ++y){
            tileCoordKey = (0, _tilecoordJs.getKeyZXY)(z, x, y);
            loaded = false;
            if (tileCache.containsKey(tileCoordKey)) {
                tile = /** @type {!import("../Tile.js").default} */ tileCache.get(tileCoordKey);
                loaded = tile.getState() === (0, _tileStateJsDefault.default).LOADED;
                if (loaded) loaded = callback(tile) !== false;
            }
            if (!loaded) covered = false;
        }
        return covered;
    };
    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {number} Gutter.
     */ TileSource1.prototype.getGutterForProjection = function(projection) {
        return 0;
    };
    /**
     * Return the key to be used for all tiles in the source.
     * @return {string} The key for all tiles.
     */ TileSource1.prototype.getKey = function() {
        return this.key_;
    };
    /**
     * Set the value to be used as the key for all tiles in the source.
     * @param {string} key The key for tiles.
     * @protected
     */ TileSource1.prototype.setKey = function(key) {
        if (this.key_ !== key) {
            this.key_ = key;
            this.changed();
        }
    };
    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {boolean} Opaque.
     */ TileSource1.prototype.getOpaque = function(projection) {
        return this.opaque_;
    };
    /**
     * @return {Array<number>|null} Resolutions.
     */ TileSource1.prototype.getResolutions = function() {
        if (!this.tileGrid) return null;
        return this.tileGrid.getResolutions();
    };
    /**
     * @abstract
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../Tile.js").default} Tile.
     */ TileSource1.prototype.getTile = function(z, x, y, pixelRatio, projection) {
        return (0, _utilJs.abstract)();
    };
    /**
     * Return the tile grid of the tile source.
     * @return {import("../tilegrid/TileGrid.js").default|null} Tile grid.
     * @api
     */ TileSource1.prototype.getTileGrid = function() {
        return this.tileGrid;
    };
    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
     */ TileSource1.prototype.getTileGridForProjection = function(projection) {
        if (!this.tileGrid) return (0, _tilegridJs.getForProjection)(projection);
        else return this.tileGrid;
    };
    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../TileCache.js").default} Tile cache.
     * @protected
     */ TileSource1.prototype.getTileCacheForProjection = function(projection) {
        (0, _assertsJs.assert)((0, _projJs.equivalent)(this.getProjection(), projection), 68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.
        );
        return this.tileCache;
    };
    /**
     * Get the tile pixel ratio for this source. Subclasses may override this
     * method, which is meant to return a supported pixel ratio that matches the
     * provided `pixelRatio` as close as possible.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Tile pixel ratio.
     */ TileSource1.prototype.getTilePixelRatio = function(pixelRatio) {
        return this.tilePixelRatio_;
    };
    /**
     * @param {number} z Z.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../size.js").Size} Tile size.
     */ TileSource1.prototype.getTilePixelSize = function(z, pixelRatio, projection) {
        var tileGrid = this.getTileGridForProjection(projection);
        var tilePixelRatio = this.getTilePixelRatio(pixelRatio);
        var tileSize = (0, _sizeJs.toSize)(tileGrid.getTileSize(z), this.tmpSize);
        if (tilePixelRatio == 1) return tileSize;
        else return (0, _sizeJs.scale)(tileSize, tilePixelRatio, this.tmpSize);
    };
    /**
     * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
     * is outside the resolution and extent range of the tile grid, `null` will be
     * returned.
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../proj/Projection.js").default} [opt_projection] Projection.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate to be passed to the tileUrlFunction or
     *     null if no tile URL should be created for the passed `tileCoord`.
     */ TileSource1.prototype.getTileCoordForTileUrlFunction = function(tileCoord, opt_projection) {
        var projection = opt_projection !== undefined ? opt_projection : this.getProjection();
        var tileGrid = this.getTileGridForProjection(projection);
        if (this.getWrapX() && projection.isGlobal()) tileCoord = (0, _tilegridJs.wrapX)(tileGrid, tileCoord, projection);
        return (0, _tilecoordJs.withinExtentAndZ)(tileCoord, tileGrid) ? tileCoord : null;
    };
    /**
     * Remove all cached tiles from the source. The next render cycle will fetch new tiles.
     * @api
     */ TileSource1.prototype.clear = function() {
        this.tileCache.clear();
    };
    TileSource1.prototype.refresh = function() {
        this.clear();
        _super.prototype.refresh.call(this);
    };
    /**
     * Increases the cache size if needed
     * @param {number} tileCount Minimum number of tiles needed.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */ TileSource1.prototype.updateCacheSize = function(tileCount, projection) {
        var tileCache = this.getTileCacheForProjection(projection);
        if (tileCount > tileCache.highWaterMark) tileCache.highWaterMark = tileCount;
    };
    /**
     * Marks a tile coord as being used, without triggering a load.
     * @abstract
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */ TileSource1.prototype.useTile = function(z, x, y, projection) {};
    return TileSource1;
}((0, _sourceJsDefault.default));
/**
 * @classdesc
 * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this
 * type.
 */ var TileSourceEvent = /** @class */ function(_super) {
    __extends(TileSourceEvent1, _super);
    /**
     * @param {string} type Type.
     * @param {import("../Tile.js").default} tile The tile.
     */ function TileSourceEvent1(type, tile) {
        var _this = _super.call(this, type) || this;
        /**
         * The tile related to the event.
         * @type {import("../Tile.js").default}
         * @api
         */ _this.tile = tile;
        return _this;
    }
    return TileSourceEvent1;
}((0, _eventJsDefault.default));
exports.default = TileSource;

},{"../events/Event.js":"hwXQP","./Source.js":"bgZ4G","../TileCache.js":"3AgyC","../TileState.js":"2fodI","../util.js":"pLBjQ","../asserts.js":"e4TiF","../proj.js":"SznqC","../tilecoord.js":"bZ2LT","../tilegrid.js":"1Yr4i","../size.js":"lKEPe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Yr4i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {import("./proj/Projection.js").default} projection Projection.
 * @return {!TileGrid} Default tile grid for the
 * passed projection.
 */ parcelHelpers.export(exports, "getForProjection", ()=>getForProjection);
/**
 * @param {TileGrid} tileGrid Tile grid.
 * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
 * @param {import("./proj/Projection.js").default} projection Projection.
 * @return {import("./tilecoord.js").TileCoord} Tile coordinate.
 */ parcelHelpers.export(exports, "wrapX", ()=>wrapX);
/**
 * @param {import("./extent.js").Extent} extent Extent.
 * @param {number} [opt_maxZoom] Maximum zoom level (default is
 *     DEFAULT_MAX_ZOOM).
 * @param {number|import("./size.js").Size} [opt_tileSize] Tile size (default uses
 *     DEFAULT_TILE_SIZE).
 * @param {import("./extent/Corner.js").default} [opt_corner] Extent corner (default is `'top-left'`).
 * @return {!TileGrid} TileGrid instance.
 */ parcelHelpers.export(exports, "createForExtent", ()=>createForExtent);
/**
 * @typedef {Object} XYZOptions
 * @property {import("./extent.js").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the
 * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution
 * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.
 * @property {number} [maxResolution] Resolution at level zero.
 * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels
 * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.
 * @property {number} [minZoom=0] Minimum zoom.
 * @property {number|import("./size.js").Size} [tileSize=[256, 256]] Tile size in pixels.
 */ /**
 * Creates a tile grid with a standard XYZ tiling scheme.
 * @param {XYZOptions} [opt_options] Tile grid options.
 * @return {!TileGrid} Tile grid instance.
 * @api
 */ parcelHelpers.export(exports, "createXYZ", ()=>createXYZ);
/**
 * @param {import("./proj.js").ProjectionLike} projection Projection.
 * @param {number} [opt_maxZoom] Maximum zoom level (default is
 *     DEFAULT_MAX_ZOOM).
 * @param {number|import("./size.js").Size} [opt_tileSize] Tile size (default uses
 *     DEFAULT_TILE_SIZE).
 * @param {import("./extent/Corner.js").default} [opt_corner] Extent corner (default is `'top-left'`).
 * @return {!TileGrid} TileGrid instance.
 */ parcelHelpers.export(exports, "createForProjection", ()=>createForProjection);
/**
 * Generate a tile grid extent from a projection.  If the projection has an
 * extent, it is used.  If not, a global extent is assumed.
 * @param {import("./proj.js").ProjectionLike} projection Projection.
 * @return {import("./extent.js").Extent} Extent.
 */ parcelHelpers.export(exports, "extentFromProjection", ()=>extentFromProjection);
/**
 * @module ol/tilegrid
 */ var _cornerJs = require("./extent/Corner.js");
var _cornerJsDefault = parcelHelpers.interopDefault(_cornerJs);
var _tileGridJs = require("./tilegrid/TileGrid.js");
var _tileGridJsDefault = parcelHelpers.interopDefault(_tileGridJs);
var _unitsJs = require("./proj/Units.js");
var _unitsJsDefault = parcelHelpers.interopDefault(_unitsJs);
var _commonJs = require("./tilegrid/common.js");
var _projJs = require("./proj.js");
var _extentJs = require("./extent.js");
var _sizeJs = require("./size.js");
function getForProjection(projection) {
    var tileGrid = projection.getDefaultTileGrid();
    if (!tileGrid) {
        tileGrid = createForProjection(projection);
        projection.setDefaultTileGrid(tileGrid);
    }
    return tileGrid;
}
function wrapX(tileGrid, tileCoord, projection) {
    var z = tileCoord[0];
    var center = tileGrid.getTileCoordCenter(tileCoord);
    var projectionExtent = extentFromProjection(projection);
    if (!(0, _extentJs.containsCoordinate)(projectionExtent, center)) {
        var worldWidth = (0, _extentJs.getWidth)(projectionExtent);
        var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);
        center[0] += worldWidth * worldsAway;
        return tileGrid.getTileCoordForCoordAndZ(center, z);
    } else return tileCoord;
}
function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {
    var corner = opt_corner !== undefined ? opt_corner : (0, _cornerJsDefault.default).TOP_LEFT;
    var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);
    return new (0, _tileGridJsDefault.default)({
        extent: extent,
        origin: (0, _extentJs.getCorner)(extent, corner),
        resolutions: resolutions,
        tileSize: opt_tileSize
    });
}
function createXYZ(opt_options) {
    var xyzOptions = opt_options || {};
    var extent = xyzOptions.extent || (0, _projJs.get)("EPSG:3857").getExtent();
    var gridOptions = {
        extent: extent,
        minZoom: xyzOptions.minZoom,
        tileSize: xyzOptions.tileSize,
        resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)
    };
    return new (0, _tileGridJsDefault.default)(gridOptions);
}
/**
 * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
 * @param {import("./extent.js").Extent} extent Extent.
 * @param {number} [opt_maxZoom] Maximum zoom level (default is
 *     DEFAULT_MAX_ZOOM).
 * @param {number|import("./size.js").Size} [opt_tileSize] Tile size (default uses
 *     DEFAULT_TILE_SIZE).
 * @param {number} [opt_maxResolution] Resolution at level zero.
 * @return {!Array<number>} Resolutions array.
 */ function resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {
    var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : (0, _commonJs.DEFAULT_MAX_ZOOM);
    var height = (0, _extentJs.getHeight)(extent);
    var width = (0, _extentJs.getWidth)(extent);
    var tileSize = (0, _sizeJs.toSize)(opt_tileSize !== undefined ? opt_tileSize : (0, _commonJs.DEFAULT_TILE_SIZE));
    var maxResolution = opt_maxResolution > 0 ? opt_maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);
    var length = maxZoom + 1;
    var resolutions = new Array(length);
    for(var z = 0; z < length; ++z)resolutions[z] = maxResolution / Math.pow(2, z);
    return resolutions;
}
function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {
    var extent = extentFromProjection(projection);
    return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);
}
function extentFromProjection(projection) {
    projection = (0, _projJs.get)(projection);
    var extent = projection.getExtent();
    if (!extent) {
        var half = 180 * (0, _projJs.METERS_PER_UNIT)[(0, _unitsJsDefault.default).DEGREES] / projection.getMetersPerUnit();
        extent = (0, _extentJs.createOrUpdate)(-half, -half, half, half);
    }
    return extent;
}

},{"./extent/Corner.js":"cPFYO","./tilegrid/TileGrid.js":"cZOJJ","./proj/Units.js":"gOgy6","./tilegrid/common.js":"bxYGl","./proj.js":"SznqC","./extent.js":"6YrVc","./size.js":"lKEPe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZOJJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/tilegrid/TileGrid
 */ var _tileRangeJs = require("../TileRange.js");
var _tileRangeJsDefault = parcelHelpers.interopDefault(_tileRangeJs);
var _commonJs = require("./common.js");
var _assertsJs = require("../asserts.js");
var _mathJs = require("../math.js");
var _extentJs = require("../extent.js");
var _tilecoordJs = require("../tilecoord.js");
var _arrayJs = require("../array.js");
var _sizeJs = require("../size.js");
/**
 * @private
 * @type {import("../tilecoord.js").TileCoord}
 */ var tmpTileCoord = [
    0,
    0,
    0
];
/**
 * Number of decimal digits to consider in integer values when rounding.
 * @type {number}
 */ var DECIMALS = 5;
/**
 * @typedef {Object} Options
 * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles outside this
 * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or
 * `origins` are configured, the `origin` will be set to the top-left corner of the extent.
 * @property {number} [minZoom=0] Minimum zoom.
 * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e. where the `x`
 * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not
 * specified, `extent` or `origins` must be provided.
 * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins, i.e. where
 * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length
 * should match the length of the `resolutions` array, i.e. each resolution can have a different
 * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or
 * `origin` must be provided.
 * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs
 * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions
 * array will have a length of `maxZoom + 1`.
 * @property {Array<import("../size.js").Size>} [sizes] Number of tile rows and columns
 * of the grid for each zoom level. If specified the values
 * define each zoom level's extent together with the `origin` or `origins`.
 * A grid `extent` can be configured in addition, and will further limit the extent
 * for which tile requests are made by sources. If the bottom-left corner of
 * an extent is used as `origin` or `origins`, then the `y` value must be
 * negative because OpenLayers tile coordinates use the top left as the origin.
 * @property {number|import("../size.js").Size} [tileSize] Tile size.
 * Default is `[256, 256]`.
 * @property {Array<import("../size.js").Size>} [tileSizes] Tile sizes. If given, the array length
 * should match the length of the `resolutions` array, i.e. each resolution can have a different
 * tile size.
 */ /**
 * @classdesc
 * Base class for setting the grid pattern for sources accessing tiled-image
 * servers.
 * @api
 */ var TileGrid = /** @class */ function() {
    /**
     * @param {Options} options Tile grid options.
     */ function TileGrid1(options) {
        /**
         * @protected
         * @type {number}
         */ this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;
        /**
         * @private
         * @type {!Array<number>}
         */ this.resolutions_ = options.resolutions;
        (0, _assertsJs.assert)((0, _arrayJs.isSorted)(this.resolutions_, function(a, b) {
            return b - a;
        }, true), 17); // `resolutions` must be sorted in descending order
        // check if we've got a consistent zoom factor and origin
        var zoomFactor;
        if (!options.origins) for(var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i){
            if (!zoomFactor) zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];
            else if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {
                zoomFactor = undefined;
                break;
            }
        }
        /**
         * @private
         * @type {number|undefined}
         */ this.zoomFactor_ = zoomFactor;
        /**
         * @protected
         * @type {number}
         */ this.maxZoom = this.resolutions_.length - 1;
        /**
         * @private
         * @type {import("../coordinate.js").Coordinate|null}
         */ this.origin_ = options.origin !== undefined ? options.origin : null;
        /**
         * @private
         * @type {Array<import("../coordinate.js").Coordinate>}
         */ this.origins_ = null;
        if (options.origins !== undefined) {
            this.origins_ = options.origins;
            (0, _assertsJs.assert)(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal
        }
        var extent = options.extent;
        if (extent !== undefined && !this.origin_ && !this.origins_) this.origin_ = (0, _extentJs.getTopLeft)(extent);
        (0, _assertsJs.assert)(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, 18); // Either `origin` or `origins` must be configured, never both
        /**
         * @private
         * @type {Array<number|import("../size.js").Size>}
         */ this.tileSizes_ = null;
        if (options.tileSizes !== undefined) {
            this.tileSizes_ = options.tileSizes;
            (0, _assertsJs.assert)(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal
        }
        /**
         * @private
         * @type {number|import("../size.js").Size}
         */ this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? (0, _commonJs.DEFAULT_TILE_SIZE) : null;
        (0, _assertsJs.assert)(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, 22); // Either `tileSize` or `tileSizes` must be configured, never both
        /**
         * @private
         * @type {import("../extent.js").Extent}
         */ this.extent_ = extent !== undefined ? extent : null;
        /**
         * @private
         * @type {Array<import("../TileRange.js").default>}
         */ this.fullTileRanges_ = null;
        /**
         * @private
         * @type {import("../size.js").Size}
         */ this.tmpSize_ = [
            0,
            0
        ];
        /**
         * @private
         * @type {import("../extent.js").Extent}
         */ this.tmpExtent_ = [
            0,
            0,
            0,
            0
        ];
        if (options.sizes !== undefined) this.fullTileRanges_ = options.sizes.map(function(size, z) {
            var tileRange = new (0, _tileRangeJsDefault.default)(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));
            if (extent) {
                var restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);
                tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);
                tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);
                tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);
                tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);
            }
            return tileRange;
        }, this);
        else if (extent) this.calculateTileRanges_(extent);
    }
    /**
     * Call a function with each tile coordinate for a given extent and zoom level.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} zoom Integer zoom level.
     * @param {function(import("../tilecoord.js").TileCoord): void} callback Function called with each tile coordinate.
     * @api
     */ TileGrid1.prototype.forEachTileCoord = function(extent, zoom, callback) {
        var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);
        for(var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i)for(var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j)callback([
            zoom,
            i,
            j
        ]);
    };
    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {function(number, import("../TileRange.js").default): boolean} callback Callback.
     * @param {import("../TileRange.js").default} [opt_tileRange] Temporary import("../TileRange.js").default object.
     * @param {import("../extent.js").Extent} [opt_extent] Temporary import("../extent.js").Extent object.
     * @return {boolean} Callback succeeded.
     */ TileGrid1.prototype.forEachTileCoordParentTileRange = function(tileCoord, callback, opt_tileRange, opt_extent) {
        var tileRange, x, y;
        var tileCoordExtent = null;
        var z = tileCoord[0] - 1;
        if (this.zoomFactor_ === 2) {
            x = tileCoord[1];
            y = tileCoord[2];
        } else tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
        while(z >= this.minZoom){
            if (this.zoomFactor_ === 2) {
                x = Math.floor(x / 2);
                y = Math.floor(y / 2);
                tileRange = (0, _tileRangeJs.createOrUpdate)(x, x, y, y, opt_tileRange);
            } else tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);
            if (callback(z, tileRange)) return true;
            --z;
        }
        return false;
    };
    /**
     * Get the extent for this tile grid, if it was configured.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */ TileGrid1.prototype.getExtent = function() {
        return this.extent_;
    };
    /**
     * Get the maximum zoom level for the grid.
     * @return {number} Max zoom.
     * @api
     */ TileGrid1.prototype.getMaxZoom = function() {
        return this.maxZoom;
    };
    /**
     * Get the minimum zoom level for the grid.
     * @return {number} Min zoom.
     * @api
     */ TileGrid1.prototype.getMinZoom = function() {
        return this.minZoom;
    };
    /**
     * Get the origin for the grid at the given zoom level.
     * @param {number} z Integer zoom level.
     * @return {import("../coordinate.js").Coordinate} Origin.
     * @api
     */ TileGrid1.prototype.getOrigin = function(z) {
        if (this.origin_) return this.origin_;
        else return this.origins_[z];
    };
    /**
     * Get the resolution for the given zoom level.
     * @param {number} z Integer zoom level.
     * @return {number} Resolution.
     * @api
     */ TileGrid1.prototype.getResolution = function(z) {
        return this.resolutions_[z];
    };
    /**
     * Get the list of resolutions for the tile grid.
     * @return {Array<number>} Resolutions.
     * @api
     */ TileGrid1.prototype.getResolutions = function() {
        return this.resolutions_;
    };
    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../TileRange.js").default} [opt_tileRange] Temporary import("../TileRange.js").default object.
     * @param {import("../extent.js").Extent} [opt_extent] Temporary import("../extent.js").Extent object.
     * @return {import("../TileRange.js").default} Tile range.
     */ TileGrid1.prototype.getTileCoordChildTileRange = function(tileCoord, opt_tileRange, opt_extent) {
        if (tileCoord[0] < this.maxZoom) {
            if (this.zoomFactor_ === 2) {
                var minX = tileCoord[1] * 2;
                var minY = tileCoord[2] * 2;
                return (0, _tileRangeJs.createOrUpdate)(minX, minX + 1, minY, minY + 1, opt_tileRange);
            }
            var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent || this.tmpExtent_);
            return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);
        }
        return null;
    };
    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {number} z Integer zoom level.
     * @param {import("../TileRange.js").default} [opt_tileRange] Temporary import("../TileRange.js").default object.
     * @return {import("../TileRange.js").default} Tile range.
     */ TileGrid1.prototype.getTileRangeForTileCoordAndZ = function(tileCoord, z, opt_tileRange) {
        if (z > this.maxZoom || z < this.minZoom) return null;
        var tileCoordZ = tileCoord[0];
        var tileCoordX = tileCoord[1];
        var tileCoordY = tileCoord[2];
        if (z === tileCoordZ) return (0, _tileRangeJs.createOrUpdate)(tileCoordX, tileCoordY, tileCoordX, tileCoordY, opt_tileRange);
        if (this.zoomFactor_) {
            var factor = Math.pow(this.zoomFactor_, z - tileCoordZ);
            var minX = Math.floor(tileCoordX * factor);
            var minY = Math.floor(tileCoordY * factor);
            if (z < tileCoordZ) return (0, _tileRangeJs.createOrUpdate)(minX, minX, minY, minY, opt_tileRange);
            var maxX = Math.floor(factor * (tileCoordX + 1)) - 1;
            var maxY = Math.floor(factor * (tileCoordY + 1)) - 1;
            return (0, _tileRangeJs.createOrUpdate)(minX, maxX, minY, maxY, opt_tileRange);
        }
        var tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);
        return this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);
    };
    /**
     * Get the extent for a tile range.
     * @param {number} z Integer zoom level.
     * @param {import("../TileRange.js").default} tileRange Tile range.
     * @param {import("../extent.js").Extent} [opt_extent] Temporary import("../extent.js").Extent object.
     * @return {import("../extent.js").Extent} Extent.
     */ TileGrid1.prototype.getTileRangeExtent = function(z, tileRange, opt_extent) {
        var origin = this.getOrigin(z);
        var resolution = this.getResolution(z);
        var tileSize = (0, _sizeJs.toSize)(this.getTileSize(z), this.tmpSize_);
        var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;
        var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;
        var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;
        var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;
        return (0, _extentJs.createOrUpdate)(minX, minY, maxX, maxY, opt_extent);
    };
    /**
     * Get a tile range for the given extent and integer zoom level.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} z Integer zoom level.
     * @param {import("../TileRange.js").default} [opt_tileRange] Temporary tile range object.
     * @return {import("../TileRange.js").default} Tile range.
     */ TileGrid1.prototype.getTileRangeForExtentAndZ = function(extent, z, opt_tileRange) {
        var tileCoord = tmpTileCoord;
        this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);
        var minX = tileCoord[1];
        var minY = tileCoord[2];
        this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);
        return (0, _tileRangeJs.createOrUpdate)(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);
    };
    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @return {import("../coordinate.js").Coordinate} Tile center.
     */ TileGrid1.prototype.getTileCoordCenter = function(tileCoord) {
        var origin = this.getOrigin(tileCoord[0]);
        var resolution = this.getResolution(tileCoord[0]);
        var tileSize = (0, _sizeJs.toSize)(this.getTileSize(tileCoord[0]), this.tmpSize_);
        return [
            origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,
            origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution, 
        ];
    };
    /**
     * Get the extent of a tile coordinate.
     *
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../extent.js").Extent} [opt_extent] Temporary extent object.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */ TileGrid1.prototype.getTileCoordExtent = function(tileCoord, opt_extent) {
        var origin = this.getOrigin(tileCoord[0]);
        var resolution = this.getResolution(tileCoord[0]);
        var tileSize = (0, _sizeJs.toSize)(this.getTileSize(tileCoord[0]), this.tmpSize_);
        var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;
        var minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;
        var maxX = minX + tileSize[0] * resolution;
        var maxY = minY + tileSize[1] * resolution;
        return (0, _extentJs.createOrUpdate)(minX, minY, maxX, maxY, opt_extent);
    };
    /**
     * Get the tile coordinate for the given map coordinate and resolution.  This
     * method considers that coordinates that intersect tile boundaries should be
     * assigned the higher tile coordinate.
     *
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Destination import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @api
     */ TileGrid1.prototype.getTileCoordForCoordAndResolution = function(coordinate, resolution, opt_tileCoord) {
        return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);
    };
    /**
     * Note that this method should not be called for resolutions that correspond
     * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {number} resolution Resolution (for a non-integer zoom level).
     * @param {boolean} reverseIntersectionPolicy Instead of letting edge
     *     intersections go to the higher tile coordinate, let edge intersections
     *     go to the lower tile coordinate.
     * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Temporary import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @private
     */ TileGrid1.prototype.getTileCoordForXYAndResolution_ = function(x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {
        var z = this.getZForResolution(resolution);
        var scale = resolution / this.getResolution(z);
        var origin = this.getOrigin(z);
        var tileSize = (0, _sizeJs.toSize)(this.getTileSize(z), this.tmpSize_);
        var tileCoordX = scale * (x - origin[0]) / resolution / tileSize[0];
        var tileCoordY = scale * (origin[1] - y) / resolution / tileSize[1];
        if (reverseIntersectionPolicy) {
            tileCoordX = (0, _mathJs.ceil)(tileCoordX, DECIMALS) - 1;
            tileCoordY = (0, _mathJs.ceil)(tileCoordY, DECIMALS) - 1;
        } else {
            tileCoordX = (0, _mathJs.floor)(tileCoordX, DECIMALS);
            tileCoordY = (0, _mathJs.floor)(tileCoordY, DECIMALS);
        }
        return (0, _tilecoordJs.createOrUpdate)(z, tileCoordX, tileCoordY, opt_tileCoord);
    };
    /**
     * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
     * they should have separate implementations.  This method is for integer zoom
     * levels.  The other method should only be called for resolutions corresponding
     * to non-integer zoom levels.
     * @param {number} x Map x coordinate.
     * @param {number} y Map y coordinate.
     * @param {number} z Integer zoom level.
     * @param {boolean} reverseIntersectionPolicy Instead of letting edge
     *     intersections go to the higher tile coordinate, let edge intersections
     *     go to the lower tile coordinate.
     * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Temporary import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @private
     */ TileGrid1.prototype.getTileCoordForXYAndZ_ = function(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {
        var origin = this.getOrigin(z);
        var resolution = this.getResolution(z);
        var tileSize = (0, _sizeJs.toSize)(this.getTileSize(z), this.tmpSize_);
        var tileCoordX = (x - origin[0]) / resolution / tileSize[0];
        var tileCoordY = (origin[1] - y) / resolution / tileSize[1];
        if (reverseIntersectionPolicy) {
            tileCoordX = (0, _mathJs.ceil)(tileCoordX, DECIMALS) - 1;
            tileCoordY = (0, _mathJs.ceil)(tileCoordY, DECIMALS) - 1;
        } else {
            tileCoordX = (0, _mathJs.floor)(tileCoordX, DECIMALS);
            tileCoordY = (0, _mathJs.floor)(tileCoordY, DECIMALS);
        }
        return (0, _tilecoordJs.createOrUpdate)(z, tileCoordX, tileCoordY, opt_tileCoord);
    };
    /**
     * Get a tile coordinate given a map coordinate and zoom level.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} z Zoom level.
     * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Destination import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @api
     */ TileGrid1.prototype.getTileCoordForCoordAndZ = function(coordinate, z, opt_tileCoord) {
        return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);
    };
    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @return {number} Tile resolution.
     */ TileGrid1.prototype.getTileCoordResolution = function(tileCoord) {
        return this.resolutions_[tileCoord[0]];
    };
    /**
     * Get the tile size for a zoom level. The type of the return value matches the
     * `tileSize` or `tileSizes` that the tile grid was configured with. To always
     * get an {@link import("../size.js").Size}, run the result through {@link module:ol/size.toSize}.
     * @param {number} z Z.
     * @return {number|import("../size.js").Size} Tile size.
     * @api
     */ TileGrid1.prototype.getTileSize = function(z) {
        if (this.tileSize_) return this.tileSize_;
        else return this.tileSizes_[z];
    };
    /**
     * @param {number} z Zoom level.
     * @return {import("../TileRange.js").default} Extent tile range for the specified zoom level.
     */ TileGrid1.prototype.getFullTileRange = function(z) {
        if (!this.fullTileRanges_) return this.extent_ ? this.getTileRangeForExtentAndZ(this.extent_, z) : null;
        else return this.fullTileRanges_[z];
    };
    /**
     * @param {number} resolution Resolution.
     * @param {number|import("../array.js").NearestDirectionFunction} [opt_direction]
     *     If 0, the nearest resolution will be used.
     *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the
     *     nearest lower resolution (higher Z) will be used. Default is 0.
     *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.
     *
     * For example to change tile Z at the midpoint of zoom levels
     * ```js
     * function(value, high, low) {
     *   return value - low * Math.sqrt(high / low);
     * }
     * ```
     * @return {number} Z.
     * @api
     */ TileGrid1.prototype.getZForResolution = function(resolution, opt_direction) {
        var z = (0, _arrayJs.linearFindNearest)(this.resolutions_, resolution, opt_direction || 0);
        return (0, _mathJs.clamp)(z, this.minZoom, this.maxZoom);
    };
    /**
     * @param {!import("../extent.js").Extent} extent Extent for this tile grid.
     * @private
     */ TileGrid1.prototype.calculateTileRanges_ = function(extent) {
        var length = this.resolutions_.length;
        var fullTileRanges = new Array(length);
        for(var z = this.minZoom; z < length; ++z)fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);
        this.fullTileRanges_ = fullTileRanges;
    };
    return TileGrid1;
}();
exports.default = TileGrid;

},{"../TileRange.js":"3pvAn","./common.js":"bxYGl","../asserts.js":"e4TiF","../math.js":"5jEFr","../extent.js":"6YrVc","../tilecoord.js":"bZ2LT","../array.js":"1Fbic","../size.js":"lKEPe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3pvAn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {number} minX Minimum X.
 * @param {number} maxX Maximum X.
 * @param {number} minY Minimum Y.
 * @param {number} maxY Maximum Y.
 * @param {TileRange} [tileRange] TileRange.
 * @return {TileRange} Tile range.
 */ parcelHelpers.export(exports, "createOrUpdate", ()=>createOrUpdate);
/**
 * @module ol/TileRange
 */ /**
 * A representation of a contiguous block of tiles.  A tile range is specified
 * by its min/max tile coordinates and is inclusive of coordinates.
 */ var TileRange = /** @class */ function() {
    /**
     * @param {number} minX Minimum X.
     * @param {number} maxX Maximum X.
     * @param {number} minY Minimum Y.
     * @param {number} maxY Maximum Y.
     */ function TileRange1(minX, maxX, minY, maxY) {
        /**
         * @type {number}
         */ this.minX = minX;
        /**
         * @type {number}
         */ this.maxX = maxX;
        /**
         * @type {number}
         */ this.minY = minY;
        /**
         * @type {number}
         */ this.maxY = maxY;
    }
    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @return {boolean} Contains tile coordinate.
     */ TileRange1.prototype.contains = function(tileCoord) {
        return this.containsXY(tileCoord[1], tileCoord[2]);
    };
    /**
     * @param {TileRange} tileRange Tile range.
     * @return {boolean} Contains.
     */ TileRange1.prototype.containsTileRange = function(tileRange) {
        return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;
    };
    /**
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @return {boolean} Contains coordinate.
     */ TileRange1.prototype.containsXY = function(x, y) {
        return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
    };
    /**
     * @param {TileRange} tileRange Tile range.
     * @return {boolean} Equals.
     */ TileRange1.prototype.equals = function(tileRange) {
        return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;
    };
    /**
     * @param {TileRange} tileRange Tile range.
     */ TileRange1.prototype.extend = function(tileRange) {
        if (tileRange.minX < this.minX) this.minX = tileRange.minX;
        if (tileRange.maxX > this.maxX) this.maxX = tileRange.maxX;
        if (tileRange.minY < this.minY) this.minY = tileRange.minY;
        if (tileRange.maxY > this.maxY) this.maxY = tileRange.maxY;
    };
    /**
     * @return {number} Height.
     */ TileRange1.prototype.getHeight = function() {
        return this.maxY - this.minY + 1;
    };
    /**
     * @return {import("./size.js").Size} Size.
     */ TileRange1.prototype.getSize = function() {
        return [
            this.getWidth(),
            this.getHeight()
        ];
    };
    /**
     * @return {number} Width.
     */ TileRange1.prototype.getWidth = function() {
        return this.maxX - this.minX + 1;
    };
    /**
     * @param {TileRange} tileRange Tile range.
     * @return {boolean} Intersects.
     */ TileRange1.prototype.intersects = function(tileRange) {
        return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;
    };
    return TileRange1;
}();
function createOrUpdate(minX, maxX, minY, maxY, tileRange) {
    if (tileRange !== undefined) {
        tileRange.minX = minX;
        tileRange.maxX = maxX;
        tileRange.minY = minY;
        tileRange.maxY = maxY;
        return tileRange;
    } else return new TileRange(minX, maxX, minY, maxY);
}
exports.default = TileRange;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gOwFC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @param {string} template Template.
 * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
 * @return {import("./Tile.js").UrlFunction} Tile URL function.
 */ parcelHelpers.export(exports, "createFromTemplate", ()=>createFromTemplate);
/**
 * @param {Array<string>} templates Templates.
 * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
 * @return {import("./Tile.js").UrlFunction} Tile URL function.
 */ parcelHelpers.export(exports, "createFromTemplates", ()=>createFromTemplates);
/**
 * @param {Array<import("./Tile.js").UrlFunction>} tileUrlFunctions Tile URL Functions.
 * @return {import("./Tile.js").UrlFunction} Tile URL function.
 */ parcelHelpers.export(exports, "createFromTileUrlFunctions", ()=>createFromTileUrlFunctions);
/**
 * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
 * @param {number} pixelRatio Pixel ratio.
 * @param {import("./proj/Projection.js").default} projection Projection.
 * @return {string|undefined} Tile URL.
 */ parcelHelpers.export(exports, "nullTileUrlFunction", ()=>nullTileUrlFunction);
/**
 * @param {string} url URL.
 * @return {Array<string>} Array of urls.
 */ parcelHelpers.export(exports, "expandUrl", ()=>expandUrl);
/**
 * @module ol/tileurlfunction
 */ var _assertsJs = require("./asserts.js");
var _mathJs = require("./math.js");
var _tilecoordJs = require("./tilecoord.js");
function createFromTemplate(template, tileGrid) {
    var zRegEx = /\{z\}/g;
    var xRegEx = /\{x\}/g;
    var yRegEx = /\{y\}/g;
    var dashYRegEx = /\{-y\}/g;
    return(/**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {string|undefined} Tile URL.
     */ function(tileCoord, pixelRatio, projection) {
        if (!tileCoord) return undefined;
        else return template.replace(zRegEx, tileCoord[0].toString()).replace(xRegEx, tileCoord[1].toString()).replace(yRegEx, tileCoord[2].toString()).replace(dashYRegEx, function() {
            var z = tileCoord[0];
            var range = tileGrid.getFullTileRange(z);
            (0, _assertsJs.assert)(range, 55); // The {-y} placeholder requires a tile grid with extent
            var y = range.getHeight() - tileCoord[2] - 1;
            return y.toString();
        });
    });
}
function createFromTemplates(templates, tileGrid) {
    var len = templates.length;
    var tileUrlFunctions = new Array(len);
    for(var i = 0; i < len; ++i)tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);
    return createFromTileUrlFunctions(tileUrlFunctions);
}
function createFromTileUrlFunctions(tileUrlFunctions) {
    if (tileUrlFunctions.length === 1) return tileUrlFunctions[0];
    return(/**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {string|undefined} Tile URL.
     */ function(tileCoord, pixelRatio, projection) {
        if (!tileCoord) return undefined;
        else {
            var h = (0, _tilecoordJs.hash)(tileCoord);
            var index = (0, _mathJs.modulo)(h, tileUrlFunctions.length);
            return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
        }
    });
}
function nullTileUrlFunction(tileCoord, pixelRatio, projection) {
    return undefined;
}
function expandUrl(url) {
    var urls = [];
    var match = /\{([a-z])-([a-z])\}/.exec(url);
    if (match) {
        // char range
        var startCharCode = match[1].charCodeAt(0);
        var stopCharCode = match[2].charCodeAt(0);
        var charCode = void 0;
        for(charCode = startCharCode; charCode <= stopCharCode; ++charCode)urls.push(url.replace(match[0], String.fromCharCode(charCode)));
        return urls;
    }
    match = /\{(\d+)-(\d+)\}/.exec(url);
    if (match) {
        // number range
        var stop_1 = parseInt(match[2], 10);
        for(var i = parseInt(match[1], 10); i <= stop_1; i++)urls.push(url.replace(match[0], i.toString()));
        return urls;
    }
    urls.push(url);
    return urls;
}

},{"./asserts.js":"e4TiF","./math.js":"5jEFr","./tilecoord.js":"bZ2LT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ytzs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/layer/Tile
 */ var _baseTileJs = require("./BaseTile.js");
var _baseTileJsDefault = parcelHelpers.interopDefault(_baseTileJs);
var _tileLayerJs = require("../renderer/canvas/TileLayer.js");
var _tileLayerJsDefault = parcelHelpers.interopDefault(_tileLayerJs);
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * For layer sources that provide pre-rendered, tiled images in grids that are
 * organized by zoom levels for specific resolutions.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @template {import("../source/Tile.js").default} TileSourceType
 * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>
 * @api
 */ var TileLayer = /** @class */ function(_super) {
    __extends(TileLayer1, _super);
    /**
     * @param {import("./BaseTile.js").Options<TileSourceType>} [opt_options] Tile layer options.
     */ function TileLayer1(opt_options) {
        return _super.call(this, opt_options) || this;
    }
    TileLayer1.prototype.createRenderer = function() {
        return new (0, _tileLayerJsDefault.default)(this);
    };
    return TileLayer1;
}((0, _baseTileJsDefault.default));
exports.default = TileLayer;

},{"./BaseTile.js":"g7Zx9","../renderer/canvas/TileLayer.js":"6bgv8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g7Zx9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/layer/BaseTile
 */ var _layerJs = require("./Layer.js");
var _layerJsDefault = parcelHelpers.interopDefault(_layerJs);
var _tilePropertyJs = require("./TileProperty.js");
var _tilePropertyJsDefault = parcelHelpers.interopDefault(_tilePropertyJs);
var _objJs = require("../obj.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/***
 * @template Return
 * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
 *   import("../Observable").OnSignature<import("./Base").BaseLayerObjectEventTypes|
 *     'change:source'|'change:preload'|'change:useInterimTilesOnError', import("../Object").ObjectEvent, Return> &
 *   import("../Observable").OnSignature<import("../render/EventType").LayerRenderEventTypes, import("../render/Event").default, Return> &
 *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("./Base").BaseLayerObjectEventTypes|
 *   'change:source'|'change:preload'|'change:useInterimTilesOnError'|import("../render/EventType").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature
 */ /**
 * @template {import("../source/Tile.js").default} TileSourceType
 * @typedef {Object} Options
 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
 * method was used.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
 * visible.
 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
 * be visible.
 * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
 * means no preloading.
 * @property {TileSourceType} [source] Source for this layer.
 * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
 * this layer in its layers collection, and the layer will be rendered on top. This is useful for
 * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
 * use {@link import("../PluggableMap.js").default#addLayer map.addLayer()}.
 * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
 * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
 */ /**
 * @classdesc
 * For layer sources that provide pre-rendered, tiled images in grids that are
 * organized by zoom levels for specific resolutions.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @template {import("../source/Tile.js").default} TileSourceType
 * @template {import("../renderer/Layer.js").default} RendererType
 * @extends {Layer<TileSourceType, RendererType>}
 * @api
 */ var BaseTileLayer = /** @class */ function(_super) {
    __extends(BaseTileLayer1, _super);
    /**
     * @param {Options<TileSourceType>} [opt_options] Tile layer options.
     */ function BaseTileLayer1(opt_options) {
        var _this = this;
        var options = opt_options ? opt_options : {};
        var baseOptions = (0, _objJs.assign)({}, options);
        delete baseOptions.preload;
        delete baseOptions.useInterimTilesOnError;
        _this = _super.call(this, baseOptions) || this;
        /***
         * @type {BaseTileLayerOnSignature<import("../events").EventsKey>}
         */ _this.on;
        /***
         * @type {BaseTileLayerOnSignature<import("../events").EventsKey>}
         */ _this.once;
        /***
         * @type {BaseTileLayerOnSignature<void>}
         */ _this.un;
        _this.setPreload(options.preload !== undefined ? options.preload : 0);
        _this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ? options.useInterimTilesOnError : true);
        return _this;
    }
    /**
     * Return the level as number to which we will preload tiles up to.
     * @return {number} The level to preload tiles up to.
     * @observable
     * @api
     */ BaseTileLayer1.prototype.getPreload = function() {
        return /** @type {number} */ this.get((0, _tilePropertyJsDefault.default).PRELOAD);
    };
    /**
     * Set the level as number to which we will preload tiles up to.
     * @param {number} preload The level to preload tiles up to.
     * @observable
     * @api
     */ BaseTileLayer1.prototype.setPreload = function(preload) {
        this.set((0, _tilePropertyJsDefault.default).PRELOAD, preload);
    };
    /**
     * Whether we use interim tiles on error.
     * @return {boolean} Use interim tiles on error.
     * @observable
     * @api
     */ BaseTileLayer1.prototype.getUseInterimTilesOnError = function() {
        return /** @type {boolean} */ this.get((0, _tilePropertyJsDefault.default).USE_INTERIM_TILES_ON_ERROR);
    };
    /**
     * Set whether we use interim tiles on error.
     * @param {boolean} useInterimTilesOnError Use interim tiles on error.
     * @observable
     * @api
     */ BaseTileLayer1.prototype.setUseInterimTilesOnError = function(useInterimTilesOnError) {
        this.set((0, _tilePropertyJsDefault.default).USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
    };
    /**
     * Get data for a pixel location.  The return type depends on the source data.  For image tiles,
     * a four element RGBA array will be returned.  For data tiles, the array length will match the
     * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.
     * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.
     *
     * ```js
     * // display layer data on every pointer move
     * map.on('pointermove', (event) => {
     *   console.log(layer.getData(event.pixel));
     * });
     * ```
     * @param {import("../pixel").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
     * @api
     */ BaseTileLayer1.prototype.getData = function(pixel) {
        return _super.prototype.getData.call(this, pixel);
    };
    return BaseTileLayer1;
}((0, _layerJsDefault.default));
exports.default = BaseTileLayer;

},{"./Layer.js":"8J9Kf","./TileProperty.js":"cIL12","../obj.js":"3ssAG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cIL12":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/layer/TileProperty
 */ /**
 * @enum {string}
 */ exports.default = {
    PRELOAD: "preload",
    USE_INTERIM_TILES_ON_ERROR: "useInterimTilesOnError"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6bgv8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/renderer/canvas/TileLayer
 */ var _layerJs = require("./Layer.js");
var _layerJsDefault = parcelHelpers.interopDefault(_layerJs);
var _imageTileJs = require("../../ImageTile.js");
var _imageTileJsDefault = parcelHelpers.interopDefault(_imageTileJs);
var _tileJs = require("../../reproj/Tile.js");
var _tileJsDefault = parcelHelpers.interopDefault(_tileJs);
var _tileRangeJs = require("../../TileRange.js");
var _tileRangeJsDefault = parcelHelpers.interopDefault(_tileRangeJs);
var _tileStateJs = require("../../TileState.js");
var _tileStateJsDefault = parcelHelpers.interopDefault(_tileStateJs);
var _commonJs = require("./common.js");
var _transformJs = require("../../transform.js");
var _objJs = require("../../obj.js");
var _extentJs = require("../../extent.js");
var _cssJs = require("../../css.js");
var _projJs = require("../../proj.js");
var _utilJs = require("../../util.js");
var _arrayJs = require("../../array.js");
var _sizeJs = require("../../size.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @classdesc
 * Canvas renderer for tile layers.
 * @api
 * @template {import("../../layer/Tile.js").default<import("../../source/Tile.js").default>|import("../../layer/VectorTile.js").default} [LayerType=import("../../layer/Tile.js").default<import("../../source/Tile.js").default>|import("../../layer/VectorTile.js").default]
 * @extends {CanvasLayerRenderer<LayerType>}
 */ var CanvasTileLayerRenderer = /** @class */ function(_super) {
    __extends(CanvasTileLayerRenderer1, _super);
    /**
     * @param {LayerType} tileLayer Tile layer.
     */ function CanvasTileLayerRenderer1(tileLayer) {
        var _this = _super.call(this, tileLayer) || this;
        /**
         * Rendered extent has changed since the previous `renderFrame()` call
         * @type {boolean}
         */ _this.extentChanged = true;
        /**
         * @private
         * @type {?import("../../extent.js").Extent}
         */ _this.renderedExtent_ = null;
        /**
         * @protected
         * @type {number}
         */ _this.renderedPixelRatio;
        /**
         * @protected
         * @type {import("../../proj/Projection.js").default}
         */ _this.renderedProjection = null;
        /**
         * @protected
         * @type {number}
         */ _this.renderedRevision;
        /**
         * @protected
         * @type {!Array<import("../../Tile.js").default>}
         */ _this.renderedTiles = [];
        /**
         * @private
         * @type {boolean}
         */ _this.newTiles_ = false;
        /**
         * @protected
         * @type {import("../../extent.js").Extent}
         */ _this.tmpExtent = (0, _extentJs.createEmpty)();
        /**
         * @private
         * @type {import("../../TileRange.js").default}
         */ _this.tmpTileRange_ = new (0, _tileRangeJsDefault.default)(0, 0, 0, 0);
        return _this;
    }
    /**
     * @protected
     * @param {import("../../Tile.js").default} tile Tile.
     * @return {boolean} Tile is drawable.
     */ CanvasTileLayerRenderer1.prototype.isDrawableTile = function(tile) {
        var tileLayer = this.getLayer();
        var tileState = tile.getState();
        var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
        return tileState == (0, _tileStateJsDefault.default).LOADED || tileState == (0, _tileStateJsDefault.default).EMPTY || tileState == (0, _tileStateJsDefault.default).ERROR && !useInterimTilesOnError;
    };
    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @return {!import("../../Tile.js").default} Tile.
     */ CanvasTileLayerRenderer1.prototype.getTile = function(z, x, y, frameState) {
        var pixelRatio = frameState.pixelRatio;
        var projection = frameState.viewState.projection;
        var tileLayer = this.getLayer();
        var tileSource = tileLayer.getSource();
        var tile = tileSource.getTile(z, x, y, pixelRatio, projection);
        if (tile.getState() == (0, _tileStateJsDefault.default).ERROR) {
            if (!tileLayer.getUseInterimTilesOnError()) // When useInterimTilesOnError is false, we consider the error tile as loaded.
            tile.setState((0, _tileStateJsDefault.default).LOADED);
            else if (tileLayer.getPreload() > 0) // Preloaded tiles for lower resolutions might have finished loading.
            this.newTiles_ = true;
        }
        if (!this.isDrawableTile(tile)) tile = tile.getInterimTile();
        return tile;
    };
    /**
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray} Data at the pixel location.
     */ CanvasTileLayerRenderer1.prototype.getData = function(pixel) {
        var frameState = this.frameState;
        if (!frameState) return null;
        var layer = this.getLayer();
        var coordinate = (0, _transformJs.apply)(frameState.pixelToCoordinateTransform, pixel.slice());
        var layerExtent = layer.getExtent();
        if (layerExtent) {
            if (!(0, _extentJs.containsCoordinate)(layerExtent, coordinate)) return null;
        }
        var pixelRatio = frameState.pixelRatio;
        var projection = frameState.viewState.projection;
        var viewState = frameState.viewState;
        var source = layer.getRenderSource();
        var tileGrid = source.getTileGridForProjection(viewState.projection);
        var tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);
        for(var z = tileGrid.getZForResolution(viewState.resolution); z >= tileGrid.getMinZoom(); --z){
            var tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);
            var tile = source.getTile(z, tileCoord[1], tileCoord[2], pixelRatio, projection);
            if (!(tile instanceof (0, _imageTileJsDefault.default) || tile instanceof (0, _tileJsDefault.default))) return null;
            if (tile.getState() !== (0, _tileStateJsDefault.default).LOADED) continue;
            var tileOrigin = tileGrid.getOrigin(z);
            var tileSize = (0, _sizeJs.toSize)(tileGrid.getTileSize(z));
            var tileResolution = tileGrid.getResolution(z);
            var col = Math.floor(tilePixelRatio * ((coordinate[0] - tileOrigin[0]) / tileResolution - tileCoord[1] * tileSize[0]));
            var row = Math.floor(tilePixelRatio * ((tileOrigin[1] - coordinate[1]) / tileResolution - tileCoord[2] * tileSize[1]));
            return this.getImageData(tile.getImage(), col, row);
        }
        return null;
    };
    /**
     * @param {Object<number, Object<string, import("../../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
     * @param {number} zoom Zoom level.
     * @param {import("../../Tile.js").default} tile Tile.
     * @return {boolean|void} If `false`, the tile will not be considered loaded.
     */ CanvasTileLayerRenderer1.prototype.loadedTileCallback = function(tiles, zoom, tile) {
        if (this.isDrawableTile(tile)) return _super.prototype.loadedTileCallback.call(this, tiles, zoom, tile);
        return false;
    };
    /**
     * Determine whether render should be called.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */ CanvasTileLayerRenderer1.prototype.prepareFrame = function(frameState) {
        return !!this.getLayer().getSource();
    };
    /**
     * Render the layer.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target that may be used to render content to.
     * @return {HTMLElement} The rendered element.
     */ CanvasTileLayerRenderer1.prototype.renderFrame = function(frameState, target) {
        var layerState = frameState.layerStatesArray[frameState.layerIndex];
        var viewState = frameState.viewState;
        var projection = viewState.projection;
        var viewResolution = viewState.resolution;
        var viewCenter = viewState.center;
        var rotation = viewState.rotation;
        var pixelRatio = frameState.pixelRatio;
        var tileLayer = this.getLayer();
        var tileSource = tileLayer.getSource();
        var sourceRevision = tileSource.getRevision();
        var tileGrid = tileSource.getTileGridForProjection(projection);
        var z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);
        var tileResolution = tileGrid.getResolution(z);
        var extent = frameState.extent;
        var layerExtent = layerState.extent && (0, _projJs.fromUserExtent)(layerState.extent, projection);
        if (layerExtent) extent = (0, _extentJs.getIntersection)(extent, (0, _projJs.fromUserExtent)(layerState.extent, projection));
        var tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);
        // desired dimensions of the canvas in pixels
        var width = Math.round(frameState.size[0] * tilePixelRatio);
        var height = Math.round(frameState.size[1] * tilePixelRatio);
        if (rotation) {
            var size = Math.round(Math.sqrt(width * width + height * height));
            width = size;
            height = size;
        }
        var dx = tileResolution * width / 2 / tilePixelRatio;
        var dy = tileResolution * height / 2 / tilePixelRatio;
        var canvasExtent = [
            viewCenter[0] - dx,
            viewCenter[1] - dy,
            viewCenter[0] + dx,
            viewCenter[1] + dy, 
        ];
        var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
        /**
         * @type {Object<number, Object<string, import("../../Tile.js").default>>}
         */ var tilesToDrawByZ = {};
        tilesToDrawByZ[z] = {};
        var findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);
        var tmpExtent = this.tmpExtent;
        var tmpTileRange = this.tmpTileRange_;
        this.newTiles_ = false;
        for(var x = tileRange.minX; x <= tileRange.maxX; ++x)for(var y = tileRange.minY; y <= tileRange.maxY; ++y){
            var tile = this.getTile(z, x, y, frameState);
            if (this.isDrawableTile(tile)) {
                var uid = (0, _utilJs.getUid)(this);
                if (tile.getState() == (0, _tileStateJsDefault.default).LOADED) {
                    tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
                    var inTransition = tile.inTransition(uid);
                    if (!this.newTiles_ && (inTransition || this.renderedTiles.indexOf(tile) === -1)) this.newTiles_ = true;
                }
                if (tile.getAlpha(uid, frameState.time) === 1) continue;
            }
            var childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);
            var covered = false;
            if (childTileRange) covered = findLoadedTiles(z + 1, childTileRange);
            if (!covered) tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);
        }
        var canvasScale = tileResolution / viewResolution;
        // set forward and inverse pixel transforms
        (0, _transformJs.compose)(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / tilePixelRatio, 1 / tilePixelRatio, rotation, -width / 2, -height / 2);
        var canvasTransform = (0, _transformJs.toString)(this.pixelTransform);
        this.useContainer(target, canvasTransform, layerState.opacity, this.getBackground(frameState));
        var context = this.context;
        var canvas = context.canvas;
        (0, _transformJs.makeInverse)(this.inversePixelTransform, this.pixelTransform);
        // set scale transform for calculating tile positions on the canvas
        (0, _transformJs.compose)(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);
        if (canvas.width != width || canvas.height != height) {
            canvas.width = width;
            canvas.height = height;
        } else if (!this.containerReused) context.clearRect(0, 0, width, height);
        if (layerExtent) this.clipUnrotated(context, frameState, layerExtent);
        if (!tileSource.getInterpolate()) (0, _objJs.assign)(context, (0, _commonJs.IMAGE_SMOOTHING_DISABLED));
        this.preRender(context, frameState);
        this.renderedTiles.length = 0;
        /** @type {Array<number>} */ var zs = Object.keys(tilesToDrawByZ).map(Number);
        zs.sort((0, _arrayJs.numberSafeCompareFunction));
        var clips, clipZs, currentClip;
        if (layerState.opacity === 1 && (!this.containerReused || tileSource.getOpaque(frameState.viewState.projection))) zs = zs.reverse();
        else {
            clips = [];
            clipZs = [];
        }
        for(var i = zs.length - 1; i >= 0; --i){
            var currentZ = zs[i];
            var currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);
            var currentResolution = tileGrid.getResolution(currentZ);
            var currentScale = currentResolution / tileResolution;
            var dx_1 = currentTilePixelSize[0] * currentScale * canvasScale;
            var dy_1 = currentTilePixelSize[1] * currentScale * canvasScale;
            var originTileCoord = tileGrid.getTileCoordForCoordAndZ((0, _extentJs.getTopLeft)(canvasExtent), currentZ);
            var originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);
            var origin_1 = (0, _transformJs.apply)(this.tempTransform, [
                tilePixelRatio * (originTileExtent[0] - canvasExtent[0]) / tileResolution,
                tilePixelRatio * (canvasExtent[3] - originTileExtent[3]) / tileResolution, 
            ]);
            var tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);
            var tilesToDraw = tilesToDrawByZ[currentZ];
            for(var tileCoordKey in tilesToDraw){
                var tile = tilesToDraw[tileCoordKey];
                var tileCoord = tile.tileCoord;
                // Calculate integer positions and sizes so that tiles align
                var xIndex = originTileCoord[1] - tileCoord[1];
                var nextX = Math.round(origin_1[0] - (xIndex - 1) * dx_1);
                var yIndex = originTileCoord[2] - tileCoord[2];
                var nextY = Math.round(origin_1[1] - (yIndex - 1) * dy_1);
                var x = Math.round(origin_1[0] - xIndex * dx_1);
                var y = Math.round(origin_1[1] - yIndex * dy_1);
                var w = nextX - x;
                var h = nextY - y;
                var transition = z === currentZ;
                var inTransition = transition && tile.getAlpha((0, _utilJs.getUid)(this), frameState.time) !== 1;
                var contextSaved = false;
                if (!inTransition) {
                    if (clips) {
                        // Clip mask for regions in this tile that already filled by a higher z tile
                        currentClip = [
                            x,
                            y,
                            x + w,
                            y,
                            x + w,
                            y + h,
                            x,
                            y + h
                        ];
                        for(var i_1 = 0, ii = clips.length; i_1 < ii; ++i_1)if (z !== currentZ && currentZ < clipZs[i_1]) {
                            var clip = clips[i_1];
                            if ((0, _extentJs.intersects)([
                                x,
                                y,
                                x + w,
                                y + h
                            ], [
                                clip[0],
                                clip[3],
                                clip[4],
                                clip[7]
                            ])) {
                                if (!contextSaved) {
                                    context.save();
                                    contextSaved = true;
                                }
                                context.beginPath();
                                // counter-clockwise (outer ring) for current tile
                                context.moveTo(currentClip[0], currentClip[1]);
                                context.lineTo(currentClip[2], currentClip[3]);
                                context.lineTo(currentClip[4], currentClip[5]);
                                context.lineTo(currentClip[6], currentClip[7]);
                                // clockwise (inner ring) for higher z tile
                                context.moveTo(clip[6], clip[7]);
                                context.lineTo(clip[4], clip[5]);
                                context.lineTo(clip[2], clip[3]);
                                context.lineTo(clip[0], clip[1]);
                                context.clip();
                            }
                        }
                        clips.push(currentClip);
                        clipZs.push(currentZ);
                    } else context.clearRect(x, y, w, h);
                }
                this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition);
                if (clips && !inTransition) {
                    if (contextSaved) context.restore();
                    this.renderedTiles.unshift(tile);
                } else this.renderedTiles.push(tile);
                this.updateUsedTiles(frameState.usedTiles, tileSource, tile);
            }
        }
        this.renderedRevision = sourceRevision;
        this.renderedResolution = tileResolution;
        this.extentChanged = !this.renderedExtent_ || !(0, _extentJs.equals)(this.renderedExtent_, canvasExtent);
        this.renderedExtent_ = canvasExtent;
        this.renderedPixelRatio = pixelRatio;
        this.renderedProjection = projection;
        this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());
        this.scheduleExpireCache(frameState, tileSource);
        this.postRender(context, frameState);
        if (layerState.extent) context.restore();
        (0, _objJs.assign)(context, (0, _commonJs.IMAGE_SMOOTHING_ENABLED));
        if (canvasTransform !== canvas.style.transform) canvas.style.transform = canvasTransform;
        var opacity = (0, _cssJs.cssOpacity)(layerState.opacity);
        var container = this.container;
        if (opacity !== container.style.opacity) container.style.opacity = opacity;
        return this.container;
    };
    /**
     * @param {import("../../ImageTile.js").default} tile Tile.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {number} x Left of the tile.
     * @param {number} y Top of the tile.
     * @param {number} w Width of the tile.
     * @param {number} h Height of the tile.
     * @param {number} gutter Tile gutter.
     * @param {boolean} transition Apply an alpha transition.
     */ CanvasTileLayerRenderer1.prototype.drawTileImage = function(tile, frameState, x, y, w, h, gutter, transition) {
        var image = this.getTileImage(tile);
        if (!image) return;
        var uid = (0, _utilJs.getUid)(this);
        var alpha = transition ? tile.getAlpha(uid, frameState.time) : 1;
        var alphaChanged = alpha !== this.context.globalAlpha;
        if (alphaChanged) {
            this.context.save();
            this.context.globalAlpha = alpha;
        }
        this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);
        if (alphaChanged) this.context.restore();
        if (alpha !== 1) frameState.animate = true;
        else if (transition) tile.endTransition(uid);
    };
    /**
     * @return {HTMLCanvasElement} Image
     */ CanvasTileLayerRenderer1.prototype.getImage = function() {
        var context = this.context;
        return context ? context.canvas : null;
    };
    /**
     * Get the image from a tile.
     * @param {import("../../ImageTile.js").default} tile Tile.
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @protected
     */ CanvasTileLayerRenderer1.prototype.getTileImage = function(tile) {
        return tile.getImage();
    };
    /**
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../source/Tile.js").default} tileSource Tile source.
     * @protected
     */ CanvasTileLayerRenderer1.prototype.scheduleExpireCache = function(frameState1, tileSource1) {
        if (tileSource1.canExpireCache()) {
            /**
             * @param {import("../../source/Tile.js").default} tileSource Tile source.
             * @param {import("../../PluggableMap.js").default} map Map.
             * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
             */ var postRenderFunction = (function(tileSource, map, frameState) {
                var tileSourceKey = (0, _utilJs.getUid)(tileSource);
                if (tileSourceKey in frameState.usedTiles) tileSource.expireCache(frameState.viewState.projection, frameState.usedTiles[tileSourceKey]);
            }).bind(null, tileSource1);
            frameState1.postRenderFunctions.push(postRenderFunction);
        }
    };
    /**
     * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.
     * @param {import("../../source/Tile.js").default} tileSource Tile source.
     * @param {import('../../Tile.js').default} tile Tile.
     * @protected
     */ CanvasTileLayerRenderer1.prototype.updateUsedTiles = function(usedTiles, tileSource, tile) {
        // FIXME should we use tilesToDrawByZ instead?
        var tileSourceKey = (0, _utilJs.getUid)(tileSource);
        if (!(tileSourceKey in usedTiles)) usedTiles[tileSourceKey] = {};
        usedTiles[tileSourceKey][tile.getKey()] = true;
    };
    /**
     * Manage tile pyramid.
     * This function performs a number of functions related to the tiles at the
     * current zoom and lower zoom levels:
     * - registers idle tiles in frameState.wantedTiles so that they are not
     *   discarded by the tile queue
     * - enqueues missing tiles
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../source/Tile.js").default} tileSource Tile source.
     * @param {import("../../tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection.js").default} projection Projection.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @param {number} currentZ Current Z.
     * @param {number} preload Load low resolution tiles up to `preload` levels.
     * @param {function(import("../../Tile.js").default):void} [opt_tileCallback] Tile callback.
     * @protected
     */ CanvasTileLayerRenderer1.prototype.manageTilePyramid = function(frameState, tileSource, tileGrid, pixelRatio, projection, extent, currentZ, preload, opt_tileCallback) {
        var tileSourceKey = (0, _utilJs.getUid)(tileSource);
        if (!(tileSourceKey in frameState.wantedTiles)) frameState.wantedTiles[tileSourceKey] = {};
        var wantedTiles = frameState.wantedTiles[tileSourceKey];
        var tileQueue = frameState.tileQueue;
        var minZoom = tileGrid.getMinZoom();
        var tileCount = 0;
        var tile, tileRange, tileResolution, x, y, z;
        for(z = minZoom; z <= currentZ; ++z){
            tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);
            tileResolution = tileGrid.getResolution(z);
            for(x = tileRange.minX; x <= tileRange.maxX; ++x){
                for(y = tileRange.minY; y <= tileRange.maxY; ++y)if (currentZ - z <= preload) {
                    ++tileCount;
                    tile = tileSource.getTile(z, x, y, pixelRatio, projection);
                    if (tile.getState() == (0, _tileStateJsDefault.default).IDLE) {
                        wantedTiles[tile.getKey()] = true;
                        if (!tileQueue.isKeyQueued(tile.getKey())) tileQueue.enqueue([
                            tile,
                            tileSourceKey,
                            tileGrid.getTileCoordCenter(tile.tileCoord),
                            tileResolution, 
                        ]);
                    }
                    if (opt_tileCallback !== undefined) opt_tileCallback(tile);
                } else tileSource.useTile(z, x, y, projection);
            }
        }
        tileSource.updateCacheSize(tileCount, projection);
    };
    return CanvasTileLayerRenderer1;
}((0, _layerJsDefault.default));
exports.default = CanvasTileLayerRenderer;

},{"./Layer.js":"fY3ny","../../ImageTile.js":"bGt2E","../../reproj/Tile.js":"lR1TX","../../TileRange.js":"3pvAn","../../TileState.js":"2fodI","./common.js":"fBoyo","../../transform.js":"1BqUf","../../obj.js":"3ssAG","../../extent.js":"6YrVc","../../css.js":"lDlNi","../../proj.js":"SznqC","../../util.js":"pLBjQ","../../array.js":"1Fbic","../../size.js":"lKEPe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5p5Jx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PlayControl", ()=>PlayControl);
parcelHelpers.export(exports, "NextFrameControl", ()=>NextFrameControl);
parcelHelpers.export(exports, "PrevFrameControl", ()=>PrevFrameControl);
parcelHelpers.export(exports, "SliderControl", ()=>SliderControl);
parcelHelpers.export(exports, "playButtonSvg", ()=>(0, _playOutlineSvgDefault.default));
parcelHelpers.export(exports, "pauseButtonSvg", ()=>(0, _pauseOutlineSvgDefault.default));
// jshint esversion: 10
var _control = require("ol/control");
var _playOutlineSvg = require("url:./images/play-outline.svg");
var _playOutlineSvgDefault = parcelHelpers.interopDefault(_playOutlineSvg);
var _playSkipForwardOutlineSvg = require("url:./images/play-skip-forward-outline.svg");
var _playSkipForwardOutlineSvgDefault = parcelHelpers.interopDefault(_playSkipForwardOutlineSvg);
var _playSkipBackOutlineSvg = require("url:./images/play-skip-back-outline.svg");
var _playSkipBackOutlineSvgDefault = parcelHelpers.interopDefault(_playSkipBackOutlineSvg);
var _pauseOutlineSvg = require("url:./images/pause-outline.svg");
var _pauseOutlineSvgDefault = parcelHelpers.interopDefault(_pauseOutlineSvg);
var _nouislider = require("nouislider");
var _nouisliderDefault = parcelHelpers.interopDefault(_nouislider);
class PlayControl extends (0, _control.Control) {
    /**
   * @param {Object} [opt_options] Control options.
   */ constructor(layer, opt_options){
        const options = opt_options || {};
        const button = document.createElement("button");
        button.className = "play-button";
        const img = document.createElement("img");
        img.className = "play-button-img";
        img.src = (0, _playOutlineSvgDefault.default);
        button.appendChild(img);
        const element = document.createElement("div");
        element.className = "play-button-container ol-unselectable ol-control";
        element.appendChild(button);
        super({
            element: element,
            target: options.target
        });
        this.img = img;
        button.addEventListener("click", this.playPause.bind(this, layer));
    }
    playPause(layer) {
        if (!layer.animation.playState) layer.playAnimation();
        else layer.pauseAnimation();
    }
}
class NextFrameControl extends (0, _control.Control) {
    /**
   * @param {Object} [opt_options] Control options.
   */ constructor(layer, opt_options){
        const options = opt_options || {};
        const button = document.createElement("button");
        const img = document.createElement("img");
        img.src = (0, _playSkipForwardOutlineSvgDefault.default);
        button.appendChild(img);
        const element = document.createElement("div");
        element.className = "next-frame-button ol-unselectable ol-control";
        element.appendChild(button);
        super({
            element: element,
            target: options.target
        });
        button.addEventListener("click", this.nextFrame.bind(this, layer));
    }
    nextFrame(layer) {
        layer.pauseAnimation();
        layer.goToFrame(layer.animation.frame + 1);
        layer.animation.slider.updateSliderValue(layer.animation.frame);
    }
}
class PrevFrameControl extends (0, _control.Control) {
    /**
   * @param {Object} [opt_options] Control options.
   */ constructor(layer, opt_options){
        const options = opt_options || {};
        const button = document.createElement("button");
        const img = document.createElement("img");
        img.src = (0, _playSkipBackOutlineSvgDefault.default);
        button.appendChild(img);
        const element = document.createElement("div");
        element.className = "prev-frame-button ol-unselectable ol-control";
        element.appendChild(button);
        super({
            element: element,
            target: options.target
        });
        button.addEventListener("click", this.prevFrame.bind(this, layer));
    }
    prevFrame(layer) {
        layer.pauseAnimation();
        layer.goToFrame(layer.animation.frame - 1);
        layer.animation.slider.updateSliderValue(layer.animation.frame);
    }
}
class SliderControl extends (0, _control.Control) {
    /**
   * @param {Object} [opt_options] Control options.
   */ constructor(layer, sliderValueArray, opt_options){
        const options = opt_options || {};
        const sliderContainer = document.createElement("div");
        const sliderContainerInner = document.createElement("div");
        const slider = document.createElement("div");
        const valuesForSlider = sliderValueArray.map((item)=>parseInt(item));
        const yearDisplayText = document.getElementById("year-display-text");
        var format = {
            to: function(value) {
                return valuesForSlider[Math.round(value)];
            },
            from: function(value) {
                return valuesForSlider.indexOf(Number(value));
            }
        };
        (0, _nouisliderDefault.default).create(slider, {
            start: [
                0
            ],
            range: {
                min: 0,
                max: valuesForSlider.length - 1
            },
            step: 1,
            tooltips: false,
            format: format,
            pips: {
                mode: "steps",
                format: format,
                filter: null,
                density: 4
            }
        });
        const element = document.createElement("div");
        sliderContainer.appendChild(sliderContainerInner);
        sliderContainerInner.appendChild(slider);
        element.appendChild(sliderContainer);
        element.classList.add("slider-element", "ol-control", "ol-unselectable");
        slider.classList.add("slider-styled");
        sliderContainer.classList.add("slider-container-outer");
        sliderContainerInner.classList.add("slider-container-inner");
        super({
            element: element,
            target: options.target
        });
        this.yearDisplayText = yearDisplayText;
        this.slider = slider;
        this.valuesForSlider = valuesForSlider;
        // Handle for updating timeline slider
        slider.noUiSlider.on("update", this.handleSliderChange.bind(this, layer));
        // Dynamically adjust timeline label spacing based on window size
        this.setLabelSpacing(this.slider);
        window.onresize = this.setLabelSpacing.bind(this, this.slider);
    }
    setLabelSpacing(slider) {
        // Dynamically sets timeline label spacing based on window size
        // Handles responsive label spacing in js, not with media tags in css, because noUiSlider pip marks are not children of axis
        function filterPipsMed(value, type) {
            if (!(value % 2)) return 2;
            else return 0;
        }
        function filterPipsSml(value, type) {
            if (!(value % 4)) return 2;
            else return 0;
        }
        function filterPipsLrg(value, type) {
            return 2;
        }
        if (window.innerWidth < 700) slider.noUiSlider.updateOptions({
            pips: {
                ...slider.noUiSlider.options.pips,
                filter: filterPipsSml
            }
        });
        else if (window.innerWidth < 1400) slider.noUiSlider.updateOptions({
            pips: {
                ...slider.noUiSlider.options.pips,
                filter: filterPipsMed
            }
        });
        else slider.noUiSlider.updateOptions({
            pips: {
                ...slider.noUiSlider.options.pips,
                filter: filterPipsLrg
            }
        });
    }
    handleSliderChange(layer) {
        // Changes animation frame when user manually adjusts slider
        const sliderVal = this.slider.noUiSlider.get();
        const newFrame = this.valuesForSlider.indexOf(sliderVal);
        layer.goToFrame(newFrame);
        if (this.yearDisplayText) this.yearDisplayText.innerText = sliderVal;
    }
    updateSliderValue(newValue) {
        // Updates slider value during animation or change via button controls
        this.slider.noUiSlider.set([
            this.valuesForSlider[newValue]
        ]);
    }
}

},{"ol/control":"6Pehg","url:./images/play-outline.svg":"kFjUt","url:./images/play-skip-forward-outline.svg":"e1LpE","url:./images/play-skip-back-outline.svg":"cIj4F","url:./images/pause-outline.svg":"l0wRm","nouislider":"g9flu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kFjUt":[function(require,module,exports) {
module.exports = require("./helpers/bundle-url").getBundleURL("1G2bZ") + "play-outline.5f503262.svg" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"lgJ39":[function(require,module,exports) {
"use strict";
var bundleURL = {};
function getBundleURLCached(id) {
    var value = bundleURL[id];
    if (!value) {
        value = getBundleURL();
        bundleURL[id] = value;
    }
    return value;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ("" + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return getBaseURL(matches[2]);
    }
    return "/";
}
function getBaseURL(url) {
    return ("" + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/.+)\/[^/]+$/, "$1") + "/";
} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    var matches = ("" + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^/]+/);
    if (!matches) throw new Error("Origin not found");
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}],"e1LpE":[function(require,module,exports) {
module.exports = require("./helpers/bundle-url").getBundleURL("1G2bZ") + "play-skip-forward-outline.782e64ac.svg" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"cIj4F":[function(require,module,exports) {
module.exports = require("./helpers/bundle-url").getBundleURL("1G2bZ") + "play-skip-back-outline.8bd28cf7.svg" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"l0wRm":[function(require,module,exports) {
module.exports = require("./helpers/bundle-url").getBundleURL("1G2bZ") + "pause-outline.814278e2.svg" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"g9flu":[function(require,module,exports) {
(function(global, factory) {
    factory(exports);
})(this, function(exports) {
    "use strict";
    exports.PipsMode = void 0;
    (function(PipsMode) {
        PipsMode["Range"] = "range";
        PipsMode["Steps"] = "steps";
        PipsMode["Positions"] = "positions";
        PipsMode["Count"] = "count";
        PipsMode["Values"] = "values";
    })(exports.PipsMode || (exports.PipsMode = {}));
    exports.PipsType = void 0;
    (function(PipsType) {
        PipsType[PipsType["None"] = -1] = "None";
        PipsType[PipsType["NoValue"] = 0] = "NoValue";
        PipsType[PipsType["LargeValue"] = 1] = "LargeValue";
        PipsType[PipsType["SmallValue"] = 2] = "SmallValue";
    })(exports.PipsType || (exports.PipsType = {}));
    //region Helper Methods
    function isValidFormatter(entry) {
        return isValidPartialFormatter(entry) && typeof entry.from === "function";
    }
    function isValidPartialFormatter(entry) {
        // partial formatters only need a to function and not a from function
        return typeof entry === "object" && typeof entry.to === "function";
    }
    function removeElement(el) {
        el.parentElement.removeChild(el);
    }
    function isSet(value) {
        return value !== null && value !== undefined;
    }
    // Bindable version
    function preventDefault(e) {
        e.preventDefault();
    }
    // Removes duplicates from an array.
    function unique(array) {
        return array.filter(function(a) {
            return !this[a] ? this[a] = true : false;
        }, {});
    }
    // Round a value to the closest 'to'.
    function closest(value, to) {
        return Math.round(value / to) * to;
    }
    // Current position of an element relative to the document.
    function offset1(elem, orientation) {
        var rect = elem.getBoundingClientRect();
        var doc = elem.ownerDocument;
        var docElem = doc.documentElement;
        var pageOffset = getPageOffset(doc);
        // getBoundingClientRect contains left scroll in Chrome on Android.
        // I haven't found a feature detection that proves this. Worst case
        // scenario on mis-match: the 'tap' feature on horizontal sliders breaks.
        if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) pageOffset.x = 0;
        return orientation ? rect.top + pageOffset.y - docElem.clientTop : rect.left + pageOffset.x - docElem.clientLeft;
    }
    // Checks whether a value is numerical.
    function isNumeric(a) {
        return typeof a === "number" && !isNaN(a) && isFinite(a);
    }
    // Sets a class and removes it after [duration] ms.
    function addClassFor(element, className, duration) {
        if (duration > 0) {
            addClass(element, className);
            setTimeout(function() {
                removeClass(element, className);
            }, duration);
        }
    }
    // Limits a value to 0 - 100
    function limit(a) {
        return Math.max(Math.min(a, 100), 0);
    }
    // Wraps a variable as an array, if it isn't one yet.
    // Note that an input array is returned by reference!
    function asArray(a) {
        return Array.isArray(a) ? a : [
            a
        ];
    }
    // Counts decimals
    function countDecimals(numStr) {
        numStr = String(numStr);
        var pieces = numStr.split(".");
        return pieces.length > 1 ? pieces[1].length : 0;
    }
    // http://youmightnotneedjquery.com/#add_class
    function addClass(el, className) {
        if (el.classList && !/\s/.test(className)) el.classList.add(className);
        else el.className += " " + className;
    }
    // http://youmightnotneedjquery.com/#remove_class
    function removeClass(el, className) {
        if (el.classList && !/\s/.test(className)) el.classList.remove(className);
        else el.className = el.className.replace(new RegExp("(^|\\b)" + className.split(" ").join("|") + "(\\b|$)", "gi"), " ");
    }
    // https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/
    function hasClass(el, className) {
        return el.classList ? el.classList.contains(className) : new RegExp("\\b" + className + "\\b").test(el.className);
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY#Notes
    function getPageOffset(doc) {
        var supportPageOffset = window.pageXOffset !== undefined;
        var isCSS1Compat = (doc.compatMode || "") === "CSS1Compat";
        var x = supportPageOffset ? window.pageXOffset : isCSS1Compat ? doc.documentElement.scrollLeft : doc.body.scrollLeft;
        var y = supportPageOffset ? window.pageYOffset : isCSS1Compat ? doc.documentElement.scrollTop : doc.body.scrollTop;
        return {
            x: x,
            y: y
        };
    }
    // we provide a function to compute constants instead
    // of accessing window.* as soon as the module needs it
    // so that we do not compute anything if not needed
    function getActions() {
        // Determine the events to bind. IE11 implements pointerEvents without
        // a prefix, which breaks compatibility with the IE10 implementation.
        return window.navigator.pointerEnabled ? {
            start: "pointerdown",
            move: "pointermove",
            end: "pointerup"
        } : window.navigator.msPointerEnabled ? {
            start: "MSPointerDown",
            move: "MSPointerMove",
            end: "MSPointerUp"
        } : {
            start: "mousedown touchstart",
            move: "mousemove touchmove",
            end: "mouseup touchend"
        };
    }
    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
    // Issue #785
    function getSupportsPassive() {
        var supportsPassive = false;
        /* eslint-disable */ try {
            var opts = Object.defineProperty({}, "passive", {
                get: function() {
                    supportsPassive = true;
                }
            });
            // @ts-ignore
            window.addEventListener("test", null, opts);
        } catch (e) {}
        /* eslint-enable */ return supportsPassive;
    }
    function getSupportsTouchActionNone() {
        return window.CSS && CSS.supports && CSS.supports("touch-action", "none");
    }
    //endregion
    //region Range Calculation
    // Determine the size of a sub-range in relation to a full range.
    function subRangeRatio(pa, pb) {
        return 100 / (pb - pa);
    }
    // (percentage) How many percent is this value of this range?
    function fromPercentage(range, value, startRange) {
        return value * 100 / (range[startRange + 1] - range[startRange]);
    }
    // (percentage) Where is this value on this range?
    function toPercentage(range, value) {
        return fromPercentage(range, range[0] < 0 ? value + Math.abs(range[0]) : value - range[0], 0);
    }
    // (value) How much is this percentage on this range?
    function isPercentage(range, value) {
        return value * (range[1] - range[0]) / 100 + range[0];
    }
    function getJ(value, arr) {
        var j = 1;
        while(value >= arr[j])j += 1;
        return j;
    }
    // (percentage) Input a value, find where, on a scale of 0-100, it applies.
    function toStepping(xVal, xPct, value) {
        if (value >= xVal.slice(-1)[0]) return 100;
        var j = getJ(value, xVal);
        var va = xVal[j - 1];
        var vb = xVal[j];
        var pa = xPct[j - 1];
        var pb = xPct[j];
        return pa + toPercentage([
            va,
            vb
        ], value) / subRangeRatio(pa, pb);
    }
    // (value) Input a percentage, find where it is on the specified range.
    function fromStepping(xVal, xPct, value) {
        // There is no range group that fits 100
        if (value >= 100) return xVal.slice(-1)[0];
        var j = getJ(value, xPct);
        var va = xVal[j - 1];
        var vb = xVal[j];
        var pa = xPct[j - 1];
        var pb = xPct[j];
        return isPercentage([
            va,
            vb
        ], (value - pa) * subRangeRatio(pa, pb));
    }
    // (percentage) Get the step that applies at a certain value.
    function getStep(xPct, xSteps, snap, value) {
        if (value === 100) return value;
        var j = getJ(value, xPct);
        var a = xPct[j - 1];
        var b = xPct[j];
        // If 'snap' is set, steps are used as fixed points on the slider.
        if (snap) {
            // Find the closest position, a or b.
            if (value - a > (b - a) / 2) return b;
            return a;
        }
        if (!xSteps[j - 1]) return value;
        return xPct[j - 1] + closest(value - xPct[j - 1], xSteps[j - 1]);
    }
    //endregion
    //region Spectrum
    var Spectrum1 = /** @class */ function() {
        function Spectrum(entry, snap, singleStep) {
            this.xPct = [];
            this.xVal = [];
            this.xSteps = [];
            this.xNumSteps = [];
            this.xHighestCompleteStep = [];
            this.xSteps = [
                singleStep || false
            ];
            this.xNumSteps = [
                false
            ];
            this.snap = snap;
            var index1;
            var ordered = [];
            // Map the object keys to an array.
            Object.keys(entry).forEach(function(index) {
                ordered.push([
                    asArray(entry[index]),
                    index
                ]);
            });
            // Sort all entries by value (numeric sort).
            ordered.sort(function(a, b) {
                return a[0][0] - b[0][0];
            });
            // Convert all entries to subranges.
            for(index1 = 0; index1 < ordered.length; index1++)this.handleEntryPoint(ordered[index1][1], ordered[index1][0]);
            // Store the actual step values.
            // xSteps is sorted in the same order as xPct and xVal.
            this.xNumSteps = this.xSteps.slice(0);
            // Convert all numeric steps to the percentage of the subrange they represent.
            for(index1 = 0; index1 < this.xNumSteps.length; index1++)this.handleStepPoint(index1, this.xNumSteps[index1]);
        }
        Spectrum.prototype.getDistance = function(value) {
            var distances = [];
            for(var index = 0; index < this.xNumSteps.length - 1; index++)distances[index] = fromPercentage(this.xVal, value, index);
            return distances;
        };
        // Calculate the percentual distance over the whole scale of ranges.
        // direction: 0 = backwards / 1 = forwards
        Spectrum.prototype.getAbsoluteDistance = function(value, distances, direction) {
            var xPct_index = 0;
            // Calculate range where to start calculation
            if (value < this.xPct[this.xPct.length - 1]) while(value > this.xPct[xPct_index + 1])xPct_index++;
            else if (value === this.xPct[this.xPct.length - 1]) xPct_index = this.xPct.length - 2;
            // If looking backwards and the value is exactly at a range separator then look one range further
            if (!direction && value === this.xPct[xPct_index + 1]) xPct_index++;
            if (distances === null) distances = [];
            var start_factor;
            var rest_factor = 1;
            var rest_rel_distance = distances[xPct_index];
            var range_pct = 0;
            var rel_range_distance = 0;
            var abs_distance_counter = 0;
            var range_counter = 0;
            // Calculate what part of the start range the value is
            if (direction) start_factor = (value - this.xPct[xPct_index]) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);
            else start_factor = (this.xPct[xPct_index + 1] - value) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);
            // Do until the complete distance across ranges is calculated
            while(rest_rel_distance > 0){
                // Calculate the percentage of total range
                range_pct = this.xPct[xPct_index + 1 + range_counter] - this.xPct[xPct_index + range_counter];
                // Detect if the margin, padding or limit is larger then the current range and calculate
                if (distances[xPct_index + range_counter] * rest_factor + 100 - start_factor * 100 > 100) {
                    // If larger then take the percentual distance of the whole range
                    rel_range_distance = range_pct * start_factor;
                    // Rest factor of relative percentual distance still to be calculated
                    rest_factor = (rest_rel_distance - 100 * start_factor) / distances[xPct_index + range_counter];
                    // Set start factor to 1 as for next range it does not apply.
                    start_factor = 1;
                } else {
                    // If smaller or equal then take the percentual distance of the calculate percentual part of that range
                    rel_range_distance = distances[xPct_index + range_counter] * range_pct / 100 * rest_factor;
                    // No rest left as the rest fits in current range
                    rest_factor = 0;
                }
                if (direction) {
                    abs_distance_counter = abs_distance_counter - rel_range_distance;
                    // Limit range to first range when distance becomes outside of minimum range
                    if (this.xPct.length + range_counter >= 1) range_counter--;
                } else {
                    abs_distance_counter = abs_distance_counter + rel_range_distance;
                    // Limit range to last range when distance becomes outside of maximum range
                    if (this.xPct.length - range_counter >= 1) range_counter++;
                }
                // Rest of relative percentual distance still to be calculated
                rest_rel_distance = distances[xPct_index + range_counter] * rest_factor;
            }
            return value + abs_distance_counter;
        };
        Spectrum.prototype.toStepping = function(value) {
            value = toStepping(this.xVal, this.xPct, value);
            return value;
        };
        Spectrum.prototype.fromStepping = function(value) {
            return fromStepping(this.xVal, this.xPct, value);
        };
        Spectrum.prototype.getStep = function(value) {
            value = getStep(this.xPct, this.xSteps, this.snap, value);
            return value;
        };
        Spectrum.prototype.getDefaultStep = function(value, isDown, size) {
            var j = getJ(value, this.xPct);
            // When at the top or stepping down, look at the previous sub-range
            if (value === 100 || isDown && value === this.xPct[j - 1]) j = Math.max(j - 1, 1);
            return (this.xVal[j] - this.xVal[j - 1]) / size;
        };
        Spectrum.prototype.getNearbySteps = function(value) {
            var j = getJ(value, this.xPct);
            return {
                stepBefore: {
                    startValue: this.xVal[j - 2],
                    step: this.xNumSteps[j - 2],
                    highestStep: this.xHighestCompleteStep[j - 2]
                },
                thisStep: {
                    startValue: this.xVal[j - 1],
                    step: this.xNumSteps[j - 1],
                    highestStep: this.xHighestCompleteStep[j - 1]
                },
                stepAfter: {
                    startValue: this.xVal[j],
                    step: this.xNumSteps[j],
                    highestStep: this.xHighestCompleteStep[j]
                }
            };
        };
        Spectrum.prototype.countStepDecimals = function() {
            var stepDecimals = this.xNumSteps.map(countDecimals);
            return Math.max.apply(null, stepDecimals);
        };
        Spectrum.prototype.hasNoSize = function() {
            return this.xVal[0] === this.xVal[this.xVal.length - 1];
        };
        // Outside testing
        Spectrum.prototype.convert = function(value) {
            return this.getStep(this.toStepping(value));
        };
        Spectrum.prototype.handleEntryPoint = function(index, value) {
            var percentage;
            // Covert min/max syntax to 0 and 100.
            if (index === "min") percentage = 0;
            else if (index === "max") percentage = 100;
            else percentage = parseFloat(index);
            // Check for correct input.
            if (!isNumeric(percentage) || !isNumeric(value[0])) throw new Error("noUiSlider: 'range' value isn't numeric.");
            // Store values.
            this.xPct.push(percentage);
            this.xVal.push(value[0]);
            var value1 = Number(value[1]);
            // NaN will evaluate to false too, but to keep
            // logging clear, set step explicitly. Make sure
            // not to override the 'step' setting with false.
            if (!percentage) {
                if (!isNaN(value1)) this.xSteps[0] = value1;
            } else this.xSteps.push(isNaN(value1) ? false : value1);
            this.xHighestCompleteStep.push(0);
        };
        Spectrum.prototype.handleStepPoint = function(i, n) {
            // Ignore 'false' stepping.
            if (!n) return;
            // Step over zero-length ranges (#948);
            if (this.xVal[i] === this.xVal[i + 1]) {
                this.xSteps[i] = this.xHighestCompleteStep[i] = this.xVal[i];
                return;
            }
            // Factor to range ratio
            this.xSteps[i] = fromPercentage([
                this.xVal[i],
                this.xVal[i + 1]
            ], n, 0) / subRangeRatio(this.xPct[i], this.xPct[i + 1]);
            var totalSteps = (this.xVal[i + 1] - this.xVal[i]) / this.xNumSteps[i];
            var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);
            var step = this.xVal[i] + this.xNumSteps[i] * highestStep;
            this.xHighestCompleteStep[i] = step;
        };
        return Spectrum;
    }();
    //endregion
    //region Options
    /*	Every input option is tested and parsed. This will prevent
        endless validation in internal methods. These tests are
        structured with an item for every option available. An
        option can be marked as required by setting the 'r' flag.
        The testing function is provided with three arguments:
            - The provided value for the option;
            - A reference to the options object;
            - The name for the option;

        The testing function returns false when an error is detected,
        or true when everything is OK. It can also modify the option
        object, to make sure all values can be correctly looped elsewhere. */ //region Defaults
    var defaultFormatter = {
        to: function(value) {
            return value === undefined ? "" : value.toFixed(2);
        },
        from: Number
    };
    var cssClasses = {
        target: "target",
        base: "base",
        origin: "origin",
        handle: "handle",
        handleLower: "handle-lower",
        handleUpper: "handle-upper",
        touchArea: "touch-area",
        horizontal: "horizontal",
        vertical: "vertical",
        background: "background",
        connect: "connect",
        connects: "connects",
        ltr: "ltr",
        rtl: "rtl",
        textDirectionLtr: "txt-dir-ltr",
        textDirectionRtl: "txt-dir-rtl",
        draggable: "draggable",
        drag: "state-drag",
        tap: "state-tap",
        active: "active",
        tooltip: "tooltip",
        pips: "pips",
        pipsHorizontal: "pips-horizontal",
        pipsVertical: "pips-vertical",
        marker: "marker",
        markerHorizontal: "marker-horizontal",
        markerVertical: "marker-vertical",
        markerNormal: "marker-normal",
        markerLarge: "marker-large",
        markerSub: "marker-sub",
        value: "value",
        valueHorizontal: "value-horizontal",
        valueVertical: "value-vertical",
        valueNormal: "value-normal",
        valueLarge: "value-large",
        valueSub: "value-sub"
    };
    // Namespaces of internal event listeners
    var INTERNAL_EVENT_NS = {
        tooltips: ".__tooltips",
        aria: ".__aria"
    };
    //endregion
    function testStep(parsed, entry) {
        if (!isNumeric(entry)) throw new Error("noUiSlider: 'step' is not numeric.");
        // The step option can still be used to set stepping
        // for linear sliders. Overwritten if set in 'range'.
        parsed.singleStep = entry;
    }
    function testKeyboardPageMultiplier(parsed, entry) {
        if (!isNumeric(entry)) throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");
        parsed.keyboardPageMultiplier = entry;
    }
    function testKeyboardMultiplier(parsed, entry) {
        if (!isNumeric(entry)) throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");
        parsed.keyboardMultiplier = entry;
    }
    function testKeyboardDefaultStep(parsed, entry) {
        if (!isNumeric(entry)) throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");
        parsed.keyboardDefaultStep = entry;
    }
    function testRange(parsed, entry) {
        // Filter incorrect input.
        if (typeof entry !== "object" || Array.isArray(entry)) throw new Error("noUiSlider: 'range' is not an object.");
        // Catch missing start or end.
        if (entry.min === undefined || entry.max === undefined) throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");
        parsed.spectrum = new Spectrum1(entry, parsed.snap || false, parsed.singleStep);
    }
    function testStart(parsed, entry) {
        entry = asArray(entry);
        // Validate input. Values aren't tested, as the public .val method
        // will always provide a valid location.
        if (!Array.isArray(entry) || !entry.length) throw new Error("noUiSlider: 'start' option is incorrect.");
        // Store the number of handles.
        parsed.handles = entry.length;
        // When the slider is initialized, the .val method will
        // be called with the start options.
        parsed.start = entry;
    }
    function testSnap(parsed, entry) {
        if (typeof entry !== "boolean") throw new Error("noUiSlider: 'snap' option must be a boolean.");
        // Enforce 100% stepping within subranges.
        parsed.snap = entry;
    }
    function testAnimate(parsed, entry) {
        if (typeof entry !== "boolean") throw new Error("noUiSlider: 'animate' option must be a boolean.");
        // Enforce 100% stepping within subranges.
        parsed.animate = entry;
    }
    function testAnimationDuration(parsed, entry) {
        if (typeof entry !== "number") throw new Error("noUiSlider: 'animationDuration' option must be a number.");
        parsed.animationDuration = entry;
    }
    function testConnect(parsed, entry) {
        var connect = [
            false
        ];
        var i;
        // Map legacy options
        if (entry === "lower") entry = [
            true,
            false
        ];
        else if (entry === "upper") entry = [
            false,
            true
        ];
        // Handle boolean options
        if (entry === true || entry === false) {
            for(i = 1; i < parsed.handles; i++)connect.push(entry);
            connect.push(false);
        } else if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) throw new Error("noUiSlider: 'connect' option doesn't match handle count.");
        else connect = entry;
        parsed.connect = connect;
    }
    function testOrientation(parsed, entry) {
        // Set orientation to an a numerical value for easy
        // array selection.
        switch(entry){
            case "horizontal":
                parsed.ort = 0;
                break;
            case "vertical":
                parsed.ort = 1;
                break;
            default:
                throw new Error("noUiSlider: 'orientation' option is invalid.");
        }
    }
    function testMargin(parsed, entry) {
        if (!isNumeric(entry)) throw new Error("noUiSlider: 'margin' option must be numeric.");
        // Issue #582
        if (entry === 0) return;
        parsed.margin = parsed.spectrum.getDistance(entry);
    }
    function testLimit(parsed, entry) {
        if (!isNumeric(entry)) throw new Error("noUiSlider: 'limit' option must be numeric.");
        parsed.limit = parsed.spectrum.getDistance(entry);
        if (!parsed.limit || parsed.handles < 2) throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.");
    }
    function testPadding(parsed, entry) {
        var index;
        if (!isNumeric(entry) && !Array.isArray(entry)) throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");
        if (Array.isArray(entry) && !(entry.length === 2 || isNumeric(entry[0]) || isNumeric(entry[1]))) throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");
        if (entry === 0) return;
        if (!Array.isArray(entry)) entry = [
            entry,
            entry
        ];
        // 'getDistance' returns false for invalid values.
        parsed.padding = [
            parsed.spectrum.getDistance(entry[0]),
            parsed.spectrum.getDistance(entry[1])
        ];
        for(index = 0; index < parsed.spectrum.xNumSteps.length - 1; index++){
            // last "range" can't contain step size as it is purely an endpoint.
            if (parsed.padding[0][index] < 0 || parsed.padding[1][index] < 0) throw new Error("noUiSlider: 'padding' option must be a positive number(s).");
        }
        var totalPadding = entry[0] + entry[1];
        var firstValue = parsed.spectrum.xVal[0];
        var lastValue = parsed.spectrum.xVal[parsed.spectrum.xVal.length - 1];
        if (totalPadding / (lastValue - firstValue) > 1) throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.");
    }
    function testDirection(parsed, entry) {
        // Set direction as a numerical value for easy parsing.
        // Invert connection for RTL sliders, so that the proper
        // handles get the connect/background classes.
        switch(entry){
            case "ltr":
                parsed.dir = 0;
                break;
            case "rtl":
                parsed.dir = 1;
                break;
            default:
                throw new Error("noUiSlider: 'direction' option was not recognized.");
        }
    }
    function testBehaviour(parsed, entry) {
        // Make sure the input is a string.
        if (typeof entry !== "string") throw new Error("noUiSlider: 'behaviour' must be a string containing options.");
        // Check if the string contains any keywords.
        // None are required.
        var tap = entry.indexOf("tap") >= 0;
        var drag = entry.indexOf("drag") >= 0;
        var fixed = entry.indexOf("fixed") >= 0;
        var snap = entry.indexOf("snap") >= 0;
        var hover = entry.indexOf("hover") >= 0;
        var unconstrained = entry.indexOf("unconstrained") >= 0;
        var dragAll = entry.indexOf("drag-all") >= 0;
        var smoothSteps = entry.indexOf("smooth-steps") >= 0;
        if (fixed) {
            if (parsed.handles !== 2) throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");
            // Use margin to enforce fixed state
            testMargin(parsed, parsed.start[1] - parsed.start[0]);
        }
        if (unconstrained && (parsed.margin || parsed.limit)) throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");
        parsed.events = {
            tap: tap || snap,
            drag: drag,
            dragAll: dragAll,
            smoothSteps: smoothSteps,
            fixed: fixed,
            snap: snap,
            hover: hover,
            unconstrained: unconstrained
        };
    }
    function testTooltips(parsed, entry) {
        if (entry === false) return;
        if (entry === true || isValidPartialFormatter(entry)) {
            parsed.tooltips = [];
            for(var i = 0; i < parsed.handles; i++)parsed.tooltips.push(entry);
        } else {
            entry = asArray(entry);
            if (entry.length !== parsed.handles) throw new Error("noUiSlider: must pass a formatter for all handles.");
            entry.forEach(function(formatter) {
                if (typeof formatter !== "boolean" && !isValidPartialFormatter(formatter)) throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.");
            });
            parsed.tooltips = entry;
        }
    }
    function testHandleAttributes(parsed, entry) {
        if (entry.length !== parsed.handles) throw new Error("noUiSlider: must pass a attributes for all handles.");
        parsed.handleAttributes = entry;
    }
    function testAriaFormat(parsed, entry) {
        if (!isValidPartialFormatter(entry)) throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");
        parsed.ariaFormat = entry;
    }
    function testFormat(parsed, entry) {
        if (!isValidFormatter(entry)) throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");
        parsed.format = entry;
    }
    function testKeyboardSupport(parsed, entry) {
        if (typeof entry !== "boolean") throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");
        parsed.keyboardSupport = entry;
    }
    function testDocumentElement(parsed, entry) {
        // This is an advanced option. Passed values are used without validation.
        parsed.documentElement = entry;
    }
    function testCssPrefix(parsed, entry) {
        if (typeof entry !== "string" && entry !== false) throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");
        parsed.cssPrefix = entry;
    }
    function testCssClasses(parsed, entry) {
        if (typeof entry !== "object") throw new Error("noUiSlider: 'cssClasses' must be an object.");
        if (typeof parsed.cssPrefix === "string") {
            parsed.cssClasses = {};
            Object.keys(entry).forEach(function(key) {
                parsed.cssClasses[key] = parsed.cssPrefix + entry[key];
            });
        } else parsed.cssClasses = entry;
    }
    // Test all developer settings and parse to assumption-safe values.
    function testOptions(options) {
        // To prove a fix for #537, freeze options here.
        // If the object is modified, an error will be thrown.
        // Object.freeze(options);
        var parsed = {
            margin: null,
            limit: null,
            padding: null,
            animate: true,
            animationDuration: 300,
            ariaFormat: defaultFormatter,
            format: defaultFormatter
        };
        // Tests are executed in the order they are presented here.
        var tests = {
            step: {
                r: false,
                t: testStep
            },
            keyboardPageMultiplier: {
                r: false,
                t: testKeyboardPageMultiplier
            },
            keyboardMultiplier: {
                r: false,
                t: testKeyboardMultiplier
            },
            keyboardDefaultStep: {
                r: false,
                t: testKeyboardDefaultStep
            },
            start: {
                r: true,
                t: testStart
            },
            connect: {
                r: true,
                t: testConnect
            },
            direction: {
                r: true,
                t: testDirection
            },
            snap: {
                r: false,
                t: testSnap
            },
            animate: {
                r: false,
                t: testAnimate
            },
            animationDuration: {
                r: false,
                t: testAnimationDuration
            },
            range: {
                r: true,
                t: testRange
            },
            orientation: {
                r: false,
                t: testOrientation
            },
            margin: {
                r: false,
                t: testMargin
            },
            limit: {
                r: false,
                t: testLimit
            },
            padding: {
                r: false,
                t: testPadding
            },
            behaviour: {
                r: true,
                t: testBehaviour
            },
            ariaFormat: {
                r: false,
                t: testAriaFormat
            },
            format: {
                r: false,
                t: testFormat
            },
            tooltips: {
                r: false,
                t: testTooltips
            },
            keyboardSupport: {
                r: true,
                t: testKeyboardSupport
            },
            documentElement: {
                r: false,
                t: testDocumentElement
            },
            cssPrefix: {
                r: true,
                t: testCssPrefix
            },
            cssClasses: {
                r: true,
                t: testCssClasses
            },
            handleAttributes: {
                r: false,
                t: testHandleAttributes
            }
        };
        var defaults = {
            connect: false,
            direction: "ltr",
            behaviour: "tap",
            orientation: "horizontal",
            keyboardSupport: true,
            cssPrefix: "noUi-",
            cssClasses: cssClasses,
            keyboardPageMultiplier: 5,
            keyboardMultiplier: 1,
            keyboardDefaultStep: 10
        };
        // AriaFormat defaults to regular format, if any.
        if (options.format && !options.ariaFormat) options.ariaFormat = options.format;
        // Run all options through a testing mechanism to ensure correct
        // input. It should be noted that options might get modified to
        // be handled properly. E.g. wrapping integers in arrays.
        Object.keys(tests).forEach(function(name) {
            // If the option isn't set, but it is required, throw an error.
            if (!isSet(options[name]) && defaults[name] === undefined) {
                if (tests[name].r) throw new Error("noUiSlider: '" + name + "' is required.");
                return;
            }
            tests[name].t(parsed, !isSet(options[name]) ? defaults[name] : options[name]);
        });
        // Forward pips options
        parsed.pips = options.pips;
        // All recent browsers accept unprefixed transform.
        // We need -ms- for IE9 and -webkit- for older Android;
        // Assume use of -webkit- if unprefixed and -ms- are not supported.
        // https://caniuse.com/#feat=transforms2d
        var d = document.createElement("div");
        var msPrefix = d.style.msTransform !== undefined;
        var noPrefix = d.style.transform !== undefined;
        parsed.transformRule = noPrefix ? "transform" : msPrefix ? "msTransform" : "webkitTransform";
        // Pips don't move, so we can place them using left/top.
        var styles = [
            [
                "left",
                "top"
            ],
            [
                "right",
                "bottom"
            ], 
        ];
        parsed.style = styles[parsed.dir][parsed.ort];
        return parsed;
    }
    //endregion
    function scope(target1, options, originalOptions) {
        var actions = getActions();
        var supportsTouchActionNone = getSupportsTouchActionNone();
        var supportsPassive = supportsTouchActionNone && getSupportsPassive();
        // All variables local to 'scope' are prefixed with 'scope_'
        // Slider DOM Nodes
        var scope_Target = target1;
        var scope_Base;
        var scope_Handles;
        var scope_Connects;
        var scope_Pips;
        var scope_Tooltips;
        // Slider state values
        var scope_Spectrum = options.spectrum;
        var scope_Values = [];
        var scope_Locations = [];
        var scope_HandleNumbers = [];
        var scope_ActiveHandlesCount = 0;
        var scope_Events = {};
        // Document Nodes
        var scope_Document = target1.ownerDocument;
        var scope_DocumentElement = options.documentElement || scope_Document.documentElement;
        var scope_Body = scope_Document.body;
        // For horizontal sliders in standard ltr documents,
        // make .noUi-origin overflow to the left so the document doesn't scroll.
        var scope_DirOffset = scope_Document.dir === "rtl" || options.ort === 1 ? 0 : 100;
        // Creates a node, adds it to target, returns the new node.
        function addNodeTo(addTarget, className) {
            var div = scope_Document.createElement("div");
            if (className) addClass(div, className);
            addTarget.appendChild(div);
            return div;
        }
        // Append a origin to the base
        function addOrigin(base, handleNumber) {
            var origin = addNodeTo(base, options.cssClasses.origin);
            var handle = addNodeTo(origin, options.cssClasses.handle);
            addNodeTo(handle, options.cssClasses.touchArea);
            handle.setAttribute("data-handle", String(handleNumber));
            if (options.keyboardSupport) {
                // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
                // 0 = focusable and reachable
                handle.setAttribute("tabindex", "0");
                handle.addEventListener("keydown", function(event) {
                    return eventKeydown(event, handleNumber);
                });
            }
            if (options.handleAttributes !== undefined) {
                var attributes_1 = options.handleAttributes[handleNumber];
                Object.keys(attributes_1).forEach(function(attribute) {
                    handle.setAttribute(attribute, attributes_1[attribute]);
                });
            }
            handle.setAttribute("role", "slider");
            handle.setAttribute("aria-orientation", options.ort ? "vertical" : "horizontal");
            if (handleNumber === 0) addClass(handle, options.cssClasses.handleLower);
            else if (handleNumber === options.handles - 1) addClass(handle, options.cssClasses.handleUpper);
            return origin;
        }
        // Insert nodes for connect elements
        function addConnect(base, add) {
            if (!add) return false;
            return addNodeTo(base, options.cssClasses.connect);
        }
        // Add handles to the slider base.
        function addElements(connectOptions, base) {
            var connectBase = addNodeTo(base, options.cssClasses.connects);
            scope_Handles = [];
            scope_Connects = [];
            scope_Connects.push(addConnect(connectBase, connectOptions[0]));
            // [::::O====O====O====]
            // connectOptions = [0, 1, 1, 1]
            for(var i = 0; i < options.handles; i++){
                // Keep a list of all added handles.
                scope_Handles.push(addOrigin(base, i));
                scope_HandleNumbers[i] = i;
                scope_Connects.push(addConnect(connectBase, connectOptions[i + 1]));
            }
        }
        // Initialize a single slider.
        function addSlider(addTarget) {
            // Apply classes and data to the target.
            addClass(addTarget, options.cssClasses.target);
            if (options.dir === 0) addClass(addTarget, options.cssClasses.ltr);
            else addClass(addTarget, options.cssClasses.rtl);
            if (options.ort === 0) addClass(addTarget, options.cssClasses.horizontal);
            else addClass(addTarget, options.cssClasses.vertical);
            var textDirection = getComputedStyle(addTarget).direction;
            if (textDirection === "rtl") addClass(addTarget, options.cssClasses.textDirectionRtl);
            else addClass(addTarget, options.cssClasses.textDirectionLtr);
            return addNodeTo(addTarget, options.cssClasses.base);
        }
        function addTooltip(handle, handleNumber) {
            if (!options.tooltips || !options.tooltips[handleNumber]) return false;
            return addNodeTo(handle.firstChild, options.cssClasses.tooltip);
        }
        function isSliderDisabled() {
            return scope_Target.hasAttribute("disabled");
        }
        // Disable the slider dragging if any handle is disabled
        function isHandleDisabled(handleNumber) {
            var handleOrigin = scope_Handles[handleNumber];
            return handleOrigin.hasAttribute("disabled");
        }
        function removeTooltips() {
            if (scope_Tooltips) {
                removeEvent("update" + INTERNAL_EVENT_NS.tooltips);
                scope_Tooltips.forEach(function(tooltip) {
                    if (tooltip) removeElement(tooltip);
                });
                scope_Tooltips = null;
            }
        }
        // The tooltips option is a shorthand for using the 'update' event.
        function tooltips() {
            removeTooltips();
            // Tooltips are added with options.tooltips in original order.
            scope_Tooltips = scope_Handles.map(addTooltip);
            bindEvent("update" + INTERNAL_EVENT_NS.tooltips, function(values, handleNumber, unencoded) {
                if (!scope_Tooltips || !options.tooltips) return;
                if (scope_Tooltips[handleNumber] === false) return;
                var formattedValue = values[handleNumber];
                if (options.tooltips[handleNumber] !== true) formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);
                scope_Tooltips[handleNumber].innerHTML = formattedValue;
            });
        }
        function aria() {
            removeEvent("update" + INTERNAL_EVENT_NS.aria);
            bindEvent("update" + INTERNAL_EVENT_NS.aria, function(values, handleNumber, unencoded, tap, positions) {
                // Update Aria Values for all handles, as a change in one changes min and max values for the next.
                scope_HandleNumbers.forEach(function(index) {
                    var handle = scope_Handles[index];
                    var min = checkHandlePosition(scope_Locations, index, 0, true, true, true);
                    var max = checkHandlePosition(scope_Locations, index, 100, true, true, true);
                    var now = positions[index];
                    // Formatted value for display
                    var text = String(options.ariaFormat.to(unencoded[index]));
                    // Map to slider range values
                    min = scope_Spectrum.fromStepping(min).toFixed(1);
                    max = scope_Spectrum.fromStepping(max).toFixed(1);
                    now = scope_Spectrum.fromStepping(now).toFixed(1);
                    handle.children[0].setAttribute("aria-valuemin", min);
                    handle.children[0].setAttribute("aria-valuemax", max);
                    handle.children[0].setAttribute("aria-valuenow", now);
                    handle.children[0].setAttribute("aria-valuetext", text);
                });
            });
        }
        function getGroup(pips) {
            // Use the range.
            if (pips.mode === exports.PipsMode.Range || pips.mode === exports.PipsMode.Steps) return scope_Spectrum.xVal;
            if (pips.mode === exports.PipsMode.Count) {
                if (pips.values < 2) throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");
                // Divide 0 - 100 in 'count' parts.
                var interval = pips.values - 1;
                var spread = 100 / interval;
                var values = [];
                // List these parts and have them handled as 'positions'.
                while(interval--)values[interval] = interval * spread;
                values.push(100);
                return mapToRange(values, pips.stepped);
            }
            if (pips.mode === exports.PipsMode.Positions) // Map all percentages to on-range values.
            return mapToRange(pips.values, pips.stepped);
            if (pips.mode === exports.PipsMode.Values) {
                // If the value must be stepped, it needs to be converted to a percentage first.
                if (pips.stepped) return pips.values.map(function(value) {
                    // Convert to percentage, apply step, return to value.
                    return scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));
                });
                // Otherwise, we can simply use the values.
                return pips.values;
            }
            return []; // pips.mode = never
        }
        function mapToRange(values, stepped) {
            return values.map(function(value) {
                return scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);
            });
        }
        function generateSpread(pips) {
            function safeIncrement(value, increment) {
                // Avoid floating point variance by dropping the smallest decimal places.
                return Number((value + increment).toFixed(7));
            }
            var group = getGroup(pips);
            var indexes = {};
            var firstInRange = scope_Spectrum.xVal[0];
            var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];
            var ignoreFirst = false;
            var ignoreLast = false;
            var prevPct = 0;
            // Create a copy of the group, sort it and filter away all duplicates.
            group = unique(group.slice().sort(function(a, b) {
                return a - b;
            }));
            // Make sure the range starts with the first element.
            if (group[0] !== firstInRange) {
                group.unshift(firstInRange);
                ignoreFirst = true;
            }
            // Likewise for the last one.
            if (group[group.length - 1] !== lastInRange) {
                group.push(lastInRange);
                ignoreLast = true;
            }
            group.forEach(function(current, index) {
                // Get the current step and the lower + upper positions.
                var step;
                var i;
                var q;
                var low = current;
                var high = group[index + 1];
                var newPct;
                var pctDifference;
                var pctPos;
                var type;
                var steps;
                var realSteps;
                var stepSize;
                var isSteps = pips.mode === exports.PipsMode.Steps;
                // When using 'steps' mode, use the provided steps.
                // Otherwise, we'll step on to the next subrange.
                if (isSteps) step = scope_Spectrum.xNumSteps[index];
                // Default to a 'full' step.
                if (!step) step = high - low;
                // If high is undefined we are at the last subrange. Make sure it iterates once (#1088)
                if (high === undefined) high = low;
                // Make sure step isn't 0, which would cause an infinite loop (#654)
                step = Math.max(step, 0.0000001);
                // Find all steps in the subrange.
                for(i = low; i <= high; i = safeIncrement(i, step)){
                    // Get the percentage value for the current step,
                    // calculate the size for the subrange.
                    newPct = scope_Spectrum.toStepping(i);
                    pctDifference = newPct - prevPct;
                    steps = pctDifference / (pips.density || 1);
                    realSteps = Math.round(steps);
                    // This ratio represents the amount of percentage-space a point indicates.
                    // For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-divided.
                    // Round the percentage offset to an even number, then divide by two
                    // to spread the offset on both sides of the range.
                    stepSize = pctDifference / realSteps;
                    // Divide all points evenly, adding the correct number to this subrange.
                    // Run up to <= so that 100% gets a point, event if ignoreLast is set.
                    for(q = 1; q <= realSteps; q += 1){
                        // The ratio between the rounded value and the actual size might be ~1% off.
                        // Correct the percentage offset by the number of points
                        // per subrange. density = 1 will result in 100 points on the
                        // full range, 2 for 50, 4 for 25, etc.
                        pctPos = prevPct + q * stepSize;
                        indexes[pctPos.toFixed(5)] = [
                            scope_Spectrum.fromStepping(pctPos),
                            0
                        ];
                    }
                    // Determine the point type.
                    type = group.indexOf(i) > -1 ? exports.PipsType.LargeValue : isSteps ? exports.PipsType.SmallValue : exports.PipsType.NoValue;
                    // Enforce the 'ignoreFirst' option by overwriting the type for 0.
                    if (!index && ignoreFirst && i !== high) type = 0;
                    if (!(i === high && ignoreLast)) // Mark the 'type' of this point. 0 = plain, 1 = real value, 2 = step value.
                    indexes[newPct.toFixed(5)] = [
                        i,
                        type
                    ];
                    // Update the percentage count.
                    prevPct = newPct;
                }
            });
            return indexes;
        }
        function addMarking(spread, filterFunc, formatter) {
            var _a, _b;
            var element = scope_Document.createElement("div");
            var valueSizeClasses = (_a = {}, _a[exports.PipsType.None] = "", _a[exports.PipsType.NoValue] = options.cssClasses.valueNormal, _a[exports.PipsType.LargeValue] = options.cssClasses.valueLarge, _a[exports.PipsType.SmallValue] = options.cssClasses.valueSub, _a);
            var markerSizeClasses = (_b = {}, _b[exports.PipsType.None] = "", _b[exports.PipsType.NoValue] = options.cssClasses.markerNormal, _b[exports.PipsType.LargeValue] = options.cssClasses.markerLarge, _b[exports.PipsType.SmallValue] = options.cssClasses.markerSub, _b);
            var valueOrientationClasses = [
                options.cssClasses.valueHorizontal,
                options.cssClasses.valueVertical
            ];
            var markerOrientationClasses = [
                options.cssClasses.markerHorizontal,
                options.cssClasses.markerVertical
            ];
            addClass(element, options.cssClasses.pips);
            addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);
            function getClasses(type, source) {
                var a = source === options.cssClasses.value;
                var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;
                var sizeClasses = a ? valueSizeClasses : markerSizeClasses;
                return source + " " + orientationClasses[options.ort] + " " + sizeClasses[type];
            }
            function addSpread(offset, value, type) {
                // Apply the filter function, if it is set.
                type = filterFunc ? filterFunc(value, type) : type;
                if (type === exports.PipsType.None) return;
                // Add a marker for every point
                var node = addNodeTo(element, false);
                node.className = getClasses(type, options.cssClasses.marker);
                node.style[options.style] = offset + "%";
                // Values are only appended for points marked '1' or '2'.
                if (type > exports.PipsType.NoValue) {
                    node = addNodeTo(element, false);
                    node.className = getClasses(type, options.cssClasses.value);
                    node.setAttribute("data-value", String(value));
                    node.style[options.style] = offset + "%";
                    node.innerHTML = String(formatter.to(value));
                }
            }
            // Append all points.
            Object.keys(spread).forEach(function(offset) {
                addSpread(offset, spread[offset][0], spread[offset][1]);
            });
            return element;
        }
        function removePips() {
            if (scope_Pips) {
                removeElement(scope_Pips);
                scope_Pips = null;
            }
        }
        function pips1(pips) {
            // Fix #669
            removePips();
            var spread = generateSpread(pips);
            var filter = pips.filter;
            var format = pips.format || {
                to: function(value) {
                    return String(Math.round(value));
                }
            };
            scope_Pips = scope_Target.appendChild(addMarking(spread, filter, format));
            return scope_Pips;
        }
        // Shorthand for base dimensions.
        function baseSize() {
            var rect = scope_Base.getBoundingClientRect();
            var alt = "offset" + [
                "Width",
                "Height"
            ][options.ort];
            return options.ort === 0 ? rect.width || scope_Base[alt] : rect.height || scope_Base[alt];
        }
        // Handler for attaching events trough a proxy.
        function attachEvent(events, element, callback, data) {
            // This function can be used to 'filter' events to the slider.
            // element is a node, not a nodeList
            var method = function(event) {
                var e = fixEvent(event, data.pageOffset, data.target || element);
                // fixEvent returns false if this event has a different target
                // when handling (multi-) touch events;
                if (!e) return false;
                // doNotReject is passed by all end events to make sure released touches
                // are not rejected, leaving the slider "stuck" to the cursor;
                if (isSliderDisabled() && !data.doNotReject) return false;
                // Stop if an active 'tap' transition is taking place.
                if (hasClass(scope_Target, options.cssClasses.tap) && !data.doNotReject) return false;
                // Ignore right or middle clicks on start #454
                if (events === actions.start && e.buttons !== undefined && e.buttons > 1) return false;
                // Ignore right or middle clicks on start #454
                if (data.hover && e.buttons) return false;
                // 'supportsPassive' is only true if a browser also supports touch-action: none in CSS.
                // iOS safari does not, so it doesn't get to benefit from passive scrolling. iOS does support
                // touch-action: manipulation, but that allows panning, which breaks
                // sliders after zooming/on non-responsive pages.
                // See: https://bugs.webkit.org/show_bug.cgi?id=133112
                if (!supportsPassive) e.preventDefault();
                e.calcPoint = e.points[options.ort];
                // Call the event handler with the event [ and additional data ].
                callback(e, data);
                return;
            };
            var methods = [];
            // Bind a closure on the target for every event type.
            events.split(" ").forEach(function(eventName) {
                element.addEventListener(eventName, method, supportsPassive ? {
                    passive: true
                } : false);
                methods.push([
                    eventName,
                    method
                ]);
            });
            return methods;
        }
        // Provide a clean event with standardized offset values.
        function fixEvent(e, pageOffset, eventTarget) {
            // Filter the event to register the type, which can be
            // touch, mouse or pointer. Offset changes need to be
            // made on an event specific basis.
            var touch = e.type.indexOf("touch") === 0;
            var mouse = e.type.indexOf("mouse") === 0;
            var pointer = e.type.indexOf("pointer") === 0;
            var x = 0;
            var y = 0;
            // IE10 implemented pointer events with a prefix;
            if (e.type.indexOf("MSPointer") === 0) pointer = true;
            // Erroneous events seem to be passed in occasionally on iOS/iPadOS after user finishes interacting with
            // the slider. They appear to be of type MouseEvent, yet they don't have usual properties set. Ignore
            // events that have no touches or buttons associated with them. (#1057, #1079, #1095)
            if (e.type === "mousedown" && !e.buttons && !e.touches) return false;
            // The only thing one handle should be concerned about is the touches that originated on top of it.
            if (touch) {
                // Returns true if a touch originated on the target.
                var isTouchOnTarget = function(checkTouch) {
                    var target = checkTouch.target;
                    return target === eventTarget || eventTarget.contains(target) || e.composed && e.composedPath().shift() === eventTarget;
                };
                // In the case of touchstart events, we need to make sure there is still no more than one
                // touch on the target so we look amongst all touches.
                if (e.type === "touchstart") {
                    var targetTouches = Array.prototype.filter.call(e.touches, isTouchOnTarget);
                    // Do not support more than one touch per handle.
                    if (targetTouches.length > 1) return false;
                    x = targetTouches[0].pageX;
                    y = targetTouches[0].pageY;
                } else {
                    // In the other cases, find on changedTouches is enough.
                    var targetTouch = Array.prototype.find.call(e.changedTouches, isTouchOnTarget);
                    // Cancel if the target touch has not moved.
                    if (!targetTouch) return false;
                    x = targetTouch.pageX;
                    y = targetTouch.pageY;
                }
            }
            pageOffset = pageOffset || getPageOffset(scope_Document);
            if (mouse || pointer) {
                x = e.clientX + pageOffset.x;
                y = e.clientY + pageOffset.y;
            }
            e.pageOffset = pageOffset;
            e.points = [
                x,
                y
            ];
            e.cursor = mouse || pointer; // Fix #435
            return e;
        }
        // Translate a coordinate in the document to a percentage on the slider
        function calcPointToPercentage(calcPoint) {
            var location = calcPoint - offset1(scope_Base, options.ort);
            var proposal = location * 100 / baseSize();
            // Clamp proposal between 0% and 100%
            // Out-of-bound coordinates may occur when .noUi-base pseudo-elements
            // are used (e.g. contained handles feature)
            proposal = limit(proposal);
            return options.dir ? 100 - proposal : proposal;
        }
        // Find handle closest to a certain percentage on the slider
        function getClosestHandle(clickedPosition) {
            var smallestDifference = 100;
            var handleNumber = false;
            scope_Handles.forEach(function(handle, index) {
                // Disabled handles are ignored
                if (isHandleDisabled(index)) return;
                var handlePosition = scope_Locations[index];
                var differenceWithThisHandle = Math.abs(handlePosition - clickedPosition);
                // Initial state
                var clickAtEdge = differenceWithThisHandle === 100 && smallestDifference === 100;
                // Difference with this handle is smaller than the previously checked handle
                var isCloser = differenceWithThisHandle < smallestDifference;
                var isCloserAfter = differenceWithThisHandle <= smallestDifference && clickedPosition > handlePosition;
                if (isCloser || isCloserAfter || clickAtEdge) {
                    handleNumber = index;
                    smallestDifference = differenceWithThisHandle;
                }
            });
            return handleNumber;
        }
        // Fire 'end' when a mouse or pen leaves the document.
        function documentLeave(event, data) {
            if (event.type === "mouseout" && event.target.nodeName === "HTML" && event.relatedTarget === null) eventEnd(event, data);
        }
        // Handle movement on document for handle and range drag.
        function eventMove(event, data) {
            // Fix #498
            // Check value of .buttons in 'start' to work around a bug in IE10 mobile (data.buttonsProperty).
            // https://connect.microsoft.com/IE/feedback/details/927005/mobile-ie10-windows-phone-buttons-property-of-pointermove-event-always-zero
            // IE9 has .buttons and .which zero on mousemove.
            // Firefox breaks the spec MDN defines.
            if (navigator.appVersion.indexOf("MSIE 9") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) return eventEnd(event, data);
            // Check if we are moving up or down
            var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint);
            // Convert the movement into a percentage of the slider width/height
            var proposal = movement * 100 / data.baseSize;
            moveHandles(movement > 0, proposal, data.locations, data.handleNumbers, data.connect);
        }
        // Unbind move events on document, call callbacks.
        function eventEnd(event, data) {
            // The handle is no longer active, so remove the class.
            if (data.handle) {
                removeClass(data.handle, options.cssClasses.active);
                scope_ActiveHandlesCount -= 1;
            }
            // Unbind the move and end events, which are added on 'start'.
            data.listeners.forEach(function(c) {
                scope_DocumentElement.removeEventListener(c[0], c[1]);
            });
            if (scope_ActiveHandlesCount === 0) {
                // Remove dragging class.
                removeClass(scope_Target, options.cssClasses.drag);
                setZindex();
                // Remove cursor styles and text-selection events bound to the body.
                if (event.cursor) {
                    scope_Body.style.cursor = "";
                    scope_Body.removeEventListener("selectstart", preventDefault);
                }
            }
            if (options.events.smoothSteps) {
                data.handleNumbers.forEach(function(handleNumber) {
                    setHandle(handleNumber, scope_Locations[handleNumber], true, true, false, false);
                });
                data.handleNumbers.forEach(function(handleNumber) {
                    fireEvent("update", handleNumber);
                });
            }
            data.handleNumbers.forEach(function(handleNumber) {
                fireEvent("change", handleNumber);
                fireEvent("set", handleNumber);
                fireEvent("end", handleNumber);
            });
        }
        // Bind move events on document.
        function eventStart(event, data) {
            // Ignore event if any handle is disabled
            if (data.handleNumbers.some(isHandleDisabled)) return;
            var handle;
            if (data.handleNumbers.length === 1) {
                var handleOrigin = scope_Handles[data.handleNumbers[0]];
                handle = handleOrigin.children[0];
                scope_ActiveHandlesCount += 1;
                // Mark the handle as 'active' so it can be styled.
                addClass(handle, options.cssClasses.active);
            }
            // A drag should never propagate up to the 'tap' event.
            event.stopPropagation();
            // Record the event listeners.
            var listeners = [];
            // Attach the move and end events.
            var moveEvent = attachEvent(actions.move, scope_DocumentElement, eventMove, {
                // The event target has changed so we need to propagate the original one so that we keep
                // relying on it to extract target touches.
                target: event.target,
                handle: handle,
                connect: data.connect,
                listeners: listeners,
                startCalcPoint: event.calcPoint,
                baseSize: baseSize(),
                pageOffset: event.pageOffset,
                handleNumbers: data.handleNumbers,
                buttonsProperty: event.buttons,
                locations: scope_Locations.slice()
            });
            var endEvent = attachEvent(actions.end, scope_DocumentElement, eventEnd, {
                target: event.target,
                handle: handle,
                listeners: listeners,
                doNotReject: true,
                handleNumbers: data.handleNumbers
            });
            var outEvent = attachEvent("mouseout", scope_DocumentElement, documentLeave, {
                target: event.target,
                handle: handle,
                listeners: listeners,
                doNotReject: true,
                handleNumbers: data.handleNumbers
            });
            // We want to make sure we pushed the listeners in the listener list rather than creating
            // a new one as it has already been passed to the event handlers.
            listeners.push.apply(listeners, moveEvent.concat(endEvent, outEvent));
            // Text selection isn't an issue on touch devices,
            // so adding cursor styles can be skipped.
            if (event.cursor) {
                // Prevent the 'I' cursor and extend the range-drag cursor.
                scope_Body.style.cursor = getComputedStyle(event.target).cursor;
                // Mark the target with a dragging state.
                if (scope_Handles.length > 1) addClass(scope_Target, options.cssClasses.drag);
                // Prevent text selection when dragging the handles.
                // In noUiSlider <= 9.2.0, this was handled by calling preventDefault on mouse/touch start/move,
                // which is scroll blocking. The selectstart event is supported by FireFox starting from version 52,
                // meaning the only holdout is iOS Safari. This doesn't matter: text selection isn't triggered there.
                // The 'cursor' flag is false.
                // See: http://caniuse.com/#search=selectstart
                scope_Body.addEventListener("selectstart", preventDefault, false);
            }
            data.handleNumbers.forEach(function(handleNumber) {
                fireEvent("start", handleNumber);
            });
        }
        // Move closest handle to tapped location.
        function eventTap(event) {
            // The tap event shouldn't propagate up
            event.stopPropagation();
            var proposal = calcPointToPercentage(event.calcPoint);
            var handleNumber = getClosestHandle(proposal);
            // Tackle the case that all handles are 'disabled'.
            if (handleNumber === false) return;
            // Flag the slider as it is now in a transitional state.
            // Transition takes a configurable amount of ms (default 300). Re-enable the slider after that.
            if (!options.events.snap) addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
            setHandle(handleNumber, proposal, true, true);
            setZindex();
            fireEvent("slide", handleNumber, true);
            fireEvent("update", handleNumber, true);
            if (!options.events.snap) {
                fireEvent("change", handleNumber, true);
                fireEvent("set", handleNumber, true);
            } else eventStart(event, {
                handleNumbers: [
                    handleNumber
                ]
            });
        }
        // Fires a 'hover' event for a hovered mouse/pen position.
        function eventHover(event) {
            var proposal = calcPointToPercentage(event.calcPoint);
            var to = scope_Spectrum.getStep(proposal);
            var value = scope_Spectrum.fromStepping(to);
            Object.keys(scope_Events).forEach(function(targetEvent) {
                if ("hover" === targetEvent.split(".")[0]) scope_Events[targetEvent].forEach(function(callback) {
                    callback.call(scope_Self, value);
                });
            });
        }
        // Handles keydown on focused handles
        // Don't move the document when pressing arrow keys on focused handles
        function eventKeydown(event, handleNumber) {
            if (isSliderDisabled() || isHandleDisabled(handleNumber)) return false;
            var horizontalKeys = [
                "Left",
                "Right"
            ];
            var verticalKeys = [
                "Down",
                "Up"
            ];
            var largeStepKeys = [
                "PageDown",
                "PageUp"
            ];
            var edgeKeys = [
                "Home",
                "End"
            ];
            if (options.dir && !options.ort) // On an right-to-left slider, the left and right keys act inverted
            horizontalKeys.reverse();
            else if (options.ort && !options.dir) {
                // On a top-to-bottom slider, the up and down keys act inverted
                verticalKeys.reverse();
                largeStepKeys.reverse();
            }
            // Strip "Arrow" for IE compatibility. https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
            var key = event.key.replace("Arrow", "");
            var isLargeDown = key === largeStepKeys[0];
            var isLargeUp = key === largeStepKeys[1];
            var isDown = key === verticalKeys[0] || key === horizontalKeys[0] || isLargeDown;
            var isUp = key === verticalKeys[1] || key === horizontalKeys[1] || isLargeUp;
            var isMin = key === edgeKeys[0];
            var isMax = key === edgeKeys[1];
            if (!isDown && !isUp && !isMin && !isMax) return true;
            event.preventDefault();
            var to;
            if (isUp || isDown) {
                var direction = isDown ? 0 : 1;
                var steps = getNextStepsForHandle(handleNumber);
                var step = steps[direction];
                // At the edge of a slider, do nothing
                if (step === null) return false;
                // No step set, use the default of 10% of the sub-range
                if (step === false) step = scope_Spectrum.getDefaultStep(scope_Locations[handleNumber], isDown, options.keyboardDefaultStep);
                if (isLargeUp || isLargeDown) step *= options.keyboardPageMultiplier;
                else step *= options.keyboardMultiplier;
                // Step over zero-length ranges (#948);
                step = Math.max(step, 0.0000001);
                // Decrement for down steps
                step = (isDown ? -1 : 1) * step;
                to = scope_Values[handleNumber] + step;
            } else if (isMax) // End key
            to = options.spectrum.xVal[options.spectrum.xVal.length - 1];
            else // Home key
            to = options.spectrum.xVal[0];
            setHandle(handleNumber, scope_Spectrum.toStepping(to), true, true);
            fireEvent("slide", handleNumber);
            fireEvent("update", handleNumber);
            fireEvent("change", handleNumber);
            fireEvent("set", handleNumber);
            return false;
        }
        // Attach events to several slider parts.
        function bindSliderEvents(behaviour) {
            // Attach the standard drag event to the handles.
            if (!behaviour.fixed) scope_Handles.forEach(function(handle, index) {
                // These events are only bound to the visual handle
                // element, not the 'real' origin element.
                attachEvent(actions.start, handle.children[0], eventStart, {
                    handleNumbers: [
                        index
                    ]
                });
            });
            // Attach the tap event to the slider base.
            if (behaviour.tap) attachEvent(actions.start, scope_Base, eventTap, {});
            // Fire hover events
            if (behaviour.hover) attachEvent(actions.move, scope_Base, eventHover, {
                hover: true
            });
            // Make the range draggable.
            if (behaviour.drag) scope_Connects.forEach(function(connect, index) {
                if (connect === false || index === 0 || index === scope_Connects.length - 1) return;
                var handleBefore = scope_Handles[index - 1];
                var handleAfter = scope_Handles[index];
                var eventHolders = [
                    connect
                ];
                var handlesToDrag = [
                    handleBefore,
                    handleAfter
                ];
                var handleNumbersToDrag = [
                    index - 1,
                    index
                ];
                addClass(connect, options.cssClasses.draggable);
                // When the range is fixed, the entire range can
                // be dragged by the handles. The handle in the first
                // origin will propagate the start event upward,
                // but it needs to be bound manually on the other.
                if (behaviour.fixed) {
                    eventHolders.push(handleBefore.children[0]);
                    eventHolders.push(handleAfter.children[0]);
                }
                if (behaviour.dragAll) {
                    handlesToDrag = scope_Handles;
                    handleNumbersToDrag = scope_HandleNumbers;
                }
                eventHolders.forEach(function(eventHolder) {
                    attachEvent(actions.start, eventHolder, eventStart, {
                        handles: handlesToDrag,
                        handleNumbers: handleNumbersToDrag,
                        connect: connect
                    });
                });
            });
        }
        // Attach an event to this slider, possibly including a namespace
        function bindEvent(namespacedEvent, callback) {
            scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];
            scope_Events[namespacedEvent].push(callback);
            // If the event bound is 'update,' fire it immediately for all handles.
            if (namespacedEvent.split(".")[0] === "update") scope_Handles.forEach(function(a, index) {
                fireEvent("update", index);
            });
        }
        function isInternalNamespace(namespace) {
            return namespace === INTERNAL_EVENT_NS.aria || namespace === INTERNAL_EVENT_NS.tooltips;
        }
        // Undo attachment of event
        function removeEvent(namespacedEvent) {
            var event = namespacedEvent && namespacedEvent.split(".")[0];
            var namespace = event ? namespacedEvent.substring(event.length) : namespacedEvent;
            Object.keys(scope_Events).forEach(function(bind) {
                var tEvent = bind.split(".")[0];
                var tNamespace = bind.substring(tEvent.length);
                if ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) // only delete protected internal event if intentional
                {
                    if (!isInternalNamespace(tNamespace) || namespace === tNamespace) delete scope_Events[bind];
                }
            });
        }
        // External event handling
        function fireEvent(eventName, handleNumber, tap) {
            Object.keys(scope_Events).forEach(function(targetEvent) {
                var eventType = targetEvent.split(".")[0];
                if (eventName === eventType) scope_Events[targetEvent].forEach(function(callback) {
                    callback.call(// Use the slider public API as the scope ('this')
                    scope_Self, // Return values as array, so arg_1[arg_2] is always valid.
                    scope_Values.map(options.format.to), // Handle index, 0 or 1
                    handleNumber, // Un-formatted slider values
                    scope_Values.slice(), // Event is fired by tap, true or false
                    tap || false, // Left offset of the handle, in relation to the slider
                    scope_Locations.slice(), // add the slider public API to an accessible parameter when this is unavailable
                    scope_Self);
                });
            });
        }
        // Split out the handle positioning logic so the Move event can use it, too
        function checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward, getValue, smoothSteps) {
            var distance;
            // For sliders with multiple handles, limit movement to the other handle.
            // Apply the margin option by adding it to the handle positions.
            if (scope_Handles.length > 1 && !options.events.unconstrained) {
                if (lookBackward && handleNumber > 0) {
                    distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.margin, false);
                    to = Math.max(to, distance);
                }
                if (lookForward && handleNumber < scope_Handles.length - 1) {
                    distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.margin, true);
                    to = Math.min(to, distance);
                }
            }
            // The limit option has the opposite effect, limiting handles to a
            // maximum distance from another. Limit must be > 0, as otherwise
            // handles would be unmovable.
            if (scope_Handles.length > 1 && options.limit) {
                if (lookBackward && handleNumber > 0) {
                    distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.limit, false);
                    to = Math.min(to, distance);
                }
                if (lookForward && handleNumber < scope_Handles.length - 1) {
                    distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.limit, true);
                    to = Math.max(to, distance);
                }
            }
            // The padding option keeps the handles a certain distance from the
            // edges of the slider. Padding must be > 0.
            if (options.padding) {
                if (handleNumber === 0) {
                    distance = scope_Spectrum.getAbsoluteDistance(0, options.padding[0], false);
                    to = Math.max(to, distance);
                }
                if (handleNumber === scope_Handles.length - 1) {
                    distance = scope_Spectrum.getAbsoluteDistance(100, options.padding[1], true);
                    to = Math.min(to, distance);
                }
            }
            if (!smoothSteps) to = scope_Spectrum.getStep(to);
            // Limit percentage to the 0 - 100 range
            to = limit(to);
            // Return false if handle can't move
            if (to === reference[handleNumber] && !getValue) return false;
            return to;
        }
        // Uses slider orientation to create CSS rules. a = base value;
        function inRuleOrder(v, a) {
            var o = options.ort;
            return (o ? a : v) + ", " + (o ? v : a);
        }
        // Moves handle(s) by a percentage
        // (bool, % to move, [% where handle started, ...], [index in scope_Handles, ...])
        function moveHandles(upward, proposal, locations, handleNumbers, connect) {
            var proposals = locations.slice();
            // Store first handle now, so we still have it in case handleNumbers is reversed
            var firstHandle = handleNumbers[0];
            var smoothSteps = options.events.smoothSteps;
            var b = [
                !upward,
                upward
            ];
            var f = [
                upward,
                !upward
            ];
            // Copy handleNumbers so we don't change the dataset
            handleNumbers = handleNumbers.slice();
            // Check to see which handle is 'leading'.
            // If that one can't move the second can't either.
            if (upward) handleNumbers.reverse();
            // Step 1: get the maximum percentage that any of the handles can move
            if (handleNumbers.length > 1) handleNumbers.forEach(function(handleNumber, o) {
                var to = checkHandlePosition(proposals, handleNumber, proposals[handleNumber] + proposal, b[o], f[o], false, smoothSteps);
                // Stop if one of the handles can't move.
                if (to === false) proposal = 0;
                else {
                    proposal = to - proposals[handleNumber];
                    proposals[handleNumber] = to;
                }
            });
            else b = f = [
                true
            ];
            var state = false;
            // Step 2: Try to set the handles with the found percentage
            handleNumbers.forEach(function(handleNumber, o) {
                state = setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o], false, smoothSteps) || state;
            });
            // Step 3: If a handle moved, fire events
            if (state) {
                handleNumbers.forEach(function(handleNumber) {
                    fireEvent("update", handleNumber);
                    fireEvent("slide", handleNumber);
                });
                // If target is a connect, then fire drag event
                if (connect != undefined) fireEvent("drag", firstHandle);
            }
        }
        // Takes a base value and an offset. This offset is used for the connect bar size.
        // In the initial design for this feature, the origin element was 1% wide.
        // Unfortunately, a rounding bug in Chrome makes it impossible to implement this feature
        // in this manner: https://bugs.chromium.org/p/chromium/issues/detail?id=798223
        function transformDirection(a, b) {
            return options.dir ? 100 - a - b : a;
        }
        // Updates scope_Locations and scope_Values, updates visual state
        function updateHandlePosition(handleNumber, to) {
            // Update locations.
            scope_Locations[handleNumber] = to;
            // Convert the value to the slider stepping/range.
            scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);
            var translation = transformDirection(to, 0) - scope_DirOffset;
            var translateRule = "translate(" + inRuleOrder(translation + "%", "0") + ")";
            scope_Handles[handleNumber].style[options.transformRule] = translateRule;
            updateConnect(handleNumber);
            updateConnect(handleNumber + 1);
        }
        // Handles before the slider middle are stacked later = higher,
        // Handles after the middle later is lower
        // [[7] [8] .......... | .......... [5] [4]
        function setZindex() {
            scope_HandleNumbers.forEach(function(handleNumber) {
                var dir = scope_Locations[handleNumber] > 50 ? -1 : 1;
                var zIndex = 3 + (scope_Handles.length + dir * handleNumber);
                scope_Handles[handleNumber].style.zIndex = String(zIndex);
            });
        }
        // Test suggested values and apply margin, step.
        // if exactInput is true, don't run checkHandlePosition, then the handle can be placed in between steps (#436)
        function setHandle(handleNumber, to, lookBackward, lookForward, exactInput, smoothSteps) {
            if (!exactInput) to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward, false, smoothSteps);
            if (to === false) return false;
            updateHandlePosition(handleNumber, to);
            return true;
        }
        // Updates style attribute for connect nodes
        function updateConnect(index) {
            // Skip connects set to false
            if (!scope_Connects[index]) return;
            var l = 0;
            var h = 100;
            if (index !== 0) l = scope_Locations[index - 1];
            if (index !== scope_Connects.length - 1) h = scope_Locations[index];
            // We use two rules:
            // 'translate' to change the left/top offset;
            // 'scale' to change the width of the element;
            // As the element has a width of 100%, a translation of 100% is equal to 100% of the parent (.noUi-base)
            var connectWidth = h - l;
            var translateRule = "translate(" + inRuleOrder(transformDirection(l, connectWidth) + "%", "0") + ")";
            var scaleRule = "scale(" + inRuleOrder(connectWidth / 100, "1") + ")";
            scope_Connects[index].style[options.transformRule] = translateRule + " " + scaleRule;
        }
        // Parses value passed to .set method. Returns current value if not parse-able.
        function resolveToValue(to, handleNumber) {
            // Setting with null indicates an 'ignore'.
            // Inputting 'false' is invalid.
            if (to === null || to === false || to === undefined) return scope_Locations[handleNumber];
            // If a formatted number was passed, attempt to decode it.
            if (typeof to === "number") to = String(to);
            to = options.format.from(to);
            if (to !== false) to = scope_Spectrum.toStepping(to);
            // If parsing the number failed, use the current value.
            if (to === false || isNaN(to)) return scope_Locations[handleNumber];
            return to;
        }
        // Set the slider value.
        function valueSet(input, fireSetEvent, exactInput) {
            var values = asArray(input);
            var isInit = scope_Locations[0] === undefined;
            // Event fires by default
            fireSetEvent = fireSetEvent === undefined ? true : fireSetEvent;
            // Animation is optional.
            // Make sure the initial values were set before using animated placement.
            if (options.animate && !isInit) addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
            // First pass, without lookAhead but with lookBackward. Values are set from left to right.
            scope_HandleNumbers.forEach(function(handleNumber) {
                setHandle(handleNumber, resolveToValue(values[handleNumber], handleNumber), true, false, exactInput);
            });
            var i = scope_HandleNumbers.length === 1 ? 0 : 1;
            // Spread handles evenly across the slider if the range has no size (min=max)
            if (isInit && scope_Spectrum.hasNoSize()) {
                exactInput = true;
                scope_Locations[0] = 0;
                if (scope_HandleNumbers.length > 1) {
                    var space_1 = 100 / (scope_HandleNumbers.length - 1);
                    scope_HandleNumbers.forEach(function(handleNumber) {
                        scope_Locations[handleNumber] = handleNumber * space_1;
                    });
                }
            }
            // Secondary passes. Now that all base values are set, apply constraints.
            // Iterate all handles to ensure constraints are applied for the entire slider (Issue #1009)
            for(; i < scope_HandleNumbers.length; ++i)scope_HandleNumbers.forEach(function(handleNumber) {
                setHandle(handleNumber, scope_Locations[handleNumber], true, true, exactInput);
            });
            setZindex();
            scope_HandleNumbers.forEach(function(handleNumber) {
                fireEvent("update", handleNumber);
                // Fire the event only for handles that received a new value, as per #579
                if (values[handleNumber] !== null && fireSetEvent) fireEvent("set", handleNumber);
            });
        }
        // Reset slider to initial values
        function valueReset(fireSetEvent) {
            valueSet(options.start, fireSetEvent);
        }
        // Set value for a single handle
        function valueSetHandle(handleNumber, value, fireSetEvent, exactInput) {
            // Ensure numeric input
            handleNumber = Number(handleNumber);
            if (!(handleNumber >= 0 && handleNumber < scope_HandleNumbers.length)) throw new Error("noUiSlider: invalid handle number, got: " + handleNumber);
            // Look both backward and forward, since we don't want this handle to "push" other handles (#960);
            // The exactInput argument can be used to ignore slider stepping (#436)
            setHandle(handleNumber, resolveToValue(value, handleNumber), true, true, exactInput);
            fireEvent("update", handleNumber);
            if (fireSetEvent) fireEvent("set", handleNumber);
        }
        // Get the slider value.
        function valueGet(unencoded) {
            if (unencoded === void 0) unencoded = false;
            if (unencoded) // return a copy of the raw values
            return scope_Values.length === 1 ? scope_Values[0] : scope_Values.slice(0);
            var values = scope_Values.map(options.format.to);
            // If only one handle is used, return a single value.
            if (values.length === 1) return values[0];
            return values;
        }
        // Removes classes from the root and empties it.
        function destroy() {
            // remove protected internal listeners
            removeEvent(INTERNAL_EVENT_NS.aria);
            removeEvent(INTERNAL_EVENT_NS.tooltips);
            Object.keys(options.cssClasses).forEach(function(key) {
                removeClass(scope_Target, options.cssClasses[key]);
            });
            while(scope_Target.firstChild)scope_Target.removeChild(scope_Target.firstChild);
            delete scope_Target.noUiSlider;
        }
        function getNextStepsForHandle(handleNumber) {
            var location = scope_Locations[handleNumber];
            var nearbySteps = scope_Spectrum.getNearbySteps(location);
            var value = scope_Values[handleNumber];
            var increment = nearbySteps.thisStep.step;
            var decrement = null;
            // If snapped, directly use defined step value
            if (options.snap) return [
                value - nearbySteps.stepBefore.startValue || null,
                nearbySteps.stepAfter.startValue - value || null, 
            ];
            // If the next value in this step moves into the next step,
            // the increment is the start of the next step - the current value
            if (increment !== false) {
                if (value + increment > nearbySteps.stepAfter.startValue) increment = nearbySteps.stepAfter.startValue - value;
            }
            // If the value is beyond the starting point
            if (value > nearbySteps.thisStep.startValue) decrement = nearbySteps.thisStep.step;
            else if (nearbySteps.stepBefore.step === false) decrement = false;
            else decrement = value - nearbySteps.stepBefore.highestStep;
            // Now, if at the slider edges, there is no in/decrement
            if (location === 100) increment = null;
            else if (location === 0) decrement = null;
            // As per #391, the comparison for the decrement step can have some rounding issues.
            var stepDecimals = scope_Spectrum.countStepDecimals();
            // Round per #391
            if (increment !== null && increment !== false) increment = Number(increment.toFixed(stepDecimals));
            if (decrement !== null && decrement !== false) decrement = Number(decrement.toFixed(stepDecimals));
            return [
                decrement,
                increment
            ];
        }
        // Get the current step size for the slider.
        function getNextSteps() {
            return scope_HandleNumbers.map(getNextStepsForHandle);
        }
        // Updatable: margin, limit, padding, step, range, animate, snap
        function updateOptions(optionsToUpdate, fireSetEvent) {
            // Spectrum is created using the range, snap, direction and step options.
            // 'snap' and 'step' can be updated.
            // If 'snap' and 'step' are not passed, they should remain unchanged.
            var v = valueGet();
            var updateAble = [
                "margin",
                "limit",
                "padding",
                "range",
                "animate",
                "snap",
                "step",
                "format",
                "pips",
                "tooltips", 
            ];
            // Only change options that we're actually passed to update.
            updateAble.forEach(function(name) {
                // Check for undefined. null removes the value.
                if (optionsToUpdate[name] !== undefined) originalOptions[name] = optionsToUpdate[name];
            });
            var newOptions = testOptions(originalOptions);
            // Load new options into the slider state
            updateAble.forEach(function(name) {
                if (optionsToUpdate[name] !== undefined) options[name] = newOptions[name];
            });
            scope_Spectrum = newOptions.spectrum;
            // Limit, margin and padding depend on the spectrum but are stored outside of it. (#677)
            options.margin = newOptions.margin;
            options.limit = newOptions.limit;
            options.padding = newOptions.padding;
            // Update pips, removes existing.
            if (options.pips) pips1(options.pips);
            else removePips();
            // Update tooltips, removes existing.
            if (options.tooltips) tooltips();
            else removeTooltips();
            // Invalidate the current positioning so valueSet forces an update.
            scope_Locations = [];
            valueSet(isSet(optionsToUpdate.start) ? optionsToUpdate.start : v, fireSetEvent);
        }
        // Initialization steps
        function setupSlider() {
            // Create the base element, initialize HTML and set classes.
            // Add handles and connect elements.
            scope_Base = addSlider(scope_Target);
            addElements(options.connect, scope_Base);
            // Attach user events.
            bindSliderEvents(options.events);
            // Use the public value method to set the start values.
            valueSet(options.start);
            if (options.pips) pips1(options.pips);
            if (options.tooltips) tooltips();
            aria();
        }
        setupSlider();
        var scope_Self = {
            destroy: destroy,
            steps: getNextSteps,
            on: bindEvent,
            off: removeEvent,
            get: valueGet,
            set: valueSet,
            setHandle: valueSetHandle,
            reset: valueReset,
            // Exposed for unit testing, don't use this in your application.
            __moveHandles: function(upward, proposal, handleNumbers) {
                moveHandles(upward, proposal, scope_Locations, handleNumbers);
            },
            options: originalOptions,
            updateOptions: updateOptions,
            target: scope_Target,
            removePips: removePips,
            removeTooltips: removeTooltips,
            getPositions: function() {
                return scope_Locations.slice();
            },
            getTooltips: function() {
                return scope_Tooltips;
            },
            getOrigins: function() {
                return scope_Handles;
            },
            pips: pips1
        };
        return scope_Self;
    }
    // Run the standard initializer
    function initialize(target, originalOptions) {
        if (!target || !target.nodeName) throw new Error("noUiSlider: create requires a single element, got: " + target);
        // Throw an error if the slider was already initialized.
        if (target.noUiSlider) throw new Error("noUiSlider: Slider was already initialized.");
        // Test the options and create the slider environment;
        var options = testOptions(originalOptions);
        var api = scope(target, options, originalOptions);
        target.noUiSlider = api;
        return api;
    }
    var nouislider = {
        // Exposed for unit testing, don't use this in your application.
        __spectrum: Spectrum1,
        // A reference to the default classes, allows global changes.
        // Use the cssClasses option for changes to one slider.
        cssClasses: cssClasses,
        create: initialize
    };
    exports.create = initialize;
    exports.cssClasses = cssClasses;
    exports["default"] = nouislider;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
});

},{}],"h17MZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// jshint esversion: 9
var _webGLPoints = require("ol/layer/WebGLPoints");
var _webGLPointsDefault = parcelHelpers.interopDefault(_webGLPoints);
var _animateControls = require("./animateControls");
class AnimatedWebGLPointsLayer extends (0, _webGLPointsDefault.default) {
    /**
   * @param {Object} [opt_options] Layer options.
   */ constructor(opt_options){
        const options = opt_options || {};
        const animatedStyle = {
            variables: {
                filterValue: ""
            },
            filter: [
                "==",
                [
                    "get",
                    options.animatedField
                ],
                [
                    "var",
                    "filterValue"
                ]
            ],
            ...options.style
        };
        super({
            ...options,
            style: animatedStyle
        });
        this.animation = {
            // use Object.assign instead?
            elapsedTime: 0,
            pausedPoint: 0,
            frame: 0,
            rate: 4,
            playState: false,
            initialized: false,
            startTime: null,
            animatedField: options.animatedField,
            startFrame: 0
        };
        this.playAnimation = this.playAnimation.bind(this);
        this.pauseAnimation = this.pauseAnimation.bind(this);
        this.animateFrame = this.animateFrame.bind(this);
        this.goToFrame = this.goToFrame.bind(this);
        this.initAnimation = this.initAnimation.bind(this);
    }
    initAnimation(opt_options) {
        // Change animation rate if specified by user
        const options = opt_options || {};
        if (options.rate) this.animation.rate = options.rate;
        if (options.startFrame) this.animation.startFrame = options.startFrame;
        this.animation.totalFrames = this.animation.animatedFieldUnique.length; // this currently requires specifying in app.js; how to foolproof?
        // Get slider control for animation, if present
        this.animation.slider = this.get("map").getControls().array_.filter((control)=>control.element.className.includes("slider-element"))[0] || null;
        // Get popup overlay for animation, if present
        this.animation.popup = this.get("map").getOverlays().array_.filter((overlay)=>"popupContainer" in overlay)[0] || null;
        // Get play/pause button, if present
        this.animation.playControl = this.get("map").controls.array_.filter((item)=>item.constructor.name === (0, _animateControls.PlayControl).name)[0];
        // Set animation start frame (default 0)
        this.goToFrame(this.animation.startFrame);
        this.animation.initialized = true;
    }
    playAnimation(opt_options) {
        // Change animation rate if specified by user
        const options = opt_options || {};
        if (options.rate) this.animation.rate = options.rate;
        // On first play, set some misc. variables and associate animation with controls and overlays, if present
        // move to separate function firstPlay();
        if (!this.animation.initialized) {
            this.initAnimation();
            this.animation.initialized = true;
        }
        // If resuming from paused animation
        if (!this.animation.playState) {
            this.animation.pausedPoint = this.animation.frame / this.animation.rate;
            this.animation.startTime = Date.now();
            this.animation.elapsedTime = 0;
            this.animation.playState = true;
            if (this.animation.playControl) this.animation.playControl.img.src = (0, _animateControls.pauseButtonSvg);
        }
        // Restart animation from beginning if play started from final frame
        if (this.animation.frame == this.animation.totalFrames - 1) {
            this.animation = {
                ...this.animation,
                elapsedTime: 0,
                pausedPoint: 0,
                frame: 0
            };
            this.goToFrame(this.startFrame);
        }
        // Animate if playState is true
        if (this.animation.playState) this.animateFrame();
    }
    animateFrame() {
        if (this.animation.playState) {
            if (this.animation.frame == this.animation.totalFrames - 1) {
                //this.animation.over = true;
                this.pauseAnimation();
                //this.animation.playState = false;
                return;
            } else {
                this.animation.elapsedTime = this.animation.pausedPoint + (Date.now() - this.animation.startTime) / 1000;
                const calcFrame = this.animation.elapsedTime * this.animation.rate;
                const nextFrame = Math.floor(calcFrame);
                if (nextFrame > this.animation.frame) {
                    this.goToFrame(nextFrame);
                    // If slider-control has been added to map, update slider when animating
                    if (this.animation.slider) this.animation.slider.updateSliderValue(this.animation.frame);
                }
                this.animation.animationID = window.requestAnimationFrame(this.animateFrame);
            }
        }
    }
    goToFrame(newFrame) {
        // console.log('newFrame: ' + newFrame);
        // console.log('this.animation.totalFrames: ' + this.animation.totalFrames);
        const newFrameInt = parseInt(newFrame);
        if (newFrameInt < this.animation.totalFrames && newFrameInt >= 0) {
            this.animation.frame = newFrameInt;
            this.animation.activeFilter = this.animation.animatedFieldUnique[this.animation.frame];
            this.updateStyleVariables({
                filterValue: this.animation.activeFilter
            });
            this.changed();
            // If popup overlay has been added to map, update popup when animating
            if (this.animation.popup) this.animation.popup.updatePopupContent();
        }
    }
    pauseAnimation() {
        //this.animation.pausedPoint = this.animation.frame / this.animation.rate;
        //this.animation.elapsedTime = 0;
        this.animation.playState = false;
        window.cancelAnimationFrame(this.animation.animationID);
        // If play-pause button control overlay has been added to map, toggle icon on play/pause
        if (this.animation.playControl) // TODO: can toggle play/pause img src w/ css class?
        this.animation.playControl.img.src = (0, _animateControls.playButtonSvg);
    }
}
exports.default = AnimatedWebGLPointsLayer;

},{"ol/layer/WebGLPoints":"6TqpJ","./animateControls":"5p5Jx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6TqpJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/layer/WebGLPoints
 */ var _layerJs = require("./Layer.js");
var _layerJsDefault = parcelHelpers.interopDefault(_layerJs);
var _pointsLayerJs = require("../renderer/webgl/PointsLayer.js");
var _pointsLayerJsDefault = parcelHelpers.interopDefault(_pointsLayerJs);
var _objJs = require("../obj.js");
var _shaderBuilderJs = require("../webgl/ShaderBuilder.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @template {import("../source/Vector.js").default<import("../geom/Point.js").default>} VectorSourceType
 * @typedef {Object} Options
 * @property {import('../style/literal.js').LiteralStyle} style Literal style to apply to the layer features.
 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
 * @property {number} [opacity=1] Opacity (0, 1).
 * @property {boolean} [visible=true] Visibility.
 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
 * rendered outside of this extent.
 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
 * method was used.
 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
 * visible.
 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
 * be visible.
 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
 * visible.
 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
 * be visible.
 * @property {VectorSourceType} [source] Point source.
 * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will
 * prevent all hit detection on the layer.
 * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
 */ /**
 * @classdesc
 * Layer optimized for rendering large point datasets. Takes a `style` property which
 * is a serializable JSON object describing how the layer should be rendered.
 *
 * Here are a few samples of literal style objects:
 * ```js
 * const style = {
 *   symbol: {
 *     symbolType: 'circle',
 *     size: 8,
 *     color: '#33AAFF',
 *     opacity: 0.9
 *   }
 * }
 * ```
 *
 * ```js
 * const style = {
 *   symbol: {
 *     symbolType: 'image',
 *     offset: [0, 12],
 *     size: [4, 8],
 *     src: '../static/exclamation-mark.png'
 *   }
 * }
 * ```
 *
 * **Important: a `WebGLPoints` layer must be manually disposed when removed, otherwise the underlying WebGL context
 * will not be garbage collected.**
 *
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @template {import("../source/Vector.js").default<import("../geom/Point.js").default>} VectorSourceType
 * @extends {Layer<VectorSourceType, WebGLPointsLayerRenderer>}
 * @fires import("../render/Event.js").RenderEvent
 */ var WebGLPointsLayer = /** @class */ function(_super) {
    __extends(WebGLPointsLayer1, _super);
    /**
     * @param {Options<VectorSourceType>} options Options.
     */ function WebGLPointsLayer1(options) {
        var _this = this;
        var baseOptions = (0, _objJs.assign)({}, options);
        _this = _super.call(this, baseOptions) || this;
        /**
         * @private
         * @type {import('../webgl/ShaderBuilder.js').StyleParseResult}
         */ _this.parseResult_ = (0, _shaderBuilderJs.parseLiteralStyle)(options.style);
        /**
         * @type {Object<string, (string|number)>}
         * @private
         */ _this.styleVariables_ = options.style.variables || {};
        /**
         * @private
         * @type {boolean}
         */ _this.hitDetectionDisabled_ = !!options.disableHitDetection;
        return _this;
    }
    WebGLPointsLayer1.prototype.createRenderer = function() {
        return new (0, _pointsLayerJsDefault.default)(this, {
            vertexShader: this.parseResult_.builder.getSymbolVertexShader(),
            fragmentShader: this.parseResult_.builder.getSymbolFragmentShader(),
            hitVertexShader: !this.hitDetectionDisabled_ && this.parseResult_.builder.getSymbolVertexShader(true),
            hitFragmentShader: !this.hitDetectionDisabled_ && this.parseResult_.builder.getSymbolFragmentShader(true),
            uniforms: this.parseResult_.uniforms,
            attributes: this.parseResult_.attributes
        });
    };
    /**
     * Update any variables used by the layer style and trigger a re-render.
     * @param {Object<string, number>} variables Variables to update.
     */ WebGLPointsLayer1.prototype.updateStyleVariables = function(variables) {
        (0, _objJs.assign)(this.styleVariables_, variables);
        this.changed();
    };
    return WebGLPointsLayer1;
}((0, _layerJsDefault.default));
exports.default = WebGLPointsLayer;

},{"./Layer.js":"8J9Kf","../renderer/webgl/PointsLayer.js":"iynkn","../obj.js":"3ssAG","../webgl/ShaderBuilder.js":"XodNo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iynkn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/renderer/webgl/PointsLayer
 */ var _baseVectorJs = require("../../layer/BaseVector.js");
var _baseVectorJsDefault = parcelHelpers.interopDefault(_baseVectorJs);
var _geometryTypeJs = require("../../geom/GeometryType.js");
var _geometryTypeJsDefault = parcelHelpers.interopDefault(_geometryTypeJs);
var _vectorEventTypeJs = require("../../source/VectorEventType.js");
var _vectorEventTypeJsDefault = parcelHelpers.interopDefault(_vectorEventTypeJs);
var _viewHintJs = require("../../ViewHint.js");
var _viewHintJsDefault = parcelHelpers.interopDefault(_viewHintJs);
var _bufferJs = require("../../webgl/Buffer.js");
var _bufferJsDefault = parcelHelpers.interopDefault(_bufferJs);
var _layerJs = require("./Layer.js");
var _layerJsDefault = parcelHelpers.interopDefault(_layerJs);
var _renderTargetJs = require("../../webgl/RenderTarget.js");
var _renderTargetJsDefault = parcelHelpers.interopDefault(_renderTargetJs);
var _webglJs = require("../../webgl.js");
var _helperJs = require("../../webgl/Helper.js");
var _transformJs = require("../../transform.js");
var _assertsJs = require("../../asserts.js");
var _extentJs = require("../../extent.js");
var _webglJs1 = require("../../worker/webgl.js");
var _utilJs = require("../../util.js");
var _eventsJs = require("../../events.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different
 * for each feature.
 * @property {string} name Attribute name.
 * @property {function(import("../../Feature").default, Object<string, *>):number} callback This callback computes the numerical value of the
 * attribute for a given feature (properties are available as 2nd arg for quicker access).
 */ /**
 * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize
 * rebuildBuffers by accessing these objects quicker.
 * @property {import("../../Feature").default} feature Feature
 * @property {Object<string, *>} properties Feature properties
 * @property {import("../../geom").Geometry} geometry Feature geometry
 */ /**
 * @typedef {Object} Options
 * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.
 * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then
 * passed to the GPU. The `name` property of each attribute will serve as its identifier:
 *  * In the vertex shader as an `attribute` by prefixing it with `a_`
 *  * In the fragment shader as a `varying` by prefixing it with `v_`
 * Please note that these can only be numerical values.
 * @property {string} vertexShader Vertex shader source, mandatory.
 * @property {string} fragmentShader Fragment shader source, mandatory.
 * @property {string} [hitVertexShader] Vertex shader source for hit detection rendering.
 * @property {string} [hitFragmentShader] Fragment shader source for hit detection rendering.
 * @property {Object<string,import("../../webgl/Helper").UniformValue>} [uniforms] Uniform definitions for the post process steps
 * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.
 * @property {Array<import("./Layer").PostProcessesOptions>} [postProcesses] Post-processes definitions
 */ /**
 * @classdesc
 * WebGL vector renderer optimized for points.
 * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU
 * every time the vector source changes.
 *
 * You need to provide vertex and fragment shaders for rendering. This can be done using
 * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute
 * containing the screen-space projected center of the quad, as well as a `a_index` attribute
 * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).
 *
 * To include variable attributes in the shaders, you need to declare them using the `attributes` property of
 * the options object like so:
 * ```js
 * new WebGLPointsLayerRenderer(layer, {
 *   attributes: [
 *     {
 *       name: 'size',
 *       callback: function(feature) {
 *         // compute something with the feature
 *       }
 *     },
 *     {
 *       name: 'weight',
 *       callback: function(feature) {
 *         // compute something with the feature
 *       }
 *     },
 *   ],
 *   vertexShader:
 *     // shader using attribute a_weight and a_size
 *   fragmentShader:
 *     // shader using varying v_weight and v_size
 * ```
 *
 * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`
 * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain
 * the final color that will have to be output for hit detection to work.
 *
 * The following uniform is used for the main texture: `u_texture`.
 * The following uniform is used for the layer opacity: `u_opacity`.
 *
 * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.
 *
 * Points are rendered as quads with the following structure:
 *
 * ```
 *   (u0, v1)      (u1, v1)
 *  [3]----------[2]
 *   |`           |
 *   |  `         |
 *   |    `       |
 *   |      `     |
 *   |        `   |
 *   |          ` |
 *  [0]----------[1]
 *   (u0, v0)      (u1, v0)
 *  ```
 *
 * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.
 *
 * @api
 */ var WebGLPointsLayerRenderer = /** @class */ function(_super) {
    __extends(WebGLPointsLayerRenderer1, _super);
    /**
     * @param {import("../../layer/Layer.js").default} layer Layer.
     * @param {Options} options Options.
     */ function WebGLPointsLayerRenderer1(layer, options) {
        var _this = this;
        var uniforms = options.uniforms || {};
        var projectionMatrixTransform = (0, _transformJs.create)();
        uniforms[(0, _helperJs.DefaultUniform).PROJECTION_MATRIX] = projectionMatrixTransform;
        _this = _super.call(this, layer, {
            uniforms: uniforms,
            postProcesses: options.postProcesses
        }) || this;
        _this.ready = false;
        _this.sourceRevision_ = -1;
        _this.verticesBuffer_ = new (0, _bufferJsDefault.default)((0, _webglJs.ARRAY_BUFFER), (0, _webglJs.DYNAMIC_DRAW));
        _this.hitVerticesBuffer_ = new (0, _bufferJsDefault.default)((0, _webglJs.ARRAY_BUFFER), (0, _webglJs.DYNAMIC_DRAW));
        _this.indicesBuffer_ = new (0, _bufferJsDefault.default)((0, _webglJs.ELEMENT_ARRAY_BUFFER), (0, _webglJs.DYNAMIC_DRAW));
        /**
         * @private
         */ _this.vertexShader_ = options.vertexShader;
        /**
         * @private
         */ _this.fragmentShader_ = options.fragmentShader;
        /**
         * @type {WebGLProgram}
         * @private
         */ _this.program_;
        /**
         * @type {boolean}
         * @private
         */ _this.hitDetectionEnabled_ = options.hitFragmentShader && options.hitVertexShader ? true : false;
        /**
         * @private
         */ _this.hitVertexShader_ = options.hitVertexShader;
        /**
         * @private
         */ _this.hitFragmentShader_ = options.hitFragmentShader;
        /**
         * @type {WebGLProgram}
         * @private
         */ _this.hitProgram_;
        var customAttributes = options.attributes ? options.attributes.map(function(attribute) {
            return {
                name: "a_" + attribute.name,
                size: 1,
                type: (0, _helperJs.AttributeType).FLOAT
            };
        }) : [];
        /**
         * A list of attributes used by the renderer. By default only the position and
         * index of the vertex (0 to 3) are required.
         * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}
         */ _this.attributes = [
            {
                name: "a_position",
                size: 2,
                type: (0, _helperJs.AttributeType).FLOAT
            },
            {
                name: "a_index",
                size: 1,
                type: (0, _helperJs.AttributeType).FLOAT
            }, 
        ].concat(customAttributes);
        /**
         * A list of attributes used for hit detection.
         * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}
         */ _this.hitDetectionAttributes = [
            {
                name: "a_position",
                size: 2,
                type: (0, _helperJs.AttributeType).FLOAT
            },
            {
                name: "a_index",
                size: 1,
                type: (0, _helperJs.AttributeType).FLOAT
            },
            {
                name: "a_hitColor",
                size: 4,
                type: (0, _helperJs.AttributeType).FLOAT
            },
            {
                name: "a_featureUid",
                size: 1,
                type: (0, _helperJs.AttributeType).FLOAT
            }, 
        ].concat(customAttributes);
        _this.customAttributes = options.attributes ? options.attributes : [];
        _this.previousExtent_ = (0, _extentJs.createEmpty)();
        /**
         * This transform is updated on every frame and is the composition of:
         * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)
         * - current world->screen transform
         * @type {import("../../transform.js").Transform}
         * @private
         */ _this.currentTransform_ = projectionMatrixTransform;
        /**
         * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space
         * @type {import("../../transform.js").Transform}
         * @private
         */ _this.renderTransform_ = (0, _transformJs.create)();
        /**
         * @type {import("../../transform.js").Transform}
         * @private
         */ _this.invertRenderTransform_ = (0, _transformJs.create)();
        /**
         * @type {Float32Array}
         * @private
         */ _this.renderInstructions_ = new Float32Array(0);
        /**
         * These instructions are used for hit detection
         * @type {Float32Array}
         * @private
         */ _this.hitRenderInstructions_ = new Float32Array(0);
        /**
         * @type {WebGLRenderTarget}
         * @private
         */ _this.hitRenderTarget_;
        /**
         * Keep track of latest message sent to worker
         * @type {number}
         * @private
         */ _this.generateBuffersRun_ = 0;
        _this.worker_ = (0, _webglJs1.create)();
        _this.worker_.addEventListener("message", /**
         * @param {*} event Event.
         * @this {WebGLPointsLayerRenderer}
         */ (function(event) {
            var received = event.data;
            if (received.type === (0, _layerJs.WebGLWorkerMessageType).GENERATE_BUFFERS) {
                var projectionTransform = received.projectionTransform;
                if (received.hitDetection) {
                    this.hitVerticesBuffer_.fromArrayBuffer(received.vertexBuffer);
                    this.helper.flushBufferData(this.hitVerticesBuffer_);
                } else {
                    this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);
                    this.helper.flushBufferData(this.verticesBuffer_);
                }
                this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);
                this.helper.flushBufferData(this.indicesBuffer_);
                this.renderTransform_ = projectionTransform;
                (0, _transformJs.makeInverse)(this.invertRenderTransform_, this.renderTransform_);
                if (received.hitDetection) this.hitRenderInstructions_ = new Float32Array(event.data.renderInstructions);
                else {
                    this.renderInstructions_ = new Float32Array(event.data.renderInstructions);
                    if (received.generateBuffersRun === this.generateBuffersRun_) this.ready = true;
                }
                this.getLayer().changed();
            }
        }).bind(_this));
        /**
         * This object will be updated when the source changes. Key is uid.
         * @type {Object<string, FeatureCacheItem>}
         * @private
         */ _this.featureCache_ = {};
        /**
         * Amount of features in the cache.
         * @type {number}
         * @private
         */ _this.featureCount_ = 0;
        var source = _this.getLayer().getSource();
        _this.sourceListenKeys_ = [
            (0, _eventsJs.listen)(source, (0, _vectorEventTypeJsDefault.default).ADDFEATURE, _this.handleSourceFeatureAdded_, _this),
            (0, _eventsJs.listen)(source, (0, _vectorEventTypeJsDefault.default).CHANGEFEATURE, _this.handleSourceFeatureChanged_, _this),
            (0, _eventsJs.listen)(source, (0, _vectorEventTypeJsDefault.default).REMOVEFEATURE, _this.handleSourceFeatureDelete_, _this),
            (0, _eventsJs.listen)(source, (0, _vectorEventTypeJsDefault.default).CLEAR, _this.handleSourceFeatureClear_, _this), 
        ];
        source.forEachFeature((function(feature) {
            this.featureCache_[(0, _utilJs.getUid)(feature)] = {
                feature: feature,
                properties: feature.getProperties(),
                geometry: feature.getGeometry()
            };
            this.featureCount_++;
        }).bind(_this));
        return _this;
    }
    WebGLPointsLayerRenderer1.prototype.afterHelperCreated = function() {
        this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);
        if (this.hitDetectionEnabled_) {
            this.hitProgram_ = this.helper.getProgram(this.hitFragmentShader_, this.hitVertexShader_);
            this.hitRenderTarget_ = new (0, _renderTargetJsDefault.default)(this.helper);
        }
    };
    /**
     * @param {import("../../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */ WebGLPointsLayerRenderer1.prototype.handleSourceFeatureAdded_ = function(event) {
        var feature = event.feature;
        this.featureCache_[(0, _utilJs.getUid)(feature)] = {
            feature: feature,
            properties: feature.getProperties(),
            geometry: feature.getGeometry()
        };
        this.featureCount_++;
    };
    /**
     * @param {import("../../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */ WebGLPointsLayerRenderer1.prototype.handleSourceFeatureChanged_ = function(event) {
        var feature = event.feature;
        this.featureCache_[(0, _utilJs.getUid)(feature)] = {
            feature: feature,
            properties: feature.getProperties(),
            geometry: feature.getGeometry()
        };
    };
    /**
     * @param {import("../../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */ WebGLPointsLayerRenderer1.prototype.handleSourceFeatureDelete_ = function(event) {
        var feature = event.feature;
        delete this.featureCache_[(0, _utilJs.getUid)(feature)];
        this.featureCount_--;
    };
    /**
     * @private
     */ WebGLPointsLayerRenderer1.prototype.handleSourceFeatureClear_ = function() {
        this.featureCache_ = {};
        this.featureCount_ = 0;
    };
    /**
     * Render the layer.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @return {HTMLElement} The rendered element.
     */ WebGLPointsLayerRenderer1.prototype.renderFrame = function(frameState) {
        var gl = this.helper.getGL();
        this.preRender(gl, frameState);
        var renderCount = this.indicesBuffer_.getSize();
        this.helper.drawElements(0, renderCount);
        this.helper.finalizeDraw(frameState, this.dispatchPreComposeEvent, this.dispatchPostComposeEvent);
        var canvas = this.helper.getCanvas();
        if (this.hitDetectionEnabled_) {
            this.renderHitDetection(frameState);
            this.hitRenderTarget_.clearCachedData();
        }
        this.postRender(gl, frameState);
        return canvas;
    };
    /**
     * Determine whether renderFrame should be called.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */ WebGLPointsLayerRenderer1.prototype.prepareFrameInternal = function(frameState) {
        var layer = this.getLayer();
        var vectorSource = layer.getSource();
        var viewState = frameState.viewState;
        var viewNotMoving = !frameState.viewHints[(0, _viewHintJsDefault.default).ANIMATING] && !frameState.viewHints[(0, _viewHintJsDefault.default).INTERACTING];
        var extentChanged = !(0, _extentJs.equals)(this.previousExtent_, frameState.extent);
        var sourceChanged = this.sourceRevision_ < vectorSource.getRevision();
        if (sourceChanged) this.sourceRevision_ = vectorSource.getRevision();
        if (viewNotMoving && (extentChanged || sourceChanged)) {
            var projection = viewState.projection;
            var resolution = viewState.resolution;
            var renderBuffer = layer instanceof (0, _baseVectorJsDefault.default) ? layer.getRenderBuffer() : 0;
            var extent = (0, _extentJs.buffer)(frameState.extent, renderBuffer * resolution);
            vectorSource.loadFeatures(extent, resolution, projection);
            this.rebuildBuffers_(frameState);
            this.previousExtent_ = frameState.extent.slice();
        }
        // apply the current projection transform with the invert of the one used to fill buffers
        this.helper.makeProjectionTransform(frameState, this.currentTransform_);
        (0, _transformJs.multiply)(this.currentTransform_, this.invertRenderTransform_);
        this.helper.useProgram(this.program_);
        this.helper.prepareDraw(frameState);
        // write new data
        this.helper.bindBuffer(this.verticesBuffer_);
        this.helper.bindBuffer(this.indicesBuffer_);
        this.helper.enableAttributes(this.attributes);
        return true;
    };
    /**
     * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much
     * @param {import("../../PluggableMap").FrameState} frameState Frame state.
     * @private
     */ WebGLPointsLayerRenderer1.prototype.rebuildBuffers_ = function(frameState) {
        // saves the projection transform for the current frame state
        var projectionTransform = (0, _transformJs.create)();
        this.helper.makeProjectionTransform(frameState, projectionTransform);
        // here we anticipate the amount of render instructions that we well generate
        // this can be done since we know that for normal render we only have x, y as base instructions,
        // and x, y, r, g, b, a and featureUid for hit render instructions
        // and we also know the amount of custom attributes to append to these
        var totalInstructionsCount = (2 + this.customAttributes.length) * this.featureCount_;
        if (!this.renderInstructions_ || this.renderInstructions_.length !== totalInstructionsCount) this.renderInstructions_ = new Float32Array(totalInstructionsCount);
        if (this.hitDetectionEnabled_) {
            var totalHitInstructionsCount = (7 + this.customAttributes.length) * this.featureCount_;
            if (!this.hitRenderInstructions_ || this.hitRenderInstructions_.length !== totalHitInstructionsCount) this.hitRenderInstructions_ = new Float32Array(totalHitInstructionsCount);
        }
        // loop on features to fill the buffer
        var featureCache, geometry;
        var tmpCoords = [];
        var tmpColor = [];
        var renderIndex = 0;
        var hitIndex = 0;
        var hitColor;
        for(var featureUid in this.featureCache_){
            featureCache = this.featureCache_[featureUid];
            geometry = featureCache.geometry;
            if (!geometry || geometry.getType() !== (0, _geometryTypeJsDefault.default).POINT) continue;
            tmpCoords[0] = geometry.getFlatCoordinates()[0];
            tmpCoords[1] = geometry.getFlatCoordinates()[1];
            (0, _transformJs.apply)(projectionTransform, tmpCoords);
            hitColor = (0, _layerJs.colorEncodeId)(hitIndex + 6, tmpColor);
            this.renderInstructions_[renderIndex++] = tmpCoords[0];
            this.renderInstructions_[renderIndex++] = tmpCoords[1];
            // for hit detection, the feature uid is saved in the opacity value
            // and the index of the opacity value is encoded in the color values
            if (this.hitDetectionEnabled_) {
                this.hitRenderInstructions_[hitIndex++] = tmpCoords[0];
                this.hitRenderInstructions_[hitIndex++] = tmpCoords[1];
                this.hitRenderInstructions_[hitIndex++] = hitColor[0];
                this.hitRenderInstructions_[hitIndex++] = hitColor[1];
                this.hitRenderInstructions_[hitIndex++] = hitColor[2];
                this.hitRenderInstructions_[hitIndex++] = hitColor[3];
                this.hitRenderInstructions_[hitIndex++] = Number(featureUid);
            }
            // pushing custom attributes
            var value = void 0;
            for(var j = 0; j < this.customAttributes.length; j++){
                value = this.customAttributes[j].callback(featureCache.feature, featureCache.properties);
                this.renderInstructions_[renderIndex++] = value;
                if (this.hitDetectionEnabled_) this.hitRenderInstructions_[hitIndex++] = value;
            }
        }
        /** @type {import('./Layer').WebGLWorkerGenerateBuffersMessage} */ var message = {
            type: (0, _layerJs.WebGLWorkerMessageType).GENERATE_BUFFERS,
            renderInstructions: this.renderInstructions_.buffer,
            customAttributesCount: this.customAttributes.length
        };
        // additional properties will be sent back as-is by the worker
        message["projectionTransform"] = projectionTransform;
        message["generateBuffersRun"] = ++this.generateBuffersRun_;
        this.ready = false;
        this.worker_.postMessage(message, [
            this.renderInstructions_.buffer
        ]);
        this.renderInstructions_ = null;
        /** @type {import('./Layer').WebGLWorkerGenerateBuffersMessage} */ if (this.hitDetectionEnabled_) {
            var hitMessage = {
                type: (0, _layerJs.WebGLWorkerMessageType).GENERATE_BUFFERS,
                renderInstructions: this.hitRenderInstructions_.buffer,
                customAttributesCount: 5 + this.customAttributes.length
            };
            hitMessage["projectionTransform"] = projectionTransform;
            hitMessage["hitDetection"] = true;
            this.worker_.postMessage(hitMessage, [
                this.hitRenderInstructions_.buffer, 
            ]);
            this.hitRenderInstructions_ = null;
        }
    };
    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {import("../vector.js").FeatureCallback<T>} callback Feature callback.
     * @param {Array<import("../Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
     * @return {T|undefined} Callback result.
     * @template T
     */ WebGLPointsLayerRenderer1.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, matches) {
        (0, _assertsJs.assert)(this.hitDetectionEnabled_, 66);
        if (!this.hitRenderInstructions_) return undefined;
        var pixel = (0, _transformJs.apply)(frameState.coordinateToPixelTransform, coordinate.slice());
        var data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);
        var color = [
            data[0] / 255,
            data[1] / 255,
            data[2] / 255,
            data[3] / 255
        ];
        var index = (0, _layerJs.colorDecodeId)(color);
        var opacity = this.hitRenderInstructions_[index];
        var uid = Math.floor(opacity).toString();
        var source = this.getLayer().getSource();
        var feature = source.getFeatureByUid(uid);
        if (feature) return callback(feature, this.getLayer(), null);
        return undefined;
    };
    /**
     * Render the hit detection data to the corresponding render target
     * @param {import("../../PluggableMap.js").FrameState} frameState current frame state
     */ WebGLPointsLayerRenderer1.prototype.renderHitDetection = function(frameState) {
        // skip render entirely if vertex buffers not ready/generated yet
        if (!this.hitVerticesBuffer_.getSize()) return;
        this.hitRenderTarget_.setSize([
            Math.floor(frameState.size[0] / 2),
            Math.floor(frameState.size[1] / 2), 
        ]);
        this.helper.useProgram(this.hitProgram_);
        this.helper.prepareDrawToRenderTarget(frameState, this.hitRenderTarget_, true);
        this.helper.bindBuffer(this.hitVerticesBuffer_);
        this.helper.bindBuffer(this.indicesBuffer_);
        this.helper.enableAttributes(this.hitDetectionAttributes);
        var renderCount = this.indicesBuffer_.getSize();
        this.helper.drawElements(0, renderCount);
    };
    /**
     * Clean up.
     */ WebGLPointsLayerRenderer1.prototype.disposeInternal = function() {
        this.worker_.terminate();
        this.layer_ = null;
        this.sourceListenKeys_.forEach(function(key) {
            (0, _eventsJs.unlistenByKey)(key);
        });
        this.sourceListenKeys_ = null;
        _super.prototype.disposeInternal.call(this);
    };
    return WebGLPointsLayerRenderer1;
}((0, _layerJsDefault.default));
exports.default = WebGLPointsLayerRenderer;

},{"../../layer/BaseVector.js":"2tWeN","../../geom/GeometryType.js":"j6daa","../../source/VectorEventType.js":"6IruY","../../ViewHint.js":"6THmF","../../webgl/Buffer.js":"gQebi","./Layer.js":"d36Vl","../../webgl/RenderTarget.js":"42MA4","../../webgl.js":"3P5v4","../../webgl/Helper.js":"9XgW2","../../transform.js":"1BqUf","../../asserts.js":"e4TiF","../../extent.js":"6YrVc","../../worker/webgl.js":"c3YKH","../../util.js":"pLBjQ","../../events.js":"dcspA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gQebi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BufferUsage", ()=>BufferUsage);
/**
 * Returns a typed array constructor based on the given buffer type
 * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.
 * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.
 */ parcelHelpers.export(exports, "getArrayClassForType", ()=>getArrayClassForType);
/**
 * @module ol/webgl/Buffer
 */ var _webglJs = require("../webgl.js");
var _assertsJs = require("../asserts.js");
var BufferUsage = {
    STATIC_DRAW: (0, _webglJs.STATIC_DRAW),
    STREAM_DRAW: (0, _webglJs.STREAM_DRAW),
    DYNAMIC_DRAW: (0, _webglJs.DYNAMIC_DRAW)
};
/**
 * @classdesc
 * Object used to store an array of data as well as usage information for that data.
 * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on
 * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.
 *
 * To populate the array, you can either use:
 * * A size using `#ofSize(buffer)`
 * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`
 * * A plain array using `#fromArray(array)`
 *
 * Note:
 * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)
 * for more info on buffer usage.
 * @api
 */ var WebGLArrayBuffer = /** @class */ function() {
    /**
     * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.
     * @param {number} [opt_usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.
     * Default is `DYNAMIC_DRAW`.
     */ function WebGLArrayBuffer1(type, opt_usage) {
        /**
         * @private
         * @type {Float32Array|Uint32Array}
         */ this.array = null;
        /**
         * @private
         * @type {number}
         */ this.type = type;
        (0, _assertsJs.assert)(type === (0, _webglJs.ARRAY_BUFFER) || type === (0, _webglJs.ELEMENT_ARRAY_BUFFER), 62);
        /**
         * @private
         * @type {number}
         */ this.usage = opt_usage !== undefined ? opt_usage : BufferUsage.STATIC_DRAW;
    }
    /**
     * Populates the buffer with an array of the given size (all values will be zeroes).
     * @param {number} size Array size
     */ WebGLArrayBuffer1.prototype.ofSize = function(size) {
        this.array = new (getArrayClassForType(this.type))(size);
    };
    /**
     * Populates the buffer with an array of the given size (all values will be zeroes).
     * @param {Array<number>} array Numerical array
     */ WebGLArrayBuffer1.prototype.fromArray = function(array) {
        var arrayClass = getArrayClassForType(this.type);
        this.array = arrayClass.from ? arrayClass.from(array) : new arrayClass(array);
    };
    /**
     * Populates the buffer with a raw binary array buffer.
     * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been
     * initialized for the same typed array class.
     */ WebGLArrayBuffer1.prototype.fromArrayBuffer = function(buffer) {
        this.array = new (getArrayClassForType(this.type))(buffer);
    };
    /**
     * @return {number} Buffer type.
     */ WebGLArrayBuffer1.prototype.getType = function() {
        return this.type;
    };
    /**
     * Will return null if the buffer was not initialized
     * @return {Float32Array|Uint32Array} Array.
     */ WebGLArrayBuffer1.prototype.getArray = function() {
        return this.array;
    };
    /**
     * @return {number} Usage.
     */ WebGLArrayBuffer1.prototype.getUsage = function() {
        return this.usage;
    };
    /**
     * Will return 0 if the buffer is not initialized
     * @return {number} Array size
     */ WebGLArrayBuffer1.prototype.getSize = function() {
        return this.array ? this.array.length : 0;
    };
    return WebGLArrayBuffer1;
}();
function getArrayClassForType(type) {
    switch(type){
        case 0, _webglJs.ARRAY_BUFFER:
            return Float32Array;
        case 0, _webglJs.ELEMENT_ARRAY_BUFFER:
            return Uint32Array;
        default:
            return Float32Array;
    }
}
exports.default = WebGLArrayBuffer;

},{"../webgl.js":"3P5v4","../asserts.js":"e4TiF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3P5v4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ARRAY_BUFFER", ()=>ARRAY_BUFFER);
parcelHelpers.export(exports, "ELEMENT_ARRAY_BUFFER", ()=>ELEMENT_ARRAY_BUFFER);
parcelHelpers.export(exports, "STREAM_DRAW", ()=>STREAM_DRAW);
parcelHelpers.export(exports, "STATIC_DRAW", ()=>STATIC_DRAW);
parcelHelpers.export(exports, "DYNAMIC_DRAW", ()=>DYNAMIC_DRAW);
parcelHelpers.export(exports, "UNSIGNED_BYTE", ()=>UNSIGNED_BYTE);
parcelHelpers.export(exports, "UNSIGNED_SHORT", ()=>UNSIGNED_SHORT);
parcelHelpers.export(exports, "UNSIGNED_INT", ()=>UNSIGNED_INT);
parcelHelpers.export(exports, "FLOAT", ()=>FLOAT);
/**
 * @param {HTMLCanvasElement} canvas Canvas.
 * @param {Object} [opt_attributes] Attributes.
 * @return {WebGLRenderingContext} WebGL rendering context.
 */ parcelHelpers.export(exports, "getContext", ()=>getContext);
/**
 * @return {Array<string>} List of supported WebGL extensions.
 */ parcelHelpers.export(exports, "getSupportedExtensions", ()=>getSupportedExtensions);
/**
 * @module ol/webgl
 */ var _hasJs = require("./has.js");
var _objJs = require("./obj.js");
var ARRAY_BUFFER = 0x8892;
var ELEMENT_ARRAY_BUFFER = 0x8893;
var STREAM_DRAW = 0x88e0;
var STATIC_DRAW = 0x88e4;
var DYNAMIC_DRAW = 0x88e8;
var UNSIGNED_BYTE = 0x1401;
var UNSIGNED_SHORT = 0x1403;
var UNSIGNED_INT = 0x1405;
var FLOAT = 0x1406;
/** end of goog.webgl constants
 */ /**
 * @const
 * @type {Array<string>}
 */ var CONTEXT_IDS = [
    "experimental-webgl",
    "webgl",
    "webkit-3d",
    "moz-webgl"
];
function getContext(canvas, opt_attributes) {
    var attributes = (0, _objJs.assign)({
        preserveDrawingBuffer: true,
        antialias: (0, _hasJs.SAFARI_BUG_237906) ? false : true
    }, opt_attributes);
    var ii = CONTEXT_IDS.length;
    for(var i = 0; i < ii; ++i)try {
        var context = canvas.getContext(CONTEXT_IDS[i], attributes);
        if (context) return context;
    } catch (e) {
    // pass
    }
    return null;
}
/**
 * @type {Array<string>}
 */ var supportedExtensions;
function getSupportedExtensions() {
    if (!supportedExtensions) {
        var canvas = document.createElement("canvas");
        var gl = getContext(canvas);
        if (gl) supportedExtensions = gl.getSupportedExtensions();
    }
    return supportedExtensions;
}

},{"./has.js":"6BDNi","./obj.js":"3ssAG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d36Vl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WebGLWorkerMessageType", ()=>WebGLWorkerMessageType);
/**
 * An object holding positions both in an index and a vertex buffer.
 * @typedef {Object} BufferPositions
 * @property {number} vertexPosition Position in the vertex buffer
 * @property {number} indexPosition Position in the index buffer
 */ /**
 * Pushes a quad (two triangles) based on a point geometry
 * @param {Float32Array} instructions Array of render instructions for points.
 * @param {number} elementIndex Index from which render instructions will be read.
 * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.
 * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.
 * @param {number} customAttributesCount Amount of custom attributes for each element.
 * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.
 * @return {BufferPositions} New buffer positions where to write next
 * @property {number} vertexPosition New position in the vertex buffer where future writes should start.
 * @property {number} indexPosition New position in the index buffer where future writes should start.
 * @private
 */ parcelHelpers.export(exports, "writePointFeatureToBuffers", ()=>writePointFeatureToBuffers);
/**
 * Returns a texture of 1x1 pixel, white
 * @private
 * @return {ImageData} Image data.
 */ parcelHelpers.export(exports, "getBlankImageData", ()=>getBlankImageData);
/**
 * Generates a color array based on a numerical id
 * Note: the range for each component is 0 to 1 with 256 steps
 * @param {number} id Id
 * @param {Array<number>} [opt_array] Reusable array
 * @return {Array<number>} Color array containing the encoded id
 */ parcelHelpers.export(exports, "colorEncodeId", ()=>colorEncodeId);
/**
 * Reads an id from a color-encoded array
 * Note: the expected range for each component is 0 to 1 with 256 steps.
 * @param {Array<number>} color Color array containing the encoded id
 * @return {number} Decoded id
 */ parcelHelpers.export(exports, "colorDecodeId", ()=>colorDecodeId);
/**
 * @module ol/renderer/webgl/Layer
 */ var _propertyJs = require("../../layer/Property.js");
var _propertyJsDefault = parcelHelpers.interopDefault(_propertyJs);
var _layerJs = require("../Layer.js");
var _layerJsDefault = parcelHelpers.interopDefault(_layerJs);
var _eventJs = require("../../render/Event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _eventTypeJs = require("../../render/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _helperJs = require("../../webgl/Helper.js");
var _helperJsDefault = parcelHelpers.interopDefault(_helperJs);
var _transformJs = require("../../transform.js");
var _extentJs = require("../../extent.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var WebGLWorkerMessageType = {
    GENERATE_BUFFERS: "GENERATE_BUFFERS"
};
/**
 * @typedef {Object} WebGLWorkerGenerateBuffersMessage
 * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.
 * When the buffers are generated, the worked will send a message of the same type to the main thread, with
 * the generated buffers in it.
 * Note that any addition properties present in the message *will* be sent back to the main thread.
 * @property {WebGLWorkerMessageType} type Message type
 * @property {ArrayBuffer} renderInstructions Render instructions raw binary buffer.
 * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).
 * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).
 * @property {number} [customAttributesCount] Amount of custom attributes count in the render instructions.
 */ /**
 * @typedef {Object} PostProcessesOptions
 * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than
 * the main canvas that will then be sampled up (useful for saving resource on blur steps).
 * @property {string} [vertexShader] Vertex shader source
 * @property {string} [fragmentShader] Fragment shader source
 * @property {Object<string,import("../../webgl/Helper").UniformValue>} [uniforms] Uniform definitions for the post process step
 */ /**
 * @typedef {Object} Options
 * @property {Object<string,import("../../webgl/Helper").UniformValue>} [uniforms] Uniform definitions for the post process steps
 * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions
 */ /**
 * @classdesc
 * Base WebGL renderer class.
 * Holds all logic related to data manipulation & some common rendering logic
 * @template {import("../../layer/Layer.js").default} LayerType
 * @extends {LayerRenderer<LayerType>}
 */ var WebGLLayerRenderer = /** @class */ function(_super) {
    __extends(WebGLLayerRenderer1, _super);
    /**
     * @param {LayerType} layer Layer.
     * @param {Options} [opt_options] Options.
     */ function WebGLLayerRenderer1(layer, opt_options) {
        var _this = _super.call(this, layer) || this;
        var options = opt_options || {};
        /**
         * The transform for viewport CSS pixels to rendered pixels.  This transform is only
         * set before dispatching rendering events.
         * @private
         * @type {import("../../transform.js").Transform}
         */ _this.inversePixelTransform_ = (0, _transformJs.create)();
        /**
         * @private
         * @type {CanvasRenderingContext2D}
         */ _this.pixelContext_ = null;
        /**
         * @private
         */ _this.postProcesses_ = options.postProcesses;
        /**
         * @private
         */ _this.uniforms_ = options.uniforms;
        /**
         * @type {WebGLHelper}
         * @protected
         */ _this.helper;
        layer.addChangeListener((0, _propertyJsDefault.default).MAP, _this.removeHelper.bind(_this));
        _this.dispatchPreComposeEvent = _this.dispatchPreComposeEvent.bind(_this);
        _this.dispatchPostComposeEvent = _this.dispatchPostComposeEvent.bind(_this);
        return _this;
    }
    /**
     * @param {WebGLRenderingContext} context The WebGL rendering context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */ WebGLLayerRenderer1.prototype.dispatchPreComposeEvent = function(context, frameState) {
        var layer = this.getLayer();
        if (layer.hasListener((0, _eventTypeJsDefault.default).PRECOMPOSE)) {
            var event_1 = new (0, _eventJsDefault.default)((0, _eventTypeJsDefault.default).PRECOMPOSE, undefined, frameState, context);
            layer.dispatchEvent(event_1);
        }
    };
    /**
     * @param {WebGLRenderingContext} context The WebGL rendering context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */ WebGLLayerRenderer1.prototype.dispatchPostComposeEvent = function(context, frameState) {
        var layer = this.getLayer();
        if (layer.hasListener((0, _eventTypeJsDefault.default).POSTCOMPOSE)) {
            var event_2 = new (0, _eventJsDefault.default)((0, _eventTypeJsDefault.default).POSTCOMPOSE, undefined, frameState, context);
            layer.dispatchEvent(event_2);
        }
    };
    /**
     * Reset options (only handles uniforms).
     * @param {Options} options Options.
     */ WebGLLayerRenderer1.prototype.reset = function(options) {
        this.uniforms_ = options.uniforms;
        if (this.helper) this.helper.setUniforms(this.uniforms_);
    };
    /**
     * @protected
     */ WebGLLayerRenderer1.prototype.removeHelper = function() {
        if (this.helper) {
            this.helper.dispose();
            delete this.helper;
        }
    };
    /**
     * Determine whether renderFrame should be called.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */ WebGLLayerRenderer1.prototype.prepareFrame = function(frameState) {
        if (this.getLayer().getRenderSource()) {
            var incrementGroup = true;
            var groupNumber = -1;
            var className = void 0;
            for(var i = 0, ii = frameState.layerStatesArray.length; i < ii; i++){
                var layer = frameState.layerStatesArray[i].layer;
                var renderer = layer.getRenderer();
                if (!(renderer instanceof WebGLLayerRenderer1)) {
                    incrementGroup = true;
                    continue;
                }
                var layerClassName = layer.getClassName();
                if (incrementGroup || layerClassName !== className) {
                    groupNumber += 1;
                    incrementGroup = false;
                }
                className = layerClassName;
                if (renderer === this) break;
            }
            var canvasCacheKey = "map/" + frameState.mapId + "/group/" + groupNumber;
            if (!this.helper || !this.helper.canvasCacheKeyMatches(canvasCacheKey)) {
                this.removeHelper();
                this.helper = new (0, _helperJsDefault.default)({
                    postProcesses: this.postProcesses_,
                    uniforms: this.uniforms_,
                    canvasCacheKey: canvasCacheKey
                });
                if (className) this.helper.getCanvas().className = className;
                this.afterHelperCreated();
            }
        }
        return this.prepareFrameInternal(frameState);
    };
    /**
     * @protected
     */ WebGLLayerRenderer1.prototype.afterHelperCreated = function() {};
    /**
     * Determine whether renderFrame should be called.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     * @protected
     */ WebGLLayerRenderer1.prototype.prepareFrameInternal = function(frameState) {
        return true;
    };
    /**
     * Clean up.
     */ WebGLLayerRenderer1.prototype.disposeInternal = function() {
        this.removeHelper();
        _super.prototype.disposeInternal.call(this);
    };
    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {WebGLRenderingContext} context The rendering context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */ WebGLLayerRenderer1.prototype.dispatchRenderEvent_ = function(type, context, frameState) {
        var layer = this.getLayer();
        if (layer.hasListener(type)) {
            (0, _transformJs.compose)(this.inversePixelTransform_, 0, 0, frameState.pixelRatio, -frameState.pixelRatio, 0, 0, -frameState.size[1]);
            var event_3 = new (0, _eventJsDefault.default)(type, this.inversePixelTransform_, frameState, context);
            layer.dispatchEvent(event_3);
        }
    };
    /**
     * @param {WebGLRenderingContext} context The rendering context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */ WebGLLayerRenderer1.prototype.preRender = function(context, frameState) {
        this.dispatchRenderEvent_((0, _eventTypeJsDefault.default).PRERENDER, context, frameState);
    };
    /**
     * @param {WebGLRenderingContext} context The rendering context.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @protected
     */ WebGLLayerRenderer1.prototype.postRender = function(context, frameState) {
        this.dispatchRenderEvent_((0, _eventTypeJsDefault.default).POSTRENDER, context, frameState);
    };
    /**
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @param {import("../../PluggableMap.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
     *    location, null will be returned.  If there is data, but pixel values cannot be
     *    returned, and empty array will be returned.
     */ WebGLLayerRenderer1.prototype.getDataAtPixel = function(pixel, frameState, hitTolerance) {
        var renderPixel = (0, _transformJs.apply)([
            frameState.pixelRatio,
            0,
            0,
            frameState.pixelRatio,
            0,
            0
        ], pixel.slice());
        var gl = this.helper.getGL();
        if (!gl) return null;
        var layer = this.getLayer();
        var layerExtent = layer.getExtent();
        if (layerExtent) {
            var renderCoordinate = (0, _transformJs.apply)(frameState.pixelToCoordinateTransform, pixel.slice());
            /** get only data inside of the layer extent */ if (!(0, _extentJs.containsCoordinate)(layerExtent, renderCoordinate)) return null;
        }
        var attributes = gl.getContextAttributes();
        if (!attributes || !attributes.preserveDrawingBuffer) // we assume there is data at the given pixel (although there might not be)
        return new Uint8Array();
        var x = Math.round(renderPixel[0]);
        var y = Math.round(renderPixel[1]);
        var pixelContext = this.pixelContext_;
        if (!pixelContext) {
            var pixelCanvas = document.createElement("canvas");
            pixelCanvas.width = 1;
            pixelCanvas.height = 1;
            pixelContext = pixelCanvas.getContext("2d");
            this.pixelContext_ = pixelContext;
        }
        pixelContext.clearRect(0, 0, 1, 1);
        var data;
        try {
            pixelContext.drawImage(gl.canvas, x, y, 1, 1, 0, 0, 1, 1);
            data = pixelContext.getImageData(0, 0, 1, 1).data;
        } catch (err) {
            return data;
        }
        if (data[3] === 0) return null;
        return data;
    };
    return WebGLLayerRenderer1;
}((0, _layerJsDefault.default));
var tmpArray_ = [];
var bufferPositions_ = {
    vertexPosition: 0,
    indexPosition: 0
};
function writePointVertex(buffer, pos, x, y, index) {
    buffer[pos + 0] = x;
    buffer[pos + 1] = y;
    buffer[pos + 2] = index;
}
function writePointFeatureToBuffers(instructions, elementIndex, vertexBuffer, indexBuffer, customAttributesCount, bufferPositions) {
    // This is for x, y and index
    var baseVertexAttrsCount = 3;
    var baseInstructionsCount = 2;
    var stride = baseVertexAttrsCount + customAttributesCount;
    var x = instructions[elementIndex + 0];
    var y = instructions[elementIndex + 1];
    // read custom numerical attributes on the feature
    var customAttrs = tmpArray_;
    customAttrs.length = customAttributesCount;
    for(var i = 0; i < customAttrs.length; i++)customAttrs[i] = instructions[elementIndex + baseInstructionsCount + i];
    var vPos = bufferPositions ? bufferPositions.vertexPosition : 0;
    var iPos = bufferPositions ? bufferPositions.indexPosition : 0;
    var baseIndex = vPos / stride;
    // push vertices for each of the four quad corners (first standard then custom attributes)
    writePointVertex(vertexBuffer, vPos, x, y, 0);
    customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);
    vPos += stride;
    writePointVertex(vertexBuffer, vPos, x, y, 1);
    customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);
    vPos += stride;
    writePointVertex(vertexBuffer, vPos, x, y, 2);
    customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);
    vPos += stride;
    writePointVertex(vertexBuffer, vPos, x, y, 3);
    customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);
    vPos += stride;
    indexBuffer[iPos++] = baseIndex;
    indexBuffer[iPos++] = baseIndex + 1;
    indexBuffer[iPos++] = baseIndex + 3;
    indexBuffer[iPos++] = baseIndex + 1;
    indexBuffer[iPos++] = baseIndex + 2;
    indexBuffer[iPos++] = baseIndex + 3;
    bufferPositions_.vertexPosition = vPos;
    bufferPositions_.indexPosition = iPos;
    return bufferPositions_;
}
function getBlankImageData() {
    var canvas = document.createElement("canvas");
    var image = canvas.getContext("2d").createImageData(1, 1);
    image.data[0] = 255;
    image.data[1] = 255;
    image.data[2] = 255;
    image.data[3] = 255;
    return image;
}
function colorEncodeId(id, opt_array) {
    var array = opt_array || [];
    var radix = 256;
    var divide = radix - 1;
    array[0] = Math.floor(id / radix / radix / radix) / divide;
    array[1] = Math.floor(id / radix / radix) % radix / divide;
    array[2] = Math.floor(id / radix) % radix / divide;
    array[3] = id % radix / divide;
    return array;
}
function colorDecodeId(color) {
    var id = 0;
    var radix = 256;
    var mult = radix - 1;
    id += Math.round(color[0] * radix * radix * radix * mult);
    id += Math.round(color[1] * radix * radix * mult);
    id += Math.round(color[2] * radix * mult);
    id += Math.round(color[3] * mult);
    return id;
}
exports.default = WebGLLayerRenderer;

},{"../../layer/Property.js":"kCuCK","../Layer.js":"b6gGa","../../render/Event.js":"bpzid","../../render/EventType.js":"5G9JA","../../webgl/Helper.js":"9XgW2","../../transform.js":"1BqUf","../../extent.js":"6YrVc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9XgW2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ShaderType", ()=>ShaderType);
parcelHelpers.export(exports, "DefaultUniform", ()=>DefaultUniform);
parcelHelpers.export(exports, "AttributeType", ()=>AttributeType);
/**
 * Compute a stride in bytes based on a list of attributes
 * @param {Array<AttributeDescription>} attributes Ordered list of attributes
 * @return {number} Stride, ie amount of values for each vertex in the vertex buffer
 * @api
 */ parcelHelpers.export(exports, "computeAttributesStride", ()=>computeAttributesStride);
/**
 * @module ol/webgl/Helper
 */ var _contextEventTypeJs = require("../webgl/ContextEventType.js");
var _contextEventTypeJsDefault = parcelHelpers.interopDefault(_contextEventTypeJs);
var _disposableJs = require("../Disposable.js");
var _disposableJsDefault = parcelHelpers.interopDefault(_disposableJs);
var _postProcessingPassJs = require("./PostProcessingPass.js");
var _postProcessingPassJsDefault = parcelHelpers.interopDefault(_postProcessingPassJs);
var _webglJs = require("../webgl.js");
var _objJs = require("../obj.js");
var _transformJs = require("../transform.js");
var _mat4Js = require("../vec/mat4.js");
var _utilJs = require("../util.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var ShaderType = {
    FRAGMENT_SHADER: 0x8b30,
    VERTEX_SHADER: 0x8b31
};
var DefaultUniform = {
    PROJECTION_MATRIX: "u_projectionMatrix",
    OFFSET_SCALE_MATRIX: "u_offsetScaleMatrix",
    OFFSET_ROTATION_MATRIX: "u_offsetRotateMatrix",
    TIME: "u_time",
    ZOOM: "u_zoom",
    RESOLUTION: "u_resolution"
};
var AttributeType = {
    UNSIGNED_BYTE: (0, _webglJs.UNSIGNED_BYTE),
    UNSIGNED_SHORT: (0, _webglJs.UNSIGNED_SHORT),
    UNSIGNED_INT: (0, _webglJs.UNSIGNED_INT),
    FLOAT: (0, _webglJs.FLOAT)
};
/**
 * Description of an attribute in a buffer
 * @typedef {Object} AttributeDescription
 * @property {string} name Attribute name to use in shaders
 * @property {number} size Number of components per attributes
 * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is
 * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).
 * Default is `FLOAT`.
 */ /**
 * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|import("../transform").Transform} UniformLiteralValue
 */ /**
 * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning
 * one of the previous types.
 * @typedef {UniformLiteralValue|function(import("../PluggableMap.js").FrameState):UniformLiteralValue} UniformValue
 */ /**
 * @typedef {Object} PostProcessesOptions
 * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than
 * the main canvas which will then be sampled up (useful for saving resource on blur steps).
 * @property {string} [vertexShader] Vertex shader source
 * @property {string} [fragmentShader] Fragment shader source
 * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step
 */ /**
 * @typedef {Object} Options
 * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform
 * names in the provided or default shaders.
 * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions
 * @property {string} [canvasCacheKey] The cache key for the canvas.
 */ /**
 * @typedef {Object} UniformInternalDescription
 * @property {string} name Name
 * @property {UniformValue} [value] Value
 * @property {WebGLTexture} [texture] Texture
 * @private
 */ /**
 * @typedef {Object} CanvasCacheItem
 * @property {HTMLCanvasElement} canvas Canvas element.
 * @property {number} users The count of users of this canvas.
 */ /**
 * @type {Object<string,CanvasCacheItem>}
 */ var canvasCache = {};
/**
 * @param {string} key The cache key for the canvas.
 * @return {string} The shared cache key.
 */ function getSharedCanvasCacheKey(key) {
    return "shared/" + key;
}
var uniqueCanvasCacheKeyCount = 0;
/**
 * @return {string} The unique cache key.
 */ function getUniqueCanvasCacheKey() {
    var key = "unique/" + uniqueCanvasCacheKeyCount;
    uniqueCanvasCacheKeyCount += 1;
    return key;
}
/**
 * @param {string} key The cache key for the canvas.
 * @return {HTMLCanvasElement} The canvas.
 */ function getCanvas(key) {
    var cacheItem = canvasCache[key];
    if (!cacheItem) {
        var canvas = document.createElement("canvas");
        canvas.style.position = "absolute";
        canvas.style.left = "0";
        cacheItem = {
            users: 0,
            canvas: canvas
        };
        canvasCache[key] = cacheItem;
    }
    cacheItem.users += 1;
    return cacheItem.canvas;
}
/**
 * @param {string} key The cache key for the canvas.
 */ function releaseCanvas(key) {
    var cacheItem = canvasCache[key];
    if (!cacheItem) return;
    cacheItem.users -= 1;
    if (cacheItem.users > 0) return;
    var canvas = cacheItem.canvas;
    var gl = (0, _webglJs.getContext)(canvas);
    var extension = gl.getExtension("WEBGL_lose_context");
    if (extension) extension.loseContext();
    delete canvasCache[key];
}
/**
 * @classdesc
 * This class is intended to provide low-level functions related to WebGL rendering, so that accessing
 * directly the WebGL API should not be required anymore.
 *
 * Several operations are handled by the `WebGLHelper` class:
 *
 * ### Define custom shaders and uniforms
 *
 *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:
 *
 *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).
 *   Outputs are:
 *
 *   * `gl_Position`: position of the vertex in screen space
 *
 *   * Varyings usually prefixed with `v_` are passed on to the fragment shader
 *
 *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.
 *
 *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that
 *   can be changed at every frame and can be of type float, arrays of float or images.
 *
 *   Shaders must be compiled and assembled into a program like so:
 *   ```js
 *   // here we simply create two shaders and assemble them in a program which is then used
 *   // for subsequent rendering calls
 *   const vertexShader = new WebGLVertex(VERTEX_SHADER);
 *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);
 *   const program = this.context.getProgram(fragmentShader, vertexShader);
 *   helper.useProgram(this.program);
 *   ```
 *
 *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.
 *   You can also change their value along the way like so:
 *   ```js
 *   helper.setUniformFloatValue('u_value', valueAsNumber);
 *   ```
 *
 * ### Defining post processing passes
 *
 *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas
 *   while applying special effects in screen space.
 *   Typical uses are: blurring, color manipulation, depth of field, filtering...
 *
 *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.
 *   A post process step accepts the following options:
 *
 *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.
 *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.
 *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.
 *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.
 *
 *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.
 *
 * ### Binding WebGL buffers and flushing data into them
 *
 *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.
 *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.
 *   This is done using {@link bindBuffer}.
 *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using
 *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.
 *
 *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}
 *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).
 *
 *   Examples below:
 *   ```js
 *   // at initialization phase
 *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);
 *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);
 *
 *   // when array values have changed
 *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);
 *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);
 *
 *   // at rendering phase
 *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);
 *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);
 *   ```
 *
 * ### Specifying attributes
 *
 *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).
 *   Attributes are used to specify these uses. Specify the attribute names with
 *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes enableAttributes()} (see code snippet below).
 *
 *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.
 *   ```js
 *   // here we indicate that the data array has the following structure:
 *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]
 *   helper.enableAttributes([
 *     {
 *        name: 'a_position',
 *        size: 2
 *     },
 *     {
 *       name: 'a_offset',
 *       size: 2
 *     },
 *     {
 *       name: 'a_texCoord',
 *       size: 2
 *     }
 *   ])
 *   ```
 *
 * ### Rendering primitives
 *
 *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.
 *   ```js
 *   // frame preparation step
 *   helper.prepareDraw(frameState);
 *
 *   // call this for every data array that has to be rendered on screen
 *   helper.drawElements(0, this.indicesBuffer.getArray().length);
 *
 *   // finalize the rendering by applying post processes
 *   helper.finalizeDraw(frameState);
 *   ```
 *
 * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.
 *
 * @api
 */ var WebGLHelper = /** @class */ function(_super) {
    __extends(WebGLHelper1, _super);
    /**
     * @param {Options} [opt_options] Options.
     */ function WebGLHelper1(opt_options) {
        var _this = _super.call(this) || this;
        var options1 = opt_options || {};
        /** @private */ _this.boundHandleWebGLContextLost_ = _this.handleWebGLContextLost.bind(_this);
        /** @private */ _this.boundHandleWebGLContextRestored_ = _this.handleWebGLContextRestored.bind(_this);
        /**
         * @private
         * @type {string}
         */ _this.canvasCacheKey_ = options1.canvasCacheKey ? getSharedCanvasCacheKey(options1.canvasCacheKey) : getUniqueCanvasCacheKey();
        /**
         * @private
         * @type {HTMLCanvasElement}
         */ _this.canvas_ = getCanvas(_this.canvasCacheKey_);
        /**
         * @private
         * @type {WebGLRenderingContext}
         */ _this.gl_ = (0, _webglJs.getContext)(_this.canvas_);
        /**
         * @private
         * @type {!Object<string, BufferCacheEntry>}
         */ _this.bufferCache_ = {};
        /**
         * @private
         * @type {Object<string, Object>}
         */ _this.extensionCache_ = {};
        /**
         * @private
         * @type {WebGLProgram}
         */ _this.currentProgram_ = null;
        _this.canvas_.addEventListener((0, _contextEventTypeJsDefault.default).LOST, _this.boundHandleWebGLContextLost_);
        _this.canvas_.addEventListener((0, _contextEventTypeJsDefault.default).RESTORED, _this.boundHandleWebGLContextRestored_);
        /**
         * @private
         * @type {import("../transform.js").Transform}
         */ _this.offsetRotateMatrix_ = (0, _transformJs.create)();
        /**
         * @private
         * @type {import("../transform.js").Transform}
         */ _this.offsetScaleMatrix_ = (0, _transformJs.create)();
        /**
         * @private
         * @type {Array<number>}
         */ _this.tmpMat4_ = (0, _mat4Js.create)();
        /**
         * @private
         * @type {Object<string, WebGLUniformLocation>}
         */ _this.uniformLocations_ = {};
        /**
         * @private
         * @type {Object<string, number>}
         */ _this.attribLocations_ = {};
        /**
         * Holds info about custom uniforms used in the post processing pass.
         * If the uniform is a texture, the WebGL Texture object will be stored here.
         * @type {Array<UniformInternalDescription>}
         * @private
         */ _this.uniforms_ = [];
        if (options1.uniforms) _this.setUniforms(options1.uniforms);
        var gl = _this.getGL();
        /**
         * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the
         * options. If no post process was given, a default one is used (so as not to have to make an exception to
         * the frame buffer logic).
         * @type {Array<WebGLPostProcessingPass>}
         * @private
         */ _this.postProcessPasses_ = options1.postProcesses ? options1.postProcesses.map(function(options) {
            return new (0, _postProcessingPassJsDefault.default)({
                webGlContext: gl,
                scaleRatio: options.scaleRatio,
                vertexShader: options.vertexShader,
                fragmentShader: options.fragmentShader,
                uniforms: options.uniforms
            });
        }) : [
            new (0, _postProcessingPassJsDefault.default)({
                webGlContext: gl
            })
        ];
        /**
         * @type {string|null}
         * @private
         */ _this.shaderCompileErrors_ = null;
        /**
         * @type {number}
         * @private
         */ _this.startTime_ = Date.now();
        return _this;
    }
    /**
     * @param {Object<string, UniformValue>} uniforms Uniform definitions.
     */ WebGLHelper1.prototype.setUniforms = function(uniforms) {
        this.uniforms_ = [];
        for(var name_1 in uniforms)this.uniforms_.push({
            name: name_1,
            value: uniforms[name_1]
        });
        this.uniformLocations_ = {};
    };
    /**
     * @param {string} canvasCacheKey The canvas cache key.
     * @return {boolean} The provided key matches the one this helper was constructed with.
     */ WebGLHelper1.prototype.canvasCacheKeyMatches = function(canvasCacheKey) {
        return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);
    };
    /**
     * Get a WebGL extension.  If the extension is not supported, null is returned.
     * Extensions are cached after they are enabled for the first time.
     * @param {string} name The extension name.
     * @return {Object|null} The extension or null if not supported.
     */ WebGLHelper1.prototype.getExtension = function(name) {
        if (name in this.extensionCache_) return this.extensionCache_[name];
        var extension = this.gl_.getExtension(name);
        this.extensionCache_[name] = extension;
        return extension;
    };
    /**
     * Just bind the buffer if it's in the cache. Otherwise create
     * the WebGL buffer, bind it, populate it, and add an entry to
     * the cache.
     * @param {import("./Buffer").default} buffer Buffer.
     * @api
     */ WebGLHelper1.prototype.bindBuffer = function(buffer) {
        var gl = this.getGL();
        var bufferKey = (0, _utilJs.getUid)(buffer);
        var bufferCache = this.bufferCache_[bufferKey];
        if (!bufferCache) {
            var webGlBuffer = gl.createBuffer();
            bufferCache = {
                buffer: buffer,
                webGlBuffer: webGlBuffer
            };
            this.bufferCache_[bufferKey] = bufferCache;
        }
        gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);
    };
    /**
     * Update the data contained in the buffer array; this is required for the
     * new data to be rendered
     * @param {import("./Buffer").default} buffer Buffer.
     * @api
     */ WebGLHelper1.prototype.flushBufferData = function(buffer) {
        var gl = this.getGL();
        this.bindBuffer(buffer);
        gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());
    };
    /**
     * @param {import("./Buffer.js").default} buf Buffer.
     */ WebGLHelper1.prototype.deleteBuffer = function(buf) {
        var gl = this.getGL();
        var bufferKey = (0, _utilJs.getUid)(buf);
        var bufferCacheEntry = this.bufferCache_[bufferKey];
        if (bufferCacheEntry && !gl.isContextLost()) gl.deleteBuffer(bufferCacheEntry.webGlBuffer);
        delete this.bufferCache_[bufferKey];
    };
    /**
     * Clean up.
     */ WebGLHelper1.prototype.disposeInternal = function() {
        this.canvas_.removeEventListener((0, _contextEventTypeJsDefault.default).LOST, this.boundHandleWebGLContextLost_);
        this.canvas_.removeEventListener((0, _contextEventTypeJsDefault.default).RESTORED, this.boundHandleWebGLContextRestored_);
        releaseCanvas(this.canvasCacheKey_);
        delete this.gl_;
        delete this.canvas_;
    };
    /**
     * Clear the buffer & set the viewport to draw.
     * Post process passes will be initialized here, the first one being bound as a render target for
     * subsequent draw calls.
     * @param {import("../PluggableMap.js").FrameState} frameState current frame state
     * @param {boolean} [opt_disableAlphaBlend] If true, no alpha blending will happen.
     * @api
     */ WebGLHelper1.prototype.prepareDraw = function(frameState, opt_disableAlphaBlend) {
        var gl = this.getGL();
        var canvas = this.getCanvas();
        var size = frameState.size;
        var pixelRatio = frameState.pixelRatio;
        canvas.width = size[0] * pixelRatio;
        canvas.height = size[1] * pixelRatio;
        canvas.style.width = size[0] + "px";
        canvas.style.height = size[1] + "px";
        gl.useProgram(this.currentProgram_);
        // loop backwards in post processes list
        for(var i = this.postProcessPasses_.length - 1; i >= 0; i--)this.postProcessPasses_[i].init(frameState);
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.clearColor(0.0, 0.0, 0.0, 0.0);
        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.enable(gl.BLEND);
        gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);
        gl.useProgram(this.currentProgram_);
        this.applyFrameState(frameState);
        this.applyUniforms(frameState);
    };
    /**
     * Clear the render target & bind it for future draw operations.
     * This is similar to `prepareDraw`, only post processes will not be applied.
     * Note: the whole viewport will be drawn to the render target, regardless of its size.
     * @param {import("../PluggableMap.js").FrameState} frameState current frame state
     * @param {import("./RenderTarget.js").default} renderTarget Render target to draw to
     * @param {boolean} [opt_disableAlphaBlend] If true, no alpha blending will happen.
     */ WebGLHelper1.prototype.prepareDrawToRenderTarget = function(frameState, renderTarget, opt_disableAlphaBlend) {
        var gl = this.getGL();
        var size = renderTarget.getSize();
        gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());
        gl.viewport(0, 0, size[0], size[1]);
        gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());
        gl.clearColor(0.0, 0.0, 0.0, 0.0);
        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.enable(gl.BLEND);
        gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);
        gl.useProgram(this.currentProgram_);
        this.applyFrameState(frameState);
        this.applyUniforms(frameState);
    };
    /**
     * Execute a draw call based on the currently bound program, texture, buffers, attributes.
     * @param {number} start Start index.
     * @param {number} end End index.
     * @api
     */ WebGLHelper1.prototype.drawElements = function(start, end) {
        var gl = this.getGL();
        this.getExtension("OES_element_index_uint");
        var elementType = gl.UNSIGNED_INT;
        var elementSize = 4;
        var numItems = end - start;
        var offsetInBytes = start * elementSize;
        gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);
    };
    /**
     * Apply the successive post process passes which will eventually render to the actual canvas.
     * @param {import("../PluggableMap.js").FrameState} frameState current frame state
     * @param {function(WebGLRenderingContext, import("../PluggableMap.js").FrameState):void} [preCompose] Called before composing.
     * @param {function(WebGLRenderingContext, import("../PluggableMap.js").FrameState):void} [postCompose] Called before composing.
     */ WebGLHelper1.prototype.finalizeDraw = function(frameState, preCompose, postCompose) {
        // apply post processes using the next one as target
        for(var i = 0, ii = this.postProcessPasses_.length; i < ii; i++)if (i === ii - 1) this.postProcessPasses_[i].apply(frameState, null, preCompose, postCompose);
        else this.postProcessPasses_[i].apply(frameState, this.postProcessPasses_[i + 1]);
    };
    /**
     * @return {HTMLCanvasElement} Canvas.
     * @api
     */ WebGLHelper1.prototype.getCanvas = function() {
        return this.canvas_;
    };
    /**
     * Get the WebGL rendering context
     * @return {WebGLRenderingContext} The rendering context.
     * @api
     */ WebGLHelper1.prototype.getGL = function() {
        return this.gl_;
    };
    /**
     * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */ WebGLHelper1.prototype.applyFrameState = function(frameState) {
        var size = frameState.size;
        var rotation = frameState.viewState.rotation;
        var offsetScaleMatrix = (0, _transformJs.reset)(this.offsetScaleMatrix_);
        (0, _transformJs.scale)(offsetScaleMatrix, 2 / size[0], 2 / size[1]);
        var offsetRotateMatrix = (0, _transformJs.reset)(this.offsetRotateMatrix_);
        if (rotation !== 0) (0, _transformJs.rotate)(offsetRotateMatrix, -rotation);
        this.setUniformMatrixValue(DefaultUniform.OFFSET_SCALE_MATRIX, (0, _mat4Js.fromTransform)(this.tmpMat4_, offsetScaleMatrix));
        this.setUniformMatrixValue(DefaultUniform.OFFSET_ROTATION_MATRIX, (0, _mat4Js.fromTransform)(this.tmpMat4_, offsetRotateMatrix));
        this.setUniformFloatValue(DefaultUniform.TIME, (Date.now() - this.startTime_) * 0.001);
        this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);
        this.setUniformFloatValue(DefaultUniform.RESOLUTION, frameState.viewState.resolution);
    };
    /**
     * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */ WebGLHelper1.prototype.applyUniforms = function(frameState) {
        var gl = this.getGL();
        var value;
        var textureSlot = 0;
        this.uniforms_.forEach((function(uniform) {
            value = typeof uniform.value === "function" ? uniform.value(frameState) : uniform.value;
            // apply value based on type
            if (value instanceof HTMLCanvasElement || value instanceof HTMLImageElement || value instanceof ImageData) {
                // create a texture & put data
                if (!uniform.texture) {
                    uniform.prevValue = undefined;
                    uniform.texture = gl.createTexture();
                }
                gl.activeTexture(gl["TEXTURE".concat(textureSlot)]);
                gl.bindTexture(gl.TEXTURE_2D, uniform.texture);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                var imageReady = !(value instanceof HTMLImageElement) || /** @type {HTMLImageElement} */ value.complete;
                if (imageReady && uniform.prevValue !== value) {
                    uniform.prevValue = value;
                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);
                }
                // fill texture slots by increasing index
                gl.uniform1i(this.getUniformLocation(uniform.name), textureSlot++);
            } else if (Array.isArray(value) && value.length === 6) this.setUniformMatrixValue(uniform.name, (0, _mat4Js.fromTransform)(this.tmpMat4_, value));
            else if (Array.isArray(value) && value.length <= 4) switch(value.length){
                case 2:
                    gl.uniform2f(this.getUniformLocation(uniform.name), value[0], value[1]);
                    return;
                case 3:
                    gl.uniform3f(this.getUniformLocation(uniform.name), value[0], value[1], value[2]);
                    return;
                case 4:
                    gl.uniform4f(this.getUniformLocation(uniform.name), value[0], value[1], value[2], value[3]);
                    return;
                default:
                    return;
            }
            else if (typeof value === "number") gl.uniform1f(this.getUniformLocation(uniform.name), value);
        }).bind(this));
    };
    /**
     * Use a program.  If the program is already in use, this will return `false`.
     * @param {WebGLProgram} program Program.
     * @return {boolean} Changed.
     * @api
     */ WebGLHelper1.prototype.useProgram = function(program) {
        if (program == this.currentProgram_) return false;
        else {
            var gl = this.getGL();
            gl.useProgram(program);
            this.currentProgram_ = program;
            this.uniformLocations_ = {};
            this.attribLocations_ = {};
            return true;
        }
    };
    /**
     * Will attempt to compile a vertex or fragment shader based on source
     * On error, the shader will be returned but
     * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`
     * Use `gl.getShaderInfoLog(shader)` to have details
     * @param {string} source Shader source
     * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER
     * @return {WebGLShader} Shader object
     */ WebGLHelper1.prototype.compileShader = function(source, type) {
        var gl = this.getGL();
        var shader = gl.createShader(type);
        gl.shaderSource(shader, source);
        gl.compileShader(shader);
        return shader;
    };
    /**
     * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.
     * @param {string} fragmentShaderSource Fragment shader source.
     * @param {string} vertexShaderSource Vertex shader source.
     * @return {WebGLProgram} Program
     * @api
     */ WebGLHelper1.prototype.getProgram = function(fragmentShaderSource, vertexShaderSource) {
        var gl = this.getGL();
        var fragmentShader = this.compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);
        var vertexShader = this.compileShader(vertexShaderSource, gl.VERTEX_SHADER);
        var program = gl.createProgram();
        gl.attachShader(program, fragmentShader);
        gl.attachShader(program, vertexShader);
        gl.linkProgram(program);
        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
            var message = "Fragment shader compliation failed: ".concat(gl.getShaderInfoLog(fragmentShader));
            throw new Error(message);
        }
        gl.deleteShader(fragmentShader);
        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
            var message = "Vertex shader compilation failed: ".concat(gl.getShaderInfoLog(vertexShader));
            throw new Error(message);
        }
        gl.deleteShader(vertexShader);
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            var message = "GL program linking failed: ".concat(gl.getShaderInfoLog(vertexShader));
            throw new Error(message);
        }
        return program;
    };
    /**
     * Will get the location from the shader or the cache
     * @param {string} name Uniform name
     * @return {WebGLUniformLocation} uniformLocation
     * @api
     */ WebGLHelper1.prototype.getUniformLocation = function(name) {
        if (this.uniformLocations_[name] === undefined) this.uniformLocations_[name] = this.getGL().getUniformLocation(this.currentProgram_, name);
        return this.uniformLocations_[name];
    };
    /**
     * Will get the location from the shader or the cache
     * @param {string} name Attribute name
     * @return {number} attribLocation
     * @api
     */ WebGLHelper1.prototype.getAttributeLocation = function(name) {
        if (this.attribLocations_[name] === undefined) this.attribLocations_[name] = this.getGL().getAttribLocation(this.currentProgram_, name);
        return this.attribLocations_[name];
    };
    /**
     * Modifies the given transform to apply the rotation/translation/scaling of the given frame state.
     * The resulting transform can be used to convert world space coordinates to view coordinates.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../transform").Transform} transform Transform to update.
     * @return {import("../transform").Transform} The updated transform object.
     * @api
     */ WebGLHelper1.prototype.makeProjectionTransform = function(frameState, transform) {
        var size = frameState.size;
        var rotation = frameState.viewState.rotation;
        var resolution = frameState.viewState.resolution;
        var center = frameState.viewState.center;
        (0, _transformJs.reset)(transform);
        (0, _transformJs.compose)(transform, 0, 0, 2 / (resolution * size[0]), 2 / (resolution * size[1]), -rotation, -center[0], -center[1]);
        return transform;
    };
    /**
     * Give a value for a standard float uniform
     * @param {string} uniform Uniform name
     * @param {number} value Value
     * @api
     */ WebGLHelper1.prototype.setUniformFloatValue = function(uniform, value) {
        this.getGL().uniform1f(this.getUniformLocation(uniform), value);
    };
    /**
     * Give a value for a vec4 uniform
     * @param {string} uniform Uniform name
     * @param {Array<number>} value Array of length 4.
     */ WebGLHelper1.prototype.setUniformFloatVec4 = function(uniform, value) {
        this.getGL().uniform4fv(this.getUniformLocation(uniform), value);
    };
    /**
     * Give a value for a standard matrix4 uniform
     * @param {string} uniform Uniform name
     * @param {Array<number>} value Matrix value
     * @api
     */ WebGLHelper1.prototype.setUniformMatrixValue = function(uniform, value) {
        this.getGL().uniformMatrix4fv(this.getUniformLocation(uniform), false, value);
    };
    /**
     * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`
     * internally.
     * @param {string} attribName Attribute name
     * @param {number} size Number of components per attributes
     * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT
     * @param {number} stride Stride in bytes (0 means attribs are packed)
     * @param {number} offset Offset in bytes
     * @private
     */ WebGLHelper1.prototype.enableAttributeArray_ = function(attribName, size, type, stride, offset) {
        var location = this.getAttributeLocation(attribName);
        // the attribute has not been found in the shaders; do not enable it
        if (location < 0) return;
        this.getGL().enableVertexAttribArray(location);
        this.getGL().vertexAttribPointer(location, size, type, false, stride, offset);
    };
    /**
     * Will enable the following attributes to be read from the currently bound buffer,
     * i.e. tell the GPU where to read the different attributes in the buffer. An error in the
     * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.
     * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer
     * @api
     */ WebGLHelper1.prototype.enableAttributes = function(attributes) {
        var stride = computeAttributesStride(attributes);
        var offset = 0;
        for(var i = 0; i < attributes.length; i++){
            var attr = attributes[i];
            this.enableAttributeArray_(attr.name, attr.size, attr.type || (0, _webglJs.FLOAT), stride, offset);
            offset += attr.size * getByteSizeFromType(attr.type);
        }
    };
    /**
     * WebGL context was lost
     * @private
     */ WebGLHelper1.prototype.handleWebGLContextLost = function() {
        (0, _objJs.clear)(this.bufferCache_);
        this.currentProgram_ = null;
    };
    /**
     * WebGL context was restored
     * @private
     */ WebGLHelper1.prototype.handleWebGLContextRestored = function() {};
    /**
     * Will create or reuse a given webgl texture and apply the given size. If no image data
     * specified, the texture will be empty, otherwise image data will be used and the `size`
     * parameter will be ignored.
     * Note: wrap parameters are set to clamp to edge, min filter is set to linear.
     * @param {Array<number>} size Expected size of the texture
     * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [opt_data] Image data/object to bind to the texture
     * @param {WebGLTexture} [opt_texture] Existing texture to reuse
     * @return {WebGLTexture} The generated texture
     * @api
     */ WebGLHelper1.prototype.createTexture = function(size, opt_data, opt_texture) {
        var gl = this.getGL();
        var texture = opt_texture || gl.createTexture();
        // set params & size
        var level = 0;
        var internalFormat = gl.RGBA;
        var border = 0;
        var format = gl.RGBA;
        var type = gl.UNSIGNED_BYTE;
        gl.bindTexture(gl.TEXTURE_2D, texture);
        if (opt_data) gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, opt_data);
        else gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, size[0], size[1], border, format, type, null);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        return texture;
    };
    return WebGLHelper1;
}((0, _disposableJsDefault.default));
function computeAttributesStride(attributes) {
    var stride = 0;
    for(var i = 0; i < attributes.length; i++){
        var attr = attributes[i];
        stride += attr.size * getByteSizeFromType(attr.type);
    }
    return stride;
}
/**
 * Computes the size in byte of an attribute type.
 * @param {AttributeType} type Attribute type
 * @return {number} The size in bytes
 */ function getByteSizeFromType(type) {
    switch(type){
        case AttributeType.UNSIGNED_BYTE:
            return Uint8Array.BYTES_PER_ELEMENT;
        case AttributeType.UNSIGNED_SHORT:
            return Uint16Array.BYTES_PER_ELEMENT;
        case AttributeType.UNSIGNED_INT:
            return Uint32Array.BYTES_PER_ELEMENT;
        case AttributeType.FLOAT:
        default:
            return Float32Array.BYTES_PER_ELEMENT;
    }
}
exports.default = WebGLHelper;

},{"../webgl/ContextEventType.js":"Glphh","../Disposable.js":"c0oTM","./PostProcessingPass.js":"ijRmi","../webgl.js":"3P5v4","../obj.js":"3ssAG","../transform.js":"1BqUf","../vec/mat4.js":"7p8ap","../util.js":"pLBjQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Glphh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/webgl/ContextEventType
 */ /**
 * @enum {string}
 */ exports.default = {
    LOST: "webglcontextlost",
    RESTORED: "webglcontextrestored"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ijRmi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/webgl/PostProcessingPass
 */ var _utilJs = require("../util.js");
var DEFAULT_VERTEX_SHADER = "\n  precision mediump float;\n  \n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n  \n  uniform vec2 u_screenSize;\n   \n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n";
var DEFAULT_FRAGMENT_SHADER = "\n  precision mediump float;\n   \n  uniform sampler2D u_image;\n  uniform float u_opacity;\n   \n  varying vec2 v_texCoord;\n   \n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n";
/**
 * @typedef {Object} Options
 * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.
 * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than
 * the main canvas that will then be sampled up (useful for saving resource on blur steps).
 * @property {string} [vertexShader] Vertex shader source
 * @property {string} [fragmentShader] Fragment shader source
 * @property {Object<string,import("./Helper").UniformValue>} [uniforms] Uniform definitions for the post process step
 */ /**
 * @typedef {Object} UniformInternalDescription
 * @property {import("./Helper").UniformValue} value Value
 * @property {number} location Location
 * @property {WebGLTexture} [texture] Texture
 * @private
 */ /**
 * @classdesc
 * This class is used to define Post Processing passes with custom shaders and uniforms.
 * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.
 *
 * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that
 * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).
 * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.
 *
 * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be
 * premultiplied.
 *
 * Default shaders are shown hereafter:
 *
 * * Vertex shader:
 *
 *   ```
 *   precision mediump float;
 *
 *   attribute vec2 a_position;
 *   varying vec2 v_texCoord;
 *   varying vec2 v_screenCoord;
 *
 *   uniform vec2 u_screenSize;
 *
 *   void main() {
 *     v_texCoord = a_position * 0.5 + 0.5;
 *     v_screenCoord = v_texCoord * u_screenSize;
 *     gl_Position = vec4(a_position, 0.0, 1.0);
 *   }
 *   ```
 *
 * * Fragment shader:
 *
 *   ```
 *   precision mediump float;
 *
 *   uniform sampler2D u_image;
 *   uniform float u_opacity;
 *
 *   varying vec2 v_texCoord;
 *
 *   void main() {
 *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;
 *   }
 *   ```
 *
 * @api
 */ var WebGLPostProcessingPass = /** @class */ function() {
    /**
     * @param {Options} options Options.
     */ function WebGLPostProcessingPass1(options) {
        this.gl_ = options.webGlContext;
        var gl = this.gl_;
        this.scaleRatio_ = options.scaleRatio || 1;
        this.renderTargetTexture_ = gl.createTexture();
        this.renderTargetTextureSize_ = null;
        this.frameBuffer_ = gl.createFramebuffer();
        // compile the program for the frame buffer
        // TODO: make compilation errors show up
        var vertexShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);
        gl.compileShader(vertexShader);
        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);
        gl.compileShader(fragmentShader);
        this.renderTargetProgram_ = gl.createProgram();
        gl.attachShader(this.renderTargetProgram_, vertexShader);
        gl.attachShader(this.renderTargetProgram_, fragmentShader);
        gl.linkProgram(this.renderTargetProgram_);
        // bind the vertices buffer for the frame buffer
        this.renderTargetVerticesBuffer_ = gl.createBuffer();
        var verticesArray = [
            -1,
            -1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            1
        ];
        gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);
        this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, "a_position");
        this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, "u_screenSize");
        this.renderTargetOpacityLocation_ = gl.getUniformLocation(this.renderTargetProgram_, "u_opacity");
        this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, "u_image");
        /**
         * Holds info about custom uniforms used in the post processing pass
         * @type {Array<UniformInternalDescription>}
         * @private
         */ this.uniforms_ = [];
        options.uniforms && Object.keys(options.uniforms).forEach((function(name) {
            this.uniforms_.push({
                value: options.uniforms[name],
                location: gl.getUniformLocation(this.renderTargetProgram_, name)
            });
        }).bind(this));
    }
    /**
     * Get the WebGL rendering context
     * @return {WebGLRenderingContext} The rendering context.
     * @api
     */ WebGLPostProcessingPass1.prototype.getGL = function() {
        return this.gl_;
    };
    /**
     * Initialize the render target texture of the post process, make sure it is at the
     * right size and bind it as a render target for the next draw calls.
     * The last step to be initialized will be the one where the primitives are rendered.
     * @param {import("../PluggableMap.js").FrameState} frameState current frame state
     * @api
     */ WebGLPostProcessingPass1.prototype.init = function(frameState) {
        var gl = this.getGL();
        var textureSize = [
            gl.drawingBufferWidth * this.scaleRatio_,
            gl.drawingBufferHeight * this.scaleRatio_, 
        ];
        // rendering goes to my buffer
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());
        gl.viewport(0, 0, textureSize[0], textureSize[1]);
        // if size has changed: adjust canvas & render target texture
        if (!this.renderTargetTextureSize_ || this.renderTargetTextureSize_[0] !== textureSize[0] || this.renderTargetTextureSize_[1] !== textureSize[1]) {
            this.renderTargetTextureSize_ = textureSize;
            // create a new texture
            var level = 0;
            var internalFormat = gl.RGBA;
            var border = 0;
            var format = gl.RGBA;
            var type = gl.UNSIGNED_BYTE;
            var data = null;
            gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);
            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, textureSize[0], textureSize[1], border, format, type, data);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            // bind the texture to the framebuffer
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);
        }
    };
    /**
     * Render to the next postprocessing pass (or to the canvas if final pass).
     * @param {import("../PluggableMap.js").FrameState} frameState current frame state
     * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional
     * @param {function(WebGLRenderingContext, import("../PluggableMap.js").FrameState):void} [preCompose] Called before composing.
     * @param {function(WebGLRenderingContext, import("../PluggableMap.js").FrameState):void} [postCompose] Called before composing.
     * @api
     */ WebGLPostProcessingPass1.prototype.apply = function(frameState, nextPass, preCompose, postCompose) {
        var gl = this.getGL();
        var size = frameState.size;
        gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);
        if (!nextPass) {
            // clear the canvas if we are the first to render to it
            // and preserveDrawingBuffer is true
            var canvasId = (0, _utilJs.getUid)(gl.canvas);
            if (!frameState.renderTargets[canvasId]) {
                var attributes = gl.getContextAttributes();
                if (attributes && attributes.preserveDrawingBuffer) {
                    gl.clearColor(0.0, 0.0, 0.0, 0.0);
                    gl.clear(gl.COLOR_BUFFER_BIT);
                }
                frameState.renderTargets[canvasId] = true;
            }
        }
        gl.enable(gl.BLEND);
        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);
        gl.useProgram(this.renderTargetProgram_);
        gl.enableVertexAttribArray(this.renderTargetAttribLocation_);
        gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);
        gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);
        gl.uniform1i(this.renderTargetTextureLocation_, 0);
        var opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;
        gl.uniform1f(this.renderTargetOpacityLocation_, opacity);
        this.applyUniforms(frameState);
        if (preCompose) preCompose(gl, frameState);
        gl.drawArrays(gl.TRIANGLES, 0, 6);
        if (postCompose) postCompose(gl, frameState);
    };
    /**
     * @return {WebGLFramebuffer} Frame buffer
     * @api
     */ WebGLPostProcessingPass1.prototype.getFrameBuffer = function() {
        return this.frameBuffer_;
    };
    /**
     * Sets the custom uniforms based on what was given in the constructor.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     * @private
     */ WebGLPostProcessingPass1.prototype.applyUniforms = function(frameState) {
        var gl = this.getGL();
        var value;
        var textureSlot = 1;
        this.uniforms_.forEach(function(uniform) {
            value = typeof uniform.value === "function" ? uniform.value(frameState) : uniform.value;
            // apply value based on type
            if (value instanceof HTMLCanvasElement || value instanceof ImageData) {
                // create a texture & put data
                if (!uniform.texture) uniform.texture = gl.createTexture();
                gl.activeTexture(gl["TEXTURE".concat(textureSlot)]);
                gl.bindTexture(gl.TEXTURE_2D, uniform.texture);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                if (value instanceof ImageData) gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0, gl.UNSIGNED_BYTE, new Uint8Array(value.data));
                else gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);
                // fill texture slots
                gl.uniform1i(uniform.location, textureSlot++);
            } else if (Array.isArray(value)) switch(value.length){
                case 2:
                    gl.uniform2f(uniform.location, value[0], value[1]);
                    return;
                case 3:
                    gl.uniform3f(uniform.location, value[0], value[1], value[2]);
                    return;
                case 4:
                    gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);
                    return;
                default:
                    return;
            }
            else if (typeof value === "number") gl.uniform1f(uniform.location, value);
        });
    };
    return WebGLPostProcessingPass1;
}();
exports.default = WebGLPostProcessingPass;

},{"../util.js":"pLBjQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7p8ap":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/vec/mat4
 */ /**
 * @return {Array<number>} "4x4 matrix representing a 3D identity transform."
 */ parcelHelpers.export(exports, "create", ()=>create);
/**
 * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.
 * @param {import("../transform.js").Transform} transform Transformation matrix.
 * @return {Array<number>} "2D transformation matrix as flattened 4x4 matrix."
 */ parcelHelpers.export(exports, "fromTransform", ()=>fromTransform);
function create() {
    return [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
    ];
}
function fromTransform(mat4, transform) {
    mat4[0] = transform[0];
    mat4[1] = transform[1];
    mat4[4] = transform[2];
    mat4[5] = transform[3];
    mat4[12] = transform[4];
    mat4[13] = transform[5];
    return mat4;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"42MA4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A wrapper class to simplify rendering to a texture instead of the final canvas
 * @module ol/webgl/RenderTarget
 */ var _arrayJs = require("../array.js");
// for pixel color reading
var tmpArray4 = new Uint8Array(4);
/**
 * @classdesc
 * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,
 * simplifying initialization and binding for rendering.
 * @api
 */ var WebGLRenderTarget = /** @class */ function() {
    /**
     * @param {import("./Helper.js").default} helper WebGL helper; mandatory.
     * @param {Array<number>} [opt_size] Expected size of the render target texture; note: this can be changed later on.
     */ function WebGLRenderTarget1(helper, opt_size) {
        /**
         * @private
         * @type {import("./Helper.js").default}
         */ this.helper_ = helper;
        var gl = helper.getGL();
        /**
         * @private
         * @type {WebGLTexture}
         */ this.texture_ = gl.createTexture();
        /**
         * @private
         * @type {WebGLFramebuffer}
         */ this.framebuffer_ = gl.createFramebuffer();
        /**
         * @type {Array<number>}
         * @private
         */ this.size_ = opt_size || [
            1,
            1
        ];
        /**
         * @type {Uint8Array}
         * @private
         */ this.data_ = new Uint8Array(0);
        /**
         * @type {boolean}
         * @private
         */ this.dataCacheDirty_ = true;
        this.updateSize_();
    }
    /**
     * Changes the size of the render target texture. Note: will do nothing if the size
     * is already the same.
     * @param {Array<number>} size Expected size of the render target texture
     * @api
     */ WebGLRenderTarget1.prototype.setSize = function(size) {
        if ((0, _arrayJs.equals)(size, this.size_)) return;
        this.size_[0] = size[0];
        this.size_[1] = size[1];
        this.updateSize_();
    };
    /**
     * Returns the size of the render target texture
     * @return {Array<number>} Size of the render target texture
     * @api
     */ WebGLRenderTarget1.prototype.getSize = function() {
        return this.size_;
    };
    /**
     * This will cause following calls to `#readAll` or `#readPixel` to download the content of the
     * render target into memory, which is an expensive operation.
     * This content will be kept in cache but should be cleared after each new render.
     * @api
     */ WebGLRenderTarget1.prototype.clearCachedData = function() {
        this.dataCacheDirty_ = true;
    };
    /**
     * Returns the full content of the frame buffer as a series of r, g, b, a components
     * in the 0-255 range (unsigned byte).
     * @return {Uint8Array} Integer array of color values
     * @api
     */ WebGLRenderTarget1.prototype.readAll = function() {
        if (this.dataCacheDirty_) {
            var size = this.size_;
            var gl = this.helper_.getGL();
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);
            gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.UNSIGNED_BYTE, this.data_);
            this.dataCacheDirty_ = false;
        }
        return this.data_;
    };
    /**
     * Reads one pixel of the frame buffer as an array of r, g, b, a components
     * in the 0-255 range (unsigned byte).
     * If x and/or y are outside of existing data, an array filled with 0 is returned.
     * @param {number} x Pixel coordinate
     * @param {number} y Pixel coordinate
     * @return {Uint8Array} Integer array with one color value (4 components)
     * @api
     */ WebGLRenderTarget1.prototype.readPixel = function(x, y) {
        if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {
            tmpArray4[0] = 0;
            tmpArray4[1] = 0;
            tmpArray4[2] = 0;
            tmpArray4[3] = 0;
            return tmpArray4;
        }
        this.readAll();
        var index = Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];
        tmpArray4[0] = this.data_[index * 4];
        tmpArray4[1] = this.data_[index * 4 + 1];
        tmpArray4[2] = this.data_[index * 4 + 2];
        tmpArray4[3] = this.data_[index * 4 + 3];
        return tmpArray4;
    };
    /**
     * @return {WebGLTexture} Texture to render to
     */ WebGLRenderTarget1.prototype.getTexture = function() {
        return this.texture_;
    };
    /**
     * @return {WebGLFramebuffer} Frame buffer of the render target
     */ WebGLRenderTarget1.prototype.getFramebuffer = function() {
        return this.framebuffer_;
    };
    /**
     * @private
     */ WebGLRenderTarget1.prototype.updateSize_ = function() {
        var size = this.size_;
        var gl = this.helper_.getGL();
        this.texture_ = this.helper_.createTexture(size, null, this.texture_);
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);
        gl.viewport(0, 0, size[0], size[1]);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture_, 0);
        this.data_ = new Uint8Array(size[0] * size[1] * 4);
    };
    return WebGLRenderTarget1;
}();
exports.default = WebGLRenderTarget;

},{"../array.js":"1Fbic","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c3YKH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", ()=>create);
var Buffer = require("buffer").Buffer;
function create() {
    var source = 'var e="function"==typeof Object.assign?Object.assign:function(e,n){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),r=1,o=arguments.length;r<o;++r){var i=arguments[r];if(null!=i)for(var f in i)i.hasOwnProperty(f)&&(t[f]=i[f])}return t},n="GENERATE_BUFFERS",t=[],r={vertexPosition:0,indexPosition:0};function o(e,n,t,r,o){e[n+0]=t,e[n+1]=r,e[n+2]=o}function i(e,n,i,f,s,a){var u=3+s,l=e[n+0],v=e[n+1],c=t;c.length=s;for(var g=0;g<c.length;g++)c[g]=e[n+2+g];var b=a?a.vertexPosition:0,h=a?a.indexPosition:0,d=b/u;return o(i,b,l,v,0),c.length&&i.set(c,b+3),o(i,b+=u,l,v,1),c.length&&i.set(c,b+3),o(i,b+=u,l,v,2),c.length&&i.set(c,b+3),o(i,b+=u,l,v,3),c.length&&i.set(c,b+3),b+=u,f[h++]=d,f[h++]=d+1,f[h++]=d+3,f[h++]=d+1,f[h++]=d+2,f[h++]=d+3,r.vertexPosition=b,r.indexPosition=h,r}var f=self;f.onmessage=function(t){var r=t.data;if(r.type===n){for(var o,s=r.customAttributesCount,a=2+s,u=new Float32Array(r.renderInstructions),l=u.length/a,v=4*l*(s+3),c=new Uint32Array(6*l),g=new Float32Array(v),b=0;b<u.length;b+=a)o=i(u,b,g,c,s,o);var h=e({vertexBuffer:g.buffer,indexBuffer:c.buffer,renderInstructions:u.buffer},r);f.postMessage(h,[g.buffer,c.buffer,u.buffer])}};';
    return new Worker(typeof Blob === "undefined" ? "data:application/javascript;base64," + Buffer.from(source, "binary").toString("base64") : URL.createObjectURL(new Blob([
        source
    ], {
        type: "application/javascript"
    })));
}

},{"buffer":"fCgem","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("base64-js");
const ieee754 = require("ieee754");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i1;
    if (dir) {
        let foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength1 && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    let val = this[offset + --byteLength2];
    let mul = 1;
    while(byteLength2 > 0 && (mul *= 0x100))val += this[offset + --byteLength2] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength3 && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength4, noAssert) {
    offset = offset >>> 0;
    byteLength4 = byteLength4 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength4, this.length);
    let i = byteLength4;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength4);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength5, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength5 = byteLength5 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength5) - 1;
        checkInt(this, value, offset, byteLength5, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength5 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength5;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength6, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength6 = byteLength6 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength6) - 1;
        checkInt(this, value, offset, byteLength6, maxBytes, 0);
    }
    let i = byteLength6 - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength6;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength7, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength7 - 1);
        checkInt(this, value, offset, byteLength7, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength7 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength7;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength8, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength8 - 1);
        checkInt(this, value, offset, byteLength8, limit - 1, -limit);
    }
    let i = byteLength8 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength8;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength9) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength9] === undefined) boundsError(offset, buf.length - (byteLength9 + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength10) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength10 > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength10 + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength10 + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength10 + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength10);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"base64-js":"eIiSV","ieee754":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len1 = b64.length;
    if (len1 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len1;
    var placeHoldersLen = validLen === len1 ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i1;
    for(i1 = 0; i1 < len2; i1 += 4){
        tmp = revLookup[b64.charCodeAt(i1)] << 18 | revLookup[b64.charCodeAt(i1 + 1)] << 12 | revLookup[b64.charCodeAt(i1 + 2)] << 6 | revLookup[b64.charCodeAt(i1 + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i1)] << 2 | revLookup[b64.charCodeAt(i1 + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i1)] << 10 | revLookup[b64.charCodeAt(i1 + 1)] << 4 | revLookup[b64.charCodeAt(i1 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i2 = start; i2 < end; i2 += 3){
        tmp = (uint8[i2] << 16 & 0xFF0000) + (uint8[i2 + 1] << 8 & 0xFF00) + (uint8[i2 + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len3 = uint8.length;
    var extraBytes = len3 % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i3 = 0, len2 = len3 - extraBytes; i3 < len2; i3 += maxChunkLength)parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len2 ? len2 : i3 + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len3 - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len3 - 2] << 8) + uint8[len3 - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"XodNo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ShaderBuilder", ()=>ShaderBuilder);
/**
 * @typedef {Object} StyleParseResult
 * @property {ShaderBuilder} builder Shader builder pre-configured according to a given style
 * @property {Object<string,import("./Helper").UniformValue>} uniforms Uniform definitions.
 * @property {Array<import("../renderer/webgl/PointsLayer").CustomAttribute>} attributes Attribute descriptions.
 */ /**
 * Parses a {@link import("../style/literal").LiteralStyle} object and returns a {@link ShaderBuilder}
 * object that has been configured according to the given style, as well as `attributes` and `uniforms`
 * arrays to be fed to the `WebGLPointsRenderer` class.
 *
 * Also returns `uniforms` and `attributes` properties as expected by the
 * {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.
 *
 * @param {import("../style/literal").LiteralStyle} style Literal style.
 * @return {StyleParseResult} Result containing shader params, attributes and uniforms.
 */ parcelHelpers.export(exports, "parseLiteralStyle", ()=>parseLiteralStyle);
/**
 * Classes and utilities for generating shaders from literal style objects
 * @module ol/webgl/ShaderBuilder
 */ var _expressionsJs = require("../style/expressions.js");
/**
 * @typedef {Object} VaryingDescription
 * @property {string} name Varying name, as will be declared in the header.
 * @property {string} type Varying type, either `float`, `vec2`, `vec4`...
 * @property {string} expression Expression which will be assigned to the varying in the vertex shader, and
 * passed on to the fragment shader.
 */ /**
 * @classdesc
 * This class implements a classic builder pattern for generating many different types of shaders.
 * Methods can be chained, e. g.:
 *
 * ```js
 * const shader = new ShaderBuilder()
 *   .addVarying('v_width', 'float', 'a_width')
 *   .addUniform('u_time')
 *   .setColorExpression('...')
 *   .setSizeExpression('...')
 *   .outputSymbolFragmentShader();
 * ```
 */ var ShaderBuilder = /** @class */ function() {
    function ShaderBuilder1() {
        /**
         * Uniforms; these will be declared in the header (should include the type).
         * @type {Array<string>}
         * @private
         */ this.uniforms = [];
        /**
         * Attributes; these will be declared in the header (should include the type).
         * @type {Array<string>}
         * @private
         */ this.attributes = [];
        /**
         * Varyings with a name, a type and an expression.
         * @type {Array<VaryingDescription>}
         * @private
         */ this.varyings = [];
        /**
         * @type {string}
         * @private
         */ this.sizeExpression = "vec2(1.0)";
        /**
         * @type {string}
         * @private
         */ this.rotationExpression = "0.0";
        /**
         * @type {string}
         * @private
         */ this.offsetExpression = "vec2(0.0)";
        /**
         * @type {string}
         * @private
         */ this.colorExpression = "vec4(1.0)";
        /**
         * @type {string}
         * @private
         */ this.texCoordExpression = "vec4(0.0, 0.0, 1.0, 1.0)";
        /**
         * @type {string}
         * @private
         */ this.discardExpression = "false";
        /**
         * @type {boolean}
         * @private
         */ this.rotateWithView = false;
    }
    /**
     * Adds a uniform accessible in both fragment and vertex shaders.
     * The given name should include a type, such as `sampler2D u_texture`.
     * @param {string} name Uniform name
     * @return {ShaderBuilder} the builder object
     */ ShaderBuilder1.prototype.addUniform = function(name) {
        this.uniforms.push(name);
        return this;
    };
    /**
     * Adds an attribute accessible in the vertex shader, read from the geometry buffer.
     * The given name should include a type, such as `vec2 a_position`.
     * @param {string} name Attribute name
     * @return {ShaderBuilder} the builder object
     */ ShaderBuilder1.prototype.addAttribute = function(name) {
        this.attributes.push(name);
        return this;
    };
    /**
     * Adds a varying defined in the vertex shader and accessible from the fragment shader.
     * The type and expression of the varying have to be specified separately.
     * @param {string} name Varying name
     * @param {'float'|'vec2'|'vec3'|'vec4'} type Type
     * @param {string} expression Expression used to assign a value to the varying.
     * @return {ShaderBuilder} the builder object
     */ ShaderBuilder1.prototype.addVarying = function(name, type, expression) {
        this.varyings.push({
            name: name,
            type: type,
            expression: expression
        });
        return this;
    };
    /**
     * Sets an expression to compute the size of the shape.
     * This expression can use all the uniforms and attributes available
     * in the vertex shader, and should evaluate to a `vec2` value.
     * @param {string} expression Size expression
     * @return {ShaderBuilder} the builder object
     */ ShaderBuilder1.prototype.setSizeExpression = function(expression) {
        this.sizeExpression = expression;
        return this;
    };
    /**
     * Sets an expression to compute the rotation of the shape.
     * This expression can use all the uniforms and attributes available
     * in the vertex shader, and should evaluate to a `float` value in radians.
     * @param {string} expression Size expression
     * @return {ShaderBuilder} the builder object
     */ ShaderBuilder1.prototype.setRotationExpression = function(expression) {
        this.rotationExpression = expression;
        return this;
    };
    /**
     * Sets an expression to compute the offset of the symbol from the point center.
     * This expression can use all the uniforms and attributes available
     * in the vertex shader, and should evaluate to a `vec2` value.
     * Note: will only be used for point geometry shaders.
     * @param {string} expression Offset expression
     * @return {ShaderBuilder} the builder object
     */ ShaderBuilder1.prototype.setSymbolOffsetExpression = function(expression) {
        this.offsetExpression = expression;
        return this;
    };
    /**
     * Sets an expression to compute the color of the shape.
     * This expression can use all the uniforms, varyings and attributes available
     * in the fragment shader, and should evaluate to a `vec4` value.
     * @param {string} expression Color expression
     * @return {ShaderBuilder} the builder object
     */ ShaderBuilder1.prototype.setColorExpression = function(expression) {
        this.colorExpression = expression;
        return this;
    };
    /**
     * Sets an expression to compute the texture coordinates of the vertices.
     * This expression can use all the uniforms and attributes available
     * in the vertex shader, and should evaluate to a `vec4` value.
     * @param {string} expression Texture coordinate expression
     * @return {ShaderBuilder} the builder object
     */ ShaderBuilder1.prototype.setTextureCoordinateExpression = function(expression) {
        this.texCoordExpression = expression;
        return this;
    };
    /**
     * Sets an expression to determine whether a fragment (pixel) should be discarded,
     * i.e. not drawn at all.
     * This expression can use all the uniforms, varyings and attributes available
     * in the fragment shader, and should evaluate to a `bool` value (it will be
     * used in an `if` statement)
     * @param {string} expression Fragment discard expression
     * @return {ShaderBuilder} the builder object
     */ ShaderBuilder1.prototype.setFragmentDiscardExpression = function(expression) {
        this.discardExpression = expression;
        return this;
    };
    /**
     * Sets whether the symbols should rotate with the view or stay aligned with the map.
     * Note: will only be used for point geometry shaders.
     * @param {boolean} rotateWithView Rotate with view
     * @return {ShaderBuilder} the builder object
     */ ShaderBuilder1.prototype.setSymbolRotateWithView = function(rotateWithView) {
        this.rotateWithView = rotateWithView;
        return this;
    };
    /**
     * @return {string} Previously set size expression
     */ ShaderBuilder1.prototype.getSizeExpression = function() {
        return this.sizeExpression;
    };
    /**
     * @return {string} Previously set symbol offset expression
     */ ShaderBuilder1.prototype.getOffsetExpression = function() {
        return this.offsetExpression;
    };
    /**
     * @return {string} Previously set color expression
     */ ShaderBuilder1.prototype.getColorExpression = function() {
        return this.colorExpression;
    };
    /**
     * @return {string} Previously set texture coordinate expression
     */ ShaderBuilder1.prototype.getTextureCoordinateExpression = function() {
        return this.texCoordExpression;
    };
    /**
     * @return {string} Previously set fragment discard expression
     */ ShaderBuilder1.prototype.getFragmentDiscardExpression = function() {
        return this.discardExpression;
    };
    /**
     * Generates a symbol vertex shader from the builder parameters,
     * intended to be used on point geometries.
     *
     * Three uniforms are hardcoded in all shaders: `u_projectionMatrix`, `u_offsetScaleMatrix`,
     * `u_offsetRotateMatrix`, `u_time`.
     *
     * The following attributes are hardcoded and expected to be present in the vertex buffers:
     * `vec2 a_position`, `float a_index` (being the index of the vertex in the quad, 0 to 3).
     *
     * The following varyings are hardcoded and gives the coordinate of the pixel both in the quad and on the texture:
     * `vec2 v_quadCoord`, `vec2 v_texCoord`
     *
     * @param {boolean} [forHitDetection] If true, the shader will be modified to include hit detection variables
     * (namely, hit color with encoded feature id).
     * @return {string} The full shader as a string.
     */ ShaderBuilder1.prototype.getSymbolVertexShader = function(forHitDetection) {
        var offsetMatrix = this.rotateWithView ? "u_offsetScaleMatrix * u_offsetRotateMatrix" : "u_offsetScaleMatrix";
        var attributes = this.attributes;
        var varyings = this.varyings;
        if (forHitDetection) {
            attributes = attributes.concat("vec4 a_hitColor");
            varyings = varyings.concat({
                name: "v_hitColor",
                type: "vec4",
                expression: "a_hitColor"
            });
        }
        return "precision mediump float;\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\n".concat(this.uniforms.map(function(uniform) {
            return "uniform " + uniform + ";";
        }).join("\n"), "\nattribute vec2 a_position;\nattribute float a_index;\n").concat(attributes.map(function(attribute) {
            return "attribute " + attribute + ";";
        }).join("\n"), "\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\n").concat(varyings.map(function(varying) {
            return "varying " + varying.type + " " + varying.name + ";";
        }).join("\n"), "\nvoid main(void) {\n  mat4 offsetMatrix = ").concat(offsetMatrix, ";\n  vec2 halfSize = ").concat(this.sizeExpression, " * 0.5;\n  vec2 offset = ").concat(this.offsetExpression, ";\n  float angle = ").concat(this.rotationExpression, ";\n  float offsetX;\n  float offsetY;\n  if (a_index == 0.0) {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  } else if (a_index == 1.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else if (a_index == 2.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  }\n  vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n  vec4 texCoord = ").concat(this.texCoordExpression, ";\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\n  v_texCoord = vec2(u, v);\n  u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v = a_index == 2.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v_quadCoord = vec2(u, v);\n").concat(varyings.map(function(varying) {
            return "  " + varying.name + " = " + varying.expression + ";";
        }).join("\n"), "\n}");
    };
    /**
     * Generates a symbol fragment shader from the builder parameters,
     * intended to be used on point geometries.
     *
     * Expects the following varyings to be transmitted by the vertex shader:
     * `vec2 v_quadCoord`, `vec2 v_texCoord`
     *
     * @param {boolean} [forHitDetection] If true, the shader will be modified to include hit detection variables
     * (namely, hit color with encoded feature id).
     * @return {string} The full shader as a string.
     */ ShaderBuilder1.prototype.getSymbolFragmentShader = function(forHitDetection) {
        var hitDetectionBypass = forHitDetection ? "  if (gl_FragColor.a < 0.1) { discard; } gl_FragColor = v_hitColor;" : "";
        var varyings = this.varyings;
        if (forHitDetection) varyings = varyings.concat({
            name: "v_hitColor",
            type: "vec4",
            expression: "a_hitColor"
        });
        return "precision mediump float;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\n".concat(this.uniforms.map(function(uniform) {
            return "uniform " + uniform + ";";
        }).join("\n"), "\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\n").concat(varyings.map(function(varying) {
            return "varying " + varying.type + " " + varying.name + ";";
        }).join("\n"), "\nvoid main(void) {\n  if (").concat(this.discardExpression, ") { discard; }\n  gl_FragColor = ").concat(this.colorExpression, ";\n  gl_FragColor.rgb *= gl_FragColor.a;\n").concat(hitDetectionBypass, "\n}");
    };
    return ShaderBuilder1;
}();
function parseLiteralStyle(style) {
    var symbStyle = style.symbol;
    var size = symbStyle.size !== undefined ? symbStyle.size : 1;
    var color = symbStyle.color || "white";
    var texCoord = symbStyle.textureCoord || [
        0,
        0,
        1,
        1
    ];
    var offset = symbStyle.offset || [
        0,
        0
    ];
    var opacity = symbStyle.opacity !== undefined ? symbStyle.opacity : 1;
    var rotation = symbStyle.rotation !== undefined ? symbStyle.rotation : 0;
    /**
     * @type {import("../style/expressions.js").ParsingContext}
     */ var vertContext = {
        inFragmentShader: false,
        variables: [],
        attributes: [],
        stringLiteralsMap: {},
        functions: {}
    };
    var parsedSize = (0, _expressionsJs.expressionToGlsl)(vertContext, size, (0, _expressionsJs.ValueTypes).NUMBER_ARRAY | (0, _expressionsJs.ValueTypes).NUMBER);
    var parsedOffset = (0, _expressionsJs.expressionToGlsl)(vertContext, offset, (0, _expressionsJs.ValueTypes).NUMBER_ARRAY);
    var parsedTexCoord = (0, _expressionsJs.expressionToGlsl)(vertContext, texCoord, (0, _expressionsJs.ValueTypes).NUMBER_ARRAY);
    var parsedRotation = (0, _expressionsJs.expressionToGlsl)(vertContext, rotation, (0, _expressionsJs.ValueTypes).NUMBER);
    /**
     * @type {import("../style/expressions.js").ParsingContext}
     */ var fragContext = {
        inFragmentShader: true,
        variables: vertContext.variables,
        attributes: [],
        stringLiteralsMap: vertContext.stringLiteralsMap,
        functions: {}
    };
    var parsedColor = (0, _expressionsJs.expressionToGlsl)(fragContext, color, (0, _expressionsJs.ValueTypes).COLOR);
    var parsedOpacity = (0, _expressionsJs.expressionToGlsl)(fragContext, opacity, (0, _expressionsJs.ValueTypes).NUMBER);
    var opacityFilter = "1.0";
    var visibleSize = "vec2(".concat((0, _expressionsJs.expressionToGlsl)(fragContext, size, (0, _expressionsJs.ValueTypes).NUMBER_ARRAY | (0, _expressionsJs.ValueTypes).NUMBER), ").x");
    switch(symbStyle.symbolType){
        case "square":
            break;
        case "image":
            break;
        // taken from https://thebookofshaders.com/07/
        case "circle":
            opacityFilter = "(1.0-smoothstep(1.-4./".concat(visibleSize, ",1.,dot(v_quadCoord-.5,v_quadCoord-.5)*4.))");
            break;
        case "triangle":
            var st = "(v_quadCoord*2.-1.)";
            var a = "(atan(".concat(st, ".x,").concat(st, ".y))");
            opacityFilter = "(1.0-smoothstep(.5-3./".concat(visibleSize, ",.5,cos(floor(.5+").concat(a, "/2.094395102)*2.094395102-").concat(a, ")*length(").concat(st, ")))");
            break;
        default:
            throw new Error("Unexpected symbol type: " + symbStyle.symbolType);
    }
    var builder = new ShaderBuilder().setSizeExpression("vec2(".concat(parsedSize, ")")).setRotationExpression(parsedRotation).setSymbolOffsetExpression(parsedOffset).setTextureCoordinateExpression(parsedTexCoord).setSymbolRotateWithView(!!symbStyle.rotateWithView).setColorExpression("vec4(".concat(parsedColor, ".rgb, ").concat(parsedColor, ".a * ").concat(parsedOpacity, " * ").concat(opacityFilter, ")"));
    if (style.filter) {
        var parsedFilter = (0, _expressionsJs.expressionToGlsl)(fragContext, style.filter, (0, _expressionsJs.ValueTypes).BOOLEAN);
        builder.setFragmentDiscardExpression("!".concat(parsedFilter));
    }
    /** @type {Object<string,import("../webgl/Helper").UniformValue>} */ var uniforms = {};
    // define one uniform per variable
    fragContext.variables.forEach(function(varName) {
        var uniformName = (0, _expressionsJs.uniformNameForVariable)(varName);
        builder.addUniform("float ".concat(uniformName));
        uniforms[uniformName] = function() {
            if (!style.variables || style.variables[varName] === undefined) throw new Error("The following variable is missing from the style: ".concat(varName));
            var value = style.variables[varName];
            if (typeof value === "string") value = (0, _expressionsJs.getStringNumberEquivalent)(vertContext, value);
            return value !== undefined ? value : -9999999; // to avoid matching with the first string literal
        };
    });
    if (symbStyle.symbolType === "image" && symbStyle.src) {
        var texture = new Image();
        texture.crossOrigin = symbStyle.crossOrigin === undefined ? "anonymous" : symbStyle.crossOrigin;
        texture.src = symbStyle.src;
        builder.addUniform("sampler2D u_texture").setColorExpression(builder.getColorExpression() + " * texture2D(u_texture, v_texCoord)");
        uniforms["u_texture"] = texture;
    }
    // for each feature attribute used in the fragment shader, define a varying that will be used to pass data
    // from the vertex to the fragment shader, as well as an attribute in the vertex shader (if not already present)
    fragContext.attributes.forEach(function(attrName) {
        if (vertContext.attributes.indexOf(attrName) === -1) vertContext.attributes.push(attrName);
        builder.addVarying("v_".concat(attrName), "float", "a_".concat(attrName));
    });
    // for each feature attribute used in the vertex shader, define an attribute in the vertex shader.
    vertContext.attributes.forEach(function(attrName) {
        builder.addAttribute("float a_".concat(attrName));
    });
    return {
        builder: builder,
        attributes: vertContext.attributes.map(function(attributeName) {
            return {
                name: attributeName,
                callback: function(feature, props) {
                    var value = props[attributeName];
                    if (typeof value === "string") value = (0, _expressionsJs.getStringNumberEquivalent)(vertContext, value);
                    return value !== undefined ? value : -9999999; // to avoid matching with the first string literal
                }
            };
        }),
        uniforms: uniforms
    };
}

},{"../style/expressions.js":"ckvfO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ckvfO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ValueTypes", ()=>ValueTypes);
parcelHelpers.export(exports, "Operators", ()=>Operators);
/**
 * Returns the possible types for a given value (each type being a binary flag)
 * To test a value use e.g. `getValueType(v) & ValueTypes.BOOLEAN`
 * @param {ExpressionValue} value Value
 * @return {ValueTypes|number} Type or types inferred from the value
 */ parcelHelpers.export(exports, "getValueType", ()=>getValueType);
/**
 * Checks if only one value type is enabled in the input number.
 * @param {ValueTypes|number} valueType Number containing value type binary flags
 * @return {boolean} True if only one type flag is enabled, false if zero or multiple
 */ parcelHelpers.export(exports, "isTypeUnique", ()=>isTypeUnique);
/**
 * Context available during the parsing of an expression.
 * @typedef {Object} ParsingContext
 * @property {boolean} [inFragmentShader] If false, means the expression output should be made for a vertex shader
 * @property {Array<string>} variables List of variables used in the expression; contains **unprefixed names**
 * @property {Array<string>} attributes List of attributes used in the expression; contains **unprefixed names**
 * @property {Object<string, number>} stringLiteralsMap This object maps all encountered string values to a number
 * @property {Object<string, string>} functions Lookup of functions used by the style.
 * @property {number} [bandCount] Number of bands per pixel.
 * @property {Array<PaletteTexture>} [paletteTextures] List of palettes used by the style.
 */ /**
 * Will return the number as a float with a dot separator, which is required by GLSL.
 * @param {number} v Numerical value.
 * @return {string} The value as string.
 */ parcelHelpers.export(exports, "numberToGlsl", ()=>numberToGlsl);
/**
 * Will return the number array as a float with a dot separator, concatenated with ', '.
 * @param {Array<number>} array Numerical values array.
 * @return {string} The array as a vector, e. g.: `vec3(1.0, 2.0, 3.0)`.
 */ parcelHelpers.export(exports, "arrayToGlsl", ()=>arrayToGlsl);
/**
 * Will normalize and converts to string a `vec4` color array compatible with GLSL.
 * @param {string|import("../color.js").Color} color Color either in string format or [r, g, b, a] array format,
 * with RGB components in the 0..255 range and the alpha component in the 0..1 range.
 * Note that the final array will always have 4 components.
 * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.
 */ parcelHelpers.export(exports, "colorToGlsl", ()=>colorToGlsl);
/**
 * Returns a stable equivalent number for the string literal.
 * @param {ParsingContext} context Parsing context
 * @param {string} string String literal value
 * @return {number} Number equivalent
 */ parcelHelpers.export(exports, "getStringNumberEquivalent", ()=>getStringNumberEquivalent);
/**
 * Returns a stable equivalent number for the string literal, for use in shaders. This number is then
 * converted to be a GLSL-compatible string.
 * @param {ParsingContext} context Parsing context
 * @param {string} string String literal value
 * @return {string} GLSL-compatible string containing a number
 */ parcelHelpers.export(exports, "stringToGlsl", ()=>stringToGlsl);
/**
 * Recursively parses a style expression and outputs a GLSL-compatible string. Takes in a parsing context that
 * will be read and modified during the parsing operation.
 * @param {ParsingContext} context Parsing context
 * @param {ExpressionValue} value Value
 * @param {ValueTypes|number} [typeHint] Hint for the expected final type (can be several types combined)
 * @return {string} GLSL-compatible output
 */ parcelHelpers.export(exports, "expressionToGlsl", ()=>expressionToGlsl);
/**
 * Get the uniform name given a variable name.
 * @param {string} variableName The variable name.
 * @return {string} The uniform name.
 */ parcelHelpers.export(exports, "uniformNameForVariable", ()=>uniformNameForVariable);
parcelHelpers.export(exports, "PALETTE_TEXTURE_ARRAY", ()=>PALETTE_TEXTURE_ARRAY);
/**
 * Operators and utilities used for style expressions
 * @module ol/style/expressions
 */ var _paletteTextureJs = require("../webgl/PaletteTexture.js");
var _paletteTextureJsDefault = parcelHelpers.interopDefault(_paletteTextureJs);
var _tileLayerJs = require("../renderer/webgl/TileLayer.js");
var _colorJs = require("../color.js");
var _mathJs = require("../math.js");
var ValueTypes = {
    NUMBER: 1,
    STRING: 2,
    COLOR: 4,
    BOOLEAN: 8,
    NUMBER_ARRAY: 16,
    ANY: 31,
    NONE: 0
};
var Operators = {};
function getValueType(value) {
    if (typeof value === "number") return ValueTypes.NUMBER;
    if (typeof value === "boolean") return ValueTypes.BOOLEAN;
    if (typeof value === "string") {
        if ((0, _colorJs.isStringColor)(value)) return ValueTypes.COLOR | ValueTypes.STRING;
        return ValueTypes.STRING;
    }
    if (!Array.isArray(value)) throw new Error("Unhandled value type: ".concat(JSON.stringify(value)));
    var valueArr = value;
    var onlyNumbers = valueArr.every(function(v) {
        return typeof v === "number";
    });
    if (onlyNumbers) {
        if (valueArr.length === 3 || valueArr.length === 4) return ValueTypes.COLOR | ValueTypes.NUMBER_ARRAY;
        return ValueTypes.NUMBER_ARRAY;
    }
    if (typeof valueArr[0] !== "string") throw new Error("Expected an expression operator but received: ".concat(JSON.stringify(valueArr)));
    var operator = Operators[valueArr[0]];
    if (operator === undefined) throw new Error("Unrecognized expression operator: ".concat(JSON.stringify(valueArr)));
    return operator.getReturnType(valueArr.slice(1));
}
function isTypeUnique(valueType) {
    return (0, _mathJs.log2)(valueType) % 1 === 0;
}
function numberToGlsl(v) {
    var s = v.toString();
    return s.indexOf(".") === -1 ? s + ".0" : s;
}
function arrayToGlsl(array) {
    if (array.length < 2 || array.length > 4) throw new Error("`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.");
    return "vec".concat(array.length, "(").concat(array.map(numberToGlsl).join(", "), ")");
}
function colorToGlsl(color) {
    var array = (0, _colorJs.asArray)(color).slice();
    if (array.length < 4) array.push(1);
    return arrayToGlsl(array.map(function(c, i) {
        return i < 3 ? c / 255 : c;
    }));
}
function getStringNumberEquivalent(context, string) {
    if (context.stringLiteralsMap[string] === undefined) context.stringLiteralsMap[string] = Object.keys(context.stringLiteralsMap).length;
    return context.stringLiteralsMap[string];
}
function stringToGlsl(context, string) {
    return numberToGlsl(getStringNumberEquivalent(context, string));
}
function expressionToGlsl(context, value, typeHint) {
    // operator
    if (Array.isArray(value) && typeof value[0] === "string") {
        var operator = Operators[value[0]];
        if (operator === undefined) throw new Error("Unrecognized expression operator: ".concat(JSON.stringify(value)));
        return operator.toGlsl(context, value.slice(1), typeHint);
    }
    var valueType = getValueType(value);
    if ((valueType & ValueTypes.NUMBER) > 0) return numberToGlsl(value);
    if ((valueType & ValueTypes.BOOLEAN) > 0) return value.toString();
    if ((valueType & ValueTypes.STRING) > 0 && (typeHint === undefined || typeHint == ValueTypes.STRING)) return stringToGlsl(context, value.toString());
    if ((valueType & ValueTypes.COLOR) > 0 && (typeHint === undefined || typeHint == ValueTypes.COLOR)) return colorToGlsl(value);
    if ((valueType & ValueTypes.NUMBER_ARRAY) > 0) return arrayToGlsl(value);
    throw new Error("Unexpected expression ".concat(value, " (expected type ").concat(typeHint, ")"));
}
function assertNumber(value) {
    if (!(getValueType(value) & ValueTypes.NUMBER)) throw new Error("A numeric value was expected, got ".concat(JSON.stringify(value), " instead"));
}
function assertNumbers(values) {
    for(var i = 0; i < values.length; i++)assertNumber(values[i]);
}
function assertString(value) {
    if (!(getValueType(value) & ValueTypes.STRING)) throw new Error("A string value was expected, got ".concat(JSON.stringify(value), " instead"));
}
function assertBoolean(value) {
    if (!(getValueType(value) & ValueTypes.BOOLEAN)) throw new Error("A boolean value was expected, got ".concat(JSON.stringify(value), " instead"));
}
function assertArgsCount(args, count) {
    if (args.length !== count) throw new Error("Exactly ".concat(count, " arguments were expected, got ").concat(args.length, " instead"));
}
function assertArgsMinCount(args, count) {
    if (args.length < count) throw new Error("At least ".concat(count, " arguments were expected, got ").concat(args.length, " instead"));
}
function assertArgsMaxCount(args, count) {
    if (args.length > count) throw new Error("At most ".concat(count, " arguments were expected, got ").concat(args.length, " instead"));
}
function assertArgsEven(args) {
    if (args.length % 2 !== 0) throw new Error("An even amount of arguments was expected, got ".concat(args, " instead"));
}
function assertArgsOdd(args) {
    if (args.length % 2 === 0) throw new Error("An odd amount of arguments was expected, got ".concat(args, " instead"));
}
function assertUniqueInferredType(args, types) {
    if (!isTypeUnique(types)) throw new Error("Could not infer only one type from the following expression: ".concat(JSON.stringify(args)));
}
Operators["get"] = {
    getReturnType: function(args) {
        return ValueTypes.ANY;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 1);
        assertString(args[0]);
        var value = args[0].toString();
        if (context.attributes.indexOf(value) === -1) context.attributes.push(value);
        var prefix = context.inFragmentShader ? "v_" : "a_";
        return prefix + value;
    }
};
function uniformNameForVariable(variableName) {
    return "u_var_" + variableName;
}
Operators["var"] = {
    getReturnType: function(args) {
        return ValueTypes.ANY;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 1);
        assertString(args[0]);
        var value = args[0].toString();
        if (context.variables.indexOf(value) === -1) context.variables.push(value);
        return uniformNameForVariable(value);
    }
};
var PALETTE_TEXTURE_ARRAY = "u_paletteTextures";
// ['palette', index, colors]
Operators["palette"] = {
    getReturnType: function(args) {
        return ValueTypes.COLOR;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 2);
        assertNumber(args[0]);
        var index = expressionToGlsl(context, args[0]);
        var colors = args[1];
        if (!Array.isArray(colors)) throw new Error("The second argument of palette must be an array");
        var numColors = colors.length;
        var palette = new Uint8Array(numColors * 4);
        for(var i = 0; i < numColors; i++){
            var candidate = colors[i];
            /**
             * @type {import('../color.js').Color}
             */ var color = void 0;
            if (typeof candidate === "string") color = (0, _colorJs.fromString)(candidate);
            else {
                if (!Array.isArray(candidate)) throw new Error("The second argument of palette must be an array of strings or colors");
                var length_1 = candidate.length;
                if (length_1 === 4) color = candidate;
                else {
                    if (length_1 !== 3) throw new Error("Expected palette color to have 3 or 4 values, got ".concat(length_1));
                    color = [
                        candidate[0],
                        candidate[1],
                        candidate[2],
                        1
                    ];
                }
            }
            var offset = i * 4;
            palette[offset] = color[0];
            palette[offset + 1] = color[1];
            palette[offset + 2] = color[2];
            palette[offset + 3] = color[3] * 255;
        }
        if (!context.paletteTextures) context.paletteTextures = [];
        var paletteName = "".concat(PALETTE_TEXTURE_ARRAY, "[").concat(context.paletteTextures.length, "]");
        var paletteTexture = new (0, _paletteTextureJsDefault.default)(paletteName, palette);
        context.paletteTextures.push(paletteTexture);
        return "texture2D(".concat(paletteName, ", vec2((").concat(index, " + 0.5) / ").concat(numColors, ".0, 0.5))");
    }
};
var GET_BAND_VALUE_FUNC = "getBandValue";
Operators["band"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsMinCount(args, 1);
        assertArgsMaxCount(args, 3);
        var band = args[0];
        if (!(GET_BAND_VALUE_FUNC in context.functions)) {
            var ifBlocks = "";
            var bandCount = context.bandCount || 1;
            for(var i = 0; i < bandCount; i++){
                var colorIndex = Math.floor(i / 4);
                var bandIndex = i % 4;
                if (bandIndex === bandCount - 1 && bandIndex === 1) // LUMINANCE_ALPHA - band 1 assigned to rgb and band 2 assigned to alpha
                bandIndex = 3;
                var textureName = "".concat((0, _tileLayerJs.Uniforms).TILE_TEXTURE_ARRAY, "[").concat(colorIndex, "]");
                ifBlocks += "\n          if (band == ".concat(i + 1, ".0) {\n            return texture2D(").concat(textureName, ", v_textureCoord + vec2(dx, dy))[").concat(bandIndex, "];\n          }\n        ");
            }
            context.functions[GET_BAND_VALUE_FUNC] = "\n        float getBandValue(float band, float xOffset, float yOffset) {\n          float dx = xOffset / ".concat((0, _tileLayerJs.Uniforms).TEXTURE_PIXEL_WIDTH, ";\n          float dy = yOffset / ").concat((0, _tileLayerJs.Uniforms).TEXTURE_PIXEL_HEIGHT, ";\n          ").concat(ifBlocks, "\n        }\n      ");
        }
        var bandExpression = expressionToGlsl(context, band);
        var xOffsetExpression = expressionToGlsl(context, args[1] || 0);
        var yOffsetExpression = expressionToGlsl(context, args[2] || 0);
        return "".concat(GET_BAND_VALUE_FUNC, "(").concat(bandExpression, ", ").concat(xOffsetExpression, ", ").concat(yOffsetExpression, ")");
    }
};
Operators["time"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 0);
        return "u_time";
    }
};
Operators["zoom"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 0);
        return "u_zoom";
    }
};
Operators["resolution"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 0);
        return "u_resolution";
    }
};
Operators["*"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 2);
        assertNumbers(args);
        return "(".concat(expressionToGlsl(context, args[0]), " * ").concat(expressionToGlsl(context, args[1]), ")");
    }
};
Operators["/"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 2);
        assertNumbers(args);
        return "(".concat(expressionToGlsl(context, args[0]), " / ").concat(expressionToGlsl(context, args[1]), ")");
    }
};
Operators["+"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 2);
        assertNumbers(args);
        return "(".concat(expressionToGlsl(context, args[0]), " + ").concat(expressionToGlsl(context, args[1]), ")");
    }
};
Operators["-"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 2);
        assertNumbers(args);
        return "(".concat(expressionToGlsl(context, args[0]), " - ").concat(expressionToGlsl(context, args[1]), ")");
    }
};
Operators["clamp"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 3);
        assertNumbers(args);
        var min = expressionToGlsl(context, args[1]);
        var max = expressionToGlsl(context, args[2]);
        return "clamp(".concat(expressionToGlsl(context, args[0]), ", ").concat(min, ", ").concat(max, ")");
    }
};
Operators["%"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 2);
        assertNumbers(args);
        return "mod(".concat(expressionToGlsl(context, args[0]), ", ").concat(expressionToGlsl(context, args[1]), ")");
    }
};
Operators["^"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 2);
        assertNumbers(args);
        return "pow(".concat(expressionToGlsl(context, args[0]), ", ").concat(expressionToGlsl(context, args[1]), ")");
    }
};
Operators["abs"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 1);
        assertNumbers(args);
        return "abs(".concat(expressionToGlsl(context, args[0]), ")");
    }
};
Operators["floor"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 1);
        assertNumbers(args);
        return "floor(".concat(expressionToGlsl(context, args[0]), ")");
    }
};
Operators["round"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 1);
        assertNumbers(args);
        return "floor(".concat(expressionToGlsl(context, args[0]), " + 0.5)");
    }
};
Operators["ceil"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 1);
        assertNumbers(args);
        return "ceil(".concat(expressionToGlsl(context, args[0]), ")");
    }
};
Operators["sin"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 1);
        assertNumbers(args);
        return "sin(".concat(expressionToGlsl(context, args[0]), ")");
    }
};
Operators["cos"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 1);
        assertNumbers(args);
        return "cos(".concat(expressionToGlsl(context, args[0]), ")");
    }
};
Operators["atan"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER;
    },
    toGlsl: function(context, args) {
        assertArgsMinCount(args, 1);
        assertArgsMaxCount(args, 2);
        assertNumbers(args);
        return args.length === 2 ? "atan(".concat(expressionToGlsl(context, args[0]), ", ").concat(expressionToGlsl(context, args[1]), ")") : "atan(".concat(expressionToGlsl(context, args[0]), ")");
    }
};
Operators[">"] = {
    getReturnType: function(args) {
        return ValueTypes.BOOLEAN;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 2);
        assertNumbers(args);
        return "(".concat(expressionToGlsl(context, args[0]), " > ").concat(expressionToGlsl(context, args[1]), ")");
    }
};
Operators[">="] = {
    getReturnType: function(args) {
        return ValueTypes.BOOLEAN;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 2);
        assertNumbers(args);
        return "(".concat(expressionToGlsl(context, args[0]), " >= ").concat(expressionToGlsl(context, args[1]), ")");
    }
};
Operators["<"] = {
    getReturnType: function(args) {
        return ValueTypes.BOOLEAN;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 2);
        assertNumbers(args);
        return "(".concat(expressionToGlsl(context, args[0]), " < ").concat(expressionToGlsl(context, args[1]), ")");
    }
};
Operators["<="] = {
    getReturnType: function(args) {
        return ValueTypes.BOOLEAN;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 2);
        assertNumbers(args);
        return "(".concat(expressionToGlsl(context, args[0]), " <= ").concat(expressionToGlsl(context, args[1]), ")");
    }
};
function getEqualOperator(operator) {
    return {
        getReturnType: function(args) {
            return ValueTypes.BOOLEAN;
        },
        toGlsl: function(context, args) {
            assertArgsCount(args, 2);
            // find common type
            var type = ValueTypes.ANY;
            for(var i = 0; i < args.length; i++)type &= getValueType(args[i]);
            if (type === ValueTypes.NONE) throw new Error("All arguments should be of compatible type, got ".concat(JSON.stringify(args), " instead"));
            // Since it's not possible to have color types here, we can leave it out
            // This fixes issues in case the value type is ambiguously detected as a color (e.g. the string 'red')
            type &= ~ValueTypes.COLOR;
            return "(".concat(expressionToGlsl(context, args[0], type), " ").concat(operator, " ").concat(expressionToGlsl(context, args[1], type), ")");
        }
    };
}
Operators["=="] = getEqualOperator("==");
Operators["!="] = getEqualOperator("!=");
Operators["!"] = {
    getReturnType: function(args) {
        return ValueTypes.BOOLEAN;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 1);
        assertBoolean(args[0]);
        return "(!".concat(expressionToGlsl(context, args[0]), ")");
    }
};
function getDecisionOperator(operator) {
    return {
        getReturnType: function(args) {
            return ValueTypes.BOOLEAN;
        },
        toGlsl: function(context, args) {
            assertArgsMinCount(args, 2);
            for(var i = 0; i < args.length; i++)assertBoolean(args[i]);
            var result = "";
            result = args.map(function(arg) {
                return expressionToGlsl(context, arg);
            }).join(" ".concat(operator, " "));
            result = "(".concat(result, ")");
            return result;
        }
    };
}
Operators["all"] = getDecisionOperator("&&");
Operators["any"] = getDecisionOperator("||");
Operators["between"] = {
    getReturnType: function(args) {
        return ValueTypes.BOOLEAN;
    },
    toGlsl: function(context, args) {
        assertArgsCount(args, 3);
        assertNumbers(args);
        var min = expressionToGlsl(context, args[1]);
        var max = expressionToGlsl(context, args[2]);
        var value = expressionToGlsl(context, args[0]);
        return "(".concat(value, " >= ").concat(min, " && ").concat(value, " <= ").concat(max, ")");
    }
};
Operators["array"] = {
    getReturnType: function(args) {
        return ValueTypes.NUMBER_ARRAY;
    },
    toGlsl: function(context, args) {
        assertArgsMinCount(args, 2);
        assertArgsMaxCount(args, 4);
        assertNumbers(args);
        var parsedArgs = args.map(function(val) {
            return expressionToGlsl(context, val, ValueTypes.NUMBER);
        });
        return "vec".concat(args.length, "(").concat(parsedArgs.join(", "), ")");
    }
};
Operators["color"] = {
    getReturnType: function(args) {
        return ValueTypes.COLOR;
    },
    toGlsl: function(context, args) {
        assertArgsMinCount(args, 3);
        assertArgsMaxCount(args, 4);
        assertNumbers(args);
        var array = args;
        if (args.length === 3) array.push(1);
        var parsedArgs = args.map(function(val, i) {
            return expressionToGlsl(context, val, ValueTypes.NUMBER) + (i < 3 ? " / 255.0" : "");
        });
        return "vec".concat(args.length, "(").concat(parsedArgs.join(", "), ")");
    }
};
Operators["interpolate"] = {
    getReturnType: function(args) {
        var type = ValueTypes.COLOR | ValueTypes.NUMBER;
        for(var i = 3; i < args.length; i += 2)type = type & getValueType(args[i]);
        return type;
    },
    toGlsl: function(context, args, opt_typeHint) {
        assertArgsEven(args);
        assertArgsMinCount(args, 6);
        // validate interpolation type
        var type = args[0];
        var interpolation;
        switch(type[0]){
            case "linear":
                interpolation = 1;
                break;
            case "exponential":
                interpolation = type[1];
                break;
            default:
                interpolation = null;
        }
        if (!interpolation) throw new Error('Invalid interpolation type for "interpolate" operator, received: '.concat(JSON.stringify(type)));
        // compute input/output types
        var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;
        var outputType = Operators["interpolate"].getReturnType(args) & typeHint;
        assertUniqueInferredType(args, outputType);
        var input = expressionToGlsl(context, args[1]);
        var exponent = numberToGlsl(interpolation);
        var result = "";
        for(var i = 2; i < args.length - 2; i += 2){
            var stop1 = expressionToGlsl(context, args[i]);
            var output1 = result || expressionToGlsl(context, args[i + 1], outputType);
            var stop2 = expressionToGlsl(context, args[i + 2]);
            var output2 = expressionToGlsl(context, args[i + 3], outputType);
            result = "mix(".concat(output1, ", ").concat(output2, ", pow(clamp((").concat(input, " - ").concat(stop1, ") / (").concat(stop2, " - ").concat(stop1, "), 0.0, 1.0), ").concat(exponent, "))");
        }
        return result;
    }
};
Operators["match"] = {
    getReturnType: function(args) {
        var type = ValueTypes.ANY;
        for(var i = 2; i < args.length; i += 2)type = type & getValueType(args[i]);
        type = type & getValueType(args[args.length - 1]);
        return type;
    },
    toGlsl: function(context, args, opt_typeHint) {
        assertArgsEven(args);
        assertArgsMinCount(args, 4);
        var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;
        var outputType = Operators["match"].getReturnType(args) & typeHint;
        assertUniqueInferredType(args, outputType);
        var input = expressionToGlsl(context, args[0]);
        var fallback = expressionToGlsl(context, args[args.length - 1], outputType);
        var result = null;
        for(var i = args.length - 3; i >= 1; i -= 2){
            var match = expressionToGlsl(context, args[i]);
            var output = expressionToGlsl(context, args[i + 1], outputType);
            result = "(".concat(input, " == ").concat(match, " ? ").concat(output, " : ").concat(result || fallback, ")");
        }
        return result;
    }
};
Operators["case"] = {
    getReturnType: function(args) {
        var type = ValueTypes.ANY;
        for(var i = 1; i < args.length; i += 2)type = type & getValueType(args[i]);
        type = type & getValueType(args[args.length - 1]);
        return type;
    },
    toGlsl: function(context, args, opt_typeHint) {
        assertArgsOdd(args);
        assertArgsMinCount(args, 3);
        var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;
        var outputType = Operators["case"].getReturnType(args) & typeHint;
        assertUniqueInferredType(args, outputType);
        for(var i = 0; i < args.length - 1; i += 2)assertBoolean(args[i]);
        var fallback = expressionToGlsl(context, args[args.length - 1], outputType);
        var result = null;
        for(var i = args.length - 3; i >= 0; i -= 2){
            var condition = expressionToGlsl(context, args[i]);
            var output = expressionToGlsl(context, args[i + 1], outputType);
            result = "(".concat(condition, " ? ").concat(output, " : ").concat(result || fallback, ")");
        }
        return result;
    }
};

},{"../webgl/PaletteTexture.js":"ekYZh","../renderer/webgl/TileLayer.js":"5oKfz","../color.js":"4tahz","../math.js":"5jEFr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ekYZh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/webgl/PaletteTexture
 */ var PaletteTexture = /** @class */ function() {
    /**
     * @param {string} name The name of the texture.
     * @param {Uint8Array} data The texture data.
     */ function PaletteTexture1(name, data) {
        this.name = name;
        this.data = data;
        /**
         * @type {WebGLTexture}
         * @private
         */ this.texture_ = null;
    }
    /**
     * @param {WebGLRenderingContext} gl Rendering context.
     * @return {WebGLTexture} The texture.
     */ PaletteTexture1.prototype.getTexture = function(gl) {
        if (!this.texture_) {
            var texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.data.length / 4, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);
            this.texture_ = texture;
        }
        return this.texture_;
    };
    return PaletteTexture1;
}();
exports.default = PaletteTexture;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5oKfz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Uniforms", ()=>Uniforms);
parcelHelpers.export(exports, "Attributes", ()=>Attributes);
/**
 * @module ol/renderer/webgl/TileLayer
 */ var _lrucacheJs = require("../../structs/LRUCache.js");
var _lrucacheJsDefault = parcelHelpers.interopDefault(_lrucacheJs);
var _stateJs = require("../../source/State.js");
var _stateJsDefault = parcelHelpers.interopDefault(_stateJs);
var _tileRangeJs = require("../../TileRange.js");
var _tileRangeJsDefault = parcelHelpers.interopDefault(_tileRangeJs);
var _tileStateJs = require("../../TileState.js");
var _tileStateJsDefault = parcelHelpers.interopDefault(_tileStateJs);
var _tileTextureJs = require("../../webgl/TileTexture.js");
var _tileTextureJsDefault = parcelHelpers.interopDefault(_tileTextureJs);
var _bufferJs = require("../../webgl/Buffer.js");
var _bufferJsDefault = parcelHelpers.interopDefault(_bufferJs);
var _layerJs = require("./Layer.js");
var _layerJsDefault = parcelHelpers.interopDefault(_layerJs);
var _helperJs = require("../../webgl/Helper.js");
var _webglJs = require("../../webgl.js");
var _transformJs = require("../../transform.js");
var _extentJs = require("../../extent.js");
var _mat4Js = require("../../vec/mat4.js");
var _tilecoordJs = require("../../tilecoord.js");
var _projJs = require("../../proj.js");
var _utilJs = require("../../util.js");
var _arrayJs = require("../../array.js");
var _sizeJs = require("../../size.js");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var Uniforms = {
    TILE_TEXTURE_ARRAY: "u_tileTextures",
    TILE_TRANSFORM: "u_tileTransform",
    TRANSITION_ALPHA: "u_transitionAlpha",
    DEPTH: "u_depth",
    TEXTURE_PIXEL_WIDTH: "u_texturePixelWidth",
    TEXTURE_PIXEL_HEIGHT: "u_texturePixelHeight",
    TEXTURE_RESOLUTION: "u_textureResolution",
    TEXTURE_ORIGIN_X: "u_textureOriginX",
    TEXTURE_ORIGIN_Y: "u_textureOriginY",
    RENDER_EXTENT: "u_renderExtent",
    RESOLUTION: "u_resolution",
    ZOOM: "u_zoom"
};
var Attributes = {
    TEXTURE_COORD: "a_textureCoord"
};
/**
 * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}
 */ var attributeDescriptions = [
    {
        name: Attributes.TEXTURE_COORD,
        size: 2,
        type: (0, _helperJs.AttributeType).FLOAT
    }, 
];
/**
 * @type {Object<string, boolean>}
 */ var empty = {};
/**
 * Transform a zoom level into a depth value ranging from -1 to 1.
 * @param {number} z A zoom level.
 * @return {number} A depth value.
 */ function depthForZ(z) {
    return 2 * (1 - 1 / (z + 1)) - 1;
}
/**
 * Add a tile texture to the lookup.
 * @param {Object<number, Array<import("../../webgl/TileTexture.js").default>>} tileTexturesByZ Lookup of
 * tile textures by zoom level.
 * @param {import("../../webgl/TileTexture.js").default} tileTexture A tile texture.
 * @param {number} z The zoom level.
 */ function addTileTextureToLookup(tileTexturesByZ, tileTexture, z) {
    if (!(z in tileTexturesByZ)) tileTexturesByZ[z] = [];
    tileTexturesByZ[z].push(tileTexture);
}
/**
 * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
 * @param {import("../../extent.js").Extent} extent The frame extent.
 * @return {import("../../extent.js").Extent} Frame extent intersected with layer extents.
 */ function getRenderExtent(frameState, extent) {
    var layerState = frameState.layerStatesArray[frameState.layerIndex];
    if (layerState.extent) extent = (0, _extentJs.getIntersection)(extent, (0, _projJs.fromUserExtent)(layerState.extent, frameState.viewState.projection));
    var source = /** @type {import("../../source/Tile.js").default} */ layerState.layer.getRenderSource();
    if (!source.getWrapX()) {
        var gridExtent = source.getTileGridForProjection(frameState.viewState.projection).getExtent();
        if (gridExtent) extent = (0, _extentJs.getIntersection)(extent, gridExtent);
    }
    return extent;
}
function getCacheKey(source, tileCoord) {
    return "".concat(source.getKey(), ",").concat((0, _tilecoordJs.getKey)(tileCoord));
}
/**
 * @typedef {Object} Options
 * @property {string} vertexShader Vertex shader source.
 * @property {string} fragmentShader Fragment shader source.
 * @property {Object<string, import("../../webgl/Helper").UniformValue>} [uniforms] Additional uniforms
 * made available to shaders.
 * @property {Array<import("../../webgl/PaletteTexture.js").default>} [paletteTextures] Palette textures.
 * @property {number} [cacheSize=512] The texture cache size.
 */ /**
 * @typedef {import("../../layer/WebGLTile.js").default} LayerType
 */ /**
 * @classdesc
 * WebGL renderer for tile layers.
 * @extends {WebGLLayerRenderer<LayerType>}
 * @api
 */ var WebGLTileLayerRenderer = /** @class */ function(_super) {
    __extends(WebGLTileLayerRenderer1, _super);
    /**
     * @param {LayerType} tileLayer Tile layer.
     * @param {Options} options Options.
     */ function WebGLTileLayerRenderer1(tileLayer, options) {
        var _this = _super.call(this, tileLayer, {
            uniforms: options.uniforms
        }) || this;
        /**
         * The last call to `renderFrame` was completed with all tiles loaded
         * @type {boolean}
         */ _this.renderComplete = false;
        /**
         * This transform converts texture coordinates to screen coordinates.
         * @type {import("../../transform.js").Transform}
         * @private
         */ _this.tileTransform_ = (0, _transformJs.create)();
        /**
         * @type {Array<number>}
         * @private
         */ _this.tempMat4_ = (0, _mat4Js.create)();
        /**
         * @type {import("../../TileRange.js").default}
         * @private
         */ _this.tempTileRange_ = new (0, _tileRangeJsDefault.default)(0, 0, 0, 0);
        /**
         * @type {import("../../tilecoord.js").TileCoord}
         * @private
         */ _this.tempTileCoord_ = (0, _tilecoordJs.createOrUpdate)(0, 0, 0);
        /**
         * @type {import("../../size.js").Size}
         * @private
         */ _this.tempSize_ = [
            0,
            0
        ];
        /**
         * @type {WebGLProgram}
         * @private
         */ _this.program_;
        /**
         * @private
         */ _this.vertexShader_ = options.vertexShader;
        /**
         * @private
         */ _this.fragmentShader_ = options.fragmentShader;
        /**
         * Tiles are rendered as a quad with the following structure:
         *
         *  [P3]---------[P2]
         *   |`           |
         *   |  `     B   |
         *   |    `       |
         *   |      `     |
         *   |   A    `   |
         *   |          ` |
         *  [P0]---------[P1]
         *
         * Triangle A: P0, P1, P3
         * Triangle B: P1, P2, P3
         *
         * @private
         */ _this.indices_ = new (0, _bufferJsDefault.default)((0, _webglJs.ELEMENT_ARRAY_BUFFER), (0, _webglJs.STATIC_DRAW));
        _this.indices_.fromArray([
            0,
            1,
            3,
            1,
            2,
            3
        ]);
        var cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;
        /**
         * @type {import("../../structs/LRUCache.js").default<import("../../webgl/TileTexture.js").default>}
         * @private
         */ _this.tileTextureCache_ = new (0, _lrucacheJsDefault.default)(cacheSize);
        /**
         * @type {Array<import("../../webgl/PaletteTexture.js").default>}
         * @private
         */ _this.paletteTextures_ = options.paletteTextures || [];
        /**
         * @private
         * @type {import("../../PluggableMap.js").FrameState|null}
         */ _this.frameState_ = null;
        return _this;
    }
    /**
     * @param {Options} options Options.
     */ WebGLTileLayerRenderer1.prototype.reset = function(options) {
        _super.prototype.reset.call(this, {
            uniforms: options.uniforms
        });
        this.vertexShader_ = options.vertexShader;
        this.fragmentShader_ = options.fragmentShader;
        this.paletteTextures_ = options.paletteTextures || [];
        if (this.helper) this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);
    };
    WebGLTileLayerRenderer1.prototype.afterHelperCreated = function() {
        this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);
        this.helper.flushBufferData(this.indices_);
    };
    /**
     * @param {import("../../webgl/TileTexture").TileType} tile Tile.
     * @return {boolean} Tile is drawable.
     * @private
     */ WebGLTileLayerRenderer1.prototype.isDrawableTile_ = function(tile) {
        var tileLayer = this.getLayer();
        var tileState = tile.getState();
        var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
        return tileState == (0, _tileStateJsDefault.default).LOADED || tileState == (0, _tileStateJsDefault.default).EMPTY || tileState == (0, _tileStateJsDefault.default).ERROR && !useInterimTilesOnError;
    };
    /**
     * Determine whether renderFrame should be called.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */ WebGLTileLayerRenderer1.prototype.prepareFrameInternal = function(frameState) {
        var layer = this.getLayer();
        var source = layer.getRenderSource();
        if (!source) return false;
        if ((0, _extentJs.isEmpty)(getRenderExtent(frameState, frameState.extent))) return false;
        return source.getState() === (0, _stateJsDefault.default).READY;
    };
    /**
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @param {import("../../extent.js").Extent} extent The extent to be rendered.
     * @param {number} initialZ The zoom level.
     * @param {Object<number, Array<TileTexture>>} tileTexturesByZ The zoom level.
     */ WebGLTileLayerRenderer1.prototype.enqueueTiles = function(frameState, extent, initialZ, tileTexturesByZ) {
        var viewState = frameState.viewState;
        var tileLayer = this.getLayer();
        var tileSource = tileLayer.getRenderSource();
        var tileGrid = tileSource.getTileGridForProjection(viewState.projection);
        var tilePixelRatio = tileSource.getTilePixelRatio(frameState.pixelRatio);
        var gutter = tileSource.getGutterForProjection(viewState.projection);
        var tileSourceKey = (0, _utilJs.getUid)(tileSource);
        if (!(tileSourceKey in frameState.wantedTiles)) frameState.wantedTiles[tileSourceKey] = {};
        var wantedTiles = frameState.wantedTiles[tileSourceKey];
        var tileTextureCache = this.tileTextureCache_;
        var minZ = Math.max(initialZ - tileLayer.getPreload(), tileGrid.getMinZoom(), tileLayer.getMinZoom());
        for(var z = initialZ; z >= minZ; --z){
            var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, this.tempTileRange_);
            var tileResolution = tileGrid.getResolution(z);
            for(var x = tileRange.minX; x <= tileRange.maxX; ++x)for(var y = tileRange.minY; y <= tileRange.maxY; ++y){
                var tileCoord = (0, _tilecoordJs.createOrUpdate)(z, x, y, this.tempTileCoord_);
                var cacheKey = getCacheKey(tileSource, tileCoord);
                /** @type {TileTexture} */ var tileTexture = void 0;
                /** @type {import("../../webgl/TileTexture").TileType} */ var tile = void 0;
                if (tileTextureCache.containsKey(cacheKey)) {
                    tileTexture = tileTextureCache.get(cacheKey);
                    tile = tileTexture.tile;
                }
                if (!tileTexture || tileTexture.tile.key !== tileSource.getKey()) {
                    tile = tileSource.getTile(z, x, y, frameState.pixelRatio, viewState.projection);
                    if (!tileTexture) {
                        tileTexture = new (0, _tileTextureJsDefault.default)({
                            tile: tile,
                            grid: tileGrid,
                            helper: this.helper,
                            tilePixelRatio: tilePixelRatio,
                            gutter: gutter
                        });
                        tileTextureCache.set(cacheKey, tileTexture);
                    } else if (this.isDrawableTile_(tile)) tileTexture.setTile(tile);
                    else {
                        var interimTile = /** @type {import("../../webgl/TileTexture").TileType} */ tile.getInterimTile();
                        tileTexture.setTile(interimTile);
                    }
                }
                addTileTextureToLookup(tileTexturesByZ, tileTexture, z);
                var tileQueueKey = tile.getKey();
                wantedTiles[tileQueueKey] = true;
                if (tile.getState() === (0, _tileStateJsDefault.default).IDLE) {
                    if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) frameState.tileQueue.enqueue([
                        tile,
                        tileSourceKey,
                        tileGrid.getTileCoordCenter(tileCoord),
                        tileResolution, 
                    ]);
                }
            }
        }
    };
    /**
     * Render the layer.
     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
     * @return {HTMLElement} The rendered element.
     */ WebGLTileLayerRenderer1.prototype.renderFrame = function(frameState1) {
        this.frameState_ = frameState1;
        this.renderComplete = true;
        var gl = this.helper.getGL();
        this.preRender(gl, frameState1);
        var viewState = frameState1.viewState;
        var tileLayer = this.getLayer();
        var tileSource = tileLayer.getRenderSource();
        var tileGrid = tileSource.getTileGridForProjection(viewState.projection);
        var extent = getRenderExtent(frameState1, frameState1.extent);
        var z = tileGrid.getZForResolution(viewState.resolution, tileSource.zDirection);
        /**
         * @type {Object<number, Array<import("../../webgl/TileTexture.js").default>>}
         */ var tileTexturesByZ = {};
        if (frameState1.nextExtent) {
            var targetZ = tileGrid.getZForResolution(viewState.nextResolution, tileSource.zDirection);
            var nextExtent = getRenderExtent(frameState1, frameState1.nextExtent);
            this.enqueueTiles(frameState1, nextExtent, targetZ, tileTexturesByZ);
        }
        this.enqueueTiles(frameState1, extent, z, tileTexturesByZ);
        /**
         * A lookup of alpha values for tiles at the target rendering resolution
         * for tiles that are in transition.  If a tile coord key is absent from
         * this lookup, the tile should be rendered at alpha 1.
         * @type {Object<string, number>}
         */ var alphaLookup = {};
        var uid = (0, _utilJs.getUid)(this);
        var time = frameState1.time;
        var blend = false;
        // look for cached tiles to use if a target tile is not ready
        var tileTextures = tileTexturesByZ[z];
        for(var i = 0, ii = tileTextures.length; i < ii; ++i){
            var tileTexture = tileTextures[i];
            var tile = tileTexture.tile;
            var tileCoord = tile.tileCoord;
            if (tileTexture.loaded) {
                var alpha = tile.getAlpha(uid, time);
                if (alpha === 1) {
                    // no need to look for alt tiles
                    tile.endTransition(uid);
                    continue;
                }
                blend = true;
                var tileCoordKey = (0, _tilecoordJs.getKey)(tileCoord);
                alphaLookup[tileCoordKey] = alpha;
            }
            this.renderComplete = false;
            // first look for child tiles (at z + 1)
            var coveredByChildren = this.findAltTiles_(tileGrid, tileCoord, z + 1, tileTexturesByZ);
            if (coveredByChildren) continue;
            // next look for parent tiles
            var minZoom = tileGrid.getMinZoom();
            for(var parentZ = z - 1; parentZ >= minZoom; --parentZ){
                var coveredByParent = this.findAltTiles_(tileGrid, tileCoord, parentZ, tileTexturesByZ);
                if (coveredByParent) break;
            }
        }
        this.helper.useProgram(this.program_);
        this.helper.prepareDraw(frameState1, !blend);
        var zs = Object.keys(tileTexturesByZ).map(Number).sort((0, _arrayJs.numberSafeCompareFunction));
        var centerX = viewState.center[0];
        var centerY = viewState.center[1];
        for(var j = 0, jj = zs.length; j < jj; ++j){
            var tileZ = zs[j];
            var tileResolution = tileGrid.getResolution(tileZ);
            var tileSize = (0, _sizeJs.toSize)(tileGrid.getTileSize(tileZ), this.tempSize_);
            var tileOrigin = tileGrid.getOrigin(tileZ);
            var centerI = (centerX - tileOrigin[0]) / (tileSize[0] * tileResolution);
            var centerJ = (tileOrigin[1] - centerY) / (tileSize[1] * tileResolution);
            var tileScale = viewState.resolution / tileResolution;
            var depth = depthForZ(tileZ);
            var tileTextures_1 = tileTexturesByZ[tileZ];
            for(var i = 0, ii = tileTextures_1.length; i < ii; ++i){
                var tileTexture = tileTextures_1[i];
                if (!tileTexture.loaded) continue;
                var tile = tileTexture.tile;
                var tileCoord = tile.tileCoord;
                var tileCoordKey = (0, _tilecoordJs.getKey)(tileCoord);
                var tileCenterI = tileCoord[1];
                var tileCenterJ = tileCoord[2];
                (0, _transformJs.compose)(this.tileTransform_, 0, 0, 2 / (frameState1.size[0] * tileScale / tileSize[0]), -2 / (frameState1.size[1] * tileScale / tileSize[1]), viewState.rotation, -(centerI - tileCenterI), -(centerJ - tileCenterJ));
                this.helper.setUniformMatrixValue(Uniforms.TILE_TRANSFORM, (0, _mat4Js.fromTransform)(this.tempMat4_, this.tileTransform_));
                this.helper.bindBuffer(tileTexture.coords);
                this.helper.bindBuffer(this.indices_);
                this.helper.enableAttributes(attributeDescriptions);
                var textureSlot = 0;
                while(textureSlot < tileTexture.textures.length){
                    var textureProperty = "TEXTURE" + textureSlot;
                    var uniformName = "".concat(Uniforms.TILE_TEXTURE_ARRAY, "[").concat(textureSlot, "]");
                    gl.activeTexture(gl[textureProperty]);
                    gl.bindTexture(gl.TEXTURE_2D, tileTexture.textures[textureSlot]);
                    gl.uniform1i(this.helper.getUniformLocation(uniformName), textureSlot);
                    ++textureSlot;
                }
                for(var paletteIndex = 0; paletteIndex < this.paletteTextures_.length; ++paletteIndex){
                    var paletteTexture = this.paletteTextures_[paletteIndex];
                    gl.activeTexture(gl["TEXTURE" + textureSlot]);
                    var texture = paletteTexture.getTexture(gl);
                    gl.bindTexture(gl.TEXTURE_2D, texture);
                    gl.uniform1i(this.helper.getUniformLocation(paletteTexture.name), textureSlot);
                    ++textureSlot;
                }
                var alpha = tileCoordKey in alphaLookup ? alphaLookup[tileCoordKey] : 1;
                if (alpha < 1) frameState1.animate = true;
                this.helper.setUniformFloatValue(Uniforms.TRANSITION_ALPHA, alpha);
                this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);
                this.helper.setUniformFloatValue(Uniforms.TEXTURE_PIXEL_WIDTH, tileSize[0]);
                this.helper.setUniformFloatValue(Uniforms.TEXTURE_PIXEL_HEIGHT, tileSize[1]);
                this.helper.setUniformFloatValue(Uniforms.TEXTURE_RESOLUTION, tileResolution);
                this.helper.setUniformFloatValue(Uniforms.TEXTURE_ORIGIN_X, tileOrigin[0] + tileCenterI * tileSize[0] * tileResolution);
                this.helper.setUniformFloatValue(Uniforms.TEXTURE_ORIGIN_Y, tileOrigin[1] - tileCenterJ * tileSize[1] * tileResolution);
                this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, extent);
                this.helper.setUniformFloatValue(Uniforms.RESOLUTION, viewState.resolution);
                this.helper.setUniformFloatValue(Uniforms.ZOOM, viewState.zoom);
                this.helper.drawElements(0, this.indices_.getSize());
            }
        }
        this.helper.finalizeDraw(frameState1, this.dispatchPreComposeEvent, this.dispatchPostComposeEvent);
        var canvas = this.helper.getCanvas();
        var tileTextureCache = this.tileTextureCache_;
        while(tileTextureCache.canExpireCache()){
            var tileTexture = tileTextureCache.pop();
            tileTexture.dispose();
        }
        // TODO: let the renderers manage their own cache instead of managing the source cache
        /**
         * Here we unconditionally expire the source cache since the renderer maintains
         * its own cache.
         * @param {import("../../PluggableMap.js").default} map Map.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         */ var postRenderFunction = function(map, frameState) {
            tileSource.expireCache(frameState.viewState.projection, empty);
        };
        frameState1.postRenderFunctions.push(postRenderFunction);
        this.postRender(gl, frameState1);
        return canvas;
    };
    /**
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView} Data at the pixel location.
     */ WebGLTileLayerRenderer1.prototype.getData = function(pixel) {
        var gl = this.helper.getGL();
        if (!gl) return null;
        var frameState = this.frameState_;
        if (!frameState) return null;
        var layer = this.getLayer();
        var coordinate = (0, _transformJs.apply)(frameState.pixelToCoordinateTransform, pixel.slice());
        var viewState = frameState.viewState;
        var layerExtent = layer.getExtent();
        if (layerExtent) {
            if (!(0, _extentJs.containsCoordinate)((0, _projJs.fromUserExtent)(layerExtent, viewState.projection), coordinate)) return null;
        }
        var source = layer.getRenderSource();
        var tileGrid = source.getTileGridForProjection(viewState.projection);
        if (!source.getWrapX()) {
            var gridExtent = tileGrid.getExtent();
            if (gridExtent) {
                if (!(0, _extentJs.containsCoordinate)(gridExtent, coordinate)) return null;
            }
        }
        var tileTextureCache = this.tileTextureCache_;
        for(var z = tileGrid.getZForResolution(viewState.resolution); z >= tileGrid.getMinZoom(); --z){
            var tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);
            var cacheKey = getCacheKey(source, tileCoord);
            if (!tileTextureCache.containsKey(cacheKey)) continue;
            var tileTexture = tileTextureCache.get(cacheKey);
            if (!tileTexture.loaded) continue;
            var tileOrigin = tileGrid.getOrigin(z);
            var tileSize = (0, _sizeJs.toSize)(tileGrid.getTileSize(z));
            var tileResolution = tileGrid.getResolution(z);
            var col = (coordinate[0] - tileOrigin[0]) / tileResolution - tileCoord[1] * tileSize[0];
            var row = (tileOrigin[1] - coordinate[1]) / tileResolution - tileCoord[2] * tileSize[1];
            return tileTexture.getPixelData(col, row);
        }
        return null;
    };
    /**
     * Look for tiles covering the provided tile coordinate at an alternate
     * zoom level.  Loaded tiles will be added to the provided tile texture lookup.
     * @param {import("../../tilegrid/TileGrid.js").default} tileGrid The tile grid.
     * @param {import("../../tilecoord.js").TileCoord} tileCoord The target tile coordinate.
     * @param {number} altZ The alternate zoom level.
     * @param {Object<number, Array<import("../../webgl/TileTexture.js").default>>} tileTexturesByZ Lookup of
     * tile textures by zoom level.
     * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.
     * @private
     */ WebGLTileLayerRenderer1.prototype.findAltTiles_ = function(tileGrid, tileCoord, altZ, tileTexturesByZ) {
        var tileRange = tileGrid.getTileRangeForTileCoordAndZ(tileCoord, altZ, this.tempTileRange_);
        if (!tileRange) return false;
        var covered = true;
        var tileTextureCache = this.tileTextureCache_;
        var source = this.getLayer().getRenderSource();
        for(var x = tileRange.minX; x <= tileRange.maxX; ++x)for(var y = tileRange.minY; y <= tileRange.maxY; ++y){
            var cacheKey = getCacheKey(source, [
                altZ,
                x,
                y
            ]);
            var loaded = false;
            if (tileTextureCache.containsKey(cacheKey)) {
                var tileTexture = tileTextureCache.get(cacheKey);
                if (tileTexture.loaded) {
                    addTileTextureToLookup(tileTexturesByZ, tileTexture, altZ);
                    loaded = true;
                }
            }
            if (!loaded) covered = false;
        }
        return covered;
    };
    WebGLTileLayerRenderer1.prototype.removeHelper = function() {
        if (this.helper) {
            var tileTextureCache = this.tileTextureCache_;
            tileTextureCache.forEach(function(tileTexture) {
                return tileTexture.dispose();
            });
            tileTextureCache.clear();
        }
        _super.prototype.removeHelper.call(this);
    };
    /**
     * Clean up.
     */ WebGLTileLayerRenderer1.prototype.disposeInternal = function() {
        var helper = this.helper;
        if (helper) {
            var gl = helper.getGL();
            gl.deleteProgram(this.program_);
            delete this.program_;
            helper.deleteBuffer(this.indices_);
        }
        _super.prototype.disposeInternal.call(this);
        delete this.indices_;
        delete this.tileTextureCache_;
        delete this.frameState_;
    };
    return WebGLTileLayerRenderer1;
}((0, _layerJsDefault.default));
exports.default = WebGLTileLayerRenderer;

},{"../../structs/LRUCache.js":"cmjR9","../../source/State.js":"gW573","../../TileRange.js":"3pvAn","../../TileState.js":"2fodI","../../webgl/TileTexture.js":"grmx0","../../webgl/Buffer.js":"gQebi","./Layer.js":"d36Vl","../../webgl/Helper.js":"9XgW2","../../webgl.js":"3P5v4","../../transform.js":"1BqUf","../../extent.js":"6YrVc","../../vec/mat4.js":"7p8ap","../../tilecoord.js":"bZ2LT","../../proj.js":"SznqC","../../util.js":"pLBjQ","../../array.js":"1Fbic","../../size.js":"lKEPe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"grmx0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dataTileJs = require("../DataTile.js");
var _dataTileJsDefault = parcelHelpers.interopDefault(_dataTileJs);
var _targetJs = require("../events/Target.js");
var _targetJsDefault = parcelHelpers.interopDefault(_targetJs);
var _eventTypeJs = require("../events/EventType.js");
var _eventTypeJsDefault = parcelHelpers.interopDefault(_eventTypeJs);
var _imageTileJs = require("../ImageTile.js");
var _imageTileJsDefault = parcelHelpers.interopDefault(_imageTileJs);
var _tileJs = require("../reproj/Tile.js");
var _tileJsDefault = parcelHelpers.interopDefault(_tileJs);
var _tileStateJs = require("../TileState.js");
var _tileStateJsDefault = parcelHelpers.interopDefault(_tileStateJs);
var _bufferJs = require("./Buffer.js");
var _bufferJsDefault = parcelHelpers.interopDefault(_bufferJs);
var _webglJs = require("../webgl.js");
var _commonJs = require("../renderer/canvas/common.js");
var _objJs = require("../obj.js");
var _domJs = require("../dom.js");
var _sizeJs = require("../size.js");
/**
 * @module ol/webgl/TileTexture
 */ var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * @param {WebGLRenderingContext} gl The WebGL context.
 * @param {WebGLTexture} texture The texture.
 * @param {boolean} interpolate Interpolate when resampling.
 */ function bindAndConfigure(gl, texture, interpolate) {
    var resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);
}
/**
 * @param {WebGLRenderingContext} gl The WebGL context.
 * @param {WebGLTexture} texture The texture.
 * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image The image.
 * @param {boolean} interpolate Interpolate when resampling.
 */ function uploadImageTexture(gl, texture, image, interpolate) {
    bindAndConfigure(gl, texture, interpolate);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
}
/**
 * @param {import("./Helper.js").default} helper The WebGL helper.
 * @param {WebGLTexture} texture The texture.
 * @param {import("../DataTile.js").Data} data The pixel data.
 * @param {import("../size.js").Size} size The pixel size.
 * @param {number} bandCount The band count.
 * @param {boolean} interpolate Interpolate when resampling.
 */ function uploadDataTexture(helper, texture, data, size, bandCount, interpolate) {
    var gl = helper.getGL();
    var textureType;
    var canInterpolate;
    if (data instanceof Float32Array) {
        textureType = gl.FLOAT;
        helper.getExtension("OES_texture_float");
        var extension = helper.getExtension("OES_texture_float_linear");
        canInterpolate = extension !== null;
    } else {
        textureType = gl.UNSIGNED_BYTE;
        canInterpolate = true;
    }
    bindAndConfigure(gl, texture, interpolate && canInterpolate);
    var bytesPerRow = data.byteLength / size[1];
    var unpackAlignment = 1;
    if (bytesPerRow % 8 === 0) unpackAlignment = 8;
    else if (bytesPerRow % 4 === 0) unpackAlignment = 4;
    else if (bytesPerRow % 2 === 0) unpackAlignment = 2;
    var format;
    switch(bandCount){
        case 1:
            format = gl.LUMINANCE;
            break;
        case 2:
            format = gl.LUMINANCE_ALPHA;
            break;
        case 3:
            format = gl.RGB;
            break;
        case 4:
            format = gl.RGBA;
            break;
        default:
            throw new Error("Unsupported number of bands: ".concat(bandCount));
    }
    var oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);
    gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);
    gl.texImage2D(gl.TEXTURE_2D, 0, format, size[0], size[1], 0, format, textureType, data);
    gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);
}
/**
 * @type {CanvasRenderingContext2D}
 */ var pixelContext = null;
function createPixelContext() {
    var canvas = document.createElement("canvas");
    canvas.width = 1;
    canvas.height = 1;
    pixelContext = canvas.getContext("2d");
}
/**
 * @typedef {import("../DataTile.js").default|ImageTile|ReprojTile} TileType
 */ /**
 * @typedef {Object} Options
 * @property {TileType} tile The tile.
 * @property {import("../tilegrid/TileGrid.js").default} grid Tile grid.
 * @property {import("../webgl/Helper.js").default} helper WebGL helper.
 * @property {number} [tilePixelRatio=1] Tile pixel ratio.
 * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.
 */ var TileTexture = /** @class */ function(_super) {
    __extends(TileTexture1, _super);
    /**
     * @param {Options} options The tile texture options.
     */ function TileTexture1(options) {
        var _this = _super.call(this) || this;
        /**
         * @type {TileType}
         */ _this.tile;
        /**
         * @type {Array<WebGLTexture>}
         */ _this.textures = [];
        _this.handleTileChange_ = _this.handleTileChange_.bind(_this);
        /**
         * @type {import("../size.js").Size}
         */ _this.size = (0, _sizeJs.toSize)(options.grid.getTileSize(options.tile.tileCoord[0]));
        /**
         * @type {number}
         * @private
         */ _this.tilePixelRatio_ = options.tilePixelRatio || 1;
        /**
         * @type {number}
         * @private
         */ _this.gutter_ = options.gutter || 0;
        /**
         * @type {number}
         */ _this.bandCount = NaN;
        /**
         * @type {import("../webgl/Helper.js").default}
         * @private
         */ _this.helper_ = options.helper;
        var coords = new (0, _bufferJsDefault.default)((0, _webglJs.ARRAY_BUFFER), (0, _webglJs.STATIC_DRAW));
        coords.fromArray([
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0, 
        ]);
        _this.helper_.flushBufferData(coords);
        /**
         * @type {WebGLArrayBuffer}
         */ _this.coords = coords;
        _this.setTile(options.tile);
        return _this;
    }
    /**
     * @param {TileType} tile Tile.
     */ TileTexture1.prototype.setTile = function(tile) {
        if (tile !== this.tile) {
            if (this.tile) this.tile.removeEventListener((0, _eventTypeJsDefault.default).CHANGE, this.handleTileChange_);
            this.tile = tile;
            this.textures.length = 0;
            this.loaded = tile.getState() === (0, _tileStateJsDefault.default).LOADED;
            if (this.loaded) this.uploadTile_();
            else {
                if (tile instanceof (0, _imageTileJsDefault.default)) {
                    var image = tile.getImage();
                    if (image instanceof Image && !image.crossOrigin) image.crossOrigin = "anonymous";
                }
                tile.addEventListener((0, _eventTypeJsDefault.default).CHANGE, this.handleTileChange_);
            }
        }
    };
    TileTexture1.prototype.uploadTile_ = function() {
        var helper = this.helper_;
        var gl = helper.getGL();
        var tile = this.tile;
        if (tile instanceof (0, _imageTileJsDefault.default) || tile instanceof (0, _tileJsDefault.default)) {
            var image = tile.getImage();
            if (this.gutter_ !== 0) {
                var gutter = this.tilePixelRatio_ * this.gutter_;
                var width = Math.round(image.width - 2 * gutter);
                var height = Math.round(image.height - 2 * gutter);
                var context = (0, _domJs.createCanvasContext2D)(width, height);
                if (!tile.interpolate) (0, _objJs.assign)(context, (0, _commonJs.IMAGE_SMOOTHING_DISABLED));
                context.drawImage(image, gutter, gutter, width, height, 0, 0, width, height);
                image = context.canvas;
            }
            var texture = gl.createTexture();
            this.textures.push(texture);
            this.bandCount = 4;
            uploadImageTexture(gl, texture, image, tile.interpolate);
            return;
        }
        var pixelSize = [
            this.size[0] * this.tilePixelRatio_,
            this.size[1] * this.tilePixelRatio_, 
        ];
        var data = tile.getData();
        var isFloat = data instanceof Float32Array;
        var pixelCount = pixelSize[0] * pixelSize[1];
        var DataType = isFloat ? Float32Array : Uint8Array;
        var bytesPerElement = DataType.BYTES_PER_ELEMENT;
        var bytesPerRow = data.byteLength / pixelSize[1];
        this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);
        var textureCount = Math.ceil(this.bandCount / 4);
        if (textureCount === 1) {
            var texture = gl.createTexture();
            this.textures.push(texture);
            uploadDataTexture(helper, texture, data, pixelSize, this.bandCount, tile.interpolate);
            return;
        }
        var textureDataArrays = new Array(textureCount);
        for(var textureIndex = 0; textureIndex < textureCount; ++textureIndex){
            var texture = gl.createTexture();
            this.textures.push(texture);
            var bandCount = textureIndex < textureCount - 1 ? 4 : this.bandCount % 4;
            textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);
        }
        var dataIndex = 0;
        var rowOffset = 0;
        var colCount = pixelSize[0] * this.bandCount;
        for(var rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex){
            for(var colIndex = 0; colIndex < colCount; ++colIndex){
                var dataValue = data[rowOffset + colIndex];
                var pixelIndex = Math.floor(dataIndex / this.bandCount);
                var bandIndex = colIndex % this.bandCount;
                var textureIndex = Math.floor(bandIndex / 4);
                var textureData = textureDataArrays[textureIndex];
                var bandCount = textureData.length / pixelCount;
                var textureBandIndex = bandIndex % 4;
                textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;
                ++dataIndex;
            }
            rowOffset += bytesPerRow / bytesPerElement;
        }
        for(var textureIndex = 0; textureIndex < textureCount; ++textureIndex){
            var texture = this.textures[textureIndex];
            var textureData = textureDataArrays[textureIndex];
            var bandCount = textureData.length / pixelCount;
            uploadDataTexture(helper, texture, textureData, pixelSize, bandCount, tile.interpolate);
        }
    };
    TileTexture1.prototype.handleTileChange_ = function() {
        if (this.tile.getState() === (0, _tileStateJsDefault.default).LOADED) {
            this.loaded = true;
            this.uploadTile_();
            this.dispatchEvent((0, _eventTypeJsDefault.default).CHANGE);
        }
    };
    TileTexture1.prototype.disposeInternal = function() {
        var gl = this.helper_.getGL();
        this.helper_.deleteBuffer(this.coords);
        for(var i = 0; i < this.textures.length; ++i)gl.deleteTexture(this.textures[i]);
        this.tile.removeEventListener((0, _eventTypeJsDefault.default).CHANGE, this.handleTileChange_);
    };
    /**
     * Get data for a pixel.  If the tile is not loaded, null is returned.
     * @param {number} col The column index.
     * @param {number} row The row index.
     * @return {import("../DataTile.js").Data|null} The data.
     */ TileTexture1.prototype.getPixelData = function(col, row) {
        if (!this.loaded) return null;
        col = Math.floor(this.tilePixelRatio_ * col);
        row = Math.floor(this.tilePixelRatio_ * row);
        if (this.tile instanceof (0, _dataTileJsDefault.default)) {
            var data_1 = this.tile.getData();
            var pixelsPerRow = Math.floor(this.tilePixelRatio_ * this.size[0]);
            if (data_1 instanceof DataView) {
                var bytesPerPixel = data_1.byteLength / (this.size[0] * this.size[1]);
                var offset_1 = row * pixelsPerRow * bytesPerPixel + col * bytesPerPixel;
                var buffer = data_1.buffer.slice(offset_1, offset_1 + bytesPerPixel);
                return new DataView(buffer);
            }
            var offset = row * pixelsPerRow * this.bandCount + col * this.bandCount;
            return data_1.slice(offset, offset + this.bandCount);
        }
        if (!pixelContext) createPixelContext();
        pixelContext.clearRect(0, 0, 1, 1);
        var data;
        var image = this.tile.getImage();
        try {
            pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);
            data = pixelContext.getImageData(0, 0, 1, 1).data;
        } catch (err) {
            return null;
        }
        return data;
    };
    return TileTexture1;
}((0, _targetJsDefault.default));
exports.default = TileTexture;

},{"../DataTile.js":"igUDC","../events/Target.js":"7T5Yi","../events/EventType.js":"hrQJ6","../ImageTile.js":"bGt2E","../reproj/Tile.js":"lR1TX","../TileState.js":"2fodI","./Buffer.js":"gQebi","../webgl.js":"3P5v4","../renderer/canvas/common.js":"fBoyo","../obj.js":"3ssAG","../dom.js":"84QzQ","../size.js":"lKEPe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"igUDC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @module ol/DataTile
 */ var _tileJs = require("./Tile.js");
var _tileJsDefault = parcelHelpers.interopDefault(_tileJs);
var _tileStateJs = require("./TileState.js");
var _tileStateJsDefault = parcelHelpers.interopDefault(_tileStateJs);
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/**
 * Data that can be used with a DataTile.  For increased browser compatibility, use
 * Uint8Array instead of Uint8ClampedArray where possible.
 * @typedef {Uint8Array|Uint8ClampedArray|Float32Array|DataView} Data
 */ /**
 * @typedef {Object} Options
 * @property {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
 * @property {function(): Promise<Data>} loader Data loader.
 * @property {number} [transition=250] A duration for tile opacity
 * transitions in milliseconds. A duration of 0 disables the opacity transition.
 * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
 * the nearest neighbor is used when resampling.
 * @api
 */ var DataTile = /** @class */ function(_super) {
    __extends(DataTile1, _super);
    /**
     * @param {Options} options Tile options.
     */ function DataTile1(options) {
        var _this = this;
        var state = (0, _tileStateJsDefault.default).IDLE;
        _this = _super.call(this, options.tileCoord, state, {
            transition: options.transition,
            interpolate: options.interpolate
        }) || this;
        /**
         * @type {function(): Promise<Data>}
         * @private
         */ _this.loader_ = options.loader;
        /**
         * @type {Data}
         * @private
         */ _this.data_ = null;
        /**
         * @type {Error}
         * @private
         */ _this.error_ = null;
        return _this;
    }
    /**
     * Get the data for the tile.
     * @return {Data} Tile data.
     * @api
     */ DataTile1.prototype.getData = function() {
        return this.data_;
    };
    /**
     * Get any loading error.
     * @return {Error} Loading error.
     * @api
     */ DataTile1.prototype.getError = function() {
        return this.error_;
    };
    /**
     * Load not yet loaded URI.
     * @api
     */ DataTile1.prototype.load = function() {
        this.state = (0, _tileStateJsDefault.default).LOADING;
        this.changed();
        var self = this;
        this.loader_().then(function(data) {
            self.data_ = data;
            self.state = (0, _tileStateJsDefault.default).LOADED;
            self.changed();
        }).catch(function(error) {
            self.error_ = error;
            self.state = (0, _tileStateJsDefault.default).ERROR;
            self.changed();
        });
    };
    return DataTile1;
}((0, _tileJsDefault.default));
exports.default = DataTile;

},{"./Tile.js":"4sqb5","./TileState.js":"2fodI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ljSWI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// jshint esversion: 10
var _overlay = require("ol/Overlay");
var _overlayDefault = parcelHelpers.interopDefault(_overlay);
var _dollarsFormat = require("../util/dollarsFormat");
class Popup extends (0, _overlayDefault.default) {
    /**
   * @param {Object} [opt_options] Control options.
   */ constructor(layer, opt_options){
        const options = opt_options || {}; // not sure all opt_options will pass correctly
        // TODO: Fix?: Below won't work if map has different ID name
        const mapContainer = document.getElementById("map-container");
        const popupContainer = document.createElement("div");
        popupContainer.id = "popup";
        popupContainer.classList.add("ol-popup");
        mapContainer.appendChild(popupContainer);
        const popupContent = document.createElement("div");
        popupContent.id = "popup-content";
        popupContainer.appendChild(popupContent);
        const closer = document.createElement("a");
        closer.href = "#";
        closer.id = "popup-closer";
        closer.classList.add("ol-popup-closer");
        popupContainer.appendChild(closer);
        super({
            element: popupContainer,
            autoPan: {
                animation: {
                    duration: 250
                }
            },
            target: options.target
        });
        closer.onclick = this.closePopup.bind(this);
        this.updatePopupContent = this.updatePopupContent.bind(this);
        this.createPopupMessage = this.createPopupMessage.bind(this);
        this.updateChartData = this.updateChartData.bind(this);
        this.getPopupData = this.getPopupData.bind(this);
        this.popupContent = popupContent;
        this.popupContainer = popupContainer;
        this.closer = closer;
        this.layerFilter = layer;
        this.popupState = false;
    }
    showPopup(event) {
        // Creates popup with feature details on feature click
        const clickedFeature = this.getMap().forEachFeatureAtPixel(event.pixel, (feature)=>feature, this.layerFilter);
        const clickedPixel = event.pixel;
        if (clickedFeature != undefined) {
            this.clickedFeature = clickedFeature;
            this.clickedFeaturePixel = clickedPixel;
            this.popupData = this.getPopupData();
            this.getMap().forEachFeatureAtPixel(event.pixel, this.updatePopupContent, this.layerFilter);
            // TODO: getFeatures(pixel) might be better performance, but less accuracy?
            const clickedCoordinate = event.coordinate;
            this.setPosition(clickedCoordinate);
            if (this.chart) this.updateChartData();
        } else console.log("clickedFeature is undefined");
        this.popupState = true;
    }
    closePopup() {
        // Removes popup overlay
        this.setPosition(undefined);
        this.closer.blur();
        this.popupState = false;
        return false;
    }
    updatePopupContent() {
        // General function for setting popup overlay text
        if (this.clickedFeature != undefined) {
            const message = this.createPopupMessage();
            this.popupContent.innerHTML = message;
        }
    }
    createPopupMessage() {
        // Creation of popup overlay text specific to map of housing prices
        const dataDate = this.layerFilter.animation.activeFilter;
        const placeName = this.popupData[0].RegionName;
        let housePrice;
        try {
            housePrice = (0, _dollarsFormat.dollarsWhole).format(this.popupData.filter((item)=>item.year === dataDate)[0].value);
        } catch  {
            housePrice = "No data available";
        }
        const message = "<h1>" + placeName + "</h1><h2>Typical home price in " + "<strong>" + dataDate + "</strong>" + ":</h2>\n<h3> " + housePrice + "</h3>";
        return message;
    }
    getPopupData() {
        // Gets data related to clicked feature from map layer, for plotting, etc.
        const filterVal = this.layerFilter.animation.animatedFieldUnique[this.layerFilter.animation.frame];
        const dataUniqueName = this.clickedFeature.values_.RegionName;
        const featureData = this.layerFilter.getSource().getFeatures().filter((item)=>item.values_.RegionName === dataUniqueName);
        const popupData = featureData.map((item)=>item.values_);
        popupData.sort((a, b)=>a.year - b.year);
        return popupData;
    }
    updateChartData() {
        // Sets chart data to dataset stored in popup overlay's popupData
        this.chart.updateSeries([
            {
                data: this.popupData.map((item)=>item.value)
            }
        ], true);
        this.chart.updateOptions({
            series: [
                {
                    name: this.popupData[0].RegionName,
                    data: this.popupData.map((item)=>item.value)
                }, 
            ],
            xaxis: {
                categories: this.popupData.map((item)=>item.year)
            },
            title: {
                text: this.popupData[0].RegionName
            }
        }, true, true // animate = true
        );
    }
}
exports.default = Popup;

},{"ol/Overlay":"j72Wp","../util/dollarsFormat":"k9D44","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k9D44":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dollarsWhole", ()=>dollarsWhole);
parcelHelpers.export(exports, "dollarsDec", ()=>dollarsDec);
// jshint esversion: 9
const dollarsWhole = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
    maximumFractionDigits: 0,
    minimumFractionDigits: 0
});
const dollarsDec = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
    maximumFractionDigits: 2,
    minimumFractionDigits: 0
});

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cty2q":[function(require,module,exports) {
/*!
 * ApexCharts v3.35.4
 * (c) 2018-2022 ApexCharts
 * Released under the MIT License.
 */ "use strict";
function t(t1, e1) {
    var i1 = Object.keys(t1);
    if (Object.getOwnPropertySymbols) {
        var a1 = Object.getOwnPropertySymbols(t1);
        e1 && (a1 = a1.filter(function(e2) {
            return Object.getOwnPropertyDescriptor(t1, e2).enumerable;
        })), i1.push.apply(i1, a1);
    }
    return i1;
}
function e(e3) {
    for(var i2 = 1; i2 < arguments.length; i2++){
        var a2 = null != arguments[i2] ? arguments[i2] : {};
        i2 % 2 ? t(Object(a2), !0).forEach(function(t2) {
            o(e3, t2, a2[t2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(a2)) : t(Object(a2)).forEach(function(t3) {
            Object.defineProperty(e3, t3, Object.getOwnPropertyDescriptor(a2, t3));
        });
    }
    return e3;
}
function i(t4) {
    return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
        return typeof t5;
    } : function(t6) {
        return t6 && "function" == typeof Symbol && t6.constructor === Symbol && t6 !== Symbol.prototype ? "symbol" : typeof t6;
    })(t4);
}
function a(t7, e4) {
    if (!(t7 instanceof e4)) throw new TypeError("Cannot call a class as a function");
}
function s(t8, e5) {
    for(var i3 = 0; i3 < e5.length; i3++){
        var a3 = e5[i3];
        a3.enumerable = a3.enumerable || !1, a3.configurable = !0, "value" in a3 && (a3.writable = !0), Object.defineProperty(t8, a3.key, a3);
    }
}
function r(t9, e6, i4) {
    return e6 && s(t9.prototype, e6), i4 && s(t9, i4), t9;
}
function o(t10, e7, i5) {
    return e7 in t10 ? Object.defineProperty(t10, e7, {
        value: i5,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : t10[e7] = i5, t10;
}
function n(t11, e8) {
    if ("function" != typeof e8 && null !== e8) throw new TypeError("Super expression must either be null or a function");
    t11.prototype = Object.create(e8 && e8.prototype, {
        constructor: {
            value: t11,
            writable: !0,
            configurable: !0
        }
    }), e8 && h(t11, e8);
}
function l(t12) {
    return (l = Object.setPrototypeOf ? Object.getPrototypeOf : function(t13) {
        return t13.__proto__ || Object.getPrototypeOf(t13);
    })(t12);
}
function h(t14, e9) {
    return (h = Object.setPrototypeOf || function(t15, e10) {
        return t15.__proto__ = e10, t15;
    })(t14, e9);
}
function c(t16, e11) {
    if (e11 && ("object" == typeof e11 || "function" == typeof e11)) return e11;
    if (void 0 !== e11) throw new TypeError("Derived constructors may only return object or undefined");
    return function(t17) {
        if (void 0 === t17) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t17;
    }(t16);
}
function d(t18) {
    var e12 = function() {
        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" == typeof Proxy) return !0;
        try {
            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), !0;
        } catch (t) {
            return !1;
        }
    }();
    return function() {
        var i6, a4 = l(t18);
        if (e12) {
            var s1 = l(this).constructor;
            i6 = Reflect.construct(a4, arguments, s1);
        } else i6 = a4.apply(this, arguments);
        return c(this, i6);
    };
}
function g(t19, e13) {
    return function(t20) {
        if (Array.isArray(t20)) return t20;
    }(t19) || function(t21, e14) {
        var i7 = null == t21 ? null : "undefined" != typeof Symbol && t21[Symbol.iterator] || t21["@@iterator"];
        if (null == i7) return;
        var a5, s2, r1 = [], o1 = !0, n1 = !1;
        try {
            for(i7 = i7.call(t21); !(o1 = (a5 = i7.next()).done) && (r1.push(a5.value), !e14 || r1.length !== e14); o1 = !0);
        } catch (t22) {
            n1 = !0, s2 = t22;
        } finally{
            try {
                o1 || null == i7.return || i7.return();
            } finally{
                if (n1) throw s2;
            }
        }
        return r1;
    }(t19, e13) || f(t19, e13) || function() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
}
function u(t23) {
    return function(t24) {
        if (Array.isArray(t24)) return p(t24);
    }(t23) || function(t25) {
        if ("undefined" != typeof Symbol && null != t25[Symbol.iterator] || null != t25["@@iterator"]) return Array.from(t25);
    }(t23) || f(t23) || function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
}
function f(t26, e15) {
    if (t26) {
        if ("string" == typeof t26) return p(t26, e15);
        var i8 = Object.prototype.toString.call(t26).slice(8, -1);
        return "Object" === i8 && t26.constructor && (i8 = t26.constructor.name), "Map" === i8 || "Set" === i8 ? Array.from(t26) : "Arguments" === i8 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i8) ? p(t26, e15) : void 0;
    }
}
function p(t27, e16) {
    (null == e16 || e16 > t27.length) && (e16 = t27.length);
    for(var i9 = 0, a6 = new Array(e16); i9 < e16; i9++)a6[i9] = t27[i9];
    return a6;
}
var x = function() {
    function t28() {
        a(this, t28);
    }
    return r(t28, [
        {
            key: "shadeRGBColor",
            value: function(t29, e17) {
                var i10 = e17.split(","), a7 = t29 < 0 ? 0 : 255, s3 = t29 < 0 ? -1 * t29 : t29, r2 = parseInt(i10[0].slice(4), 10), o2 = parseInt(i10[1], 10), n2 = parseInt(i10[2], 10);
                return "rgb(" + (Math.round((a7 - r2) * s3) + r2) + "," + (Math.round((a7 - o2) * s3) + o2) + "," + (Math.round((a7 - n2) * s3) + n2) + ")";
            }
        },
        {
            key: "shadeHexColor",
            value: function(t30, e18) {
                var i11 = parseInt(e18.slice(1), 16), a8 = t30 < 0 ? 0 : 255, s4 = t30 < 0 ? -1 * t30 : t30, r3 = i11 >> 16, o3 = i11 >> 8 & 255, n3 = 255 & i11;
                return "#" + (16777216 + 65536 * (Math.round((a8 - r3) * s4) + r3) + 256 * (Math.round((a8 - o3) * s4) + o3) + (Math.round((a8 - n3) * s4) + n3)).toString(16).slice(1);
            }
        },
        {
            key: "shadeColor",
            value: function(e19, i12) {
                return t28.isColorHex(i12) ? this.shadeHexColor(e19, i12) : this.shadeRGBColor(e19, i12);
            }
        }
    ], [
        {
            key: "bind",
            value: function(t31, e20) {
                return function() {
                    return t31.apply(e20, arguments);
                };
            }
        },
        {
            key: "isObject",
            value: function(t32) {
                return t32 && "object" === i(t32) && !Array.isArray(t32) && null != t32;
            }
        },
        {
            key: "is",
            value: function(t33, e21) {
                return Object.prototype.toString.call(e21) === "[object " + t33 + "]";
            }
        },
        {
            key: "listToArray",
            value: function(t34) {
                var e22, i13 = [];
                for(e22 = 0; e22 < t34.length; e22++)i13[e22] = t34[e22];
                return i13;
            }
        },
        {
            key: "extend",
            value: function(t35, e23) {
                var i14 = this;
                "function" != typeof Object.assign && (Object.assign = function(t36) {
                    if (null == t36) throw new TypeError("Cannot convert undefined or null to object");
                    for(var e24 = Object(t36), i15 = 1; i15 < arguments.length; i15++){
                        var a10 = arguments[i15];
                        if (null != a10) for(var s5 in a10)a10.hasOwnProperty(s5) && (e24[s5] = a10[s5]);
                    }
                    return e24;
                });
                var a9 = Object.assign({}, t35);
                return this.isObject(t35) && this.isObject(e23) && Object.keys(e23).forEach(function(s6) {
                    i14.isObject(e23[s6]) && s6 in t35 ? a9[s6] = i14.extend(t35[s6], e23[s6]) : Object.assign(a9, o({}, s6, e23[s6]));
                }), a9;
            }
        },
        {
            key: "extendArray",
            value: function(e25, i16) {
                var a11 = [];
                return e25.map(function(e26) {
                    a11.push(t28.extend(i16, e26));
                }), e25 = a11;
            }
        },
        {
            key: "monthMod",
            value: function(t37) {
                return t37 % 12;
            }
        },
        {
            key: "clone",
            value: function(e27) {
                if (t28.is("Array", e27)) {
                    for(var a12 = [], s7 = 0; s7 < e27.length; s7++)a12[s7] = this.clone(e27[s7]);
                    return a12;
                }
                if (t28.is("Null", e27)) return null;
                if (t28.is("Date", e27)) return e27;
                if ("object" === i(e27)) {
                    var r4 = {};
                    for(var o4 in e27)e27.hasOwnProperty(o4) && (r4[o4] = this.clone(e27[o4]));
                    return r4;
                }
                return e27;
            }
        },
        {
            key: "log10",
            value: function(t38) {
                return Math.log(t38) / Math.LN10;
            }
        },
        {
            key: "roundToBase10",
            value: function(t39) {
                return Math.pow(10, Math.floor(Math.log10(t39)));
            }
        },
        {
            key: "roundToBase",
            value: function(t40, e28) {
                return Math.pow(e28, Math.floor(Math.log(t40) / Math.log(e28)));
            }
        },
        {
            key: "parseNumber",
            value: function(t41) {
                return null === t41 ? t41 : parseFloat(t41);
            }
        },
        {
            key: "randomId",
            value: function() {
                return (Math.random() + 1).toString(36).substring(4);
            }
        },
        {
            key: "noExponents",
            value: function(t42) {
                var e29 = String(t42).split(/[eE]/);
                if (1 === e29.length) return e29[0];
                var i17 = "", a13 = t42 < 0 ? "-" : "", s8 = e29[0].replace(".", ""), r5 = Number(e29[1]) + 1;
                if (r5 < 0) {
                    for(i17 = a13 + "0."; r5++;)i17 += "0";
                    return i17 + s8.replace(/^-/, "");
                }
                for(r5 -= s8.length; r5--;)i17 += "0";
                return s8 + i17;
            }
        },
        {
            key: "getDimensions",
            value: function(t43) {
                var e30 = getComputedStyle(t43, null), i18 = t43.clientHeight, a14 = t43.clientWidth;
                return i18 -= parseFloat(e30.paddingTop) + parseFloat(e30.paddingBottom), [
                    a14 -= parseFloat(e30.paddingLeft) + parseFloat(e30.paddingRight),
                    i18
                ];
            }
        },
        {
            key: "getBoundingClientRect",
            value: function(t44) {
                var e31 = t44.getBoundingClientRect();
                return {
                    top: e31.top,
                    right: e31.right,
                    bottom: e31.bottom,
                    left: e31.left,
                    width: t44.clientWidth,
                    height: t44.clientHeight,
                    x: e31.left,
                    y: e31.top
                };
            }
        },
        {
            key: "getLargestStringFromArr",
            value: function(t45) {
                return t45.reduce(function(t46, e32) {
                    return Array.isArray(e32) && (e32 = e32.reduce(function(t47, e33) {
                        return t47.length > e33.length ? t47 : e33;
                    })), t46.length > e32.length ? t46 : e32;
                }, 0);
            }
        },
        {
            key: "hexToRgba",
            value: function() {
                var t48 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#999999", e34 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .6;
                "#" !== t48.substring(0, 1) && (t48 = "#999999");
                var i19 = t48.replace("#", "");
                i19 = i19.match(new RegExp("(.{" + i19.length / 3 + "})", "g"));
                for(var a15 = 0; a15 < i19.length; a15++)i19[a15] = parseInt(1 === i19[a15].length ? i19[a15] + i19[a15] : i19[a15], 16);
                return void 0 !== e34 && i19.push(e34), "rgba(" + i19.join(",") + ")";
            }
        },
        {
            key: "getOpacityFromRGBA",
            value: function(t49) {
                return parseFloat(t49.replace(/^.*,(.+)\)/, "$1"));
            }
        },
        {
            key: "rgb2hex",
            value: function(t50) {
                return (t50 = t50.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === t50.length ? "#" + ("0" + parseInt(t50[1], 10).toString(16)).slice(-2) + ("0" + parseInt(t50[2], 10).toString(16)).slice(-2) + ("0" + parseInt(t50[3], 10).toString(16)).slice(-2) : "";
            }
        },
        {
            key: "isColorHex",
            value: function(t51) {
                return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t51);
            }
        },
        {
            key: "getPolygonPos",
            value: function(t52, e35) {
                for(var i20 = [], a16 = 2 * Math.PI / e35, s9 = 0; s9 < e35; s9++){
                    var r6 = {};
                    r6.x = t52 * Math.sin(s9 * a16), r6.y = -t52 * Math.cos(s9 * a16), i20.push(r6);
                }
                return i20;
            }
        },
        {
            key: "polarToCartesian",
            value: function(t53, e36, i21, a17) {
                var s10 = (a17 - 90) * Math.PI / 180;
                return {
                    x: t53 + i21 * Math.cos(s10),
                    y: e36 + i21 * Math.sin(s10)
                };
            }
        },
        {
            key: "escapeString",
            value: function(t54) {
                var e37 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "x", i22 = t54.toString().slice();
                return i22 = i22.replace(/[` ~!@#$%^&*()|+\=?;:'",.<>{}[\]\\/]/gi, e37);
            }
        },
        {
            key: "negToZero",
            value: function(t55) {
                return t55 < 0 ? 0 : t55;
            }
        },
        {
            key: "moveIndexInArray",
            value: function(t56, e38, i23) {
                if (i23 >= t56.length) for(var a18 = i23 - t56.length + 1; a18--;)t56.push(void 0);
                return t56.splice(i23, 0, t56.splice(e38, 1)[0]), t56;
            }
        },
        {
            key: "extractNumber",
            value: function(t57) {
                return parseFloat(t57.replace(/[^\d.]*/g, ""));
            }
        },
        {
            key: "findAncestor",
            value: function(t58, e39) {
                for(; (t58 = t58.parentElement) && !t58.classList.contains(e39););
                return t58;
            }
        },
        {
            key: "setELstyles",
            value: function(t59, e40) {
                for(var i24 in e40)e40.hasOwnProperty(i24) && (t59.style.key = e40[i24]);
            }
        },
        {
            key: "isNumber",
            value: function(t60) {
                return !isNaN(t60) && parseFloat(Number(t60)) === t60 && !isNaN(parseInt(t60, 10));
            }
        },
        {
            key: "isFloat",
            value: function(t61) {
                return Number(t61) === t61 && t61 % 1 != 0;
            }
        },
        {
            key: "isSafari",
            value: function() {
                return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
            }
        },
        {
            key: "isFirefox",
            value: function() {
                return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
            }
        },
        {
            key: "isIE11",
            value: function() {
                if (-1 !== window.navigator.userAgent.indexOf("MSIE") || window.navigator.appVersion.indexOf("Trident/") > -1) return !0;
            }
        },
        {
            key: "isIE",
            value: function() {
                var t62 = window.navigator.userAgent, e41 = t62.indexOf("MSIE ");
                if (e41 > 0) return parseInt(t62.substring(e41 + 5, t62.indexOf(".", e41)), 10);
                if (t62.indexOf("Trident/") > 0) {
                    var i25 = t62.indexOf("rv:");
                    return parseInt(t62.substring(i25 + 3, t62.indexOf(".", i25)), 10);
                }
                var a19 = t62.indexOf("Edge/");
                return a19 > 0 && parseInt(t62.substring(a19 + 5, t62.indexOf(".", a19)), 10);
            }
        }
    ]), t28;
}(), b = function() {
    function t63(e42) {
        a(this, t63), this.ctx = e42, this.w = e42.w, this.setEasingFunctions();
    }
    return r(t63, [
        {
            key: "setEasingFunctions",
            value: function() {
                var t64;
                if (!this.w.globals.easing) {
                    switch(this.w.config.chart.animations.easing){
                        case "linear":
                            t64 = "-";
                            break;
                        case "easein":
                            t64 = "<";
                            break;
                        case "easeout":
                            t64 = ">";
                            break;
                        case "easeinout":
                            t64 = "<>";
                            break;
                        case "swing":
                            t64 = function(t65) {
                                var e43 = 1.70158;
                                return (t65 -= 1) * t65 * ((e43 + 1) * t65 + e43) + 1;
                            };
                            break;
                        case "bounce":
                            t64 = function(t66) {
                                return t66 < 1 / 2.75 ? 7.5625 * t66 * t66 : t66 < 2 / 2.75 ? 7.5625 * (t66 -= 1.5 / 2.75) * t66 + .75 : t66 < 2.5 / 2.75 ? 7.5625 * (t66 -= 2.25 / 2.75) * t66 + .9375 : 7.5625 * (t66 -= 2.625 / 2.75) * t66 + .984375;
                            };
                            break;
                        case "elastic":
                            t64 = function(t67) {
                                return t67 === !!t67 ? t67 : Math.pow(2, -10 * t67) * Math.sin((t67 - .075) * (2 * Math.PI) / .3) + 1;
                            };
                            break;
                        default:
                            t64 = "<>";
                    }
                    this.w.globals.easing = t64;
                }
            }
        },
        {
            key: "animateLine",
            value: function(t68, e44, i26, a20) {
                t68.attr(e44).animate(a20).attr(i26);
            }
        },
        {
            key: "animateMarker",
            value: function(t69, e45, i27, a21, s11, r7) {
                e45 || (e45 = 0), t69.attr({
                    r: e45,
                    width: e45,
                    height: e45
                }).animate(a21, s11).attr({
                    r: i27,
                    width: i27.width,
                    height: i27.height
                }).afterAll(function() {
                    r7();
                });
            }
        },
        {
            key: "animateCircle",
            value: function(t70, e46, i28, a22, s12) {
                t70.attr({
                    r: e46.r,
                    cx: e46.cx,
                    cy: e46.cy
                }).animate(a22, s12).attr({
                    r: i28.r,
                    cx: i28.cx,
                    cy: i28.cy
                });
            }
        },
        {
            key: "animateRect",
            value: function(t71, e47, i29, a23, s13) {
                t71.attr(e47).animate(a23).attr(i29).afterAll(function() {
                    return s13();
                });
            }
        },
        {
            key: "animatePathsGradually",
            value: function(t72) {
                var e48 = t72.el, i30 = t72.realIndex, a24 = t72.j, s14 = t72.fill, r8 = t72.pathFrom, o5 = t72.pathTo, n4 = t72.speed, l1 = t72.delay, h1 = this.w, c1 = 0;
                h1.config.chart.animations.animateGradually.enabled && (c1 = h1.config.chart.animations.animateGradually.delay), h1.config.chart.animations.dynamicAnimation.enabled && h1.globals.dataChanged && "bar" !== h1.config.chart.type && (c1 = 0), this.morphSVG(e48, i30, a24, "line" !== h1.config.chart.type || h1.globals.comboCharts ? s14 : "stroke", r8, o5, n4, l1 * c1);
            }
        },
        {
            key: "showDelayedElements",
            value: function() {
                this.w.globals.delayedElements.forEach(function(t73) {
                    t73.el.classList.remove("apexcharts-element-hidden");
                });
            }
        },
        {
            key: "animationCompleted",
            value: function(t74) {
                var e49 = this.w;
                e49.globals.animationEnded || (e49.globals.animationEnded = !0, this.showDelayedElements(), "function" == typeof e49.config.chart.events.animationEnd && e49.config.chart.events.animationEnd(this.ctx, {
                    el: t74,
                    w: e49
                }));
            }
        },
        {
            key: "morphSVG",
            value: function(t75, e50, i31, a25, s15, r9, o6, n5) {
                var l2 = this, h2 = this.w;
                s15 || (s15 = t75.attr("pathFrom")), r9 || (r9 = t75.attr("pathTo"));
                var c2 = function(t) {
                    return "radar" === h2.config.chart.type && (o6 = 1), "M 0 ".concat(h2.globals.gridHeight);
                };
                (!s15 || s15.indexOf("undefined") > -1 || s15.indexOf("NaN") > -1) && (s15 = c2()), (!r9 || r9.indexOf("undefined") > -1 || r9.indexOf("NaN") > -1) && (r9 = c2()), h2.globals.shouldAnimate || (o6 = 1), t75.plot(s15).animate(1, h2.globals.easing, n5).plot(s15).animate(o6, h2.globals.easing, n5).plot(r9).afterAll(function() {
                    x.isNumber(i31) ? i31 === h2.globals.series[h2.globals.maxValsInArrayIndex].length - 2 && h2.globals.shouldAnimate && l2.animationCompleted(t75) : "none" !== a25 && h2.globals.shouldAnimate && (!h2.globals.comboCharts && e50 === h2.globals.series.length - 1 || h2.globals.comboCharts) && l2.animationCompleted(t75), l2.showDelayedElements();
                });
            }
        }
    ]), t63;
}(), v = function() {
    function t76(e51) {
        a(this, t76), this.ctx = e51, this.w = e51.w;
    }
    return r(t76, [
        {
            key: "getDefaultFilter",
            value: function(t77, e52) {
                var i32 = this.w;
                t77.unfilter(!0), (new window.SVG.Filter).size("120%", "180%", "-5%", "-40%"), "none" !== i32.config.states.normal.filter ? this.applyFilter(t77, e52, i32.config.states.normal.filter.type, i32.config.states.normal.filter.value) : i32.config.chart.dropShadow.enabled && this.dropShadow(t77, i32.config.chart.dropShadow, e52);
            }
        },
        {
            key: "addNormalFilter",
            value: function(t78, e53) {
                var i33 = this.w;
                i33.config.chart.dropShadow.enabled && !t78.node.classList.contains("apexcharts-marker") && this.dropShadow(t78, i33.config.chart.dropShadow, e53);
            }
        },
        {
            key: "addLightenFilter",
            value: function(t79, e54, i34) {
                var a26 = this, s16 = this.w, r10 = i34.intensity;
                t79.unfilter(!0);
                new window.SVG.Filter;
                t79.filter(function(t80) {
                    var i35 = s16.config.chart.dropShadow;
                    (i35.enabled ? a26.addShadow(t80, e54, i35) : t80).componentTransfer({
                        rgb: {
                            type: "linear",
                            slope: 1.5,
                            intercept: r10
                        }
                    });
                }), t79.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t79.filterer.node);
            }
        },
        {
            key: "addDarkenFilter",
            value: function(t81, e55, i36) {
                var a27 = this, s17 = this.w, r11 = i36.intensity;
                t81.unfilter(!0);
                new window.SVG.Filter;
                t81.filter(function(t82) {
                    var i37 = s17.config.chart.dropShadow;
                    (i37.enabled ? a27.addShadow(t82, e55, i37) : t82).componentTransfer({
                        rgb: {
                            type: "linear",
                            slope: r11
                        }
                    });
                }), t81.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t81.filterer.node);
            }
        },
        {
            key: "applyFilter",
            value: function(t83, e56, i38) {
                var a28 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : .5;
                switch(i38){
                    case "none":
                        this.addNormalFilter(t83, e56);
                        break;
                    case "lighten":
                        this.addLightenFilter(t83, e56, {
                            intensity: a28
                        });
                        break;
                    case "darken":
                        this.addDarkenFilter(t83, e56, {
                            intensity: a28
                        });
                }
            }
        },
        {
            key: "addShadow",
            value: function(t84, e57, i39) {
                var a29 = i39.blur, s18 = i39.top, r12 = i39.left, o7 = i39.color, n6 = i39.opacity, l3 = t84.flood(Array.isArray(o7) ? o7[e57] : o7, n6).composite(t84.sourceAlpha, "in").offset(r12, s18).gaussianBlur(a29).merge(t84.source);
                return t84.blend(t84.source, l3);
            }
        },
        {
            key: "dropShadow",
            value: function(t85, e58) {
                var i40 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a30 = e58.top, s19 = e58.left, r13 = e58.blur, o8 = e58.color, n7 = e58.opacity, l4 = e58.noUserSpaceOnUse, h3 = this.w;
                return t85.unfilter(!0), x.isIE() && "radialBar" === h3.config.chart.type || (o8 = Array.isArray(o8) ? o8[i40] : o8, t85.filter(function(t86) {
                    var e59 = null;
                    e59 = x.isSafari() || x.isFirefox() || x.isIE() ? t86.flood(o8, n7).composite(t86.sourceAlpha, "in").offset(s19, a30).gaussianBlur(r13) : t86.flood(o8, n7).composite(t86.sourceAlpha, "in").offset(s19, a30).gaussianBlur(r13).merge(t86.source), t86.blend(t86.source, e59);
                }), l4 || t85.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t85.filterer.node)), t85;
            }
        },
        {
            key: "setSelectionFilter",
            value: function(t87, e60, i41) {
                var a31 = this.w;
                if (void 0 !== a31.globals.selectedDataPoints[e60] && a31.globals.selectedDataPoints[e60].indexOf(i41) > -1) {
                    t87.node.setAttribute("selected", !0);
                    var s20 = a31.config.states.active.filter;
                    "none" !== s20 && this.applyFilter(t87, e60, s20.type, s20.value);
                }
            }
        },
        {
            key: "_scaleFilterSize",
            value: function(t88) {
                !function(e61) {
                    for(var i42 in e61)e61.hasOwnProperty(i42) && t88.setAttribute(i42, e61[i42]);
                }({
                    width: "200%",
                    height: "200%",
                    x: "-50%",
                    y: "-50%"
                });
            }
        }
    ]), t76;
}(), m = function() {
    function t89(e62) {
        a(this, t89), this.ctx = e62, this.w = e62.w;
    }
    return r(t89, [
        {
            key: "drawLine",
            value: function(t90, e63, i43, a32) {
                var s21 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "#a8a8a8", r14 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, o9 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, n8 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "butt", l5 = this.w, h4 = l5.globals.dom.Paper.line().attr({
                    x1: t90,
                    y1: e63,
                    x2: i43,
                    y2: a32,
                    stroke: s21,
                    "stroke-dasharray": r14,
                    "stroke-width": o9,
                    "stroke-linecap": n8
                });
                return h4;
            }
        },
        {
            key: "drawRect",
            value: function() {
                var t91 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e64 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i44 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a33 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s22 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r15 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "#fefefe", o10 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, n9 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, l6 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, h5 = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0, c3 = this.w, d1 = c3.globals.dom.Paper.rect();
                return d1.attr({
                    x: t91,
                    y: e64,
                    width: i44 > 0 ? i44 : 0,
                    height: a33 > 0 ? a33 : 0,
                    rx: s22,
                    ry: s22,
                    opacity: o10,
                    "stroke-width": null !== n9 ? n9 : 0,
                    stroke: null !== l6 ? l6 : "none",
                    "stroke-dasharray": h5
                }), d1.node.setAttribute("fill", r15), d1;
            }
        },
        {
            key: "drawPolygon",
            value: function(t92) {
                var e65 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#e1e1e1", i45 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, a34 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "none", s23 = this.w, r16 = s23.globals.dom.Paper.polygon(t92).attr({
                    fill: a34,
                    stroke: e65,
                    "stroke-width": i45
                });
                return r16;
            }
        },
        {
            key: "drawCircle",
            value: function(t93) {
                var e66 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i46 = this.w;
                t93 < 0 && (t93 = 0);
                var a35 = i46.globals.dom.Paper.circle(2 * t93);
                return null !== e66 && a35.attr(e66), a35;
            }
        },
        {
            key: "drawPath",
            value: function(t94) {
                var e67 = t94.d, i47 = void 0 === e67 ? "" : e67, a36 = t94.stroke, s24 = void 0 === a36 ? "#a8a8a8" : a36, r17 = t94.strokeWidth, o11 = void 0 === r17 ? 1 : r17, n10 = t94.fill, l7 = t94.fillOpacity, h6 = void 0 === l7 ? 1 : l7, c4 = t94.strokeOpacity, d2 = void 0 === c4 ? 1 : c4, g1 = t94.classes, u1 = t94.strokeLinecap, f1 = void 0 === u1 ? null : u1, p1 = t94.strokeDashArray, x1 = void 0 === p1 ? 0 : p1, b1 = this.w;
                return null === f1 && (f1 = b1.config.stroke.lineCap), (i47.indexOf("undefined") > -1 || i47.indexOf("NaN") > -1) && (i47 = "M 0 ".concat(b1.globals.gridHeight)), b1.globals.dom.Paper.path(i47).attr({
                    fill: n10,
                    "fill-opacity": h6,
                    stroke: s24,
                    "stroke-opacity": d2,
                    "stroke-linecap": f1,
                    "stroke-width": o11,
                    "stroke-dasharray": x1,
                    class: g1
                });
            }
        },
        {
            key: "group",
            value: function() {
                var t95 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e68 = this.w, i48 = e68.globals.dom.Paper.group();
                return null !== t95 && i48.attr(t95), i48;
            }
        },
        {
            key: "move",
            value: function(t96, e69) {
                var i49 = [
                    "M",
                    t96,
                    e69
                ].join(" ");
                return i49;
            }
        },
        {
            key: "line",
            value: function(t97, e70) {
                var i50 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a37 = null;
                return null === i50 ? a37 = [
                    "L",
                    t97,
                    e70
                ].join(" ") : "H" === i50 ? a37 = [
                    "H",
                    t97
                ].join(" ") : "V" === i50 && (a37 = [
                    "V",
                    e70
                ].join(" ")), a37;
            }
        },
        {
            key: "curve",
            value: function(t98, e71, i51, a38, s25, r18) {
                var o12 = [
                    "C",
                    t98,
                    e71,
                    i51,
                    a38,
                    s25,
                    r18
                ].join(" ");
                return o12;
            }
        },
        {
            key: "quadraticCurve",
            value: function(t99, e72, i52, a39) {
                return [
                    "Q",
                    t99,
                    e72,
                    i52,
                    a39
                ].join(" ");
            }
        },
        {
            key: "arc",
            value: function(t100, e73, i53, a40, s26, r19, o13) {
                var n11 = arguments.length > 7 && void 0 !== arguments[7] && arguments[7], l8 = "A";
                n11 && (l8 = "a");
                var h7 = [
                    l8,
                    t100,
                    e73,
                    i53,
                    a40,
                    s26,
                    r19,
                    o13
                ].join(" ");
                return h7;
            }
        },
        {
            key: "renderPaths",
            value: function(t101) {
                var i54, a41 = t101.j, s27 = t101.realIndex, r20 = t101.pathFrom, o14 = t101.pathTo, n12 = t101.stroke, l9 = t101.strokeWidth, h8 = t101.strokeLinecap, c5 = t101.fill, d3 = t101.animationDelay, g2 = t101.initialSpeed, u2 = t101.dataChangeSpeed, f2 = t101.className, p2 = t101.shouldClipToGrid, x2 = void 0 === p2 || p2, m1 = t101.bindEventsOnPaths, y1 = void 0 === m1 || m1, w1 = t101.drawShadow, k1 = void 0 === w1 || w1, A1 = this.w, S1 = new v(this.ctx), C1 = new b(this.ctx), L1 = this.w.config.chart.animations.enabled, P1 = L1 && this.w.config.chart.animations.dynamicAnimation.enabled, M1 = !!(L1 && !A1.globals.resized || P1 && A1.globals.dataChanged && A1.globals.shouldAnimate);
                M1 ? i54 = r20 : (i54 = o14, A1.globals.animationEnded = !0);
                var T1 = A1.config.stroke.dashArray, I1 = 0;
                I1 = Array.isArray(T1) ? T1[s27] : A1.config.stroke.dashArray;
                var z1 = this.drawPath({
                    d: i54,
                    stroke: n12,
                    strokeWidth: l9,
                    fill: c5,
                    fillOpacity: 1,
                    classes: f2,
                    strokeLinecap: h8,
                    strokeDashArray: I1
                });
                if (z1.attr("index", s27), x2 && z1.attr({
                    "clip-path": "url(#gridRectMask".concat(A1.globals.cuid, ")")
                }), "none" !== A1.config.states.normal.filter.type) S1.getDefaultFilter(z1, s27);
                else if (A1.config.chart.dropShadow.enabled && k1 && (!A1.config.chart.dropShadow.enabledOnSeries || A1.config.chart.dropShadow.enabledOnSeries && -1 !== A1.config.chart.dropShadow.enabledOnSeries.indexOf(s27))) {
                    var X1 = A1.config.chart.dropShadow;
                    S1.dropShadow(z1, X1, s27);
                }
                y1 && (z1.node.addEventListener("mouseenter", this.pathMouseEnter.bind(this, z1)), z1.node.addEventListener("mouseleave", this.pathMouseLeave.bind(this, z1)), z1.node.addEventListener("mousedown", this.pathMouseDown.bind(this, z1))), z1.attr({
                    pathTo: o14,
                    pathFrom: r20
                });
                var E1 = {
                    el: z1,
                    j: a41,
                    realIndex: s27,
                    pathFrom: r20,
                    pathTo: o14,
                    fill: c5,
                    strokeWidth: l9,
                    delay: d3
                };
                return !L1 || A1.globals.resized || A1.globals.dataChanged ? !A1.globals.resized && A1.globals.dataChanged || C1.showDelayedElements() : C1.animatePathsGradually(e(e({}, E1), {}, {
                    speed: g2
                })), A1.globals.dataChanged && P1 && M1 && C1.animatePathsGradually(e(e({}, E1), {}, {
                    speed: u2
                })), z1;
            }
        },
        {
            key: "drawPattern",
            value: function(t102, e74, i55) {
                var a42 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "#a8a8a8", s28 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r21 = this.w, o15 = r21.globals.dom.Paper.pattern(e74, i55, function(r22) {
                    "horizontalLines" === t102 ? r22.line(0, 0, i55, 0).stroke({
                        color: a42,
                        width: s28 + 1
                    }) : "verticalLines" === t102 ? r22.line(0, 0, 0, e74).stroke({
                        color: a42,
                        width: s28 + 1
                    }) : "slantedLines" === t102 ? r22.line(0, 0, e74, i55).stroke({
                        color: a42,
                        width: s28
                    }) : "squares" === t102 ? r22.rect(e74, i55).fill("none").stroke({
                        color: a42,
                        width: s28
                    }) : "circles" === t102 && r22.circle(e74).fill("none").stroke({
                        color: a42,
                        width: s28
                    });
                });
                return o15;
            }
        },
        {
            key: "drawGradient",
            value: function(t103, e75, i56, a43, s29) {
                var r23, o16 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, n13 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, l10 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, h9 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0, c6 = this.w;
                e75.length < 9 && 0 === e75.indexOf("#") && (e75 = x.hexToRgba(e75, a43)), i56.length < 9 && 0 === i56.indexOf("#") && (i56 = x.hexToRgba(i56, s29));
                var d4 = 0, g3 = 1, u3 = 1, f3 = null;
                null !== n13 && (d4 = void 0 !== n13[0] ? n13[0] / 100 : 0, g3 = void 0 !== n13[1] ? n13[1] / 100 : 1, u3 = void 0 !== n13[2] ? n13[2] / 100 : 1, f3 = void 0 !== n13[3] ? n13[3] / 100 : null);
                var p3 = !("donut" !== c6.config.chart.type && "pie" !== c6.config.chart.type && "polarArea" !== c6.config.chart.type && "bubble" !== c6.config.chart.type);
                if (r23 = null === l10 || 0 === l10.length ? c6.globals.dom.Paper.gradient(p3 ? "radial" : "linear", function(t104) {
                    t104.at(d4, e75, a43), t104.at(g3, i56, s29), t104.at(u3, i56, s29), null !== f3 && t104.at(f3, e75, a43);
                }) : c6.globals.dom.Paper.gradient(p3 ? "radial" : "linear", function(t105) {
                    (Array.isArray(l10[h9]) ? l10[h9] : l10).forEach(function(e76) {
                        t105.at(e76.offset / 100, e76.color, e76.opacity);
                    });
                }), p3) {
                    var b2 = c6.globals.gridWidth / 2, v1 = c6.globals.gridHeight / 2;
                    "bubble" !== c6.config.chart.type ? r23.attr({
                        gradientUnits: "userSpaceOnUse",
                        cx: b2,
                        cy: v1,
                        r: o16
                    }) : r23.attr({
                        cx: .5,
                        cy: .5,
                        r: .8,
                        fx: .2,
                        fy: .2
                    });
                } else "vertical" === t103 ? r23.from(0, 0).to(0, 1) : "diagonal" === t103 ? r23.from(0, 0).to(1, 1) : "horizontal" === t103 ? r23.from(0, 1).to(1, 1) : "diagonal2" === t103 && r23.from(1, 0).to(0, 1);
                return r23;
            }
        },
        {
            key: "getTextBasedOnMaxWidth",
            value: function(t106) {
                var e77 = t106.text, i57 = t106.maxWidth, a44 = t106.fontSize, s30 = t106.fontFamily, r24 = this.getTextRects(e77, a44, s30), o17 = r24.width / e77.length, n14 = Math.floor(i57 / o17);
                return i57 < r24.width ? e77.slice(0, n14 - 3) + "..." : e77;
            }
        },
        {
            key: "drawText",
            value: function(t107) {
                var i58 = this, a45 = t107.x, s31 = t107.y, r25 = t107.text, o18 = t107.textAnchor, n15 = t107.fontSize, l11 = t107.fontFamily, h10 = t107.fontWeight, c7 = t107.foreColor, d5 = t107.opacity, g4 = t107.maxWidth, u4 = t107.cssClass, f4 = void 0 === u4 ? "" : u4, p4 = t107.isPlainText, x3 = void 0 === p4 || p4, b3 = this.w;
                void 0 === r25 && (r25 = "");
                var v2 = r25;
                o18 || (o18 = "start"), c7 && c7.length || (c7 = b3.config.chart.foreColor), l11 = l11 || b3.config.chart.fontFamily, h10 = h10 || "regular";
                var m2, y2 = {
                    maxWidth: g4,
                    fontSize: n15 = n15 || "11px",
                    fontFamily: l11
                };
                return Array.isArray(r25) ? m2 = b3.globals.dom.Paper.text(function(t108) {
                    for(var a46 = 0; a46 < r25.length; a46++)v2 = r25[a46], g4 && (v2 = i58.getTextBasedOnMaxWidth(e({
                        text: r25[a46]
                    }, y2))), 0 === a46 ? t108.tspan(v2) : t108.tspan(v2).newLine();
                }) : (g4 && (v2 = this.getTextBasedOnMaxWidth(e({
                    text: r25
                }, y2))), m2 = x3 ? b3.globals.dom.Paper.plain(r25) : b3.globals.dom.Paper.text(function(t109) {
                    return t109.tspan(v2);
                })), m2.attr({
                    x: a45,
                    y: s31,
                    "text-anchor": o18,
                    "dominant-baseline": "auto",
                    "font-size": n15,
                    "font-family": l11,
                    "font-weight": h10,
                    fill: c7,
                    class: "apexcharts-text " + f4
                }), m2.node.style.fontFamily = l11, m2.node.style.opacity = d5, m2;
            }
        },
        {
            key: "drawMarker",
            value: function(t110, e78, i59) {
                t110 = t110 || 0;
                var a47 = i59.pSize || 0, s32 = null;
                if ("square" === i59.shape || "rect" === i59.shape) {
                    var r26 = void 0 === i59.pRadius ? a47 / 2 : i59.pRadius;
                    null !== e78 && a47 || (a47 = 0, r26 = 0);
                    var o19 = 1.2 * a47 + r26, n16 = this.drawRect(o19, o19, o19, o19, r26);
                    n16.attr({
                        x: t110 - o19 / 2,
                        y: e78 - o19 / 2,
                        cx: t110,
                        cy: e78,
                        class: i59.class ? i59.class : "",
                        fill: i59.pointFillColor,
                        "fill-opacity": i59.pointFillOpacity ? i59.pointFillOpacity : 1,
                        stroke: i59.pointStrokeColor,
                        "stroke-width": i59.pointStrokeWidth ? i59.pointStrokeWidth : 0,
                        "stroke-opacity": i59.pointStrokeOpacity ? i59.pointStrokeOpacity : 1
                    }), s32 = n16;
                } else "circle" !== i59.shape && i59.shape || (x.isNumber(e78) || (a47 = 0, e78 = 0), s32 = this.drawCircle(a47, {
                    cx: t110,
                    cy: e78,
                    class: i59.class ? i59.class : "",
                    stroke: i59.pointStrokeColor,
                    fill: i59.pointFillColor,
                    "fill-opacity": i59.pointFillOpacity ? i59.pointFillOpacity : 1,
                    "stroke-width": i59.pointStrokeWidth ? i59.pointStrokeWidth : 0,
                    "stroke-opacity": i59.pointStrokeOpacity ? i59.pointStrokeOpacity : 1
                }));
                return s32;
            }
        },
        {
            key: "pathMouseEnter",
            value: function(t111, e79) {
                var i60 = this.w, a48 = new v(this.ctx), s33 = parseInt(t111.node.getAttribute("index"), 10), r27 = parseInt(t111.node.getAttribute("j"), 10);
                if ("function" == typeof i60.config.chart.events.dataPointMouseEnter && i60.config.chart.events.dataPointMouseEnter(e79, this.ctx, {
                    seriesIndex: s33,
                    dataPointIndex: r27,
                    w: i60
                }), this.ctx.events.fireEvent("dataPointMouseEnter", [
                    e79,
                    this.ctx,
                    {
                        seriesIndex: s33,
                        dataPointIndex: r27,
                        w: i60
                    }
                ]), ("none" === i60.config.states.active.filter.type || "true" !== t111.node.getAttribute("selected")) && "none" !== i60.config.states.hover.filter.type && !i60.globals.isTouchDevice) {
                    var o20 = i60.config.states.hover.filter;
                    a48.applyFilter(t111, s33, o20.type, o20.value);
                }
            }
        },
        {
            key: "pathMouseLeave",
            value: function(t112, e80) {
                var i61 = this.w, a49 = new v(this.ctx), s34 = parseInt(t112.node.getAttribute("index"), 10), r28 = parseInt(t112.node.getAttribute("j"), 10);
                "function" == typeof i61.config.chart.events.dataPointMouseLeave && i61.config.chart.events.dataPointMouseLeave(e80, this.ctx, {
                    seriesIndex: s34,
                    dataPointIndex: r28,
                    w: i61
                }), this.ctx.events.fireEvent("dataPointMouseLeave", [
                    e80,
                    this.ctx,
                    {
                        seriesIndex: s34,
                        dataPointIndex: r28,
                        w: i61
                    }
                ]), "none" !== i61.config.states.active.filter.type && "true" === t112.node.getAttribute("selected") || "none" !== i61.config.states.hover.filter.type && a49.getDefaultFilter(t112, s34);
            }
        },
        {
            key: "pathMouseDown",
            value: function(t113, e81) {
                var i62 = this.w, a50 = new v(this.ctx), s35 = parseInt(t113.node.getAttribute("index"), 10), r29 = parseInt(t113.node.getAttribute("j"), 10), o21 = "false";
                if ("true" === t113.node.getAttribute("selected")) {
                    if (t113.node.setAttribute("selected", "false"), i62.globals.selectedDataPoints[s35].indexOf(r29) > -1) {
                        var n17 = i62.globals.selectedDataPoints[s35].indexOf(r29);
                        i62.globals.selectedDataPoints[s35].splice(n17, 1);
                    }
                } else {
                    if (!i62.config.states.active.allowMultipleDataPointsSelection && i62.globals.selectedDataPoints.length > 0) {
                        i62.globals.selectedDataPoints = [];
                        var l12 = i62.globals.dom.Paper.select(".apexcharts-series path").members, h11 = i62.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members, c8 = function(t114) {
                            Array.prototype.forEach.call(t114, function(t115) {
                                t115.node.setAttribute("selected", "false"), a50.getDefaultFilter(t115, s35);
                            });
                        };
                        c8(l12), c8(h11);
                    }
                    t113.node.setAttribute("selected", "true"), o21 = "true", void 0 === i62.globals.selectedDataPoints[s35] && (i62.globals.selectedDataPoints[s35] = []), i62.globals.selectedDataPoints[s35].push(r29);
                }
                if ("true" === o21) {
                    var d6 = i62.config.states.active.filter;
                    if ("none" !== d6) a50.applyFilter(t113, s35, d6.type, d6.value);
                    else if ("none" !== i62.config.states.hover.filter && !i62.globals.isTouchDevice) {
                        var g5 = i62.config.states.hover.filter;
                        a50.applyFilter(t113, s35, g5.type, g5.value);
                    }
                } else if ("none" !== i62.config.states.active.filter.type) {
                    if ("none" === i62.config.states.hover.filter.type || i62.globals.isTouchDevice) a50.getDefaultFilter(t113, s35);
                    else {
                        g5 = i62.config.states.hover.filter;
                        a50.applyFilter(t113, s35, g5.type, g5.value);
                    }
                }
                "function" == typeof i62.config.chart.events.dataPointSelection && i62.config.chart.events.dataPointSelection(e81, this.ctx, {
                    selectedDataPoints: i62.globals.selectedDataPoints,
                    seriesIndex: s35,
                    dataPointIndex: r29,
                    w: i62
                }), e81 && this.ctx.events.fireEvent("dataPointSelection", [
                    e81,
                    this.ctx,
                    {
                        selectedDataPoints: i62.globals.selectedDataPoints,
                        seriesIndex: s35,
                        dataPointIndex: r29,
                        w: i62
                    }
                ]);
            }
        },
        {
            key: "rotateAroundCenter",
            value: function(t116) {
                var e82 = {};
                return t116 && "function" == typeof t116.getBBox && (e82 = t116.getBBox()), {
                    x: e82.x + e82.width / 2,
                    y: e82.y + e82.height / 2
                };
            }
        },
        {
            key: "getTextRects",
            value: function(t117, e83, i63, a51) {
                var s36 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], r30 = this.w, o22 = this.drawText({
                    x: -200,
                    y: -200,
                    text: t117,
                    textAnchor: "start",
                    fontSize: e83,
                    fontFamily: i63,
                    foreColor: "#fff",
                    opacity: 0
                });
                a51 && o22.attr("transform", a51), r30.globals.dom.Paper.add(o22);
                var n18 = o22.bbox();
                return s36 || (n18 = o22.node.getBoundingClientRect()), o22.remove(), {
                    width: n18.width,
                    height: n18.height
                };
            }
        },
        {
            key: "placeTextWithEllipsis",
            value: function(t118, e84, i64) {
                if ("function" == typeof t118.getComputedTextLength && (t118.textContent = e84, e84.length > 0 && t118.getComputedTextLength() >= i64 / 1.1)) {
                    for(var a52 = e84.length - 3; a52 > 0; a52 -= 3)if (t118.getSubStringLength(0, a52) <= i64 / 1.1) return void (t118.textContent = e84.substring(0, a52) + "...");
                    t118.textContent = ".";
                }
            }
        }
    ], [
        {
            key: "setAttrs",
            value: function(t119, e85) {
                for(var i65 in e85)e85.hasOwnProperty(i65) && t119.setAttribute(i65, e85[i65]);
            }
        }
    ]), t89;
}(), y = function() {
    function t120(e86) {
        a(this, t120), this.ctx = e86, this.w = e86.w;
    }
    return r(t120, [
        {
            key: "getStackedSeriesTotals",
            value: function() {
                var t121 = this.w, e87 = [];
                if (0 === t121.globals.series.length) return e87;
                for(var i66 = 0; i66 < t121.globals.series[t121.globals.maxValsInArrayIndex].length; i66++){
                    for(var a53 = 0, s37 = 0; s37 < t121.globals.series.length; s37++)void 0 !== t121.globals.series[s37][i66] && (a53 += t121.globals.series[s37][i66]);
                    e87.push(a53);
                }
                return t121.globals.stackedSeriesTotals = e87, e87;
            }
        },
        {
            key: "getSeriesTotalByIndex",
            value: function() {
                var t122 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                return null === t122 ? this.w.config.series.reduce(function(t123, e88) {
                    return t123 + e88;
                }, 0) : this.w.globals.series[t122].reduce(function(t124, e89) {
                    return t124 + e89;
                }, 0);
            }
        },
        {
            key: "isSeriesNull",
            value: function() {
                var t125 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                return 0 === (null === t125 ? this.w.config.series.filter(function(t126) {
                    return null !== t126;
                }) : this.w.config.series[t125].data.filter(function(t127) {
                    return null !== t127;
                })).length;
            }
        },
        {
            key: "seriesHaveSameValues",
            value: function(t128) {
                return this.w.globals.series[t128].every(function(t129, e, i67) {
                    return t129 === i67[0];
                });
            }
        },
        {
            key: "getCategoryLabels",
            value: function(t130) {
                var e90 = this.w, i68 = t130.slice();
                return e90.config.xaxis.convertedCatToNumeric && (i68 = t130.map(function(t131, i) {
                    return e90.config.xaxis.labels.formatter(t131 - e90.globals.minX + 1);
                })), i68;
            }
        },
        {
            key: "getLargestSeries",
            value: function() {
                var t132 = this.w;
                t132.globals.maxValsInArrayIndex = t132.globals.series.map(function(t133) {
                    return t133.length;
                }).indexOf(Math.max.apply(Math, t132.globals.series.map(function(t134) {
                    return t134.length;
                })));
            }
        },
        {
            key: "getLargestMarkerSize",
            value: function() {
                var t135 = this.w, e91 = 0;
                return t135.globals.markers.size.forEach(function(t136) {
                    e91 = Math.max(e91, t136);
                }), t135.config.markers.discrete && t135.config.markers.discrete.length && t135.config.markers.discrete.forEach(function(t137) {
                    e91 = Math.max(e91, t137.size);
                }), e91 > 0 && (e91 += t135.config.markers.hover.sizeOffset + 1), t135.globals.markers.largestSize = e91, e91;
            }
        },
        {
            key: "getSeriesTotals",
            value: function() {
                var t138 = this.w;
                t138.globals.seriesTotals = t138.globals.series.map(function(t139, e) {
                    var i69 = 0;
                    if (Array.isArray(t139)) for(var a54 = 0; a54 < t139.length; a54++)i69 += t139[a54];
                    else i69 += t139;
                    return i69;
                });
            }
        },
        {
            key: "getSeriesTotalsXRange",
            value: function(t140, e92) {
                var i70 = this.w;
                return i70.globals.series.map(function(a55, s38) {
                    for(var r31 = 0, o23 = 0; o23 < a55.length; o23++)i70.globals.seriesX[s38][o23] > t140 && i70.globals.seriesX[s38][o23] < e92 && (r31 += a55[o23]);
                    return r31;
                });
            }
        },
        {
            key: "getPercentSeries",
            value: function() {
                var t141 = this.w;
                t141.globals.seriesPercent = t141.globals.series.map(function(e93, i) {
                    var a56 = [];
                    if (Array.isArray(e93)) for(var s39 = 0; s39 < e93.length; s39++){
                        var r32 = t141.globals.stackedSeriesTotals[s39], o24 = 0;
                        r32 && (o24 = 100 * e93[s39] / r32), a56.push(o24);
                    }
                    else {
                        var n19 = 100 * e93 / t141.globals.seriesTotals.reduce(function(t142, e94) {
                            return t142 + e94;
                        }, 0);
                        a56.push(n19);
                    }
                    return a56;
                });
            }
        },
        {
            key: "getCalculatedRatios",
            value: function() {
                var t143, e95, i71, a57, s40 = this.w.globals, r33 = [], o25 = 0, n20 = [], l13 = .1, h12 = 0;
                if (s40.yRange = [], s40.isMultipleYAxis) for(var c9 = 0; c9 < s40.minYArr.length; c9++)s40.yRange.push(Math.abs(s40.minYArr[c9] - s40.maxYArr[c9])), n20.push(0);
                else s40.yRange.push(Math.abs(s40.minY - s40.maxY));
                s40.xRange = Math.abs(s40.maxX - s40.minX), s40.zRange = Math.abs(s40.maxZ - s40.minZ);
                for(var d7 = 0; d7 < s40.yRange.length; d7++)r33.push(s40.yRange[d7] / s40.gridHeight);
                if (e95 = s40.xRange / s40.gridWidth, i71 = Math.abs(s40.initialMaxX - s40.initialMinX) / s40.gridWidth, t143 = s40.yRange / s40.gridWidth, a57 = s40.xRange / s40.gridHeight, (o25 = s40.zRange / s40.gridHeight * 16) || (o25 = 1), s40.minY !== Number.MIN_VALUE && 0 !== Math.abs(s40.minY) && (s40.hasNegs = !0), s40.isMultipleYAxis) {
                    n20 = [];
                    for(var g6 = 0; g6 < r33.length; g6++)n20.push(-s40.minYArr[g6] / r33[g6]);
                } else n20.push(-s40.minY / r33[0]), s40.minY !== Number.MIN_VALUE && 0 !== Math.abs(s40.minY) && (l13 = -s40.minY / t143, h12 = s40.minX / e95);
                return {
                    yRatio: r33,
                    invertedYRatio: t143,
                    zRatio: o25,
                    xRatio: e95,
                    initialXRatio: i71,
                    invertedXRatio: a57,
                    baseLineInvertedY: l13,
                    baseLineY: n20,
                    baseLineX: h12
                };
            }
        },
        {
            key: "getLogSeries",
            value: function(t144) {
                var e96 = this, i72 = this.w;
                return i72.globals.seriesLog = t144.map(function(t145, a58) {
                    return i72.config.yaxis[a58] && i72.config.yaxis[a58].logarithmic ? t145.map(function(t146) {
                        return null === t146 ? null : e96.getLogVal(i72.config.yaxis[a58].logBase, t146, a58);
                    }) : t145;
                }), i72.globals.invalidLogScale ? t144 : i72.globals.seriesLog;
            }
        },
        {
            key: "getBaseLog",
            value: function(t147, e97) {
                return Math.log(e97) / Math.log(t147);
            }
        },
        {
            key: "getLogVal",
            value: function(t148, e98, i73) {
                if (0 === e98) return 0;
                var a59 = this.w, s41 = 0 === a59.globals.minYArr[i73] ? -1 : this.getBaseLog(t148, a59.globals.minYArr[i73]), r34 = (0 === a59.globals.maxYArr[i73] ? 0 : this.getBaseLog(t148, a59.globals.maxYArr[i73])) - s41;
                return e98 < 1 ? e98 / r34 : (this.getBaseLog(t148, e98) - s41) / r34;
            }
        },
        {
            key: "getLogYRatios",
            value: function(t149) {
                var e99 = this, i74 = this.w, a60 = this.w.globals;
                return a60.yLogRatio = t149.slice(), a60.logYRange = a60.yRange.map(function(t150, s42) {
                    if (i74.config.yaxis[s42] && e99.w.config.yaxis[s42].logarithmic) {
                        var r35, o26 = -Number.MAX_VALUE, n21 = Number.MIN_VALUE;
                        return a60.seriesLog.forEach(function(t151, e100) {
                            t151.forEach(function(t152) {
                                i74.config.yaxis[e100] && i74.config.yaxis[e100].logarithmic && (o26 = Math.max(t152, o26), n21 = Math.min(t152, n21));
                            });
                        }), r35 = Math.pow(a60.yRange[s42], Math.abs(n21 - o26) / a60.yRange[s42]), a60.yLogRatio[s42] = r35 / a60.gridHeight, r35;
                    }
                }), a60.invalidLogScale ? t149.slice() : a60.yLogRatio;
            }
        }
    ], [
        {
            key: "checkComboSeries",
            value: function(t153) {
                var e101 = !1, i75 = 0, a61 = 0;
                return t153.length && void 0 !== t153[0].type && t153.forEach(function(t154) {
                    "bar" !== t154.type && "column" !== t154.type && "candlestick" !== t154.type && "boxPlot" !== t154.type || i75++, void 0 !== t154.type && a61++;
                }), a61 > 0 && (e101 = !0), {
                    comboBarCount: i75,
                    comboCharts: e101
                };
            }
        },
        {
            key: "extendArrayProps",
            value: function(t155, e102, i76) {
                return e102.yaxis && (e102 = t155.extendYAxis(e102, i76)), e102.annotations && (e102.annotations.yaxis && (e102 = t155.extendYAxisAnnotations(e102)), e102.annotations.xaxis && (e102 = t155.extendXAxisAnnotations(e102)), e102.annotations.points && (e102 = t155.extendPointAnnotations(e102))), e102;
            }
        }
    ]), t120;
}(), w = function() {
    function t156(e103) {
        a(this, t156), this.w = e103.w, this.annoCtx = e103;
    }
    return r(t156, [
        {
            key: "setOrientations",
            value: function(t157) {
                var e104 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i77 = this.w;
                if ("vertical" === t157.label.orientation) {
                    var a62 = null !== e104 ? e104 : 0, s43 = i77.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(a62, "']"));
                    if (null !== s43) {
                        var r36 = s43.getBoundingClientRect();
                        s43.setAttribute("x", parseFloat(s43.getAttribute("x")) - r36.height + 4), "top" === t157.label.position ? s43.setAttribute("y", parseFloat(s43.getAttribute("y")) + r36.width) : s43.setAttribute("y", parseFloat(s43.getAttribute("y")) - r36.width);
                        var o27 = this.annoCtx.graphics.rotateAroundCenter(s43), n22 = o27.x, l14 = o27.y;
                        s43.setAttribute("transform", "rotate(-90 ".concat(n22, " ").concat(l14, ")"));
                    }
                }
            }
        },
        {
            key: "addBackgroundToAnno",
            value: function(t158, e105) {
                var i78 = this.w;
                if (!t158 || void 0 === e105.label.text || void 0 !== e105.label.text && !String(e105.label.text).trim()) return null;
                var a63 = i78.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(), s44 = t158.getBoundingClientRect(), r37 = e105.label.style.padding.left, o28 = e105.label.style.padding.right, n23 = e105.label.style.padding.top, l15 = e105.label.style.padding.bottom;
                "vertical" === e105.label.orientation && (n23 = e105.label.style.padding.left, l15 = e105.label.style.padding.right, r37 = e105.label.style.padding.top, o28 = e105.label.style.padding.bottom);
                var h13 = s44.left - a63.left - r37, c10 = s44.top - a63.top - n23, d8 = this.annoCtx.graphics.drawRect(h13 - i78.globals.barPadForNumericAxis, c10, s44.width + r37 + o28, s44.height + n23 + l15, e105.label.borderRadius, e105.label.style.background, 1, e105.label.borderWidth, e105.label.borderColor, 0);
                return e105.id && d8.node.classList.add(e105.id), d8;
            }
        },
        {
            key: "annotationsBackground",
            value: function() {
                var t159 = this, e106 = this.w, i79 = function(i80, a64, s45) {
                    var r38 = e106.globals.dom.baseEl.querySelector(".apexcharts-".concat(s45, "-annotations .apexcharts-").concat(s45, "-annotation-label[rel='").concat(a64, "']"));
                    if (r38) {
                        var o29 = r38.parentNode, n24 = t159.addBackgroundToAnno(r38, i80);
                        n24 && (o29.insertBefore(n24.node, r38), i80.label.mouseEnter && n24.node.addEventListener("mouseenter", i80.label.mouseEnter.bind(t159, i80)), i80.label.mouseLeave && n24.node.addEventListener("mouseleave", i80.label.mouseLeave.bind(t159, i80)), i80.label.click && n24.node.addEventListener("click", i80.label.click.bind(t159, i80)));
                    }
                };
                e106.config.annotations.xaxis.map(function(t160, e107) {
                    i79(t160, e107, "xaxis");
                }), e106.config.annotations.yaxis.map(function(t161, e108) {
                    i79(t161, e108, "yaxis");
                }), e106.config.annotations.points.map(function(t162, e109) {
                    i79(t162, e109, "point");
                });
            }
        },
        {
            key: "getY1Y2",
            value: function(t163, e110) {
                var i81, a65 = "y1" === t163 ? e110.y : e110.y2, s46 = this.w;
                if (this.annoCtx.invertAxis) {
                    var r39 = s46.globals.labels.indexOf(a65);
                    s46.config.xaxis.convertedCatToNumeric && (r39 = s46.globals.categoryLabels.indexOf(a65));
                    var o30 = s46.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(" + (r39 + 1) + ")");
                    o30 && (i81 = parseFloat(o30.getAttribute("y")));
                } else {
                    var n25;
                    if (s46.config.yaxis[e110.yAxisIndex].logarithmic) n25 = (a65 = new y(this.annoCtx.ctx).getLogVal(a65, e110.yAxisIndex)) / s46.globals.yLogRatio[e110.yAxisIndex];
                    else n25 = (a65 - s46.globals.minYArr[e110.yAxisIndex]) / (s46.globals.yRange[e110.yAxisIndex] / s46.globals.gridHeight);
                    i81 = s46.globals.gridHeight - n25, !e110.marker || void 0 !== e110.y && null !== e110.y || (i81 = 0), s46.config.yaxis[e110.yAxisIndex] && s46.config.yaxis[e110.yAxisIndex].reversed && (i81 = n25);
                }
                return i81;
            }
        },
        {
            key: "getX1X2",
            value: function(t164, e111) {
                var i82 = this.w, a66 = this.annoCtx.invertAxis ? i82.globals.minY : i82.globals.minX, s47 = this.annoCtx.invertAxis ? i82.globals.maxY : i82.globals.maxX, r40 = this.annoCtx.invertAxis ? i82.globals.yRange[0] : i82.globals.xRange, o31 = (e111.x - a66) / (r40 / i82.globals.gridWidth);
                this.annoCtx.inversedReversedAxis && (o31 = (s47 - e111.x) / (r40 / i82.globals.gridWidth)), "category" !== i82.config.xaxis.type && !i82.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i82.globals.dataFormatXNumeric || (o31 = this.getStringX(e111.x));
                var n26 = (e111.x2 - a66) / (r40 / i82.globals.gridWidth);
                return this.annoCtx.inversedReversedAxis && (n26 = (s47 - e111.x2) / (r40 / i82.globals.gridWidth)), "category" !== i82.config.xaxis.type && !i82.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i82.globals.dataFormatXNumeric || (n26 = this.getStringX(e111.x2)), void 0 !== e111.x && null !== e111.x || !e111.marker || (o31 = i82.globals.gridWidth), "x1" === t164 ? o31 : n26;
            }
        },
        {
            key: "getStringX",
            value: function(t165) {
                var e112 = this.w, i83 = t165;
                e112.config.xaxis.convertedCatToNumeric && e112.globals.categoryLabels.length && (t165 = e112.globals.categoryLabels.indexOf(t165) + 1);
                var a67 = e112.globals.labels.indexOf(t165), s48 = e112.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(" + (a67 + 1) + ")");
                return s48 && (i83 = parseFloat(s48.getAttribute("x"))), i83;
            }
        }
    ]), t156;
}(), k = function() {
    function t166(e113) {
        a(this, t166), this.w = e113.w, this.annoCtx = e113, this.invertAxis = this.annoCtx.invertAxis, this.helpers = new w(this.annoCtx);
    }
    return r(t166, [
        {
            key: "addXaxisAnnotation",
            value: function(t167, e114, i84) {
                var a68, s49 = this.w, r41 = this.helpers.getX1X2("x1", t167), o32 = t167.label.text, n27 = t167.strokeDashArray;
                if (x.isNumber(r41)) {
                    if (null === t167.x2 || void 0 === t167.x2) {
                        var l16 = this.annoCtx.graphics.drawLine(r41 + t167.offsetX, 0 + t167.offsetY, r41 + t167.offsetX, s49.globals.gridHeight + t167.offsetY, t167.borderColor, n27, t167.borderWidth);
                        e114.appendChild(l16.node), t167.id && l16.node.classList.add(t167.id);
                    } else {
                        if ((a68 = this.helpers.getX1X2("x2", t167)) < r41) {
                            var h14 = r41;
                            r41 = a68, a68 = h14;
                        }
                        var c11 = this.annoCtx.graphics.drawRect(r41 + t167.offsetX, 0 + t167.offsetY, a68 - r41, s49.globals.gridHeight + t167.offsetY, 0, t167.fillColor, t167.opacity, 1, t167.borderColor, n27);
                        c11.node.classList.add("apexcharts-annotation-rect"), c11.attr("clip-path", "url(#gridRectMask".concat(s49.globals.cuid, ")")), e114.appendChild(c11.node), t167.id && c11.node.classList.add(t167.id);
                    }
                    var d9 = "top" === t167.label.position ? 4 : s49.globals.gridHeight, g7 = this.annoCtx.graphics.getTextRects(o32, parseFloat(t167.label.style.fontSize)), u5 = this.annoCtx.graphics.drawText({
                        x: r41 + t167.label.offsetX,
                        y: d9 + t167.label.offsetY - ("vertical" === t167.label.orientation ? "top" === t167.label.position ? g7.width / 2 - 12 : -g7.width / 2 : 0),
                        text: o32,
                        textAnchor: t167.label.textAnchor,
                        fontSize: t167.label.style.fontSize,
                        fontFamily: t167.label.style.fontFamily,
                        fontWeight: t167.label.style.fontWeight,
                        foreColor: t167.label.style.color,
                        cssClass: "apexcharts-xaxis-annotation-label ".concat(t167.label.style.cssClass, " ").concat(t167.id ? t167.id : "")
                    });
                    u5.attr({
                        rel: i84
                    }), e114.appendChild(u5.node), this.annoCtx.helpers.setOrientations(t167, i84);
                }
            }
        },
        {
            key: "drawXAxisAnnotations",
            value: function() {
                var t168 = this, e115 = this.w, i85 = this.annoCtx.graphics.group({
                    class: "apexcharts-xaxis-annotations"
                });
                return e115.config.annotations.xaxis.map(function(e116, a69) {
                    t168.addXaxisAnnotation(e116, i85.node, a69);
                }), i85;
            }
        }
    ]), t166;
}(), A = function() {
    function t169(e117) {
        a(this, t169), this.w = e117.w, this.annoCtx = e117, this.helpers = new w(this.annoCtx);
    }
    return r(t169, [
        {
            key: "addYaxisAnnotation",
            value: function(t170, e118, i86) {
                var a70, s50 = this.w, r42 = t170.strokeDashArray, o33 = this.helpers.getY1Y2("y1", t170), n28 = t170.label.text;
                if (null === t170.y2 || void 0 === t170.y2) {
                    var l17 = this.annoCtx.graphics.drawLine(0 + t170.offsetX, o33 + t170.offsetY, this._getYAxisAnnotationWidth(t170), o33 + t170.offsetY, t170.borderColor, r42, t170.borderWidth);
                    e118.appendChild(l17.node), t170.id && l17.node.classList.add(t170.id);
                } else {
                    if ((a70 = this.helpers.getY1Y2("y2", t170)) > o33) {
                        var h15 = o33;
                        o33 = a70, a70 = h15;
                    }
                    var c12 = this.annoCtx.graphics.drawRect(0 + t170.offsetX, a70 + t170.offsetY, this._getYAxisAnnotationWidth(t170), o33 - a70, 0, t170.fillColor, t170.opacity, 1, t170.borderColor, r42);
                    c12.node.classList.add("apexcharts-annotation-rect"), c12.attr("clip-path", "url(#gridRectMask".concat(s50.globals.cuid, ")")), e118.appendChild(c12.node), t170.id && c12.node.classList.add(t170.id);
                }
                var d10 = "right" === t170.label.position ? s50.globals.gridWidth : 0, g8 = this.annoCtx.graphics.drawText({
                    x: d10 + t170.label.offsetX,
                    y: (null != a70 ? a70 : o33) + t170.label.offsetY - 3,
                    text: n28,
                    textAnchor: t170.label.textAnchor,
                    fontSize: t170.label.style.fontSize,
                    fontFamily: t170.label.style.fontFamily,
                    fontWeight: t170.label.style.fontWeight,
                    foreColor: t170.label.style.color,
                    cssClass: "apexcharts-yaxis-annotation-label ".concat(t170.label.style.cssClass, " ").concat(t170.id ? t170.id : "")
                });
                g8.attr({
                    rel: i86
                }), e118.appendChild(g8.node);
            }
        },
        {
            key: "_getYAxisAnnotationWidth",
            value: function(t171) {
                var e119 = this.w;
                e119.globals.gridWidth;
                return (t171.width.indexOf("%") > -1 ? e119.globals.gridWidth * parseInt(t171.width, 10) / 100 : parseInt(t171.width, 10)) + t171.offsetX;
            }
        },
        {
            key: "drawYAxisAnnotations",
            value: function() {
                var t172 = this, e120 = this.w, i87 = this.annoCtx.graphics.group({
                    class: "apexcharts-yaxis-annotations"
                });
                return e120.config.annotations.yaxis.map(function(e121, a71) {
                    t172.addYaxisAnnotation(e121, i87.node, a71);
                }), i87;
            }
        }
    ]), t169;
}(), S = function() {
    function t173(e122) {
        a(this, t173), this.w = e122.w, this.annoCtx = e122, this.helpers = new w(this.annoCtx);
    }
    return r(t173, [
        {
            key: "addPointAnnotation",
            value: function(t174, e123, i88) {
                this.w;
                var a72 = this.helpers.getX1X2("x1", t174), s51 = this.helpers.getY1Y2("y1", t174);
                if (x.isNumber(a72)) {
                    var r43 = {
                        pSize: t174.marker.size,
                        pointStrokeWidth: t174.marker.strokeWidth,
                        pointFillColor: t174.marker.fillColor,
                        pointStrokeColor: t174.marker.strokeColor,
                        shape: t174.marker.shape,
                        pRadius: t174.marker.radius,
                        class: "apexcharts-point-annotation-marker ".concat(t174.marker.cssClass, " ").concat(t174.id ? t174.id : "")
                    }, o34 = this.annoCtx.graphics.drawMarker(a72 + t174.marker.offsetX, s51 + t174.marker.offsetY, r43);
                    e123.appendChild(o34.node);
                    var n29 = t174.label.text ? t174.label.text : "", l18 = this.annoCtx.graphics.drawText({
                        x: a72 + t174.label.offsetX,
                        y: s51 + t174.label.offsetY - t174.marker.size - parseFloat(t174.label.style.fontSize) / 1.6,
                        text: n29,
                        textAnchor: t174.label.textAnchor,
                        fontSize: t174.label.style.fontSize,
                        fontFamily: t174.label.style.fontFamily,
                        fontWeight: t174.label.style.fontWeight,
                        foreColor: t174.label.style.color,
                        cssClass: "apexcharts-point-annotation-label ".concat(t174.label.style.cssClass, " ").concat(t174.id ? t174.id : "")
                    });
                    if (l18.attr({
                        rel: i88
                    }), e123.appendChild(l18.node), t174.customSVG.SVG) {
                        var h16 = this.annoCtx.graphics.group({
                            class: "apexcharts-point-annotations-custom-svg " + t174.customSVG.cssClass
                        });
                        h16.attr({
                            transform: "translate(".concat(a72 + t174.customSVG.offsetX, ", ").concat(s51 + t174.customSVG.offsetY, ")")
                        }), h16.node.innerHTML = t174.customSVG.SVG, e123.appendChild(h16.node);
                    }
                    if (t174.image.path) {
                        var c13 = t174.image.width ? t174.image.width : 20, d11 = t174.image.height ? t174.image.height : 20;
                        o34 = this.annoCtx.addImage({
                            x: a72 + t174.image.offsetX - c13 / 2,
                            y: s51 + t174.image.offsetY - d11 / 2,
                            width: c13,
                            height: d11,
                            path: t174.image.path,
                            appendTo: ".apexcharts-point-annotations"
                        });
                    }
                    t174.mouseEnter && o34.node.addEventListener("mouseenter", t174.mouseEnter.bind(this, t174)), t174.mouseLeave && o34.node.addEventListener("mouseleave", t174.mouseLeave.bind(this, t174)), t174.click && o34.node.addEventListener("click", t174.click.bind(this, t174));
                }
            }
        },
        {
            key: "drawPointAnnotations",
            value: function() {
                var t175 = this, e124 = this.w, i89 = this.annoCtx.graphics.group({
                    class: "apexcharts-point-annotations"
                });
                return e124.config.annotations.points.map(function(e125, a73) {
                    t175.addPointAnnotation(e125, i89.node, a73);
                }), i89;
            }
        }
    ]), t173;
}();
var C = {
    name: "en",
    options: {
        months: [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December"
        ],
        shortMonths: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec"
        ],
        days: [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
        ],
        shortDays: [
            "Sun",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat"
        ],
        toolbar: {
            exportToSVG: "Download SVG",
            exportToPNG: "Download PNG",
            exportToCSV: "Download CSV",
            menu: "Menu",
            selection: "Selection",
            selectionZoom: "Selection Zoom",
            zoomIn: "Zoom In",
            zoomOut: "Zoom Out",
            pan: "Panning",
            reset: "Reset Zoom"
        }
    }
}, L = function() {
    function t176() {
        a(this, t176), this.yAxis = {
            show: !0,
            showAlways: !1,
            showForNullSeries: !0,
            seriesName: void 0,
            opposite: !1,
            reversed: !1,
            logarithmic: !1,
            logBase: 10,
            tickAmount: void 0,
            forceNiceScale: !1,
            max: void 0,
            min: void 0,
            floating: !1,
            decimalsInFloat: void 0,
            labels: {
                show: !0,
                minWidth: 0,
                maxWidth: 160,
                offsetX: 0,
                offsetY: 0,
                align: void 0,
                rotate: 0,
                padding: 20,
                style: {
                    colors: [],
                    fontSize: "11px",
                    fontWeight: 400,
                    fontFamily: void 0,
                    cssClass: ""
                },
                formatter: void 0
            },
            axisBorder: {
                show: !1,
                color: "#e0e0e0",
                width: 1,
                offsetX: 0,
                offsetY: 0
            },
            axisTicks: {
                show: !1,
                color: "#e0e0e0",
                width: 6,
                offsetX: 0,
                offsetY: 0
            },
            title: {
                text: void 0,
                rotate: -90,
                offsetY: 0,
                offsetX: 0,
                style: {
                    color: void 0,
                    fontSize: "11px",
                    fontWeight: 900,
                    fontFamily: void 0,
                    cssClass: ""
                }
            },
            tooltip: {
                enabled: !1,
                offsetX: 0
            },
            crosshairs: {
                show: !0,
                position: "front",
                stroke: {
                    color: "#b6b6b6",
                    width: 1,
                    dashArray: 0
                }
            }
        }, this.pointAnnotation = {
            id: void 0,
            x: 0,
            y: null,
            yAxisIndex: 0,
            seriesIndex: 0,
            mouseEnter: void 0,
            mouseLeave: void 0,
            click: void 0,
            marker: {
                size: 4,
                fillColor: "#fff",
                strokeWidth: 2,
                strokeColor: "#333",
                shape: "circle",
                offsetX: 0,
                offsetY: 0,
                radius: 2,
                cssClass: ""
            },
            label: {
                borderColor: "#c2c2c2",
                borderWidth: 1,
                borderRadius: 2,
                text: void 0,
                textAnchor: "middle",
                offsetX: 0,
                offsetY: 0,
                mouseEnter: void 0,
                mouseLeave: void 0,
                click: void 0,
                style: {
                    background: "#fff",
                    color: void 0,
                    fontSize: "11px",
                    fontFamily: void 0,
                    fontWeight: 400,
                    cssClass: "",
                    padding: {
                        left: 5,
                        right: 5,
                        top: 2,
                        bottom: 2
                    }
                }
            },
            customSVG: {
                SVG: void 0,
                cssClass: void 0,
                offsetX: 0,
                offsetY: 0
            },
            image: {
                path: void 0,
                width: 20,
                height: 20,
                offsetX: 0,
                offsetY: 0
            }
        }, this.yAxisAnnotation = {
            id: void 0,
            y: 0,
            y2: null,
            strokeDashArray: 1,
            fillColor: "#c2c2c2",
            borderColor: "#c2c2c2",
            borderWidth: 1,
            opacity: .3,
            offsetX: 0,
            offsetY: 0,
            width: "100%",
            yAxisIndex: 0,
            label: {
                borderColor: "#c2c2c2",
                borderWidth: 1,
                borderRadius: 2,
                text: void 0,
                textAnchor: "end",
                position: "right",
                offsetX: 0,
                offsetY: -3,
                mouseEnter: void 0,
                mouseLeave: void 0,
                click: void 0,
                style: {
                    background: "#fff",
                    color: void 0,
                    fontSize: "11px",
                    fontFamily: void 0,
                    fontWeight: 400,
                    cssClass: "",
                    padding: {
                        left: 5,
                        right: 5,
                        top: 2,
                        bottom: 2
                    }
                }
            }
        }, this.xAxisAnnotation = {
            id: void 0,
            x: 0,
            x2: null,
            strokeDashArray: 1,
            fillColor: "#c2c2c2",
            borderColor: "#c2c2c2",
            borderWidth: 1,
            opacity: .3,
            offsetX: 0,
            offsetY: 0,
            label: {
                borderColor: "#c2c2c2",
                borderWidth: 1,
                borderRadius: 2,
                text: void 0,
                textAnchor: "middle",
                orientation: "vertical",
                position: "top",
                offsetX: 0,
                offsetY: 0,
                mouseEnter: void 0,
                mouseLeave: void 0,
                click: void 0,
                style: {
                    background: "#fff",
                    color: void 0,
                    fontSize: "11px",
                    fontFamily: void 0,
                    fontWeight: 400,
                    cssClass: "",
                    padding: {
                        left: 5,
                        right: 5,
                        top: 2,
                        bottom: 2
                    }
                }
            }
        }, this.text = {
            x: 0,
            y: 0,
            text: "",
            textAnchor: "start",
            foreColor: void 0,
            fontSize: "13px",
            fontFamily: void 0,
            fontWeight: 400,
            appendTo: ".apexcharts-annotations",
            backgroundColor: "transparent",
            borderColor: "#c2c2c2",
            borderRadius: 0,
            borderWidth: 0,
            paddingLeft: 4,
            paddingRight: 4,
            paddingTop: 2,
            paddingBottom: 2
        };
    }
    return r(t176, [
        {
            key: "init",
            value: function() {
                return {
                    annotations: {
                        position: "front",
                        yaxis: [
                            this.yAxisAnnotation
                        ],
                        xaxis: [
                            this.xAxisAnnotation
                        ],
                        points: [
                            this.pointAnnotation
                        ],
                        texts: [],
                        images: [],
                        shapes: []
                    },
                    chart: {
                        animations: {
                            enabled: !0,
                            easing: "easeinout",
                            speed: 800,
                            animateGradually: {
                                delay: 150,
                                enabled: !0
                            },
                            dynamicAnimation: {
                                enabled: !0,
                                speed: 350
                            }
                        },
                        background: "transparent",
                        locales: [
                            C
                        ],
                        defaultLocale: "en",
                        dropShadow: {
                            enabled: !1,
                            enabledOnSeries: void 0,
                            top: 2,
                            left: 2,
                            blur: 4,
                            color: "#000",
                            opacity: .35
                        },
                        events: {
                            animationEnd: void 0,
                            beforeMount: void 0,
                            mounted: void 0,
                            updated: void 0,
                            click: void 0,
                            mouseMove: void 0,
                            mouseLeave: void 0,
                            legendClick: void 0,
                            markerClick: void 0,
                            selection: void 0,
                            dataPointSelection: void 0,
                            dataPointMouseEnter: void 0,
                            dataPointMouseLeave: void 0,
                            beforeZoom: void 0,
                            beforeResetZoom: void 0,
                            zoomed: void 0,
                            scrolled: void 0,
                            brushScrolled: void 0
                        },
                        foreColor: "#373d3f",
                        fontFamily: "Helvetica, Arial, sans-serif",
                        height: "auto",
                        parentHeightOffset: 15,
                        redrawOnParentResize: !0,
                        redrawOnWindowResize: !0,
                        id: void 0,
                        group: void 0,
                        offsetX: 0,
                        offsetY: 0,
                        selection: {
                            enabled: !1,
                            type: "x",
                            fill: {
                                color: "#24292e",
                                opacity: .1
                            },
                            stroke: {
                                width: 1,
                                color: "#24292e",
                                opacity: .4,
                                dashArray: 3
                            },
                            xaxis: {
                                min: void 0,
                                max: void 0
                            },
                            yaxis: {
                                min: void 0,
                                max: void 0
                            }
                        },
                        sparkline: {
                            enabled: !1
                        },
                        brush: {
                            enabled: !1,
                            autoScaleYaxis: !0,
                            target: void 0
                        },
                        stacked: !1,
                        stackType: "normal",
                        toolbar: {
                            show: !0,
                            offsetX: 0,
                            offsetY: 0,
                            tools: {
                                download: !0,
                                selection: !0,
                                zoom: !0,
                                zoomin: !0,
                                zoomout: !0,
                                pan: !0,
                                reset: !0,
                                customIcons: []
                            },
                            export: {
                                csv: {
                                    filename: void 0,
                                    columnDelimiter: ",",
                                    headerCategory: "category",
                                    headerValue: "value",
                                    dateFormatter: function(t177) {
                                        return new Date(t177).toDateString();
                                    }
                                },
                                png: {
                                    filename: void 0
                                },
                                svg: {
                                    filename: void 0
                                }
                            },
                            autoSelected: "zoom"
                        },
                        type: "line",
                        width: "100%",
                        zoom: {
                            enabled: !0,
                            type: "x",
                            autoScaleYaxis: !1,
                            zoomedArea: {
                                fill: {
                                    color: "#90CAF9",
                                    opacity: .4
                                },
                                stroke: {
                                    color: "#0D47A1",
                                    opacity: .4,
                                    width: 1
                                }
                            }
                        }
                    },
                    plotOptions: {
                        area: {
                            fillTo: "origin"
                        },
                        bar: {
                            horizontal: !1,
                            columnWidth: "70%",
                            barHeight: "70%",
                            distributed: !1,
                            borderRadius: 0,
                            rangeBarOverlap: !0,
                            rangeBarGroupRows: !1,
                            colors: {
                                ranges: [],
                                backgroundBarColors: [],
                                backgroundBarOpacity: 1,
                                backgroundBarRadius: 0
                            },
                            dataLabels: {
                                position: "top",
                                maxItems: 100,
                                hideOverflowingLabels: !0,
                                orientation: "horizontal"
                            }
                        },
                        bubble: {
                            minBubbleRadius: void 0,
                            maxBubbleRadius: void 0
                        },
                        candlestick: {
                            colors: {
                                upward: "#00B746",
                                downward: "#EF403C"
                            },
                            wick: {
                                useFillColor: !0
                            }
                        },
                        boxPlot: {
                            colors: {
                                upper: "#00E396",
                                lower: "#008FFB"
                            }
                        },
                        heatmap: {
                            radius: 2,
                            enableShades: !0,
                            shadeIntensity: .5,
                            reverseNegativeShade: !1,
                            distributed: !1,
                            useFillColorAsStroke: !1,
                            colorScale: {
                                inverse: !1,
                                ranges: [],
                                min: void 0,
                                max: void 0
                            }
                        },
                        treemap: {
                            enableShades: !0,
                            shadeIntensity: .5,
                            distributed: !1,
                            reverseNegativeShade: !1,
                            useFillColorAsStroke: !1,
                            colorScale: {
                                inverse: !1,
                                ranges: [],
                                min: void 0,
                                max: void 0
                            }
                        },
                        radialBar: {
                            inverseOrder: !1,
                            startAngle: 0,
                            endAngle: 360,
                            offsetX: 0,
                            offsetY: 0,
                            hollow: {
                                margin: 5,
                                size: "50%",
                                background: "transparent",
                                image: void 0,
                                imageWidth: 150,
                                imageHeight: 150,
                                imageOffsetX: 0,
                                imageOffsetY: 0,
                                imageClipped: !0,
                                position: "front",
                                dropShadow: {
                                    enabled: !1,
                                    top: 0,
                                    left: 0,
                                    blur: 3,
                                    color: "#000",
                                    opacity: .5
                                }
                            },
                            track: {
                                show: !0,
                                startAngle: void 0,
                                endAngle: void 0,
                                background: "#f2f2f2",
                                strokeWidth: "97%",
                                opacity: 1,
                                margin: 5,
                                dropShadow: {
                                    enabled: !1,
                                    top: 0,
                                    left: 0,
                                    blur: 3,
                                    color: "#000",
                                    opacity: .5
                                }
                            },
                            dataLabels: {
                                show: !0,
                                name: {
                                    show: !0,
                                    fontSize: "16px",
                                    fontFamily: void 0,
                                    fontWeight: 600,
                                    color: void 0,
                                    offsetY: 0,
                                    formatter: function(t178) {
                                        return t178;
                                    }
                                },
                                value: {
                                    show: !0,
                                    fontSize: "14px",
                                    fontFamily: void 0,
                                    fontWeight: 400,
                                    color: void 0,
                                    offsetY: 16,
                                    formatter: function(t179) {
                                        return t179 + "%";
                                    }
                                },
                                total: {
                                    show: !1,
                                    label: "Total",
                                    fontSize: "16px",
                                    fontWeight: 600,
                                    fontFamily: void 0,
                                    color: void 0,
                                    formatter: function(t180) {
                                        return t180.globals.seriesTotals.reduce(function(t181, e126) {
                                            return t181 + e126;
                                        }, 0) / t180.globals.series.length + "%";
                                    }
                                }
                            }
                        },
                        pie: {
                            customScale: 1,
                            offsetX: 0,
                            offsetY: 0,
                            startAngle: 0,
                            endAngle: 360,
                            expandOnClick: !0,
                            dataLabels: {
                                offset: 0,
                                minAngleToShowLabel: 10
                            },
                            donut: {
                                size: "65%",
                                background: "transparent",
                                labels: {
                                    show: !1,
                                    name: {
                                        show: !0,
                                        fontSize: "16px",
                                        fontFamily: void 0,
                                        fontWeight: 600,
                                        color: void 0,
                                        offsetY: -10,
                                        formatter: function(t182) {
                                            return t182;
                                        }
                                    },
                                    value: {
                                        show: !0,
                                        fontSize: "20px",
                                        fontFamily: void 0,
                                        fontWeight: 400,
                                        color: void 0,
                                        offsetY: 10,
                                        formatter: function(t183) {
                                            return t183;
                                        }
                                    },
                                    total: {
                                        show: !1,
                                        showAlways: !1,
                                        label: "Total",
                                        fontSize: "16px",
                                        fontWeight: 400,
                                        fontFamily: void 0,
                                        color: void 0,
                                        formatter: function(t184) {
                                            return t184.globals.seriesTotals.reduce(function(t185, e127) {
                                                return t185 + e127;
                                            }, 0);
                                        }
                                    }
                                }
                            }
                        },
                        polarArea: {
                            rings: {
                                strokeWidth: 1,
                                strokeColor: "#e8e8e8"
                            },
                            spokes: {
                                strokeWidth: 1,
                                connectorColors: "#e8e8e8"
                            }
                        },
                        radar: {
                            size: void 0,
                            offsetX: 0,
                            offsetY: 0,
                            polygons: {
                                strokeWidth: 1,
                                strokeColors: "#e8e8e8",
                                connectorColors: "#e8e8e8",
                                fill: {
                                    colors: void 0
                                }
                            }
                        }
                    },
                    colors: void 0,
                    dataLabels: {
                        enabled: !0,
                        enabledOnSeries: void 0,
                        formatter: function(t186) {
                            return null !== t186 ? t186 : "";
                        },
                        textAnchor: "middle",
                        distributed: !1,
                        offsetX: 0,
                        offsetY: 0,
                        style: {
                            fontSize: "12px",
                            fontFamily: void 0,
                            fontWeight: 600,
                            colors: void 0
                        },
                        background: {
                            enabled: !0,
                            foreColor: "#fff",
                            borderRadius: 2,
                            padding: 4,
                            opacity: .9,
                            borderWidth: 1,
                            borderColor: "#fff",
                            dropShadow: {
                                enabled: !1,
                                top: 1,
                                left: 1,
                                blur: 1,
                                color: "#000",
                                opacity: .45
                            }
                        },
                        dropShadow: {
                            enabled: !1,
                            top: 1,
                            left: 1,
                            blur: 1,
                            color: "#000",
                            opacity: .45
                        }
                    },
                    fill: {
                        type: "solid",
                        colors: void 0,
                        opacity: .85,
                        gradient: {
                            shade: "dark",
                            type: "horizontal",
                            shadeIntensity: .5,
                            gradientToColors: void 0,
                            inverseColors: !0,
                            opacityFrom: 1,
                            opacityTo: 1,
                            stops: [
                                0,
                                50,
                                100
                            ],
                            colorStops: []
                        },
                        image: {
                            src: [],
                            width: void 0,
                            height: void 0
                        },
                        pattern: {
                            style: "squares",
                            width: 6,
                            height: 6,
                            strokeWidth: 2
                        }
                    },
                    forecastDataPoints: {
                        count: 0,
                        fillOpacity: .5,
                        strokeWidth: void 0,
                        dashArray: 4
                    },
                    grid: {
                        show: !0,
                        borderColor: "#e0e0e0",
                        strokeDashArray: 0,
                        position: "back",
                        xaxis: {
                            lines: {
                                show: !1
                            }
                        },
                        yaxis: {
                            lines: {
                                show: !0
                            }
                        },
                        row: {
                            colors: void 0,
                            opacity: .5
                        },
                        column: {
                            colors: void 0,
                            opacity: .5
                        },
                        padding: {
                            top: 0,
                            right: 10,
                            bottom: 0,
                            left: 12
                        }
                    },
                    labels: [],
                    legend: {
                        show: !0,
                        showForSingleSeries: !1,
                        showForNullSeries: !0,
                        showForZeroSeries: !0,
                        floating: !1,
                        position: "bottom",
                        horizontalAlign: "center",
                        inverseOrder: !1,
                        fontSize: "12px",
                        fontFamily: void 0,
                        fontWeight: 400,
                        width: void 0,
                        height: void 0,
                        formatter: void 0,
                        tooltipHoverFormatter: void 0,
                        offsetX: -20,
                        offsetY: 4,
                        customLegendItems: [],
                        labels: {
                            colors: void 0,
                            useSeriesColors: !1
                        },
                        markers: {
                            width: 12,
                            height: 12,
                            strokeWidth: 0,
                            fillColors: void 0,
                            strokeColor: "#fff",
                            radius: 12,
                            customHTML: void 0,
                            offsetX: 0,
                            offsetY: 0,
                            onClick: void 0
                        },
                        itemMargin: {
                            horizontal: 5,
                            vertical: 2
                        },
                        onItemClick: {
                            toggleDataSeries: !0
                        },
                        onItemHover: {
                            highlightDataSeries: !0
                        }
                    },
                    markers: {
                        discrete: [],
                        size: 0,
                        colors: void 0,
                        strokeColors: "#fff",
                        strokeWidth: 2,
                        strokeOpacity: .9,
                        strokeDashArray: 0,
                        fillOpacity: 1,
                        shape: "circle",
                        width: 8,
                        height: 8,
                        radius: 2,
                        offsetX: 0,
                        offsetY: 0,
                        onClick: void 0,
                        onDblClick: void 0,
                        showNullDataPoints: !0,
                        hover: {
                            size: void 0,
                            sizeOffset: 3
                        }
                    },
                    noData: {
                        text: void 0,
                        align: "center",
                        verticalAlign: "middle",
                        offsetX: 0,
                        offsetY: 0,
                        style: {
                            color: void 0,
                            fontSize: "14px",
                            fontFamily: void 0
                        }
                    },
                    responsive: [],
                    series: void 0,
                    states: {
                        normal: {
                            filter: {
                                type: "none",
                                value: 0
                            }
                        },
                        hover: {
                            filter: {
                                type: "lighten",
                                value: .1
                            }
                        },
                        active: {
                            allowMultipleDataPointsSelection: !1,
                            filter: {
                                type: "darken",
                                value: .5
                            }
                        }
                    },
                    title: {
                        text: void 0,
                        align: "left",
                        margin: 5,
                        offsetX: 0,
                        offsetY: 0,
                        floating: !1,
                        style: {
                            fontSize: "14px",
                            fontWeight: 900,
                            fontFamily: void 0,
                            color: void 0
                        }
                    },
                    subtitle: {
                        text: void 0,
                        align: "left",
                        margin: 5,
                        offsetX: 0,
                        offsetY: 30,
                        floating: !1,
                        style: {
                            fontSize: "12px",
                            fontWeight: 400,
                            fontFamily: void 0,
                            color: void 0
                        }
                    },
                    stroke: {
                        show: !0,
                        curve: "smooth",
                        lineCap: "butt",
                        width: 2,
                        colors: void 0,
                        dashArray: 0,
                        fill: {
                            type: "solid",
                            colors: void 0,
                            opacity: .85,
                            gradient: {
                                shade: "dark",
                                type: "horizontal",
                                shadeIntensity: .5,
                                gradientToColors: void 0,
                                inverseColors: !0,
                                opacityFrom: 1,
                                opacityTo: 1,
                                stops: [
                                    0,
                                    50,
                                    100
                                ],
                                colorStops: []
                            }
                        }
                    },
                    tooltip: {
                        enabled: !0,
                        enabledOnSeries: void 0,
                        shared: !0,
                        followCursor: !1,
                        intersect: !1,
                        inverseOrder: !1,
                        custom: void 0,
                        fillSeriesColor: !1,
                        theme: "light",
                        cssClass: "",
                        style: {
                            fontSize: "12px",
                            fontFamily: void 0
                        },
                        onDatasetHover: {
                            highlightDataSeries: !1
                        },
                        x: {
                            show: !0,
                            format: "dd MMM",
                            formatter: void 0
                        },
                        y: {
                            formatter: void 0,
                            title: {
                                formatter: function(t187) {
                                    return t187 ? t187 + ": " : "";
                                }
                            }
                        },
                        z: {
                            formatter: void 0,
                            title: "Size: "
                        },
                        marker: {
                            show: !0,
                            fillColors: void 0
                        },
                        items: {
                            display: "flex"
                        },
                        fixed: {
                            enabled: !1,
                            position: "topRight",
                            offsetX: 0,
                            offsetY: 0
                        }
                    },
                    xaxis: {
                        type: "category",
                        categories: [],
                        convertedCatToNumeric: !1,
                        offsetX: 0,
                        offsetY: 0,
                        overwriteCategories: void 0,
                        labels: {
                            show: !0,
                            rotate: -45,
                            rotateAlways: !1,
                            hideOverlappingLabels: !0,
                            trim: !1,
                            minHeight: void 0,
                            maxHeight: 120,
                            showDuplicates: !0,
                            style: {
                                colors: [],
                                fontSize: "12px",
                                fontWeight: 400,
                                fontFamily: void 0,
                                cssClass: ""
                            },
                            offsetX: 0,
                            offsetY: 0,
                            format: void 0,
                            formatter: void 0,
                            datetimeUTC: !0,
                            datetimeFormatter: {
                                year: "yyyy",
                                month: "MMM 'yy",
                                day: "dd MMM",
                                hour: "HH:mm",
                                minute: "HH:mm:ss",
                                second: "HH:mm:ss"
                            }
                        },
                        group: {
                            groups: [],
                            style: {
                                colors: [],
                                fontSize: "12px",
                                fontWeight: 400,
                                fontFamily: void 0,
                                cssClass: ""
                            }
                        },
                        axisBorder: {
                            show: !0,
                            color: "#e0e0e0",
                            width: "100%",
                            height: 1,
                            offsetX: 0,
                            offsetY: 0
                        },
                        axisTicks: {
                            show: !0,
                            color: "#e0e0e0",
                            height: 6,
                            offsetX: 0,
                            offsetY: 0
                        },
                        tickAmount: void 0,
                        tickPlacement: "on",
                        min: void 0,
                        max: void 0,
                        range: void 0,
                        floating: !1,
                        decimalsInFloat: void 0,
                        position: "bottom",
                        title: {
                            text: void 0,
                            offsetX: 0,
                            offsetY: 0,
                            style: {
                                color: void 0,
                                fontSize: "12px",
                                fontWeight: 900,
                                fontFamily: void 0,
                                cssClass: ""
                            }
                        },
                        crosshairs: {
                            show: !0,
                            width: 1,
                            position: "back",
                            opacity: .9,
                            stroke: {
                                color: "#b6b6b6",
                                width: 1,
                                dashArray: 3
                            },
                            fill: {
                                type: "solid",
                                color: "#B1B9C4",
                                gradient: {
                                    colorFrom: "#D8E3F0",
                                    colorTo: "#BED1E6",
                                    stops: [
                                        0,
                                        100
                                    ],
                                    opacityFrom: .4,
                                    opacityTo: .5
                                }
                            },
                            dropShadow: {
                                enabled: !1,
                                left: 0,
                                top: 0,
                                blur: 1,
                                opacity: .4
                            }
                        },
                        tooltip: {
                            enabled: !0,
                            offsetY: 0,
                            formatter: void 0,
                            style: {
                                fontSize: "12px",
                                fontFamily: void 0
                            }
                        }
                    },
                    yaxis: this.yAxis,
                    theme: {
                        mode: "light",
                        palette: "palette1",
                        monochrome: {
                            enabled: !1,
                            color: "#008FFB",
                            shadeTo: "light",
                            shadeIntensity: .65
                        }
                    }
                };
            }
        }
    ]), t176;
}(), P = function() {
    function t188(e128) {
        a(this, t188), this.ctx = e128, this.w = e128.w, this.graphics = new m(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = !0), this.helpers = new w(this), this.xAxisAnnotations = new k(this), this.yAxisAnnotations = new A(this), this.pointsAnnotations = new S(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = !0), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;
    }
    return r(t188, [
        {
            key: "drawAxesAnnotations",
            value: function() {
                var t189 = this.w;
                if (t189.globals.axisCharts) {
                    for(var e129 = this.yAxisAnnotations.drawYAxisAnnotations(), i90 = this.xAxisAnnotations.drawXAxisAnnotations(), a74 = this.pointsAnnotations.drawPointAnnotations(), s52 = t189.config.chart.animations.enabled, r44 = [
                        e129,
                        i90,
                        a74
                    ], o35 = [
                        i90.node,
                        e129.node,
                        a74.node
                    ], n30 = 0; n30 < 3; n30++)t189.globals.dom.elGraphical.add(r44[n30]), !s52 || t189.globals.resized || t189.globals.dataChanged || "scatter" !== t189.config.chart.type && "bubble" !== t189.config.chart.type && t189.globals.dataPoints > 1 && o35[n30].classList.add("apexcharts-element-hidden"), t189.globals.delayedElements.push({
                        el: o35[n30],
                        index: 0
                    });
                    this.helpers.annotationsBackground();
                }
            }
        },
        {
            key: "drawImageAnnos",
            value: function() {
                var t190 = this;
                this.w.config.annotations.images.map(function(e130, i91) {
                    t190.addImage(e130, i91);
                });
            }
        },
        {
            key: "drawTextAnnos",
            value: function() {
                var t191 = this;
                this.w.config.annotations.texts.map(function(e131, i92) {
                    t191.addText(e131, i92);
                });
            }
        },
        {
            key: "addXaxisAnnotation",
            value: function(t192, e132, i93) {
                this.xAxisAnnotations.addXaxisAnnotation(t192, e132, i93);
            }
        },
        {
            key: "addYaxisAnnotation",
            value: function(t193, e133, i94) {
                this.yAxisAnnotations.addYaxisAnnotation(t193, e133, i94);
            }
        },
        {
            key: "addPointAnnotation",
            value: function(t194, e134, i95) {
                this.pointsAnnotations.addPointAnnotation(t194, e134, i95);
            }
        },
        {
            key: "addText",
            value: function(t195, e) {
                var i96 = t195.x, a75 = t195.y, s53 = t195.text, r45 = t195.textAnchor, o36 = t195.foreColor, n31 = t195.fontSize, l19 = t195.fontFamily, h17 = t195.fontWeight, c14 = t195.cssClass, d12 = t195.backgroundColor, g9 = t195.borderWidth, u6 = t195.strokeDashArray, f5 = t195.borderRadius, p5 = t195.borderColor, x4 = t195.appendTo, b4 = void 0 === x4 ? ".apexcharts-annotations" : x4, v3 = t195.paddingLeft, m3 = void 0 === v3 ? 4 : v3, y3 = t195.paddingRight, w2 = void 0 === y3 ? 4 : y3, k2 = t195.paddingBottom, A2 = void 0 === k2 ? 2 : k2, S2 = t195.paddingTop, C2 = void 0 === S2 ? 2 : S2, L2 = this.w, P2 = this.graphics.drawText({
                    x: i96,
                    y: a75,
                    text: s53,
                    textAnchor: r45 || "start",
                    fontSize: n31 || "12px",
                    fontWeight: h17 || "regular",
                    fontFamily: l19 || L2.config.chart.fontFamily,
                    foreColor: o36 || L2.config.chart.foreColor,
                    cssClass: c14
                }), M2 = L2.globals.dom.baseEl.querySelector(b4);
                M2 && M2.appendChild(P2.node);
                var T2 = P2.bbox();
                if (s53) {
                    var I2 = this.graphics.drawRect(T2.x - m3, T2.y - C2, T2.width + m3 + w2, T2.height + A2 + C2, f5, d12 || "transparent", 1, g9, p5, u6);
                    M2.insertBefore(I2.node, P2.node);
                }
            }
        },
        {
            key: "addImage",
            value: function(t196, e) {
                var i97 = this.w, a76 = t196.path, s54 = t196.x, r46 = void 0 === s54 ? 0 : s54, o37 = t196.y, n32 = void 0 === o37 ? 0 : o37, l20 = t196.width, h18 = void 0 === l20 ? 20 : l20, c15 = t196.height, d13 = void 0 === c15 ? 20 : c15, g10 = t196.appendTo, u7 = void 0 === g10 ? ".apexcharts-annotations" : g10, f6 = i97.globals.dom.Paper.image(a76);
                f6.size(h18, d13).move(r46, n32);
                var p6 = i97.globals.dom.baseEl.querySelector(u7);
                return p6 && p6.appendChild(f6.node), f6;
            }
        },
        {
            key: "addXaxisAnnotationExternal",
            value: function(t197, e135, i98) {
                return this.addAnnotationExternal({
                    params: t197,
                    pushToMemory: e135,
                    context: i98,
                    type: "xaxis",
                    contextMethod: i98.addXaxisAnnotation
                }), i98;
            }
        },
        {
            key: "addYaxisAnnotationExternal",
            value: function(t198, e136, i99) {
                return this.addAnnotationExternal({
                    params: t198,
                    pushToMemory: e136,
                    context: i99,
                    type: "yaxis",
                    contextMethod: i99.addYaxisAnnotation
                }), i99;
            }
        },
        {
            key: "addPointAnnotationExternal",
            value: function(t199, e137, i100) {
                return void 0 === this.invertAxis && (this.invertAxis = i100.w.globals.isBarHorizontal), this.addAnnotationExternal({
                    params: t199,
                    pushToMemory: e137,
                    context: i100,
                    type: "point",
                    contextMethod: i100.addPointAnnotation
                }), i100;
            }
        },
        {
            key: "addAnnotationExternal",
            value: function(t200) {
                var e138 = t200.params, i101 = t200.pushToMemory, a77 = t200.context, s55 = t200.type, r47 = t200.contextMethod, o38 = a77, n33 = o38.w, l21 = n33.globals.dom.baseEl.querySelector(".apexcharts-".concat(s55, "-annotations")), h19 = l21.childNodes.length + 1, c16 = new L, d14 = Object.assign({}, "xaxis" === s55 ? c16.xAxisAnnotation : "yaxis" === s55 ? c16.yAxisAnnotation : c16.pointAnnotation), g11 = x.extend(d14, e138);
                switch(s55){
                    case "xaxis":
                        this.addXaxisAnnotation(g11, l21, h19);
                        break;
                    case "yaxis":
                        this.addYaxisAnnotation(g11, l21, h19);
                        break;
                    case "point":
                        this.addPointAnnotation(g11, l21, h19);
                }
                var u8 = n33.globals.dom.baseEl.querySelector(".apexcharts-".concat(s55, "-annotations .apexcharts-").concat(s55, "-annotation-label[rel='").concat(h19, "']")), f7 = this.helpers.addBackgroundToAnno(u8, g11);
                return f7 && l21.insertBefore(f7.node, u8), i101 && n33.globals.memory.methodsToExec.push({
                    context: o38,
                    id: g11.id ? g11.id : x.randomId(),
                    method: r47,
                    label: "addAnnotation",
                    params: e138
                }), a77;
            }
        },
        {
            key: "clearAnnotations",
            value: function(t201) {
                var e139 = t201.w, i102 = e139.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations");
                e139.globals.memory.methodsToExec.map(function(t202, i103) {
                    "addText" !== t202.label && "addAnnotation" !== t202.label || e139.globals.memory.methodsToExec.splice(i103, 1);
                }), i102 = x.listToArray(i102), Array.prototype.forEach.call(i102, function(t203) {
                    for(; t203.firstChild;)t203.removeChild(t203.firstChild);
                });
            }
        },
        {
            key: "removeAnnotation",
            value: function(t204, e140) {
                var i104 = t204.w, a78 = i104.globals.dom.baseEl.querySelectorAll(".".concat(e140));
                a78 && (i104.globals.memory.methodsToExec.map(function(t205, a79) {
                    t205.id === e140 && i104.globals.memory.methodsToExec.splice(a79, 1);
                }), Array.prototype.forEach.call(a78, function(t206) {
                    t206.parentElement.removeChild(t206);
                }));
            }
        }
    ]), t188;
}(), M = function() {
    function t207(e141) {
        a(this, t207), this.ctx = e141, this.w = e141.w, this.opts = null, this.seriesIndex = 0;
    }
    return r(t207, [
        {
            key: "clippedImgArea",
            value: function(t208) {
                var e142 = this.w, i105 = e142.config, a80 = parseInt(e142.globals.gridWidth, 10), s56 = parseInt(e142.globals.gridHeight, 10), r48 = a80 > s56 ? a80 : s56, o39 = t208.image, n34 = 0, l22 = 0;
                void 0 === t208.width && void 0 === t208.height ? void 0 !== i105.fill.image.width && void 0 !== i105.fill.image.height ? (n34 = i105.fill.image.width + 1, l22 = i105.fill.image.height) : (n34 = r48 + 1, l22 = r48) : (n34 = t208.width, l22 = t208.height);
                var h20 = document.createElementNS(e142.globals.SVGNS, "pattern");
                m.setAttrs(h20, {
                    id: t208.patternID,
                    patternUnits: t208.patternUnits ? t208.patternUnits : "userSpaceOnUse",
                    width: n34 + "px",
                    height: l22 + "px"
                });
                var c17 = document.createElementNS(e142.globals.SVGNS, "image");
                h20.appendChild(c17), c17.setAttributeNS(window.SVG.xlink, "href", o39), m.setAttrs(c17, {
                    x: 0,
                    y: 0,
                    preserveAspectRatio: "none",
                    width: n34 + "px",
                    height: l22 + "px"
                }), c17.style.opacity = t208.opacity, e142.globals.dom.elDefs.node.appendChild(h20);
            }
        },
        {
            key: "getSeriesIndex",
            value: function(t209) {
                var e143 = this.w;
                return ("bar" === e143.config.chart.type || "rangeBar" === e143.config.chart.type) && e143.config.plotOptions.bar.distributed || "heatmap" === e143.config.chart.type || "treemap" === e143.config.chart.type ? this.seriesIndex = t209.seriesNumber : this.seriesIndex = t209.seriesNumber % e143.globals.series.length, this.seriesIndex;
            }
        },
        {
            key: "fillPath",
            value: function(t210) {
                var e144 = this.w;
                this.opts = t210;
                var i106, a81, s57, r49 = this.w.config;
                this.seriesIndex = this.getSeriesIndex(t210);
                var o40 = this.getFillColors()[this.seriesIndex];
                void 0 !== e144.globals.seriesColors[this.seriesIndex] && (o40 = e144.globals.seriesColors[this.seriesIndex]), "function" == typeof o40 && (o40 = o40({
                    seriesIndex: this.seriesIndex,
                    dataPointIndex: t210.dataPointIndex,
                    value: t210.value,
                    w: e144
                }));
                var n35 = this.getFillType(this.seriesIndex), l23 = Array.isArray(r49.fill.opacity) ? r49.fill.opacity[this.seriesIndex] : r49.fill.opacity;
                t210.color && (o40 = t210.color);
                var h21 = o40;
                if (-1 === o40.indexOf("rgb") ? o40.length < 9 && (h21 = x.hexToRgba(o40, l23)) : o40.indexOf("rgba") > -1 && (l23 = x.getOpacityFromRGBA(o40)), t210.opacity && (l23 = t210.opacity), "pattern" === n35 && (a81 = this.handlePatternFill(a81, o40, l23, h21)), "gradient" === n35 && (s57 = this.handleGradientFill(o40, l23, this.seriesIndex)), "image" === n35) {
                    var c18 = r49.fill.image.src, d15 = t210.patternID ? t210.patternID : "";
                    this.clippedImgArea({
                        opacity: l23,
                        image: Array.isArray(c18) ? t210.seriesNumber < c18.length ? c18[t210.seriesNumber] : c18[0] : c18,
                        width: t210.width ? t210.width : void 0,
                        height: t210.height ? t210.height : void 0,
                        patternUnits: t210.patternUnits,
                        patternID: "pattern".concat(e144.globals.cuid).concat(t210.seriesNumber + 1).concat(d15)
                    }), i106 = "url(#pattern".concat(e144.globals.cuid).concat(t210.seriesNumber + 1).concat(d15, ")");
                } else i106 = "gradient" === n35 ? s57 : "pattern" === n35 ? a81 : h21;
                return t210.solid && (i106 = h21), i106;
            }
        },
        {
            key: "getFillType",
            value: function(t211) {
                var e145 = this.w;
                return Array.isArray(e145.config.fill.type) ? e145.config.fill.type[t211] : e145.config.fill.type;
            }
        },
        {
            key: "getFillColors",
            value: function() {
                var t212 = this.w, e146 = t212.config, i107 = this.opts, a82 = [];
                return t212.globals.comboCharts ? "line" === t212.config.series[this.seriesIndex].type ? Array.isArray(t212.globals.stroke.colors) ? a82 = t212.globals.stroke.colors : a82.push(t212.globals.stroke.colors) : Array.isArray(t212.globals.fill.colors) ? a82 = t212.globals.fill.colors : a82.push(t212.globals.fill.colors) : "line" === e146.chart.type ? Array.isArray(t212.globals.stroke.colors) ? a82 = t212.globals.stroke.colors : a82.push(t212.globals.stroke.colors) : Array.isArray(t212.globals.fill.colors) ? a82 = t212.globals.fill.colors : a82.push(t212.globals.fill.colors), void 0 !== i107.fillColors && (a82 = [], Array.isArray(i107.fillColors) ? a82 = i107.fillColors.slice() : a82.push(i107.fillColors)), a82;
            }
        },
        {
            key: "handlePatternFill",
            value: function(t213, e147, i108, a83) {
                var s58 = this.w.config, r50 = this.opts, o41 = new m(this.ctx), n36 = void 0 === s58.fill.pattern.strokeWidth ? Array.isArray(s58.stroke.width) ? s58.stroke.width[this.seriesIndex] : s58.stroke.width : Array.isArray(s58.fill.pattern.strokeWidth) ? s58.fill.pattern.strokeWidth[this.seriesIndex] : s58.fill.pattern.strokeWidth, l24 = e147;
                Array.isArray(s58.fill.pattern.style) ? t213 = void 0 !== s58.fill.pattern.style[r50.seriesNumber] ? o41.drawPattern(s58.fill.pattern.style[r50.seriesNumber], s58.fill.pattern.width, s58.fill.pattern.height, l24, n36, i108) : a83 : t213 = o41.drawPattern(s58.fill.pattern.style, s58.fill.pattern.width, s58.fill.pattern.height, l24, n36, i108);
                return t213;
            }
        },
        {
            key: "handleGradientFill",
            value: function(t214, e148, i109) {
                var a84, s59 = this.w.config, r51 = this.opts, o42 = new m(this.ctx), n37 = new x, l25 = s59.fill.gradient.type, h22 = t214, c19 = void 0 === s59.fill.gradient.opacityFrom ? e148 : Array.isArray(s59.fill.gradient.opacityFrom) ? s59.fill.gradient.opacityFrom[i109] : s59.fill.gradient.opacityFrom;
                h22.indexOf("rgba") > -1 && (c19 = x.getOpacityFromRGBA(h22));
                var d16 = void 0 === s59.fill.gradient.opacityTo ? e148 : Array.isArray(s59.fill.gradient.opacityTo) ? s59.fill.gradient.opacityTo[i109] : s59.fill.gradient.opacityTo;
                if (void 0 === s59.fill.gradient.gradientToColors || 0 === s59.fill.gradient.gradientToColors.length) a84 = "dark" === s59.fill.gradient.shade ? n37.shadeColor(-1 * parseFloat(s59.fill.gradient.shadeIntensity), t214.indexOf("rgb") > -1 ? x.rgb2hex(t214) : t214) : n37.shadeColor(parseFloat(s59.fill.gradient.shadeIntensity), t214.indexOf("rgb") > -1 ? x.rgb2hex(t214) : t214);
                else if (s59.fill.gradient.gradientToColors[r51.seriesNumber]) {
                    var g12 = s59.fill.gradient.gradientToColors[r51.seriesNumber];
                    a84 = g12, g12.indexOf("rgba") > -1 && (d16 = x.getOpacityFromRGBA(g12));
                } else a84 = t214;
                if (s59.fill.gradient.inverseColors) {
                    var u9 = h22;
                    h22 = a84, a84 = u9;
                }
                return h22.indexOf("rgb") > -1 && (h22 = x.rgb2hex(h22)), a84.indexOf("rgb") > -1 && (a84 = x.rgb2hex(a84)), o42.drawGradient(l25, h22, a84, c19, d16, r51.size, s59.fill.gradient.stops, s59.fill.gradient.colorStops, i109);
            }
        }
    ]), t207;
}(), T = function() {
    function t215(e149, i) {
        a(this, t215), this.ctx = e149, this.w = e149.w;
    }
    return r(t215, [
        {
            key: "setGlobalMarkerSize",
            value: function() {
                var t216 = this.w;
                if (t216.globals.markers.size = Array.isArray(t216.config.markers.size) ? t216.config.markers.size : [
                    t216.config.markers.size
                ], t216.globals.markers.size.length > 0) {
                    if (t216.globals.markers.size.length < t216.globals.series.length + 1) for(var e150 = 0; e150 <= t216.globals.series.length; e150++)void 0 === t216.globals.markers.size[e150] && t216.globals.markers.size.push(t216.globals.markers.size[0]);
                } else t216.globals.markers.size = t216.config.series.map(function(e) {
                    return t216.config.markers.size;
                });
            }
        },
        {
            key: "plotChartMarkers",
            value: function(t217, e151, i110, a85) {
                var s60, r52 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], o43 = this.w, n38 = e151, l26 = t217, h23 = null, c20 = new m(this.ctx), d17 = o43.config.markers.discrete && o43.config.markers.discrete.length;
                if ((o43.globals.markers.size[e151] > 0 || r52 || d17) && (h23 = c20.group({
                    class: r52 || d17 ? "" : "apexcharts-series-markers"
                })).attr("clip-path", "url(#gridRectMarkerMask".concat(o43.globals.cuid, ")")), Array.isArray(l26.x)) for(var g13 = 0; g13 < l26.x.length; g13++){
                    var u10 = i110;
                    1 === i110 && 0 === g13 && (u10 = 0), 1 === i110 && 1 === g13 && (u10 = 1);
                    var f8 = "apexcharts-marker";
                    "line" !== o43.config.chart.type && "area" !== o43.config.chart.type || o43.globals.comboCharts || o43.config.tooltip.intersect || (f8 += " no-pointer-events");
                    var p7 = Array.isArray(o43.config.markers.size) ? o43.globals.markers.size[e151] > 0 : o43.config.markers.size > 0;
                    if (p7 || r52 || d17) {
                        x.isNumber(l26.y[g13]) ? f8 += " w".concat(x.randomId()) : f8 = "apexcharts-nullpoint";
                        var b5 = this.getMarkerConfig({
                            cssClass: f8,
                            seriesIndex: e151,
                            dataPointIndex: u10
                        });
                        o43.config.series[n38].data[u10] && (o43.config.series[n38].data[u10].fillColor && (b5.pointFillColor = o43.config.series[n38].data[u10].fillColor), o43.config.series[n38].data[u10].strokeColor && (b5.pointStrokeColor = o43.config.series[n38].data[u10].strokeColor)), a85 && (b5.pSize = a85), (s60 = c20.drawMarker(l26.x[g13], l26.y[g13], b5)).attr("rel", u10), s60.attr("j", u10), s60.attr("index", e151), s60.node.setAttribute("default-marker-size", b5.pSize);
                        var y4 = new v(this.ctx);
                        y4.setSelectionFilter(s60, e151, u10), this.addEvents(s60), h23 && h23.add(s60);
                    } else void 0 === o43.globals.pointsArray[e151] && (o43.globals.pointsArray[e151] = []), o43.globals.pointsArray[e151].push([
                        l26.x[g13],
                        l26.y[g13]
                    ]);
                }
                return h23;
            }
        },
        {
            key: "getMarkerConfig",
            value: function(t218) {
                var e152 = t218.cssClass, i111 = t218.seriesIndex, a86 = t218.dataPointIndex, s61 = void 0 === a86 ? null : a86, r53 = t218.finishRadius, o44 = void 0 === r53 ? null : r53, n39 = this.w, l27 = this.getMarkerStyle(i111), h24 = n39.globals.markers.size[i111], c21 = n39.config.markers;
                return null !== s61 && c21.discrete.length && c21.discrete.map(function(t219) {
                    t219.seriesIndex === i111 && t219.dataPointIndex === s61 && (l27.pointStrokeColor = t219.strokeColor, l27.pointFillColor = t219.fillColor, h24 = t219.size, l27.pointShape = t219.shape);
                }), {
                    pSize: null === o44 ? h24 : o44,
                    pRadius: c21.radius,
                    width: Array.isArray(c21.width) ? c21.width[i111] : c21.width,
                    height: Array.isArray(c21.height) ? c21.height[i111] : c21.height,
                    pointStrokeWidth: Array.isArray(c21.strokeWidth) ? c21.strokeWidth[i111] : c21.strokeWidth,
                    pointStrokeColor: l27.pointStrokeColor,
                    pointFillColor: l27.pointFillColor,
                    shape: l27.pointShape || (Array.isArray(c21.shape) ? c21.shape[i111] : c21.shape),
                    class: e152,
                    pointStrokeOpacity: Array.isArray(c21.strokeOpacity) ? c21.strokeOpacity[i111] : c21.strokeOpacity,
                    pointStrokeDashArray: Array.isArray(c21.strokeDashArray) ? c21.strokeDashArray[i111] : c21.strokeDashArray,
                    pointFillOpacity: Array.isArray(c21.fillOpacity) ? c21.fillOpacity[i111] : c21.fillOpacity,
                    seriesIndex: i111
                };
            }
        },
        {
            key: "addEvents",
            value: function(t220) {
                var e153 = this.w, i112 = new m(this.ctx);
                t220.node.addEventListener("mouseenter", i112.pathMouseEnter.bind(this.ctx, t220)), t220.node.addEventListener("mouseleave", i112.pathMouseLeave.bind(this.ctx, t220)), t220.node.addEventListener("mousedown", i112.pathMouseDown.bind(this.ctx, t220)), t220.node.addEventListener("click", e153.config.markers.onClick), t220.node.addEventListener("dblclick", e153.config.markers.onDblClick), t220.node.addEventListener("touchstart", i112.pathMouseDown.bind(this.ctx, t220), {
                    passive: !0
                });
            }
        },
        {
            key: "getMarkerStyle",
            value: function(t221) {
                var e154 = this.w, i113 = e154.globals.markers.colors, a87 = e154.config.markers.strokeColor || e154.config.markers.strokeColors;
                return {
                    pointStrokeColor: Array.isArray(a87) ? a87[t221] : a87,
                    pointFillColor: Array.isArray(i113) ? i113[t221] : i113
                };
            }
        }
    ]), t215;
}(), I = function() {
    function t222(e155) {
        a(this, t222), this.ctx = e155, this.w = e155.w, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;
    }
    return r(t222, [
        {
            key: "draw",
            value: function(t, e156, i114) {
                var a88 = this.w, s62 = new m(this.ctx), r54 = i114.realIndex, o45 = i114.pointsPos, n40 = i114.zRatio, l28 = i114.elParent, h25 = s62.group({
                    class: "apexcharts-series-markers apexcharts-series-".concat(a88.config.chart.type)
                });
                if (h25.attr("clip-path", "url(#gridRectMarkerMask".concat(a88.globals.cuid, ")")), Array.isArray(o45.x)) for(var c22 = 0; c22 < o45.x.length; c22++){
                    var d18 = e156 + 1, g14 = !0;
                    0 === e156 && 0 === c22 && (d18 = 0), 0 === e156 && 1 === c22 && (d18 = 1);
                    var u11 = 0, f9 = a88.globals.markers.size[r54];
                    if (n40 !== 1 / 0) {
                        f9 = a88.globals.seriesZ[r54][d18] / n40;
                        var p8 = a88.config.plotOptions.bubble;
                        p8.minBubbleRadius && f9 < p8.minBubbleRadius && (f9 = p8.minBubbleRadius), p8.maxBubbleRadius && f9 > p8.maxBubbleRadius && (f9 = p8.maxBubbleRadius);
                    }
                    a88.config.chart.animations.enabled || (u11 = f9);
                    var x5 = o45.x[c22], b6 = o45.y[c22];
                    if (u11 = u11 || 0, null !== b6 && void 0 !== a88.globals.series[r54][d18] || (g14 = !1), g14) {
                        var v4 = this.drawPoint(x5, b6, u11, f9, r54, d18, e156);
                        h25.add(v4);
                    }
                    l28.add(h25);
                }
            }
        },
        {
            key: "drawPoint",
            value: function(t223, e157, i115, a89, s63, r55, o46) {
                var n41 = this.w, l29 = s63, h26 = new b(this.ctx), c23 = new v(this.ctx), d19 = new M(this.ctx), g15 = new T(this.ctx), u12 = new m(this.ctx), f10 = g15.getMarkerConfig({
                    cssClass: "apexcharts-marker",
                    seriesIndex: l29,
                    dataPointIndex: r55,
                    finishRadius: "bubble" === n41.config.chart.type || n41.globals.comboCharts && n41.config.series[s63] && "bubble" === n41.config.series[s63].type ? a89 : null
                });
                a89 = f10.pSize;
                var p9, x6 = d19.fillPath({
                    seriesNumber: s63,
                    dataPointIndex: r55,
                    color: f10.pointFillColor,
                    patternUnits: "objectBoundingBox",
                    value: n41.globals.series[s63][o46]
                });
                if ("circle" === f10.shape ? p9 = u12.drawCircle(i115) : "square" !== f10.shape && "rect" !== f10.shape || (p9 = u12.drawRect(0, 0, f10.width - f10.pointStrokeWidth / 2, f10.height - f10.pointStrokeWidth / 2, f10.pRadius)), n41.config.series[l29].data[r55] && n41.config.series[l29].data[r55].fillColor && (x6 = n41.config.series[l29].data[r55].fillColor), p9.attr({
                    x: t223 - f10.width / 2 - f10.pointStrokeWidth / 2,
                    y: e157 - f10.height / 2 - f10.pointStrokeWidth / 2,
                    cx: t223,
                    cy: e157,
                    fill: x6,
                    "fill-opacity": f10.pointFillOpacity,
                    stroke: f10.pointStrokeColor,
                    r: a89,
                    "stroke-width": f10.pointStrokeWidth,
                    "stroke-dasharray": f10.pointStrokeDashArray,
                    "stroke-opacity": f10.pointStrokeOpacity
                }), n41.config.chart.dropShadow.enabled) {
                    var y5 = n41.config.chart.dropShadow;
                    c23.dropShadow(p9, y5, s63);
                }
                if (!this.initialAnim || n41.globals.dataChanged || n41.globals.resized) n41.globals.animationEnded = !0;
                else {
                    var w3 = n41.config.chart.animations.speed;
                    h26.animateMarker(p9, 0, "circle" === f10.shape ? a89 : {
                        width: f10.width,
                        height: f10.height
                    }, w3, n41.globals.easing, function() {
                        window.setTimeout(function() {
                            h26.animationCompleted(p9);
                        }, 100);
                    });
                }
                if (n41.globals.dataChanged && "circle" === f10.shape) {
                    if (this.dynamicAnim) {
                        var k3, A3, S3, C3, L3 = n41.config.chart.animations.dynamicAnimation.speed;
                        null != (C3 = n41.globals.previousPaths[s63] && n41.globals.previousPaths[s63][o46]) && (k3 = C3.x, A3 = C3.y, S3 = void 0 !== C3.r ? C3.r : a89);
                        for(var P3 = 0; P3 < n41.globals.collapsedSeries.length; P3++)n41.globals.collapsedSeries[P3].index === s63 && (L3 = 1, a89 = 0);
                        0 === t223 && 0 === e157 && (a89 = 0), h26.animateCircle(p9, {
                            cx: k3,
                            cy: A3,
                            r: S3
                        }, {
                            cx: t223,
                            cy: e157,
                            r: a89
                        }, L3, n41.globals.easing);
                    } else p9.attr({
                        r: a89
                    });
                }
                return p9.attr({
                    rel: r55,
                    j: r55,
                    index: s63,
                    "default-marker-size": a89
                }), c23.setSelectionFilter(p9, s63, r55), g15.addEvents(p9), p9.node.classList.add("apexcharts-marker"), p9;
            }
        },
        {
            key: "centerTextInBubble",
            value: function(t224) {
                var e158 = this.w;
                return {
                    y: t224 += parseInt(e158.config.dataLabels.style.fontSize, 10) / 4
                };
            }
        }
    ]), t222;
}(), z = function() {
    function t225(e159) {
        a(this, t225), this.ctx = e159, this.w = e159.w;
    }
    return r(t225, [
        {
            key: "dataLabelsCorrection",
            value: function(t226, e160, i116, a90, s64, r56, o47) {
                var n42 = this.w, l30 = !1, h27 = new m(this.ctx).getTextRects(i116, o47), c24 = h27.width, d20 = h27.height;
                e160 < 0 && (e160 = 0), e160 > n42.globals.gridHeight + d20 && (e160 = n42.globals.gridHeight + d20 / 2), void 0 === n42.globals.dataLabelsRects[a90] && (n42.globals.dataLabelsRects[a90] = []), n42.globals.dataLabelsRects[a90].push({
                    x: t226,
                    y: e160,
                    width: c24,
                    height: d20
                });
                var g16 = n42.globals.dataLabelsRects[a90].length - 2, u13 = void 0 !== n42.globals.lastDrawnDataLabelsIndexes[a90] ? n42.globals.lastDrawnDataLabelsIndexes[a90][n42.globals.lastDrawnDataLabelsIndexes[a90].length - 1] : 0;
                if (void 0 !== n42.globals.dataLabelsRects[a90][g16]) {
                    var f11 = n42.globals.dataLabelsRects[a90][u13];
                    (t226 > f11.x + f11.width + 2 || e160 > f11.y + f11.height + 2 || t226 + c24 < f11.x) && (l30 = !0);
                }
                return (0 === s64 || r56) && (l30 = !0), {
                    x: t226,
                    y: e160,
                    textRects: h27,
                    drawnextLabel: l30
                };
            }
        },
        {
            key: "drawDataLabel",
            value: function(t227, e161, i117) {
                var a91 = this, s65 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 2, r57 = this.w, o48 = new m(this.ctx), n43 = r57.config.dataLabels, l31 = 0, h28 = 0, c25 = i117, d21 = null;
                if (!n43.enabled || !Array.isArray(t227.x)) return d21;
                d21 = o48.group({
                    class: "apexcharts-data-labels"
                });
                for(var g17 = 0; g17 < t227.x.length; g17++)if (l31 = t227.x[g17] + n43.offsetX, h28 = t227.y[g17] + n43.offsetY + s65, !isNaN(l31)) {
                    1 === i117 && 0 === g17 && (c25 = 0), 1 === i117 && 1 === g17 && (c25 = 1);
                    var u14 = r57.globals.series[e161][c25], f12 = "", p10 = function(t228) {
                        return r57.config.dataLabels.formatter(t228, {
                            ctx: a91.ctx,
                            seriesIndex: e161,
                            dataPointIndex: c25,
                            w: r57
                        });
                    };
                    if ("bubble" === r57.config.chart.type) {
                        f12 = p10(u14 = r57.globals.seriesZ[e161][c25]), h28 = t227.y[g17];
                        var x7 = new I(this.ctx), b7 = x7.centerTextInBubble(h28, e161, c25);
                        h28 = b7.y;
                    } else void 0 !== u14 && (f12 = p10(u14));
                    this.plotDataLabelsText({
                        x: l31,
                        y: h28,
                        text: f12,
                        i: e161,
                        j: c25,
                        parent: d21,
                        offsetCorrection: !0,
                        dataLabelsConfig: r57.config.dataLabels
                    });
                }
                return d21;
            }
        },
        {
            key: "plotDataLabelsText",
            value: function(t229) {
                var e162 = this.w, i118 = new m(this.ctx), a92 = t229.x, s66 = t229.y, r58 = t229.i, o49 = t229.j, n44 = t229.text, l32 = t229.textAnchor, h29 = t229.fontSize, c26 = t229.parent, d22 = t229.dataLabelsConfig, g18 = t229.color, u15 = t229.alwaysDrawDataLabel, f13 = t229.offsetCorrection;
                if (!(Array.isArray(e162.config.dataLabels.enabledOnSeries) && e162.config.dataLabels.enabledOnSeries.indexOf(r58) < 0)) {
                    var p11 = {
                        x: a92,
                        y: s66,
                        drawnextLabel: !0,
                        textRects: null
                    };
                    f13 && (p11 = this.dataLabelsCorrection(a92, s66, n44, r58, o49, u15, parseInt(d22.style.fontSize, 10))), e162.globals.zoomed || (a92 = p11.x, s66 = p11.y), p11.textRects && (a92 < -10 - p11.textRects.width || a92 > e162.globals.gridWidth + p11.textRects.width + 10) && (n44 = "");
                    var x8 = e162.globals.dataLabels.style.colors[r58];
                    (("bar" === e162.config.chart.type || "rangeBar" === e162.config.chart.type) && e162.config.plotOptions.bar.distributed || e162.config.dataLabels.distributed) && (x8 = e162.globals.dataLabels.style.colors[o49]), "function" == typeof x8 && (x8 = x8({
                        series: e162.globals.series,
                        seriesIndex: r58,
                        dataPointIndex: o49,
                        w: e162
                    })), g18 && (x8 = g18);
                    var b8 = d22.offsetX, y6 = d22.offsetY;
                    if ("bar" !== e162.config.chart.type && "rangeBar" !== e162.config.chart.type || (b8 = 0, y6 = 0), p11.drawnextLabel) {
                        var w4 = i118.drawText({
                            width: 100,
                            height: parseInt(d22.style.fontSize, 10),
                            x: a92 + b8,
                            y: s66 + y6,
                            foreColor: x8,
                            textAnchor: l32 || d22.textAnchor,
                            text: n44,
                            fontSize: h29 || d22.style.fontSize,
                            fontFamily: d22.style.fontFamily,
                            fontWeight: d22.style.fontWeight || "normal"
                        });
                        if (w4.attr({
                            class: "apexcharts-datalabel",
                            cx: a92,
                            cy: s66
                        }), d22.dropShadow.enabled) {
                            var k4 = d22.dropShadow;
                            new v(this.ctx).dropShadow(w4, k4);
                        }
                        c26.add(w4), void 0 === e162.globals.lastDrawnDataLabelsIndexes[r58] && (e162.globals.lastDrawnDataLabelsIndexes[r58] = []), e162.globals.lastDrawnDataLabelsIndexes[r58].push(o49);
                    }
                }
            }
        },
        {
            key: "addBackgroundToDataLabel",
            value: function(t, e163) {
                var i119 = this.w, a93 = i119.config.dataLabels.background, s67 = a93.padding, r59 = a93.padding / 2, o50 = e163.width, n45 = e163.height, l33 = new m(this.ctx).drawRect(e163.x - s67, e163.y - r59 / 2, o50 + 2 * s67, n45 + r59, a93.borderRadius, "transparent" === i119.config.chart.background ? "#fff" : i119.config.chart.background, a93.opacity, a93.borderWidth, a93.borderColor);
                a93.dropShadow.enabled && new v(this.ctx).dropShadow(l33, a93.dropShadow);
                return l33;
            }
        },
        {
            key: "dataLabelsBackground",
            value: function() {
                var t230 = this.w;
                if ("bubble" !== t230.config.chart.type) for(var e164 = t230.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"), i120 = 0; i120 < e164.length; i120++){
                    var a94 = e164[i120], s68 = a94.getBBox(), r60 = null;
                    if (s68.width && s68.height && (r60 = this.addBackgroundToDataLabel(a94, s68)), r60) {
                        a94.parentNode.insertBefore(r60.node, a94);
                        var o51 = a94.getAttribute("fill");
                        t230.config.chart.animations.enabled && !t230.globals.resized && !t230.globals.dataChanged ? r60.animate().attr({
                            fill: o51
                        }) : r60.attr({
                            fill: o51
                        }), a94.setAttribute("fill", t230.config.dataLabels.background.foreColor);
                    }
                }
            }
        },
        {
            key: "bringForward",
            value: function() {
                for(var t231 = this.w, e165 = t231.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"), i121 = t231.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"), a95 = 0; a95 < e165.length; a95++)i121 && i121.insertBefore(e165[a95], i121.nextSibling);
            }
        }
    ]), t225;
}(), X = function() {
    function t232(e166) {
        a(this, t232), this.w = e166.w, this.barCtx = e166;
    }
    return r(t232, [
        {
            key: "handleBarDataLabels",
            value: function(t233) {
                var e167 = t233.x, i122 = t233.y, a96 = t233.y1, s69 = t233.y2, r61 = t233.i, o52 = t233.j, n46 = t233.realIndex, l34 = t233.series, h30 = t233.barHeight, c27 = t233.barWidth, d23 = t233.barYPosition, g19 = t233.visibleSeries, u16 = t233.renderedPath, f14 = this.w, p12 = new m(this.barCtx.ctx), x9 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[n46] : this.barCtx.strokeWidth, b9 = e167 + parseFloat(c27 * g19), v5 = i122 + parseFloat(h30 * g19);
                f14.globals.isXNumeric && !f14.globals.isBarHorizontal && (b9 = e167 + parseFloat(c27 * (g19 + 1)), v5 = i122 + parseFloat(h30 * (g19 + 1)) - x9);
                var y7 = e167, w5 = i122, k5 = {}, A4 = f14.config.dataLabels, S4 = this.barCtx.barOptions.dataLabels;
                void 0 !== d23 && this.barCtx.isRangeBar && (v5 = d23, w5 = d23);
                var C4 = A4.offsetX, L4 = A4.offsetY, P4 = {
                    width: 0,
                    height: 0
                };
                if (f14.config.dataLabels.enabled) {
                    var M3 = this.barCtx.series[r61][o52];
                    P4 = p12.getTextRects(f14.globals.yLabelFormatters[0](M3), parseFloat(A4.style.fontSize));
                }
                var T3 = {
                    x: e167,
                    y: i122,
                    i: r61,
                    j: o52,
                    renderedPath: u16,
                    bcx: b9,
                    bcy: v5,
                    barHeight: h30,
                    barWidth: c27,
                    textRects: P4,
                    strokeWidth: x9,
                    dataLabelsX: y7,
                    dataLabelsY: w5,
                    barDataLabelsConfig: S4,
                    offX: C4,
                    offY: L4
                };
                return k5 = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(T3) : this.calculateColumnsDataLabelsPosition(T3), u16.attr({
                    cy: k5.bcy,
                    cx: k5.bcx,
                    j: o52,
                    val: l34[r61][o52],
                    barHeight: h30,
                    barWidth: c27
                }), this.drawCalculatedDataLabels({
                    x: k5.dataLabelsX,
                    y: k5.dataLabelsY,
                    val: this.barCtx.isRangeBar ? [
                        a96,
                        s69
                    ] : l34[r61][o52],
                    i: n46,
                    j: o52,
                    barWidth: c27,
                    barHeight: h30,
                    textRects: P4,
                    dataLabelsConfig: A4
                });
            }
        },
        {
            key: "calculateColumnsDataLabelsPosition",
            value: function(t234) {
                var e168, i123 = this.w, a97 = t234.i, s70 = t234.j, r62 = t234.y, o53 = t234.bcx, n47 = t234.barWidth, l35 = t234.barHeight, h31 = t234.textRects, c28 = t234.dataLabelsY, d24 = t234.barDataLabelsConfig, g20 = t234.strokeWidth, u17 = t234.offX, f15 = t234.offY;
                l35 = Math.abs(l35);
                var p13 = "vertical" === i123.config.plotOptions.bar.dataLabels.orientation;
                o53 -= g20 / 2;
                var x10 = i123.globals.gridWidth / i123.globals.dataPoints;
                if (e168 = i123.globals.isXNumeric ? o53 - n47 / 2 + u17 : o53 - x10 + n47 / 2 + u17, p13) e168 = e168 + h31.height / 2 - g20 / 2 - 2;
                var b10 = this.barCtx.series[a97][s70] < 0, v6 = r62;
                switch(this.barCtx.isReversed && (v6 = r62 - l35 + (b10 ? 2 * l35 : 0), r62 -= l35), d24.position){
                    case "center":
                        c28 = p13 ? b10 ? v6 + l35 / 2 + f15 : v6 + l35 / 2 - f15 : b10 ? v6 - l35 / 2 + h31.height / 2 + f15 : v6 + l35 / 2 + h31.height / 2 - f15;
                        break;
                    case "bottom":
                        c28 = p13 ? b10 ? v6 + l35 + f15 : v6 + l35 - f15 : b10 ? v6 - l35 + h31.height + g20 + f15 : v6 + l35 - h31.height / 2 + g20 - f15;
                        break;
                    case "top":
                        c28 = p13 ? b10 ? v6 + f15 : v6 - f15 : b10 ? v6 - h31.height / 2 - f15 : v6 + h31.height + f15;
                }
                return i123.config.chart.stacked || (c28 < 0 ? c28 = 0 + g20 : c28 + h31.height / 3 > i123.globals.gridHeight && (c28 = i123.globals.gridHeight - g20)), {
                    bcx: o53,
                    bcy: r62,
                    dataLabelsX: e168,
                    dataLabelsY: c28
                };
            }
        },
        {
            key: "calculateBarsDataLabelsPosition",
            value: function(t235) {
                var e169 = this.w, i124 = t235.x, a98 = t235.i, s71 = t235.j, r63 = t235.bcy, o54 = t235.barHeight, n48 = t235.barWidth, l36 = t235.textRects, h32 = t235.dataLabelsX, c29 = t235.strokeWidth, d25 = t235.barDataLabelsConfig, g21 = t235.offX, u18 = t235.offY, f16 = e169.globals.gridHeight / e169.globals.dataPoints;
                n48 = Math.abs(n48);
                var p14 = r63 - (this.barCtx.isRangeBar ? 0 : f16) + o54 / 2 + l36.height / 2 + u18 - 3, x11 = this.barCtx.series[a98][s71] < 0, b11 = i124;
                switch(this.barCtx.isReversed && (b11 = i124 + n48 - (x11 ? 2 * n48 : 0), i124 = e169.globals.gridWidth - n48), d25.position){
                    case "center":
                        h32 = x11 ? b11 + n48 / 2 - g21 : Math.max(l36.width / 2, b11 - n48 / 2) + g21;
                        break;
                    case "bottom":
                        h32 = x11 ? b11 + n48 - c29 - Math.round(l36.width / 2) - g21 : b11 - n48 + c29 + Math.round(l36.width / 2) + g21;
                        break;
                    case "top":
                        h32 = x11 ? b11 - c29 + Math.round(l36.width / 2) - g21 : b11 - c29 - Math.round(l36.width / 2) + g21;
                }
                return e169.config.chart.stacked || (h32 < 0 ? h32 = h32 + l36.width + c29 : h32 + l36.width / 2 > e169.globals.gridWidth && (h32 = e169.globals.gridWidth - l36.width - c29)), {
                    bcx: i124,
                    bcy: r63,
                    dataLabelsX: h32,
                    dataLabelsY: p14
                };
            }
        },
        {
            key: "drawCalculatedDataLabels",
            value: function(t236) {
                var i125 = t236.x, a99 = t236.y, s72 = t236.val, r64 = t236.i, o55 = t236.j, n49 = t236.textRects, l37 = t236.barHeight, h33 = t236.barWidth, c30 = t236.dataLabelsConfig, d26 = this.w, g22 = "rotate(0)";
                "vertical" === d26.config.plotOptions.bar.dataLabels.orientation && (g22 = "rotate(-90, ".concat(i125, ", ").concat(a99, ")"));
                var u19 = new z(this.barCtx.ctx), f17 = new m(this.barCtx.ctx), p15 = c30.formatter, x12 = null, b12 = d26.globals.collapsedSeriesIndices.indexOf(r64) > -1;
                if (c30.enabled && !b12) {
                    x12 = f17.group({
                        class: "apexcharts-data-labels",
                        transform: g22
                    });
                    var v7 = "";
                    void 0 !== s72 && (v7 = p15(s72, {
                        seriesIndex: r64,
                        dataPointIndex: o55,
                        w: d26
                    }));
                    var y8 = d26.globals.series[r64][o55] < 0, w6 = d26.config.plotOptions.bar.dataLabels.position;
                    if ("vertical" === d26.config.plotOptions.bar.dataLabels.orientation && ("top" === w6 && (c30.textAnchor = y8 ? "end" : "start"), "center" === w6 && (c30.textAnchor = "middle"), "bottom" === w6 && (c30.textAnchor = y8 ? "end" : "start")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels) h33 < f17.getTextRects(v7, parseFloat(c30.style.fontSize)).width && (v7 = "");
                    d26.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? n49.width / 1.6 > Math.abs(h33) && (v7 = "") : n49.height / 1.6 > Math.abs(l37) && (v7 = ""));
                    var k6 = e({}, c30);
                    this.barCtx.isHorizontal && s72 < 0 && ("start" === c30.textAnchor ? k6.textAnchor = "end" : "end" === c30.textAnchor && (k6.textAnchor = "start")), u19.plotDataLabelsText({
                        x: i125,
                        y: a99,
                        text: v7,
                        i: r64,
                        j: o55,
                        parent: x12,
                        dataLabelsConfig: k6,
                        alwaysDrawDataLabel: !0,
                        offsetCorrection: !0
                    });
                }
                return x12;
            }
        }
    ]), t232;
}(), E = function() {
    function t237(e170) {
        a(this, t237), this.ctx = e170, this.w = e170.w, this.legendInactiveClass = "legend-mouseover-inactive";
    }
    return r(t237, [
        {
            key: "getAllSeriesEls",
            value: function() {
                return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series");
            }
        },
        {
            key: "getSeriesByName",
            value: function(t238) {
                return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner .apexcharts-series[seriesName='".concat(x.escapeString(t238), "']"));
            }
        },
        {
            key: "isSeriesHidden",
            value: function(t239) {
                var e171 = this.getSeriesByName(t239), i126 = parseInt(e171.getAttribute("data:realIndex"), 10);
                return {
                    isHidden: e171.classList.contains("apexcharts-series-collapsed"),
                    realIndex: i126
                };
            }
        },
        {
            key: "addCollapsedClassToSeries",
            value: function(t240, e172) {
                var i127 = this.w;
                function a100(i128) {
                    for(var a101 = 0; a101 < i128.length; a101++)i128[a101].index === e172 && t240.node.classList.add("apexcharts-series-collapsed");
                }
                a100(i127.globals.collapsedSeries), a100(i127.globals.ancillaryCollapsedSeries);
            }
        },
        {
            key: "toggleSeries",
            value: function(t241) {
                var e173 = this.isSeriesHidden(t241);
                return this.ctx.legend.legendHelpers.toggleDataSeries(e173.realIndex, e173.isHidden), e173.isHidden;
            }
        },
        {
            key: "showSeries",
            value: function(t242) {
                var e174 = this.isSeriesHidden(t242);
                e174.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e174.realIndex, !0);
            }
        },
        {
            key: "hideSeries",
            value: function(t243) {
                var e175 = this.isSeriesHidden(t243);
                e175.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e175.realIndex, !1);
            }
        },
        {
            key: "resetSeries",
            value: function() {
                var t244 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e176 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i129 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a102 = this.w, s73 = x.clone(a102.globals.initialSeries);
                a102.globals.previousPaths = [], i129 ? (a102.globals.collapsedSeries = [], a102.globals.ancillaryCollapsedSeries = [], a102.globals.collapsedSeriesIndices = [], a102.globals.ancillaryCollapsedSeriesIndices = []) : s73 = this.emptyCollapsedSeries(s73), a102.config.series = s73, t244 && (e176 && (a102.globals.zoomed = !1, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s73, a102.config.chart.animations.dynamicAnimation.enabled));
            }
        },
        {
            key: "emptyCollapsedSeries",
            value: function(t245) {
                for(var e177 = this.w, i130 = 0; i130 < t245.length; i130++)e177.globals.collapsedSeriesIndices.indexOf(i130) > -1 && (t245[i130].data = []);
                return t245;
            }
        },
        {
            key: "toggleSeriesOnHover",
            value: function(t246, e178) {
                var i131 = this.w;
                e178 || (e178 = t246.target);
                var a103 = i131.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels");
                if ("mousemove" === t246.type) {
                    var s74 = parseInt(e178.getAttribute("rel"), 10) - 1, r65 = null, o56 = null;
                    i131.globals.axisCharts || "radialBar" === i131.config.chart.type ? i131.globals.axisCharts ? (r65 = i131.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(s74, "']")), o56 = i131.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(s74, "']"))) : r65 = i131.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s74 + 1, "']")) : r65 = i131.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s74 + 1, "'] path"));
                    for(var n50 = 0; n50 < a103.length; n50++)a103[n50].classList.add(this.legendInactiveClass);
                    null !== r65 && (i131.globals.axisCharts || r65.parentNode.classList.remove(this.legendInactiveClass), r65.classList.remove(this.legendInactiveClass), null !== o56 && o56.classList.remove(this.legendInactiveClass));
                } else if ("mouseout" === t246.type) for(var l38 = 0; l38 < a103.length; l38++)a103[l38].classList.remove(this.legendInactiveClass);
            }
        },
        {
            key: "highlightRangeInSeries",
            value: function(t247, e179) {
                var i132 = this, a104 = this.w, s75 = a104.globals.dom.baseEl.getElementsByClassName("apexcharts-heatmap-rect"), r66 = function(t248) {
                    for(var e180 = 0; e180 < s75.length; e180++)s75[e180].classList[t248](i132.legendInactiveClass);
                };
                if ("mousemove" === t247.type) {
                    var o57 = parseInt(e179.getAttribute("rel"), 10) - 1;
                    r66("add"), function(t249) {
                        for(var e181 = 0; e181 < s75.length; e181++){
                            var a105 = parseInt(s75[e181].getAttribute("val"), 10);
                            a105 >= t249.from && a105 <= t249.to && s75[e181].classList.remove(i132.legendInactiveClass);
                        }
                    }(a104.config.plotOptions.heatmap.colorScale.ranges[o57]);
                } else "mouseout" === t247.type && r66("remove");
            }
        },
        {
            key: "getActiveConfigSeriesIndex",
            value: function() {
                var t250 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], e182 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "asc", i133 = this.w, a106 = 0;
                if (i133.config.series.length > 1) {
                    for(var s76 = i133.config.series.map(function(e183, a107) {
                        var s78 = !1;
                        return t250 && (s78 = "bar" === i133.config.series[a107].type || "column" === i133.config.series[a107].type), e183.data && e183.data.length > 0 && !s78 ? a107 : -1;
                    }), r67 = "asc" === e182 ? 0 : s76.length - 1; "asc" === e182 ? r67 < s76.length : r67 >= 0; "asc" === e182 ? r67++ : r67--)if (-1 !== s76[r67]) {
                        a106 = s76[r67];
                        break;
                    }
                }
                return a106;
            }
        },
        {
            key: "getPreviousPaths",
            value: function() {
                var t251 = this.w;
                function e184(e185, i135, a109) {
                    for(var s80 = e185[i135].childNodes, r68 = {
                        type: a109,
                        paths: [],
                        realIndex: e185[i135].getAttribute("data:realIndex")
                    }, o58 = 0; o58 < s80.length; o58++)if (s80[o58].hasAttribute("pathTo")) {
                        var n51 = s80[o58].getAttribute("pathTo");
                        r68.paths.push({
                            d: n51
                        });
                    }
                    t251.globals.previousPaths.push(r68);
                }
                t251.globals.previousPaths = [];
                [
                    "line",
                    "area",
                    "bar",
                    "rangebar",
                    "candlestick",
                    "radar"
                ].forEach(function(i136) {
                    for(var a110, s81 = (a110 = i136, t251.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(a110, "-series .apexcharts-series"))), r69 = 0; r69 < s81.length; r69++)e184(s81, r69, i136);
                }), this.handlePrevBubbleScatterPaths("bubble"), this.handlePrevBubbleScatterPaths("scatter");
                var i134 = t251.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t251.config.chart.type, " .apexcharts-series"));
                if (i134.length > 0) for(var a108 = function(e186) {
                    for(var i137 = t251.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t251.config.chart.type, " .apexcharts-series[data\\:realIndex='").concat(e186, "'] rect")), a111 = [], s82 = function(t252) {
                        var e187 = function(e188) {
                            return i137[t252].getAttribute(e188);
                        }, s83 = {
                            x: parseFloat(e187("x")),
                            y: parseFloat(e187("y")),
                            width: parseFloat(e187("width")),
                            height: parseFloat(e187("height"))
                        };
                        a111.push({
                            rect: s83,
                            color: i137[t252].getAttribute("color")
                        });
                    }, r70 = 0; r70 < i137.length; r70++)s82(r70);
                    t251.globals.previousPaths.push(a111);
                }, s79 = 0; s79 < i134.length; s79++)a108(s79);
                t251.globals.axisCharts || (t251.globals.previousPaths = t251.globals.series);
            }
        },
        {
            key: "handlePrevBubbleScatterPaths",
            value: function(t253) {
                var e189 = this.w, i138 = e189.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t253, "-series .apexcharts-series"));
                if (i138.length > 0) for(var a112 = 0; a112 < i138.length; a112++){
                    for(var s84 = e189.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t253, "-series .apexcharts-series[data\\:realIndex='").concat(a112, "'] circle")), r71 = [], o59 = 0; o59 < s84.length; o59++)r71.push({
                        x: s84[o59].getAttribute("cx"),
                        y: s84[o59].getAttribute("cy"),
                        r: s84[o59].getAttribute("r")
                    });
                    e189.globals.previousPaths.push(r71);
                }
            }
        },
        {
            key: "clearPreviousPaths",
            value: function() {
                var t254 = this.w;
                t254.globals.previousPaths = [], t254.globals.allSeriesCollapsed = !1;
            }
        },
        {
            key: "handleNoData",
            value: function() {
                var t255 = this.w, e190 = t255.config.noData, i139 = new m(this.ctx), a113 = t255.globals.svgWidth / 2, s85 = t255.globals.svgHeight / 2, r72 = "middle";
                if (t255.globals.noData = !0, t255.globals.animationEnded = !0, "left" === e190.align ? (a113 = 10, r72 = "start") : "right" === e190.align && (a113 = t255.globals.svgWidth - 10, r72 = "end"), "top" === e190.verticalAlign ? s85 = 50 : "bottom" === e190.verticalAlign && (s85 = t255.globals.svgHeight - 50), a113 += e190.offsetX, s85 = s85 + parseInt(e190.style.fontSize, 10) + 2 + e190.offsetY, void 0 !== e190.text && "" !== e190.text) {
                    var o60 = i139.drawText({
                        x: a113,
                        y: s85,
                        text: e190.text,
                        textAnchor: r72,
                        fontSize: e190.style.fontSize,
                        fontFamily: e190.style.fontFamily,
                        foreColor: e190.style.color,
                        opacity: 1,
                        class: "apexcharts-text-nodata"
                    });
                    t255.globals.dom.Paper.add(o60);
                }
            }
        },
        {
            key: "setNullSeriesToZeroValues",
            value: function(t256) {
                for(var e191 = this.w, i140 = 0; i140 < t256.length; i140++)if (0 === t256[i140].length) for(var a114 = 0; a114 < t256[e191.globals.maxValsInArrayIndex].length; a114++)t256[i140].push(0);
                return t256;
            }
        },
        {
            key: "hasAllSeriesEqualX",
            value: function() {
                for(var t257 = !0, e192 = this.w, i141 = this.filteredSeriesX(), a115 = 0; a115 < i141.length - 1; a115++)if (i141[a115][0] !== i141[a115 + 1][0]) {
                    t257 = !1;
                    break;
                }
                return e192.globals.allSeriesHasEqualX = t257, t257;
            }
        },
        {
            key: "filteredSeriesX",
            value: function() {
                var t258 = this.w.globals.seriesX.map(function(t259) {
                    return t259.length > 0 ? t259 : [];
                });
                return t258;
            }
        }
    ]), t237;
}(), Y = function() {
    function t260(e193) {
        a(this, t260), this.w = e193.w, this.barCtx = e193;
    }
    return r(t260, [
        {
            key: "initVariables",
            value: function(t261) {
                var e194 = this.w;
                this.barCtx.series = t261, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;
                for(var i142 = 0; i142 < t261.length; i142++)if (t261[i142].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t261[i142].length), e194.globals.isXNumeric) for(var a116 = 0; a116 < t261[i142].length; a116++)e194.globals.seriesX[i142][a116] > e194.globals.minX && e194.globals.seriesX[i142][a116] < e194.globals.maxX && this.barCtx.visibleItems++;
                else this.barCtx.visibleItems = e194.globals.dataPoints;
                0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], this.barCtx.radiusOnSeriesNumber = t261.length - 1, e194.globals.comboCharts || this.checkZeroSeries({
                    series: t261
                });
            }
        },
        {
            key: "initialPositions",
            value: function() {
                var t262, e195, i143, a117, s86, r73, o61, n52, l39 = this.w, h34 = l39.globals.dataPoints;
                this.barCtx.isRangeBar && (h34 = l39.globals.labels.length);
                var c31 = this.barCtx.seriesLen;
                if (l39.config.plotOptions.bar.rangeBarGroupRows && (c31 = 1), this.barCtx.isHorizontal) s86 = (i143 = l39.globals.gridHeight / h34) / c31, l39.globals.isXNumeric && (s86 = (i143 = l39.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), s86 = s86 * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, n52 = this.barCtx.baseLineInvertedY + l39.globals.padHorizontal + (this.barCtx.isReversed ? l39.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), e195 = (i143 - s86 * this.barCtx.seriesLen) / 2;
                else {
                    if (a117 = l39.globals.gridWidth / this.barCtx.visibleItems, l39.config.xaxis.convertedCatToNumeric && (a117 = l39.globals.gridWidth / l39.globals.dataPoints), r73 = a117 / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, l39.globals.isXNumeric) {
                        var d27 = this.barCtx.xRatio;
                        l39.config.xaxis.convertedCatToNumeric && (d27 = this.barCtx.initialXRatio), l39.globals.minXDiff && .5 !== l39.globals.minXDiff && l39.globals.minXDiff / d27 > 0 && (a117 = l39.globals.minXDiff / d27), (r73 = a117 / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (r73 = 1);
                    }
                    o61 = l39.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.yaxisIndex] - (this.barCtx.isReversed ? l39.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.yaxisIndex] : 0), t262 = l39.globals.padHorizontal + (a117 - r73 * this.barCtx.seriesLen) / 2;
                }
                return {
                    x: t262,
                    y: e195,
                    yDivision: i143,
                    xDivision: a117,
                    barHeight: s86,
                    barWidth: r73,
                    zeroH: o61,
                    zeroW: n52
                };
            }
        },
        {
            key: "getPathFillColor",
            value: function(t263, e196, i144, a118) {
                var s87 = this.w, r74 = new M(this.barCtx.ctx), o62 = null, n53 = this.barCtx.barOptions.distributed ? i144 : e196;
                this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function(a119) {
                    t263[e196][i144] >= a119.from && t263[e196][i144] <= a119.to && (o62 = a119.color);
                });
                return s87.config.series[e196].data[i144] && s87.config.series[e196].data[i144].fillColor && (o62 = s87.config.series[e196].data[i144].fillColor), r74.fillPath({
                    seriesNumber: this.barCtx.barOptions.distributed ? n53 : a118,
                    dataPointIndex: i144,
                    color: o62,
                    value: t263[e196][i144]
                });
            }
        },
        {
            key: "getStrokeWidth",
            value: function(t264, e197, i145) {
                var a120 = 0, s88 = this.w;
                return void 0 === this.barCtx.series[t264][e197] || null === this.barCtx.series[t264][e197] ? this.barCtx.isNullValue = !0 : this.barCtx.isNullValue = !1, s88.config.stroke.show && (this.barCtx.isNullValue || (a120 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i145] : this.barCtx.strokeWidth)), a120;
            }
        },
        {
            key: "barBackground",
            value: function(t265) {
                var e198 = t265.j, i146 = t265.i, a121 = t265.x1, s89 = t265.x2, r75 = t265.y1, o63 = t265.y2, n54 = t265.elSeries, l40 = this.w, h35 = new m(this.barCtx.ctx), c32 = new E(this.barCtx.ctx).getActiveConfigSeriesIndex();
                if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c32 === i146) {
                    e198 >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e198 %= this.barCtx.barOptions.colors.backgroundBarColors.length);
                    var d28 = this.barCtx.barOptions.colors.backgroundBarColors[e198], g23 = h35.drawRect(void 0 !== a121 ? a121 : 0, void 0 !== r75 ? r75 : 0, void 0 !== s89 ? s89 : l40.globals.gridWidth, void 0 !== o63 ? o63 : l40.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d28, this.barCtx.barOptions.colors.backgroundBarOpacity);
                    n54.add(g23), g23.node.classList.add("apexcharts-backgroundBar");
                }
            }
        },
        {
            key: "getColumnPaths",
            value: function(t266) {
                var e199 = t266.barWidth, i147 = t266.barXPosition, a122 = t266.yRatio, s90 = t266.y1, r76 = t266.y2, o64 = t266.strokeWidth, n55 = t266.series, l41 = t266.realIndex, h36 = t266.i, c33 = t266.j, d29 = t266.w, g24 = new m(this.barCtx.ctx);
                (o64 = Array.isArray(o64) ? o64[l41] : o64) || (o64 = 0);
                var u20 = {
                    barWidth: e199,
                    strokeWidth: o64,
                    yRatio: a122,
                    barXPosition: i147,
                    y1: s90,
                    y2: r76
                }, f18 = this.getRoundedBars(d29, u20, n55, h36, c33), p16 = i147, x13 = i147 + e199, b13 = g24.move(p16, s90), v8 = g24.move(p16, s90), y9 = g24.line(x13 - o64, s90);
                return d29.globals.previousPaths.length > 0 && (v8 = this.barCtx.getPreviousPath(l41, c33, !1)), b13 = b13 + g24.line(p16, f18.y2) + f18.pathWithRadius + g24.line(x13 - o64, f18.y2) + y9 + y9 + "z", v8 = v8 + g24.line(p16, s90) + y9 + y9 + y9 + y9 + y9 + g24.line(p16, s90), d29.config.chart.stacked && (this.barCtx.yArrj.push(f18.y2WithRadius), this.barCtx.yArrjF.push(Math.abs(s90 - f18.y2WithRadius)), this.barCtx.yArrjVal.push(this.barCtx.series[h36][c33])), {
                    pathTo: b13,
                    pathFrom: v8
                };
            }
        },
        {
            key: "getBarpaths",
            value: function(t267) {
                var e200 = t267.barYPosition, i148 = t267.barHeight, a123 = t267.x1, s91 = t267.x2, r77 = t267.strokeWidth, o65 = t267.series, n56 = t267.realIndex, l42 = t267.i, h37 = t267.j, c34 = t267.w, d30 = new m(this.barCtx.ctx);
                (r77 = Array.isArray(r77) ? r77[n56] : r77) || (r77 = 0);
                var g25 = {
                    barHeight: i148,
                    strokeWidth: r77,
                    barYPosition: e200,
                    x2: s91,
                    x1: a123
                }, u21 = this.getRoundedBars(c34, g25, o65, l42, h37), f19 = d30.move(a123, e200), p17 = d30.move(a123, e200);
                c34.globals.previousPaths.length > 0 && (p17 = this.barCtx.getPreviousPath(n56, h37, !1));
                var x14 = e200, b14 = e200 + i148, v9 = d30.line(a123, b14 - r77);
                return f19 = f19 + d30.line(u21.x2, x14) + u21.pathWithRadius + d30.line(u21.x2, b14 - r77) + v9 + v9 + "z", p17 = p17 + d30.line(a123, x14) + v9 + v9 + v9 + v9 + v9 + d30.line(a123, x14), c34.config.chart.stacked && (this.barCtx.xArrj.push(u21.x2WithRadius), this.barCtx.xArrjF.push(Math.abs(a123 - u21.x2WithRadius)), this.barCtx.xArrjVal.push(this.barCtx.series[l42][h37])), {
                    pathTo: f19,
                    pathFrom: p17
                };
            }
        },
        {
            key: "getRoundedBars",
            value: function(t268, e201, i149, a124, s92) {
                var r78 = new m(this.barCtx.ctx), o66 = 0, n57 = t268.config.plotOptions.bar.borderRadius, l43 = Array.isArray(n57);
                l43 ? o66 = n57[a124 > n57.length - 1 ? n57.length - 1 : a124] : o66 = n57;
                if (t268.config.chart.stacked && i149.length > 1 && a124 !== this.barCtx.radiusOnSeriesNumber && !l43 && (o66 = 0), this.barCtx.isHorizontal) {
                    var h38 = "", c35 = e201.x2;
                    if (Math.abs(e201.x1 - e201.x2) < o66 && (o66 = Math.abs(e201.x1 - e201.x2)), void 0 !== i149[a124][s92] || null !== i149[a124][s92]) {
                        var d31 = this.barCtx.isReversed ? i149[a124][s92] > 0 : i149[a124][s92] < 0;
                        d31 && (o66 *= -1), c35 -= o66, h38 = r78.quadraticCurve(c35 + o66, e201.barYPosition, c35 + o66, e201.barYPosition + (d31 ? -1 * o66 : o66)) + r78.line(c35 + o66, e201.barYPosition + e201.barHeight - e201.strokeWidth - (d31 ? -1 * o66 : o66)) + r78.quadraticCurve(c35 + o66, e201.barYPosition + e201.barHeight - e201.strokeWidth, c35, e201.barYPosition + e201.barHeight - e201.strokeWidth);
                    }
                    return {
                        pathWithRadius: h38,
                        x2WithRadius: c35 + o66,
                        x2: c35
                    };
                }
                var g26 = "", u22 = e201.y2;
                if (Math.abs(e201.y1 - e201.y2) < o66 && (o66 = Math.abs(e201.y1 - e201.y2)), void 0 !== i149[a124][s92] || null !== i149[a124][s92]) {
                    var f20 = i149[a124][s92] < 0;
                    f20 && (o66 *= -1), u22 += o66, g26 = r78.quadraticCurve(e201.barXPosition, u22 - o66, e201.barXPosition + (f20 ? -1 * o66 : o66), u22 - o66) + r78.line(e201.barXPosition + e201.barWidth - e201.strokeWidth - (f20 ? -1 * o66 : o66), u22 - o66) + r78.quadraticCurve(e201.barXPosition + e201.barWidth - e201.strokeWidth, u22 - o66, e201.barXPosition + e201.barWidth - e201.strokeWidth, u22);
                }
                return {
                    pathWithRadius: g26,
                    y2WithRadius: u22 - o66,
                    y2: u22
                };
            }
        },
        {
            key: "checkZeroSeries",
            value: function(t269) {
                for(var e202 = t269.series, i150 = this.w, a125 = 0; a125 < e202.length; a125++){
                    for(var s93 = 0, r79 = 0; r79 < e202[i150.globals.maxValsInArrayIndex].length; r79++)s93 += e202[a125][r79];
                    0 === s93 && this.barCtx.zeroSerieses.push(a125);
                }
                for(var o67 = e202.length - 1; o67 >= 0; o67--)this.barCtx.zeroSerieses.indexOf(o67) > -1 && o67 === this.radiusOnSeriesNumber && (this.barCtx.radiusOnSeriesNumber -= 1);
                for(var n58 = e202.length - 1; n58 >= 0; n58--)i150.globals.collapsedSeriesIndices.indexOf(this.barCtx.radiusOnSeriesNumber) > -1 && (this.barCtx.radiusOnSeriesNumber -= 1);
            }
        },
        {
            key: "getXForValue",
            value: function(t270, e203) {
                var i151 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a126 = i151 ? e203 : null;
                return null != t270 && (a126 = e203 + t270 / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t270 / this.barCtx.invertedYRatio : 0)), a126;
            }
        },
        {
            key: "getYForValue",
            value: function(t271, e204) {
                var i152 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a127 = i152 ? e204 : null;
                return null != t271 && (a127 = e204 - t271 / this.barCtx.yRatio[this.barCtx.yaxisIndex] + 2 * (this.barCtx.isReversed ? t271 / this.barCtx.yRatio[this.barCtx.yaxisIndex] : 0)), a127;
            }
        },
        {
            key: "getGoalValues",
            value: function(t272, e205, i153, a128, s94) {
                var r80 = this, n59 = this.w, l44 = [];
                return n59.globals.seriesGoals[a128] && n59.globals.seriesGoals[a128][s94] && Array.isArray(n59.globals.seriesGoals[a128][s94]) && n59.globals.seriesGoals[a128][s94].forEach(function(a129) {
                    var s95;
                    l44.push((o(s95 = {}, t272, "x" === t272 ? r80.getXForValue(a129.value, e205, !1) : r80.getYForValue(a129.value, i153, !1)), o(s95, "attrs", a129), s95));
                }), l44;
            }
        },
        {
            key: "drawGoalLine",
            value: function(t273) {
                var e206 = t273.barXPosition, i154 = t273.barYPosition, a130 = t273.goalX, s96 = t273.goalY, r81 = t273.barWidth, o68 = t273.barHeight, n60 = new m(this.barCtx.ctx), l45 = n60.group({
                    className: "apexcharts-bar-goals-groups"
                }), h39 = null;
                return this.barCtx.isHorizontal ? Array.isArray(a130) && a130.forEach(function(t274) {
                    var e207 = void 0 !== t274.attrs.strokeHeight ? t274.attrs.strokeHeight : o68 / 2, a131 = i154 + e207 + o68 / 2;
                    h39 = n60.drawLine(t274.x, a131 - 2 * e207, t274.x, a131, t274.attrs.strokeColor ? t274.attrs.strokeColor : void 0, t274.attrs.strokeDashArray, t274.attrs.strokeWidth ? t274.attrs.strokeWidth : 2, t274.attrs.strokeLineCap), l45.add(h39);
                }) : Array.isArray(s96) && s96.forEach(function(t275) {
                    var i155 = void 0 !== t275.attrs.strokeWidth ? t275.attrs.strokeWidth : r81 / 2, a132 = e206 + i155 + r81 / 2;
                    h39 = n60.drawLine(a132 - 2 * i155, t275.y, a132, t275.y, t275.attrs.strokeColor ? t275.attrs.strokeColor : void 0, t275.attrs.strokeDashArray, t275.attrs.strokeHeight ? t275.attrs.strokeHeight : 2, t275.attrs.strokeLineCap), l45.add(h39);
                }), l45;
            }
        }
    ]), t260;
}(), F = function() {
    function t276(e208, i156) {
        a(this, t276), this.ctx = e208, this.w = e208.w;
        var s97 = this.w;
        this.barOptions = s97.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s97.config.stroke.width, this.isNullValue = !1, this.isRangeBar = s97.globals.seriesRangeBar.length && this.isHorizontal, this.xyRatios = i156, null !== this.xyRatios && (this.xRatio = i156.xRatio, this.initialXRatio = i156.initialXRatio, this.yRatio = i156.yRatio, this.invertedXRatio = i156.invertedXRatio, this.invertedYRatio = i156.invertedYRatio, this.baseLineY = i156.baseLineY, this.baseLineInvertedY = i156.baseLineInvertedY), this.yaxisIndex = 0, this.seriesLen = 0, this.barHelpers = new Y(this);
    }
    return r(t276, [
        {
            key: "draw",
            value: function(t277, i157) {
                var a133 = this.w, s98 = new m(this.ctx), r82 = new y(this.ctx, a133);
                t277 = r82.getLogSeries(t277), this.series = t277, this.yRatio = r82.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t277);
                var o69 = s98.group({
                    class: "apexcharts-bar-series apexcharts-plot-series"
                });
                a133.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.");
                for(var n61 = 0, l46 = 0; n61 < t277.length; n61++, l46++){
                    var h40, c36, d32, g27, u23 = void 0, f21 = void 0, p18 = [], b15 = [], v10 = a133.globals.comboCharts ? i157[n61] : n61, w7 = s98.group({
                        class: "apexcharts-series",
                        rel: n61 + 1,
                        seriesName: x.escapeString(a133.globals.seriesNames[v10]),
                        "data:realIndex": v10
                    });
                    this.ctx.series.addCollapsedClassToSeries(w7, v10), t277[n61].length > 0 && (this.visibleI = this.visibleI + 1);
                    var k7 = 0, A5 = 0;
                    this.yRatio.length > 1 && (this.yaxisIndex = v10), this.isReversed = a133.config.yaxis[this.yaxisIndex] && a133.config.yaxis[this.yaxisIndex].reversed;
                    var S5 = this.barHelpers.initialPositions();
                    f21 = S5.y, k7 = S5.barHeight, c36 = S5.yDivision, g27 = S5.zeroW, u23 = S5.x, A5 = S5.barWidth, h40 = S5.xDivision, d32 = S5.zeroH, this.horizontal || b15.push(u23 + A5 / 2);
                    for(var C5 = s98.group({
                        class: "apexcharts-datalabels",
                        "data:realIndex": v10
                    }), L5 = s98.group({
                        class: "apexcharts-bar-goals-markers",
                        style: "pointer-events: none"
                    }), P5 = 0; P5 < a133.globals.dataPoints; P5++){
                        var M4 = this.barHelpers.getStrokeWidth(n61, P5, v10), T4 = null, I3 = {
                            indexes: {
                                i: n61,
                                j: P5,
                                realIndex: v10,
                                bc: l46
                            },
                            x: u23,
                            y: f21,
                            strokeWidth: M4,
                            elSeries: w7
                        };
                        this.isHorizontal ? (T4 = this.drawBarPaths(e(e({}, I3), {}, {
                            barHeight: k7,
                            zeroW: g27,
                            yDivision: c36
                        })), A5 = this.series[n61][P5] / this.invertedYRatio) : (T4 = this.drawColumnPaths(e(e({}, I3), {}, {
                            xDivision: h40,
                            barWidth: A5,
                            zeroH: d32
                        })), k7 = this.series[n61][P5] / this.yRatio[this.yaxisIndex]);
                        var z2 = this.barHelpers.drawGoalLine({
                            barXPosition: T4.barXPosition,
                            barYPosition: T4.barYPosition,
                            goalX: T4.goalX,
                            goalY: T4.goalY,
                            barHeight: k7,
                            barWidth: A5
                        });
                        z2 && L5.add(z2), f21 = T4.y, u23 = T4.x, P5 > 0 && b15.push(u23 + A5 / 2), p18.push(f21);
                        var X2 = this.barHelpers.getPathFillColor(t277, n61, P5, v10);
                        this.renderSeries({
                            realIndex: v10,
                            pathFill: X2,
                            j: P5,
                            i: n61,
                            pathFrom: T4.pathFrom,
                            pathTo: T4.pathTo,
                            strokeWidth: M4,
                            elSeries: w7,
                            x: u23,
                            y: f21,
                            series: t277,
                            barHeight: k7,
                            barWidth: A5,
                            elDataLabelsWrap: C5,
                            elGoalsMarkers: L5,
                            visibleSeries: this.visibleI,
                            type: "bar"
                        });
                    }
                    a133.globals.seriesXvalues[v10] = b15, a133.globals.seriesYvalues[v10] = p18, o69.add(w7);
                }
                return o69;
            }
        },
        {
            key: "renderSeries",
            value: function(t278) {
                var e209 = t278.realIndex, i158 = t278.pathFill, a134 = t278.lineFill, s99 = t278.j, r83 = t278.i, o70 = t278.pathFrom, n62 = t278.pathTo, l47 = t278.strokeWidth, h41 = t278.elSeries, c37 = t278.x, d33 = t278.y, g28 = t278.y1, u24 = t278.y2, f22 = t278.series, p19 = t278.barHeight, x15 = t278.barWidth, b16 = t278.barYPosition, y10 = t278.elDataLabelsWrap, w8 = t278.elGoalsMarkers, k8 = t278.visibleSeries, A6 = t278.type, S6 = this.w, C6 = new m(this.ctx);
                a134 || (a134 = this.barOptions.distributed ? S6.globals.stroke.colors[s99] : S6.globals.stroke.colors[e209]), S6.config.series[r83].data[s99] && S6.config.series[r83].data[s99].strokeColor && (a134 = S6.config.series[r83].data[s99].strokeColor), this.isNullValue && (i158 = "none");
                var L6 = s99 / S6.config.chart.animations.animateGradually.delay * (S6.config.chart.animations.speed / S6.globals.dataPoints) / 2.4, P6 = C6.renderPaths({
                    i: r83,
                    j: s99,
                    realIndex: e209,
                    pathFrom: o70,
                    pathTo: n62,
                    stroke: a134,
                    strokeWidth: l47,
                    strokeLineCap: S6.config.stroke.lineCap,
                    fill: i158,
                    animationDelay: L6,
                    initialSpeed: S6.config.chart.animations.speed,
                    dataChangeSpeed: S6.config.chart.animations.dynamicAnimation.speed,
                    className: "apexcharts-".concat(A6, "-area")
                });
                P6.attr("clip-path", "url(#gridRectMask".concat(S6.globals.cuid, ")"));
                var M5 = S6.config.forecastDataPoints;
                M5.count > 0 && s99 >= S6.globals.dataPoints - M5.count && (P6.node.setAttribute("stroke-dasharray", M5.dashArray), P6.node.setAttribute("stroke-width", M5.strokeWidth), P6.node.setAttribute("fill-opacity", M5.fillOpacity)), void 0 !== g28 && void 0 !== u24 && (P6.attr("data-range-y1", g28), P6.attr("data-range-y2", u24)), new v(this.ctx).setSelectionFilter(P6, e209, s99), h41.add(P6);
                var T5 = new X(this).handleBarDataLabels({
                    x: c37,
                    y: d33,
                    y1: g28,
                    y2: u24,
                    i: r83,
                    j: s99,
                    series: f22,
                    realIndex: e209,
                    barHeight: p19,
                    barWidth: x15,
                    barYPosition: b16,
                    renderedPath: P6,
                    visibleSeries: k8
                });
                return null !== T5 && y10.add(T5), h41.add(y10), w8 && h41.add(w8), h41;
            }
        },
        {
            key: "drawBarPaths",
            value: function(t279) {
                var e210 = t279.indexes, i159 = t279.barHeight, a135 = t279.strokeWidth, s100 = t279.zeroW, r84 = t279.x, o71 = t279.y, n63 = t279.yDivision, l48 = t279.elSeries, h42 = this.w, c38 = e210.i, d34 = e210.j;
                h42.globals.isXNumeric && (o71 = (h42.globals.seriesX[c38][d34] - h42.globals.minX) / this.invertedXRatio - i159);
                var g29 = o71 + i159 * this.visibleI;
                r84 = this.barHelpers.getXForValue(this.series[c38][d34], s100);
                var u25 = this.barHelpers.getBarpaths({
                    barYPosition: g29,
                    barHeight: i159,
                    x1: s100,
                    x2: r84,
                    strokeWidth: a135,
                    series: this.series,
                    realIndex: e210.realIndex,
                    i: c38,
                    j: d34,
                    w: h42
                });
                return h42.globals.isXNumeric || (o71 += n63), this.barHelpers.barBackground({
                    j: d34,
                    i: c38,
                    y1: g29 - i159 * this.visibleI,
                    y2: i159 * this.seriesLen,
                    elSeries: l48
                }), {
                    pathTo: u25.pathTo,
                    pathFrom: u25.pathFrom,
                    x: r84,
                    y: o71,
                    goalX: this.barHelpers.getGoalValues("x", s100, null, c38, d34),
                    barYPosition: g29
                };
            }
        },
        {
            key: "drawColumnPaths",
            value: function(t280) {
                var e211 = t280.indexes, i160 = t280.x, a136 = t280.y, s101 = t280.xDivision, r85 = t280.barWidth, o72 = t280.zeroH, n64 = t280.strokeWidth, l49 = t280.elSeries, h43 = this.w, c39 = e211.realIndex, d35 = e211.i, g30 = e211.j, u26 = e211.bc;
                if (h43.globals.isXNumeric) {
                    var f23 = c39;
                    h43.globals.seriesX[c39].length || (f23 = h43.globals.maxValsInArrayIndex), i160 = (h43.globals.seriesX[f23][g30] - h43.globals.minX) / this.xRatio - r85 * this.seriesLen / 2;
                }
                var p20 = i160 + r85 * this.visibleI;
                a136 = this.barHelpers.getYForValue(this.series[d35][g30], o72);
                var x16 = this.barHelpers.getColumnPaths({
                    barXPosition: p20,
                    barWidth: r85,
                    y1: o72,
                    y2: a136,
                    strokeWidth: n64,
                    series: this.series,
                    realIndex: e211.realIndex,
                    i: d35,
                    j: g30,
                    w: h43
                });
                return h43.globals.isXNumeric || (i160 += s101), this.barHelpers.barBackground({
                    bc: u26,
                    j: g30,
                    i: d35,
                    x1: p20 - n64 / 2 - r85 * this.visibleI,
                    x2: r85 * this.seriesLen + n64 / 2,
                    elSeries: l49
                }), {
                    pathTo: x16.pathTo,
                    pathFrom: x16.pathFrom,
                    x: i160,
                    y: a136,
                    goalY: this.barHelpers.getGoalValues("y", null, o72, d35, g30),
                    barXPosition: p20
                };
            }
        },
        {
            key: "getPreviousPath",
            value: function(t281, e212) {
                for(var i161, a137 = this.w, s102 = 0; s102 < a137.globals.previousPaths.length; s102++){
                    var r86 = a137.globals.previousPaths[s102];
                    r86.paths && r86.paths.length > 0 && parseInt(r86.realIndex, 10) === parseInt(t281, 10) && void 0 !== a137.globals.previousPaths[s102].paths[e212] && (i161 = a137.globals.previousPaths[s102].paths[e212].d);
                }
                return i161;
            }
        }
    ]), t276;
}(), R = function() {
    function t282(e213) {
        a(this, t282), this.ctx = e213, this.w = e213.w, this.months31 = [
            1,
            3,
            5,
            7,
            8,
            10,
            12
        ], this.months30 = [
            2,
            4,
            6,
            9,
            11
        ], this.daysCntOfYear = [
            0,
            31,
            59,
            90,
            120,
            151,
            181,
            212,
            243,
            273,
            304,
            334
        ];
    }
    return r(t282, [
        {
            key: "isValidDate",
            value: function(t283) {
                return !isNaN(this.parseDate(t283));
            }
        },
        {
            key: "getTimeStamp",
            value: function(t284) {
                return Date.parse(t284) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t284).toISOString().substr(0, 25)).getTime() : new Date(t284).getTime() : t284;
            }
        },
        {
            key: "getDate",
            value: function(t285) {
                return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t285).toUTCString()) : new Date(t285);
            }
        },
        {
            key: "parseDate",
            value: function(t286) {
                var e214 = Date.parse(t286);
                if (!isNaN(e214)) return this.getTimeStamp(t286);
                var i162 = Date.parse(t286.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
                return i162 = this.getTimeStamp(i162);
            }
        },
        {
            key: "parseDateWithTimezone",
            value: function(t287) {
                return Date.parse(t287.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
            }
        },
        {
            key: "formatDate",
            value: function(t288, e215) {
                var i163 = this.w.globals.locale, a138 = this.w.config.xaxis.labels.datetimeUTC, s103 = [
                    "\0"
                ].concat(u(i163.months)), r87 = [
                    "\x01"
                ].concat(u(i163.shortMonths)), o73 = [
                    "\x02"
                ].concat(u(i163.days)), n65 = [
                    "\x03"
                ].concat(u(i163.shortDays));
                function l50(t289, e216) {
                    var i164 = t289 + "";
                    for(e216 = e216 || 2; i164.length < e216;)i164 = "0" + i164;
                    return i164;
                }
                var h44 = a138 ? t288.getUTCFullYear() : t288.getFullYear();
                e215 = (e215 = (e215 = e215.replace(/(^|[^\\])yyyy+/g, "$1" + h44)).replace(/(^|[^\\])yy/g, "$1" + h44.toString().substr(2, 2))).replace(/(^|[^\\])y/g, "$1" + h44);
                var c40 = (a138 ? t288.getUTCMonth() : t288.getMonth()) + 1;
                e215 = (e215 = (e215 = (e215 = e215.replace(/(^|[^\\])MMMM+/g, "$1" + s103[0])).replace(/(^|[^\\])MMM/g, "$1" + r87[0])).replace(/(^|[^\\])MM/g, "$1" + l50(c40))).replace(/(^|[^\\])M/g, "$1" + c40);
                var d36 = a138 ? t288.getUTCDate() : t288.getDate();
                e215 = (e215 = (e215 = (e215 = e215.replace(/(^|[^\\])dddd+/g, "$1" + o73[0])).replace(/(^|[^\\])ddd/g, "$1" + n65[0])).replace(/(^|[^\\])dd/g, "$1" + l50(d36))).replace(/(^|[^\\])d/g, "$1" + d36);
                var g31 = a138 ? t288.getUTCHours() : t288.getHours(), f24 = g31 > 12 ? g31 - 12 : 0 === g31 ? 12 : g31;
                e215 = (e215 = (e215 = (e215 = e215.replace(/(^|[^\\])HH+/g, "$1" + l50(g31))).replace(/(^|[^\\])H/g, "$1" + g31)).replace(/(^|[^\\])hh+/g, "$1" + l50(f24))).replace(/(^|[^\\])h/g, "$1" + f24);
                var p21 = a138 ? t288.getUTCMinutes() : t288.getMinutes();
                e215 = (e215 = e215.replace(/(^|[^\\])mm+/g, "$1" + l50(p21))).replace(/(^|[^\\])m/g, "$1" + p21);
                var x17 = a138 ? t288.getUTCSeconds() : t288.getSeconds();
                e215 = (e215 = e215.replace(/(^|[^\\])ss+/g, "$1" + l50(x17))).replace(/(^|[^\\])s/g, "$1" + x17);
                var b17 = a138 ? t288.getUTCMilliseconds() : t288.getMilliseconds();
                e215 = e215.replace(/(^|[^\\])fff+/g, "$1" + l50(b17, 3)), b17 = Math.round(b17 / 10), e215 = e215.replace(/(^|[^\\])ff/g, "$1" + l50(b17)), b17 = Math.round(b17 / 10);
                var v11 = g31 < 12 ? "AM" : "PM";
                e215 = (e215 = (e215 = e215.replace(/(^|[^\\])f/g, "$1" + b17)).replace(/(^|[^\\])TT+/g, "$1" + v11)).replace(/(^|[^\\])T/g, "$1" + v11.charAt(0));
                var m4 = v11.toLowerCase();
                e215 = (e215 = e215.replace(/(^|[^\\])tt+/g, "$1" + m4)).replace(/(^|[^\\])t/g, "$1" + m4.charAt(0));
                var y11 = -t288.getTimezoneOffset(), w9 = a138 || !y11 ? "Z" : y11 > 0 ? "+" : "-";
                if (!a138) {
                    var k9 = (y11 = Math.abs(y11)) % 60;
                    w9 += l50(Math.floor(y11 / 60)) + ":" + l50(k9);
                }
                e215 = e215.replace(/(^|[^\\])K/g, "$1" + w9);
                var A7 = (a138 ? t288.getUTCDay() : t288.getDay()) + 1;
                return e215 = (e215 = (e215 = (e215 = (e215 = e215.replace(new RegExp(o73[0], "g"), o73[A7])).replace(new RegExp(n65[0], "g"), n65[A7])).replace(new RegExp(s103[0], "g"), s103[c40])).replace(new RegExp(r87[0], "g"), r87[c40])).replace(/\\(.)/g, "$1");
            }
        },
        {
            key: "getTimeUnitsfromTimestamp",
            value: function(t290, e217, i) {
                var a139 = this.w;
                void 0 !== a139.config.xaxis.min && (t290 = a139.config.xaxis.min), void 0 !== a139.config.xaxis.max && (e217 = a139.config.xaxis.max);
                var s104 = this.getDate(t290), r88 = this.getDate(e217), o74 = this.formatDate(s104, "yyyy MM dd HH mm ss fff").split(" "), n66 = this.formatDate(r88, "yyyy MM dd HH mm ss fff").split(" ");
                return {
                    minMillisecond: parseInt(o74[6], 10),
                    maxMillisecond: parseInt(n66[6], 10),
                    minSecond: parseInt(o74[5], 10),
                    maxSecond: parseInt(n66[5], 10),
                    minMinute: parseInt(o74[4], 10),
                    maxMinute: parseInt(n66[4], 10),
                    minHour: parseInt(o74[3], 10),
                    maxHour: parseInt(n66[3], 10),
                    minDate: parseInt(o74[2], 10),
                    maxDate: parseInt(n66[2], 10),
                    minMonth: parseInt(o74[1], 10) - 1,
                    maxMonth: parseInt(n66[1], 10) - 1,
                    minYear: parseInt(o74[0], 10),
                    maxYear: parseInt(n66[0], 10)
                };
            }
        },
        {
            key: "isLeapYear",
            value: function(t291) {
                return t291 % 4 == 0 && t291 % 100 != 0 || t291 % 400 == 0;
            }
        },
        {
            key: "calculcateLastDaysOfMonth",
            value: function(t292, e218, i165) {
                return this.determineDaysOfMonths(t292, e218) - i165;
            }
        },
        {
            key: "determineDaysOfYear",
            value: function(t293) {
                var e219 = 365;
                return this.isLeapYear(t293) && (e219 = 366), e219;
            }
        },
        {
            key: "determineRemainingDaysOfYear",
            value: function(t, e220, i166) {
                var a140 = this.daysCntOfYear[e220] + i166;
                return e220 > 1 && this.isLeapYear() && a140++, a140;
            }
        },
        {
            key: "determineDaysOfMonths",
            value: function(t294, e221) {
                var i167 = 30;
                switch(t294 = x.monthMod(t294), !0){
                    case this.months30.indexOf(t294) > -1:
                        2 === t294 && (i167 = this.isLeapYear(e221) ? 29 : 28);
                        break;
                    case this.months31.indexOf(t294) > -1:
                    default:
                        i167 = 31;
                }
                return i167;
            }
        }
    ]), t282;
}(), H = function(t295) {
    n(s105, F);
    var i168 = d(s105);
    function s105() {
        return a(this, s105), i168.apply(this, arguments);
    }
    return r(s105, [
        {
            key: "draw",
            value: function(t296, i169) {
                var a141 = this.w, s106 = new m(this.ctx);
                this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t296, this.seriesRangeStart = a141.globals.seriesRangeStart, this.seriesRangeEnd = a141.globals.seriesRangeEnd, this.barHelpers.initVariables(t296);
                for(var r89 = s106.group({
                    class: "apexcharts-rangebar-series apexcharts-plot-series"
                }), o75 = 0; o75 < t296.length; o75++){
                    var n67, l51, h45, c41 = void 0, d37 = void 0, g32 = void 0, u27 = a141.globals.comboCharts ? i169[o75] : o75, f25 = s106.group({
                        class: "apexcharts-series",
                        seriesName: x.escapeString(a141.globals.seriesNames[u27]),
                        rel: o75 + 1,
                        "data:realIndex": u27
                    });
                    this.ctx.series.addCollapsedClassToSeries(f25, u27), t296[o75].length > 0 && (this.visibleI = this.visibleI + 1);
                    var p22 = 0, b18 = 0;
                    this.yRatio.length > 1 && (this.yaxisIndex = u27);
                    var v12 = this.barHelpers.initialPositions();
                    d37 = v12.y, h45 = v12.zeroW, c41 = v12.x, b18 = v12.barWidth, n67 = v12.xDivision, l51 = v12.zeroH;
                    for(var y12 = s106.group({
                        class: "apexcharts-datalabels",
                        "data:realIndex": u27
                    }), w10 = s106.group({
                        class: "apexcharts-rangebar-goals-markers",
                        style: "pointer-events: none"
                    }), k10 = 0; k10 < a141.globals.dataPoints; k10++){
                        var A8 = this.barHelpers.getStrokeWidth(o75, k10, u27), S7 = this.seriesRangeStart[o75][k10], C7 = this.seriesRangeEnd[o75][k10], L7 = null, P7 = null, M6 = {
                            x: c41,
                            y: d37,
                            strokeWidth: A8,
                            elSeries: f25
                        };
                        if (g32 = v12.yDivision, p22 = v12.barHeight, this.isHorizontal) {
                            P7 = d37 + p22 * this.visibleI;
                            var T6 = this.seriesLen;
                            a141.config.plotOptions.bar.rangeBarGroupRows && (T6 = 1);
                            var I4 = (g32 - p22 * T6) / 2;
                            if (void 0 === a141.config.series[o75].data[k10]) break;
                            if (a141.config.series[o75].data[k10].x) {
                                var z3 = this.detectOverlappingBars({
                                    i: o75,
                                    j: k10,
                                    barYPosition: P7,
                                    srty: I4,
                                    barHeight: p22,
                                    yDivision: g32,
                                    initPositions: v12
                                });
                                p22 = z3.barHeight, P7 = z3.barYPosition;
                            }
                            b18 = (L7 = this.drawRangeBarPaths(e({
                                indexes: {
                                    i: o75,
                                    j: k10,
                                    realIndex: u27
                                },
                                barHeight: p22,
                                barYPosition: P7,
                                zeroW: h45,
                                yDivision: g32,
                                y1: S7,
                                y2: C7
                            }, M6))).barWidth;
                        } else p22 = (L7 = this.drawRangeColumnPaths(e({
                            indexes: {
                                i: o75,
                                j: k10,
                                realIndex: u27
                            },
                            zeroH: l51,
                            barWidth: b18,
                            xDivision: n67
                        }, M6))).barHeight;
                        var X3 = this.barHelpers.drawGoalLine({
                            barXPosition: L7.barXPosition,
                            barYPosition: P7,
                            goalX: L7.goalX,
                            goalY: L7.goalY,
                            barHeight: p22,
                            barWidth: b18
                        });
                        X3 && w10.add(X3), d37 = L7.y, c41 = L7.x;
                        var E2 = this.barHelpers.getPathFillColor(t296, o75, k10, u27), Y1 = a141.globals.stroke.colors[u27];
                        this.renderSeries({
                            realIndex: u27,
                            pathFill: E2,
                            lineFill: Y1,
                            j: k10,
                            i: o75,
                            x: c41,
                            y: d37,
                            y1: S7,
                            y2: C7,
                            pathFrom: L7.pathFrom,
                            pathTo: L7.pathTo,
                            strokeWidth: A8,
                            elSeries: f25,
                            series: t296,
                            barHeight: p22,
                            barYPosition: P7,
                            barWidth: b18,
                            elDataLabelsWrap: y12,
                            elGoalsMarkers: w10,
                            visibleSeries: this.visibleI,
                            type: "rangebar"
                        });
                    }
                    r89.add(f25);
                }
                return r89;
            }
        },
        {
            key: "detectOverlappingBars",
            value: function(t297) {
                var e222 = t297.i, i170 = t297.j, a142 = t297.barYPosition, s107 = t297.srty, r90 = t297.barHeight, o76 = t297.yDivision, n68 = t297.initPositions, l52 = this.w, h46 = [], c42 = l52.config.series[e222].data[i170].rangeName, d38 = l52.config.series[e222].data[i170].x, g33 = l52.globals.labels.indexOf(d38), u28 = l52.globals.seriesRangeBar[e222].findIndex(function(t298) {
                    return t298.x === d38 && t298.overlaps.length > 0;
                });
                return a142 = l52.config.plotOptions.bar.rangeBarGroupRows ? s107 + o76 * g33 : s107 + r90 * this.visibleI + o76 * g33, u28 > -1 && !l52.config.plotOptions.bar.rangeBarOverlap && (h46 = l52.globals.seriesRangeBar[e222][u28].overlaps).indexOf(c42) > -1 && (a142 = (r90 = n68.barHeight / h46.length) * this.visibleI + o76 * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + r90 * (this.visibleI + h46.indexOf(c42)) + o76 * g33), {
                    barYPosition: a142,
                    barHeight: r90
                };
            }
        },
        {
            key: "drawRangeColumnPaths",
            value: function(t299) {
                var e223 = t299.indexes, i171 = t299.x;
                t299.strokeWidth;
                var a143 = t299.xDivision, s108 = t299.barWidth, r91 = t299.zeroH, o77 = this.w, n69 = e223.i, l53 = e223.j, h47 = this.yRatio[this.yaxisIndex], c43 = e223.realIndex, d39 = this.getRangeValue(c43, l53), g34 = Math.min(d39.start, d39.end), u29 = Math.max(d39.start, d39.end);
                o77.globals.isXNumeric && (i171 = (o77.globals.seriesX[n69][l53] - o77.globals.minX) / this.xRatio - s108 / 2);
                var f26 = i171 + s108 * this.visibleI;
                void 0 === this.series[n69][l53] || null === this.series[n69][l53] ? g34 = r91 : (g34 = r91 - g34 / h47, u29 = r91 - u29 / h47);
                var p23 = Math.abs(u29 - g34), x18 = this.barHelpers.getColumnPaths({
                    barXPosition: f26,
                    barWidth: s108,
                    y1: g34,
                    y2: u29,
                    strokeWidth: this.strokeWidth,
                    series: this.seriesRangeEnd,
                    realIndex: e223.realIndex,
                    i: c43,
                    j: l53,
                    w: o77
                });
                return o77.globals.isXNumeric || (i171 += a143), {
                    pathTo: x18.pathTo,
                    pathFrom: x18.pathFrom,
                    barHeight: p23,
                    x: i171,
                    y: u29,
                    goalY: this.barHelpers.getGoalValues("y", null, r91, n69, l53),
                    barXPosition: f26
                };
            }
        },
        {
            key: "drawRangeBarPaths",
            value: function(t300) {
                var e224 = t300.indexes, i172 = t300.y, a144 = t300.y1, s109 = t300.y2, r92 = t300.yDivision, o78 = t300.barHeight, n70 = t300.barYPosition, l54 = t300.zeroW, h48 = this.w, c44 = l54 + a144 / this.invertedYRatio, d40 = l54 + s109 / this.invertedYRatio, g35 = Math.abs(d40 - c44), u30 = this.barHelpers.getBarpaths({
                    barYPosition: n70,
                    barHeight: o78,
                    x1: c44,
                    x2: d40,
                    strokeWidth: this.strokeWidth,
                    series: this.seriesRangeEnd,
                    i: e224.realIndex,
                    realIndex: e224.realIndex,
                    j: e224.j,
                    w: h48
                });
                return h48.globals.isXNumeric || (i172 += r92), {
                    pathTo: u30.pathTo,
                    pathFrom: u30.pathFrom,
                    barWidth: g35,
                    x: d40,
                    goalX: this.barHelpers.getGoalValues("x", l54, null, e224.realIndex, e224.j),
                    y: i172
                };
            }
        },
        {
            key: "getRangeValue",
            value: function(t301, e225) {
                var i173 = this.w;
                return {
                    start: i173.globals.seriesRangeStart[t301][e225],
                    end: i173.globals.seriesRangeEnd[t301][e225]
                };
            }
        },
        {
            key: "getTooltipValues",
            value: function(t302) {
                var e226 = t302.ctx, i174 = t302.seriesIndex, a145 = t302.dataPointIndex, s110 = t302.y1, r93 = t302.y2, o79 = t302.w, n71 = o79.globals.seriesRangeStart[i174][a145], l55 = o79.globals.seriesRangeEnd[i174][a145], h49 = o79.globals.labels[a145], c45 = o79.config.series[i174].name ? o79.config.series[i174].name : "", d41 = o79.config.tooltip.y.formatter, g36 = o79.config.tooltip.y.title.formatter, u31 = {
                    w: o79,
                    seriesIndex: i174,
                    dataPointIndex: a145,
                    start: n71,
                    end: l55
                };
                "function" == typeof g36 && (c45 = g36(c45, u31)), Number.isFinite(s110) && Number.isFinite(r93) && (n71 = s110, l55 = r93, o79.config.series[i174].data[a145].x && (h49 = o79.config.series[i174].data[a145].x + ":"), "function" == typeof d41 && (h49 = d41(h49, u31)));
                var f27 = "", p24 = "", x19 = o79.globals.colors[i174];
                if (void 0 === o79.config.tooltip.x.formatter) {
                    if ("datetime" === o79.config.xaxis.type) {
                        var b19 = new R(e226);
                        f27 = b19.formatDate(b19.getDate(n71), o79.config.tooltip.x.format), p24 = b19.formatDate(b19.getDate(l55), o79.config.tooltip.x.format);
                    } else f27 = n71, p24 = l55;
                } else f27 = o79.config.tooltip.x.formatter(n71), p24 = o79.config.tooltip.x.formatter(l55);
                return {
                    start: n71,
                    end: l55,
                    startVal: f27,
                    endVal: p24,
                    ylabel: h49,
                    color: x19,
                    seriesName: c45
                };
            }
        },
        {
            key: "buildCustomTooltipHTML",
            value: function(t303) {
                var e227 = t303.color, i175 = t303.seriesName;
                return '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' + e227 + '">' + (i175 || "") + '</span></div><div> <span class="category">' + t303.ylabel + ' </span> <span class="value start-value">' + t303.start + '</span> <span class="separator">-</span> <span class="value end-value">' + t303.end + "</span></div></div>";
            }
        }
    ]), s105;
}(), D = function() {
    function t304(e228) {
        a(this, t304), this.opts = e228;
    }
    return r(t304, [
        {
            key: "line",
            value: function() {
                return {
                    chart: {
                        animations: {
                            easing: "swing"
                        }
                    },
                    dataLabels: {
                        enabled: !1
                    },
                    stroke: {
                        width: 5,
                        curve: "straight"
                    },
                    markers: {
                        size: 0,
                        hover: {
                            sizeOffset: 6
                        }
                    },
                    xaxis: {
                        crosshairs: {
                            width: 1
                        }
                    }
                };
            }
        },
        {
            key: "sparkline",
            value: function(t305) {
                this.opts.yaxis[0].show = !1, this.opts.yaxis[0].title.text = "", this.opts.yaxis[0].axisBorder.show = !1, this.opts.yaxis[0].axisTicks.show = !1, this.opts.yaxis[0].floating = !0;
                return x.extend(t305, {
                    grid: {
                        show: !1,
                        padding: {
                            left: 0,
                            right: 0,
                            top: 0,
                            bottom: 0
                        }
                    },
                    legend: {
                        show: !1
                    },
                    xaxis: {
                        labels: {
                            show: !1
                        },
                        tooltip: {
                            enabled: !1
                        },
                        axisBorder: {
                            show: !1
                        },
                        axisTicks: {
                            show: !1
                        }
                    },
                    chart: {
                        toolbar: {
                            show: !1
                        },
                        zoom: {
                            enabled: !1
                        }
                    },
                    dataLabels: {
                        enabled: !1
                    }
                });
            }
        },
        {
            key: "bar",
            value: function() {
                return {
                    chart: {
                        stacked: !1,
                        animations: {
                            easing: "swing"
                        }
                    },
                    plotOptions: {
                        bar: {
                            dataLabels: {
                                position: "center"
                            }
                        }
                    },
                    dataLabels: {
                        style: {
                            colors: [
                                "#fff"
                            ]
                        },
                        background: {
                            enabled: !1
                        }
                    },
                    stroke: {
                        width: 0,
                        lineCap: "round"
                    },
                    fill: {
                        opacity: .85
                    },
                    legend: {
                        markers: {
                            shape: "square",
                            radius: 2,
                            size: 8
                        }
                    },
                    tooltip: {
                        shared: !1,
                        intersect: !0
                    },
                    xaxis: {
                        tooltip: {
                            enabled: !1
                        },
                        tickPlacement: "between",
                        crosshairs: {
                            width: "barWidth",
                            position: "back",
                            fill: {
                                type: "gradient"
                            },
                            dropShadow: {
                                enabled: !1
                            },
                            stroke: {
                                width: 0
                            }
                        }
                    }
                };
            }
        },
        {
            key: "candlestick",
            value: function() {
                var t306 = this;
                return {
                    stroke: {
                        width: 1,
                        colors: [
                            "#333"
                        ]
                    },
                    fill: {
                        opacity: 1
                    },
                    dataLabels: {
                        enabled: !1
                    },
                    tooltip: {
                        shared: !0,
                        custom: function(e229) {
                            var i176 = e229.seriesIndex, a146 = e229.dataPointIndex, s111 = e229.w;
                            return t306._getBoxTooltip(s111, i176, a146, [
                                "Open",
                                "High",
                                "",
                                "Low",
                                "Close"
                            ], "candlestick");
                        }
                    },
                    states: {
                        active: {
                            filter: {
                                type: "none"
                            }
                        }
                    },
                    xaxis: {
                        crosshairs: {
                            width: 1
                        }
                    }
                };
            }
        },
        {
            key: "boxPlot",
            value: function() {
                var t307 = this;
                return {
                    chart: {
                        animations: {
                            dynamicAnimation: {
                                enabled: !1
                            }
                        }
                    },
                    stroke: {
                        width: 1,
                        colors: [
                            "#24292e"
                        ]
                    },
                    dataLabels: {
                        enabled: !1
                    },
                    tooltip: {
                        shared: !0,
                        custom: function(e230) {
                            var i177 = e230.seriesIndex, a147 = e230.dataPointIndex, s112 = e230.w;
                            return t307._getBoxTooltip(s112, i177, a147, [
                                "Minimum",
                                "Q1",
                                "Median",
                                "Q3",
                                "Maximum"
                            ], "boxPlot");
                        }
                    },
                    markers: {
                        size: 5,
                        strokeWidth: 1,
                        strokeColors: "#111"
                    },
                    xaxis: {
                        crosshairs: {
                            width: 1
                        }
                    }
                };
            }
        },
        {
            key: "rangeBar",
            value: function() {
                return {
                    stroke: {
                        width: 0,
                        lineCap: "square"
                    },
                    plotOptions: {
                        bar: {
                            borderRadius: 0,
                            dataLabels: {
                                position: "center"
                            }
                        }
                    },
                    dataLabels: {
                        enabled: !1,
                        formatter: function(t, e231) {
                            e231.ctx;
                            var i178 = e231.seriesIndex, a148 = e231.dataPointIndex, s113 = e231.w, r94 = s113.globals.seriesRangeStart[i178][a148];
                            return s113.globals.seriesRangeEnd[i178][a148] - r94;
                        },
                        background: {
                            enabled: !1
                        },
                        style: {
                            colors: [
                                "#fff"
                            ]
                        }
                    },
                    tooltip: {
                        shared: !1,
                        followCursor: !0,
                        custom: function(t308) {
                            return t308.w.config.plotOptions && t308.w.config.plotOptions.bar && t308.w.config.plotOptions.bar.horizontal ? function(t309) {
                                var e232 = new H(t309.ctx, null), i179 = e232.getTooltipValues(t309), a149 = i179.color, s114 = i179.seriesName, r95 = i179.ylabel, o80 = i179.startVal, n72 = i179.endVal;
                                return e232.buildCustomTooltipHTML({
                                    color: a149,
                                    seriesName: s114,
                                    ylabel: r95,
                                    start: o80,
                                    end: n72
                                });
                            }(t308) : function(t310) {
                                var e233 = new H(t310.ctx, null), i180 = e233.getTooltipValues(t310), a150 = i180.color, s115 = i180.seriesName, r96 = i180.ylabel, o81 = i180.start, n73 = i180.end;
                                return e233.buildCustomTooltipHTML({
                                    color: a150,
                                    seriesName: s115,
                                    ylabel: r96,
                                    start: o81,
                                    end: n73
                                });
                            }(t308);
                        }
                    },
                    xaxis: {
                        tickPlacement: "between",
                        tooltip: {
                            enabled: !1
                        },
                        crosshairs: {
                            stroke: {
                                width: 0
                            }
                        }
                    }
                };
            }
        },
        {
            key: "area",
            value: function() {
                return {
                    stroke: {
                        width: 4,
                        fill: {
                            type: "solid",
                            gradient: {
                                inverseColors: !1,
                                shade: "light",
                                type: "vertical",
                                opacityFrom: .65,
                                opacityTo: .5,
                                stops: [
                                    0,
                                    100,
                                    100
                                ]
                            }
                        }
                    },
                    fill: {
                        type: "gradient",
                        gradient: {
                            inverseColors: !1,
                            shade: "light",
                            type: "vertical",
                            opacityFrom: .65,
                            opacityTo: .5,
                            stops: [
                                0,
                                100,
                                100
                            ]
                        }
                    },
                    markers: {
                        size: 0,
                        hover: {
                            sizeOffset: 6
                        }
                    },
                    tooltip: {
                        followCursor: !1
                    }
                };
            }
        },
        {
            key: "brush",
            value: function(t311) {
                return x.extend(t311, {
                    chart: {
                        toolbar: {
                            autoSelected: "selection",
                            show: !1
                        },
                        zoom: {
                            enabled: !1
                        }
                    },
                    dataLabels: {
                        enabled: !1
                    },
                    stroke: {
                        width: 1
                    },
                    tooltip: {
                        enabled: !1
                    },
                    xaxis: {
                        tooltip: {
                            enabled: !1
                        }
                    }
                });
            }
        },
        {
            key: "stacked100",
            value: function(t312) {
                t312.dataLabels = t312.dataLabels || {}, t312.dataLabels.formatter = t312.dataLabels.formatter || void 0;
                var e234 = t312.dataLabels.formatter;
                return t312.yaxis.forEach(function(e, i181) {
                    t312.yaxis[i181].min = 0, t312.yaxis[i181].max = 100;
                }), "bar" === t312.chart.type && (t312.dataLabels.formatter = e234 || function(t313) {
                    return "number" == typeof t313 && t313 ? t313.toFixed(0) + "%" : t313;
                }), t312;
            }
        },
        {
            key: "convertCatToNumeric",
            value: function(t314) {
                return t314.xaxis.convertedCatToNumeric = !0, t314;
            }
        },
        {
            key: "convertCatToNumericXaxis",
            value: function(t315, e, i182) {
                t315.xaxis.type = "numeric", t315.xaxis.labels = t315.xaxis.labels || {}, t315.xaxis.labels.formatter = t315.xaxis.labels.formatter || function(t316) {
                    return x.isNumber(t316) ? Math.floor(t316) : t316;
                };
                var a151 = t315.xaxis.labels.formatter, s116 = t315.xaxis.categories && t315.xaxis.categories.length ? t315.xaxis.categories : t315.labels;
                return i182 && i182.length && (s116 = i182.map(function(t317) {
                    return Array.isArray(t317) ? t317 : String(t317);
                })), s116 && s116.length && (t315.xaxis.labels.formatter = function(t318) {
                    return x.isNumber(t318) ? a151(s116[Math.floor(t318) - 1]) : a151(t318);
                }), t315.xaxis.categories = [], t315.labels = [], t315.xaxis.tickAmount = t315.xaxis.tickAmount || "dataPoints", t315;
            }
        },
        {
            key: "bubble",
            value: function() {
                return {
                    dataLabels: {
                        style: {
                            colors: [
                                "#fff"
                            ]
                        }
                    },
                    tooltip: {
                        shared: !1,
                        intersect: !0
                    },
                    xaxis: {
                        crosshairs: {
                            width: 0
                        }
                    },
                    fill: {
                        type: "solid",
                        gradient: {
                            shade: "light",
                            inverse: !0,
                            shadeIntensity: .55,
                            opacityFrom: .4,
                            opacityTo: .8
                        }
                    }
                };
            }
        },
        {
            key: "scatter",
            value: function() {
                return {
                    dataLabels: {
                        enabled: !1
                    },
                    tooltip: {
                        shared: !1,
                        intersect: !0
                    },
                    markers: {
                        size: 6,
                        strokeWidth: 1,
                        hover: {
                            sizeOffset: 2
                        }
                    }
                };
            }
        },
        {
            key: "heatmap",
            value: function() {
                return {
                    chart: {
                        stacked: !1
                    },
                    fill: {
                        opacity: 1
                    },
                    dataLabels: {
                        style: {
                            colors: [
                                "#fff"
                            ]
                        }
                    },
                    stroke: {
                        colors: [
                            "#fff"
                        ]
                    },
                    tooltip: {
                        followCursor: !0,
                        marker: {
                            show: !1
                        },
                        x: {
                            show: !1
                        }
                    },
                    legend: {
                        position: "top",
                        markers: {
                            shape: "square",
                            size: 10,
                            offsetY: 2
                        }
                    },
                    grid: {
                        padding: {
                            right: 20
                        }
                    }
                };
            }
        },
        {
            key: "treemap",
            value: function() {
                return {
                    chart: {
                        zoom: {
                            enabled: !1
                        }
                    },
                    dataLabels: {
                        style: {
                            fontSize: 14,
                            fontWeight: 600,
                            colors: [
                                "#fff"
                            ]
                        }
                    },
                    stroke: {
                        show: !0,
                        width: 2,
                        colors: [
                            "#fff"
                        ]
                    },
                    legend: {
                        show: !1
                    },
                    fill: {
                        gradient: {
                            stops: [
                                0,
                                100
                            ]
                        }
                    },
                    tooltip: {
                        followCursor: !0,
                        x: {
                            show: !1
                        }
                    },
                    grid: {
                        padding: {
                            left: 0,
                            right: 0
                        }
                    },
                    xaxis: {
                        crosshairs: {
                            show: !1
                        },
                        tooltip: {
                            enabled: !1
                        }
                    }
                };
            }
        },
        {
            key: "pie",
            value: function() {
                return {
                    chart: {
                        toolbar: {
                            show: !1
                        }
                    },
                    plotOptions: {
                        pie: {
                            donut: {
                                labels: {
                                    show: !1
                                }
                            }
                        }
                    },
                    dataLabels: {
                        formatter: function(t319) {
                            return t319.toFixed(1) + "%";
                        },
                        style: {
                            colors: [
                                "#fff"
                            ]
                        },
                        background: {
                            enabled: !1
                        },
                        dropShadow: {
                            enabled: !0
                        }
                    },
                    stroke: {
                        colors: [
                            "#fff"
                        ]
                    },
                    fill: {
                        opacity: 1,
                        gradient: {
                            shade: "light",
                            stops: [
                                0,
                                100
                            ]
                        }
                    },
                    tooltip: {
                        theme: "dark",
                        fillSeriesColor: !0
                    },
                    legend: {
                        position: "right"
                    }
                };
            }
        },
        {
            key: "donut",
            value: function() {
                return {
                    chart: {
                        toolbar: {
                            show: !1
                        }
                    },
                    dataLabels: {
                        formatter: function(t320) {
                            return t320.toFixed(1) + "%";
                        },
                        style: {
                            colors: [
                                "#fff"
                            ]
                        },
                        background: {
                            enabled: !1
                        },
                        dropShadow: {
                            enabled: !0
                        }
                    },
                    stroke: {
                        colors: [
                            "#fff"
                        ]
                    },
                    fill: {
                        opacity: 1,
                        gradient: {
                            shade: "light",
                            shadeIntensity: .35,
                            stops: [
                                80,
                                100
                            ],
                            opacityFrom: 1,
                            opacityTo: 1
                        }
                    },
                    tooltip: {
                        theme: "dark",
                        fillSeriesColor: !0
                    },
                    legend: {
                        position: "right"
                    }
                };
            }
        },
        {
            key: "polarArea",
            value: function() {
                return this.opts.yaxis[0].tickAmount = this.opts.yaxis[0].tickAmount ? this.opts.yaxis[0].tickAmount : 6, {
                    chart: {
                        toolbar: {
                            show: !1
                        }
                    },
                    dataLabels: {
                        formatter: function(t321) {
                            return t321.toFixed(1) + "%";
                        },
                        enabled: !1
                    },
                    stroke: {
                        show: !0,
                        width: 2
                    },
                    fill: {
                        opacity: .7
                    },
                    tooltip: {
                        theme: "dark",
                        fillSeriesColor: !0
                    },
                    legend: {
                        position: "right"
                    }
                };
            }
        },
        {
            key: "radar",
            value: function() {
                return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, {
                    dataLabels: {
                        enabled: !1,
                        style: {
                            fontSize: "11px"
                        }
                    },
                    stroke: {
                        width: 2
                    },
                    markers: {
                        size: 3,
                        strokeWidth: 1,
                        strokeOpacity: 1
                    },
                    fill: {
                        opacity: .2
                    },
                    tooltip: {
                        shared: !1,
                        intersect: !0,
                        followCursor: !0
                    },
                    grid: {
                        show: !1
                    },
                    xaxis: {
                        labels: {
                            formatter: function(t322) {
                                return t322;
                            },
                            style: {
                                colors: [
                                    "#a8a8a8"
                                ],
                                fontSize: "11px"
                            }
                        },
                        tooltip: {
                            enabled: !1
                        },
                        crosshairs: {
                            show: !1
                        }
                    }
                };
            }
        },
        {
            key: "radialBar",
            value: function() {
                return {
                    chart: {
                        animations: {
                            dynamicAnimation: {
                                enabled: !0,
                                speed: 800
                            }
                        },
                        toolbar: {
                            show: !1
                        }
                    },
                    fill: {
                        gradient: {
                            shade: "dark",
                            shadeIntensity: .4,
                            inverseColors: !1,
                            type: "diagonal2",
                            opacityFrom: 1,
                            opacityTo: 1,
                            stops: [
                                70,
                                98,
                                100
                            ]
                        }
                    },
                    legend: {
                        show: !1,
                        position: "right"
                    },
                    tooltip: {
                        enabled: !1,
                        fillSeriesColor: !0
                    }
                };
            }
        },
        {
            key: "_getBoxTooltip",
            value: function(t323, e235, i183, a152, s117) {
                var r97 = t323.globals.seriesCandleO[e235][i183], o82 = t323.globals.seriesCandleH[e235][i183], n74 = t323.globals.seriesCandleM[e235][i183], l56 = t323.globals.seriesCandleL[e235][i183], h50 = t323.globals.seriesCandleC[e235][i183];
                return t323.config.series[e235].type && t323.config.series[e235].type !== s117 ? '<div class="apexcharts-custom-tooltip">\n          '.concat(t323.config.series[e235].name ? t323.config.series[e235].name : "series-" + (e235 + 1), ": <strong>").concat(t323.globals.series[e235][i183], "</strong>\n        </div>") : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(t323.config.chart.type, '">') + "<div>".concat(a152[0], ': <span class="value">') + r97 + "</span></div>" + "<div>".concat(a152[1], ': <span class="value">') + o82 + "</span></div>" + (n74 ? "<div>".concat(a152[2], ': <span class="value">') + n74 + "</span></div>" : "") + "<div>".concat(a152[3], ': <span class="value">') + l56 + "</span></div>" + "<div>".concat(a152[4], ': <span class="value">') + h50 + "</span></div></div>";
            }
        }
    ]), t304;
}(), N = function() {
    function t324(e236) {
        a(this, t324), this.opts = e236;
    }
    return r(t324, [
        {
            key: "init",
            value: function(t325) {
                var e237 = t325.responsiveOverride, a153 = this.opts, s118 = new L, r98 = new D(a153);
                this.chartType = a153.chart.type, "histogram" === this.chartType && (a153.chart.type = "bar", a153 = x.extend({
                    plotOptions: {
                        bar: {
                            columnWidth: "99.99%"
                        }
                    }
                }, a153)), a153 = this.extendYAxis(a153), a153 = this.extendAnnotations(a153);
                var o83 = s118.init(), n75 = {};
                if (a153 && "object" === i(a153)) {
                    var l57 = {};
                    l57 = -1 !== [
                        "line",
                        "area",
                        "bar",
                        "candlestick",
                        "boxPlot",
                        "rangeBar",
                        "histogram",
                        "bubble",
                        "scatter",
                        "heatmap",
                        "treemap",
                        "pie",
                        "polarArea",
                        "donut",
                        "radar",
                        "radialBar"
                    ].indexOf(a153.chart.type) ? r98[a153.chart.type]() : r98.line(), a153.chart.brush && a153.chart.brush.enabled && (l57 = r98.brush(l57)), a153.chart.stacked && "100%" === a153.chart.stackType && (a153 = r98.stacked100(a153)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(a153), a153.xaxis = a153.xaxis || window.Apex.xaxis || {}, e237 || (a153.xaxis.convertedCatToNumeric = !1), ((a153 = this.checkForCatToNumericXAxis(this.chartType, l57, a153)).chart.sparkline && a153.chart.sparkline.enabled || window.Apex.chart && window.Apex.chart.sparkline && window.Apex.chart.sparkline.enabled) && (l57 = r98.sparkline(l57)), n75 = x.extend(o83, l57);
                }
                var h51 = x.extend(n75, window.Apex);
                return o83 = x.extend(h51, a153), o83 = this.handleUserInputErrors(o83);
            }
        },
        {
            key: "checkForCatToNumericXAxis",
            value: function(t326, e238, i184) {
                var a154 = new D(i184), s119 = ("bar" === t326 || "boxPlot" === t326) && i184.plotOptions && i184.plotOptions.bar && i184.plotOptions.bar.horizontal, r99 = "pie" === t326 || "polarArea" === t326 || "donut" === t326 || "radar" === t326 || "radialBar" === t326 || "heatmap" === t326, o84 = "datetime" !== i184.xaxis.type && "numeric" !== i184.xaxis.type, n76 = i184.xaxis.tickPlacement ? i184.xaxis.tickPlacement : e238.xaxis && e238.xaxis.tickPlacement;
                return s119 || r99 || !o84 || "between" === n76 || (i184 = a154.convertCatToNumeric(i184)), i184;
            }
        },
        {
            key: "extendYAxis",
            value: function(t327, e239) {
                var i185 = new L;
                (void 0 === t327.yaxis || !t327.yaxis || Array.isArray(t327.yaxis) && 0 === t327.yaxis.length) && (t327.yaxis = {}), t327.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t327.yaxis = x.extend(t327.yaxis, window.Apex.yaxis)), t327.yaxis.constructor !== Array ? t327.yaxis = [
                    x.extend(i185.yAxis, t327.yaxis)
                ] : t327.yaxis = x.extendArray(t327.yaxis, i185.yAxis);
                var a155 = !1;
                t327.yaxis.forEach(function(t328) {
                    t328.logarithmic && (a155 = !0);
                });
                var s120 = t327.series;
                return e239 && !s120 && (s120 = e239.config.series), a155 && s120.length !== t327.yaxis.length && s120.length && (t327.yaxis = s120.map(function(e240, a156) {
                    if (e240.name || (s120[a156].name = "series-".concat(a156 + 1)), t327.yaxis[a156]) return t327.yaxis[a156].seriesName = s120[a156].name, t327.yaxis[a156];
                    var r100 = x.extend(i185.yAxis, t327.yaxis[0]);
                    return r100.show = !1, r100;
                })), a155 && s120.length > 1 && s120.length !== t327.yaxis.length && console.warn("A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both."), t327;
            }
        },
        {
            key: "extendAnnotations",
            value: function(t329) {
                return void 0 === t329.annotations && (t329.annotations = {}, t329.annotations.yaxis = [], t329.annotations.xaxis = [], t329.annotations.points = []), t329 = this.extendYAxisAnnotations(t329), t329 = this.extendXAxisAnnotations(t329), t329 = this.extendPointAnnotations(t329);
            }
        },
        {
            key: "extendYAxisAnnotations",
            value: function(t330) {
                var e241 = new L;
                return t330.annotations.yaxis = x.extendArray(void 0 !== t330.annotations.yaxis ? t330.annotations.yaxis : [], e241.yAxisAnnotation), t330;
            }
        },
        {
            key: "extendXAxisAnnotations",
            value: function(t331) {
                var e242 = new L;
                return t331.annotations.xaxis = x.extendArray(void 0 !== t331.annotations.xaxis ? t331.annotations.xaxis : [], e242.xAxisAnnotation), t331;
            }
        },
        {
            key: "extendPointAnnotations",
            value: function(t332) {
                var e243 = new L;
                return t332.annotations.points = x.extendArray(void 0 !== t332.annotations.points ? t332.annotations.points : [], e243.pointAnnotation), t332;
            }
        },
        {
            key: "checkForDarkTheme",
            value: function(t333) {
                t333.theme && "dark" === t333.theme.mode && (t333.tooltip || (t333.tooltip = {}), "light" !== t333.tooltip.theme && (t333.tooltip.theme = "dark"), t333.chart.foreColor || (t333.chart.foreColor = "#f6f7f8"), t333.chart.background || (t333.chart.background = "#424242"), t333.theme.palette || (t333.theme.palette = "palette4"));
            }
        },
        {
            key: "handleUserInputErrors",
            value: function(t334) {
                var e244 = t334;
                if (e244.tooltip.shared && e244.tooltip.intersect) throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");
                if ("bar" === e244.chart.type && e244.plotOptions.bar.horizontal) {
                    if (e244.yaxis.length > 1) throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");
                    e244.yaxis[0].reversed && (e244.yaxis[0].opposite = !0), e244.xaxis.tooltip.enabled = !1, e244.yaxis[0].tooltip.enabled = !1, e244.chart.zoom.enabled = !1;
                }
                return "bar" !== e244.chart.type && "rangeBar" !== e244.chart.type || e244.tooltip.shared && "barWidth" === e244.xaxis.crosshairs.width && e244.series.length > 1 && (e244.xaxis.crosshairs.width = "tickWidth"), "candlestick" !== e244.chart.type && "boxPlot" !== e244.chart.type || e244.yaxis[0].reversed && (console.warn("Reversed y-axis in ".concat(e244.chart.type, " chart is not supported.")), e244.yaxis[0].reversed = !1), e244;
            }
        }
    ]), t324;
}(), O = function() {
    function t335() {
        a(this, t335);
    }
    return r(t335, [
        {
            key: "initGlobalVars",
            value: function(t336) {
                t336.series = [], t336.seriesCandleO = [], t336.seriesCandleH = [], t336.seriesCandleM = [], t336.seriesCandleL = [], t336.seriesCandleC = [], t336.seriesRangeStart = [], t336.seriesRangeEnd = [], t336.seriesRangeBar = [], t336.seriesPercent = [], t336.seriesGoals = [], t336.seriesX = [], t336.seriesZ = [], t336.seriesNames = [], t336.seriesTotals = [], t336.seriesLog = [], t336.seriesColors = [], t336.stackedSeriesTotals = [], t336.seriesXvalues = [], t336.seriesYvalues = [], t336.labels = [], t336.hasGroups = !1, t336.groups = [], t336.categoryLabels = [], t336.timescaleLabels = [], t336.noLabelsProvided = !1, t336.resizeTimer = null, t336.selectionResizeTimer = null, t336.delayedElements = [], t336.pointsArray = [], t336.dataLabelsRects = [], t336.isXNumeric = !1, t336.xaxisLabelsCount = 0, t336.skipLastTimelinelabel = !1, t336.skipFirstTimelinelabel = !1, t336.isDataXYZ = !1, t336.isMultiLineX = !1, t336.isMultipleYAxis = !1, t336.maxY = -Number.MAX_VALUE, t336.minY = Number.MIN_VALUE, t336.minYArr = [], t336.maxYArr = [], t336.maxX = -Number.MAX_VALUE, t336.minX = Number.MAX_VALUE, t336.initialMaxX = -Number.MAX_VALUE, t336.initialMinX = Number.MAX_VALUE, t336.maxDate = 0, t336.minDate = Number.MAX_VALUE, t336.minZ = Number.MAX_VALUE, t336.maxZ = -Number.MAX_VALUE, t336.minXDiff = Number.MAX_VALUE, t336.yAxisScale = [], t336.xAxisScale = null, t336.xAxisTicksPositions = [], t336.yLabelsCoords = [], t336.yTitleCoords = [], t336.barPadForNumericAxis = 0, t336.padHorizontal = 0, t336.xRange = 0, t336.yRange = [], t336.zRange = 0, t336.dataPoints = 0, t336.xTickAmount = 0;
            }
        },
        {
            key: "globalVars",
            value: function(t337) {
                return {
                    chartID: null,
                    cuid: null,
                    events: {
                        beforeMount: [],
                        mounted: [],
                        updated: [],
                        clicked: [],
                        selection: [],
                        dataPointSelection: [],
                        zoomed: [],
                        scrolled: []
                    },
                    colors: [],
                    clientX: null,
                    clientY: null,
                    fill: {
                        colors: []
                    },
                    stroke: {
                        colors: []
                    },
                    dataLabels: {
                        style: {
                            colors: []
                        }
                    },
                    radarPolygons: {
                        fill: {
                            colors: []
                        }
                    },
                    markers: {
                        colors: [],
                        size: t337.markers.size,
                        largestSize: 0
                    },
                    animationEnded: !1,
                    isTouchDevice: "ontouchstart" in window || navigator.msMaxTouchPoints,
                    isDirty: !1,
                    isExecCalled: !1,
                    initialConfig: null,
                    initialSeries: [],
                    lastXAxis: [],
                    lastYAxis: [],
                    columnSeries: null,
                    labels: [],
                    timescaleLabels: [],
                    noLabelsProvided: !1,
                    allSeriesCollapsed: !1,
                    collapsedSeries: [],
                    collapsedSeriesIndices: [],
                    ancillaryCollapsedSeries: [],
                    ancillaryCollapsedSeriesIndices: [],
                    risingSeries: [],
                    dataFormatXNumeric: !1,
                    capturedSeriesIndex: -1,
                    capturedDataPointIndex: -1,
                    selectedDataPoints: [],
                    goldenPadding: 35,
                    invalidLogScale: !1,
                    ignoreYAxisIndexes: [],
                    yAxisSameScaleIndices: [],
                    maxValsInArrayIndex: 0,
                    radialSize: 0,
                    selection: void 0,
                    zoomEnabled: "zoom" === t337.chart.toolbar.autoSelected && t337.chart.toolbar.tools.zoom && t337.chart.zoom.enabled,
                    panEnabled: "pan" === t337.chart.toolbar.autoSelected && t337.chart.toolbar.tools.pan,
                    selectionEnabled: "selection" === t337.chart.toolbar.autoSelected && t337.chart.toolbar.tools.selection,
                    yaxis: null,
                    mousedown: !1,
                    lastClientPosition: {},
                    visibleXRange: void 0,
                    yValueDecimal: 0,
                    total: 0,
                    SVGNS: "http://www.w3.org/2000/svg",
                    svgWidth: 0,
                    svgHeight: 0,
                    noData: !1,
                    locale: {},
                    dom: {},
                    memory: {
                        methodsToExec: []
                    },
                    shouldAnimate: !0,
                    skipLastTimelinelabel: !1,
                    skipFirstTimelinelabel: !1,
                    delayedElements: [],
                    axisCharts: !0,
                    isDataXYZ: !1,
                    resized: !1,
                    resizeTimer: null,
                    comboCharts: !1,
                    dataChanged: !1,
                    previousPaths: [],
                    allSeriesHasEqualX: !0,
                    pointsArray: [],
                    dataLabelsRects: [],
                    lastDrawnDataLabelsIndexes: [],
                    hasNullValues: !1,
                    easing: null,
                    zoomed: !1,
                    gridWidth: 0,
                    gridHeight: 0,
                    rotateXLabels: !1,
                    defaultLabels: !1,
                    xLabelFormatter: void 0,
                    yLabelFormatters: [],
                    xaxisTooltipFormatter: void 0,
                    ttKeyFormatter: void 0,
                    ttVal: void 0,
                    ttZFormatter: void 0,
                    LINE_HEIGHT_RATIO: 1.618,
                    xAxisLabelsHeight: 0,
                    xAxisGroupLabelsHeight: 0,
                    xAxisLabelsWidth: 0,
                    yAxisLabelsWidth: 0,
                    scaleX: 1,
                    scaleY: 1,
                    translateX: 0,
                    translateY: 0,
                    translateYAxisX: [],
                    yAxisWidths: [],
                    translateXAxisY: 0,
                    translateXAxisX: 0,
                    tooltip: null
                };
            }
        },
        {
            key: "init",
            value: function(t338) {
                var e245 = this.globalVars(t338);
                return this.initGlobalVars(e245), e245.initialConfig = x.extend({}, t338), e245.initialSeries = x.clone(t338.series), e245.lastXAxis = x.clone(e245.initialConfig.xaxis), e245.lastYAxis = x.clone(e245.initialConfig.yaxis), e245;
            }
        }
    ]), t335;
}(), W = function() {
    function t339(e246) {
        a(this, t339), this.opts = e246;
    }
    return r(t339, [
        {
            key: "init",
            value: function() {
                var t340 = new N(this.opts).init({
                    responsiveOverride: !1
                });
                return {
                    config: t340,
                    globals: (new O).init(t340)
                };
            }
        }
    ]), t339;
}(), B = function() {
    function t341(e247) {
        a(this, t341), this.ctx = e247, this.w = e247.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new y(this.ctx);
    }
    return r(t341, [
        {
            key: "isMultiFormat",
            value: function() {
                return this.isFormatXY() || this.isFormat2DArray();
            }
        },
        {
            key: "isFormatXY",
            value: function() {
                var t342 = this.w.config.series.slice(), e248 = new E(this.ctx);
                if (this.activeSeriesIndex = e248.getActiveConfigSeriesIndex(), void 0 !== t342[this.activeSeriesIndex].data && t342[this.activeSeriesIndex].data.length > 0 && null !== t342[this.activeSeriesIndex].data[0] && void 0 !== t342[this.activeSeriesIndex].data[0].x && null !== t342[this.activeSeriesIndex].data[0]) return !0;
            }
        },
        {
            key: "isFormat2DArray",
            value: function() {
                var t343 = this.w.config.series.slice(), e249 = new E(this.ctx);
                if (this.activeSeriesIndex = e249.getActiveConfigSeriesIndex(), void 0 !== t343[this.activeSeriesIndex].data && t343[this.activeSeriesIndex].data.length > 0 && void 0 !== t343[this.activeSeriesIndex].data[0] && null !== t343[this.activeSeriesIndex].data[0] && t343[this.activeSeriesIndex].data[0].constructor === Array) return !0;
            }
        },
        {
            key: "handleFormat2DArray",
            value: function(t344, e250) {
                for(var i186 = this.w.config, a157 = this.w.globals, s121 = "boxPlot" === i186.chart.type || "boxPlot" === i186.series[e250].type, r101 = 0; r101 < t344[e250].data.length; r101++)if (void 0 !== t344[e250].data[r101][1] && (Array.isArray(t344[e250].data[r101][1]) && 4 === t344[e250].data[r101][1].length && !s121 ? this.twoDSeries.push(x.parseNumber(t344[e250].data[r101][1][3])) : t344[e250].data[r101].length >= 5 ? this.twoDSeries.push(x.parseNumber(t344[e250].data[r101][4])) : this.twoDSeries.push(x.parseNumber(t344[e250].data[r101][1])), a157.dataFormatXNumeric = !0), "datetime" === i186.xaxis.type) {
                    var o85 = new Date(t344[e250].data[r101][0]);
                    o85 = new Date(o85).getTime(), this.twoDSeriesX.push(o85);
                } else this.twoDSeriesX.push(t344[e250].data[r101][0]);
                for(var n77 = 0; n77 < t344[e250].data.length; n77++)void 0 !== t344[e250].data[n77][2] && (this.threeDSeries.push(t344[e250].data[n77][2]), a157.isDataXYZ = !0);
            }
        },
        {
            key: "handleFormatXY",
            value: function(t345, e251) {
                var i187 = this.w.config, a158 = this.w.globals, s122 = new R(this.ctx), r102 = e251;
                a158.collapsedSeriesIndices.indexOf(e251) > -1 && (r102 = this.activeSeriesIndex);
                for(var o86 = 0; o86 < t345[e251].data.length; o86++)void 0 !== t345[e251].data[o86].y && (Array.isArray(t345[e251].data[o86].y) ? this.twoDSeries.push(x.parseNumber(t345[e251].data[o86].y[t345[e251].data[o86].y.length - 1])) : this.twoDSeries.push(x.parseNumber(t345[e251].data[o86].y))), void 0 !== t345[e251].data[o86].goals && Array.isArray(t345[e251].data[o86].goals) ? (void 0 === this.seriesGoals[e251] && (this.seriesGoals[e251] = []), this.seriesGoals[e251].push(t345[e251].data[o86].goals)) : (void 0 === this.seriesGoals[e251] && (this.seriesGoals[e251] = []), this.seriesGoals[e251].push(null));
                for(var n78 = 0; n78 < t345[r102].data.length; n78++){
                    var l58 = "string" == typeof t345[r102].data[n78].x, h52 = Array.isArray(t345[r102].data[n78].x), c46 = !h52 && !!s122.isValidDate(t345[r102].data[n78].x.toString());
                    if (l58 || c46) {
                        if (l58 || i187.xaxis.convertedCatToNumeric) {
                            var d42 = a158.isBarHorizontal && a158.isRangeData;
                            "datetime" !== i187.xaxis.type || d42 ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t345[r102].data[n78].x)) : this.twoDSeriesX.push(s122.parseDate(t345[r102].data[n78].x));
                        } else "datetime" === i187.xaxis.type ? this.twoDSeriesX.push(s122.parseDate(t345[r102].data[n78].x.toString())) : (a158.dataFormatXNumeric = !0, a158.isXNumeric = !0, this.twoDSeriesX.push(parseFloat(t345[r102].data[n78].x)));
                    } else h52 ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t345[r102].data[n78].x)) : (a158.isXNumeric = !0, a158.dataFormatXNumeric = !0, this.twoDSeriesX.push(t345[r102].data[n78].x));
                }
                if (t345[e251].data[0] && void 0 !== t345[e251].data[0].z) {
                    for(var g37 = 0; g37 < t345[e251].data.length; g37++)this.threeDSeries.push(t345[e251].data[g37].z);
                    a158.isDataXYZ = !0;
                }
            }
        },
        {
            key: "handleRangeData",
            value: function(t346, e252) {
                var i188 = this.w.globals, a159 = {};
                return this.isFormat2DArray() ? a159 = this.handleRangeDataFormat("array", t346, e252) : this.isFormatXY() && (a159 = this.handleRangeDataFormat("xy", t346, e252)), i188.seriesRangeStart.push(a159.start), i188.seriesRangeEnd.push(a159.end), i188.seriesRangeBar.push(a159.rangeUniques), i188.seriesRangeBar.forEach(function(t347, e253) {
                    t347 && t347.forEach(function(t348, e254) {
                        t348.y.forEach(function(e255, i189) {
                            for(var a160 = 0; a160 < t348.y.length; a160++)if (i189 !== a160) {
                                var s123 = e255.y1, r103 = e255.y2, o87 = t348.y[a160].y1;
                                s123 <= t348.y[a160].y2 && o87 <= r103 && (t348.overlaps.indexOf(e255.rangeName) < 0 && t348.overlaps.push(e255.rangeName), t348.overlaps.indexOf(t348.y[a160].rangeName) < 0 && t348.overlaps.push(t348.y[a160].rangeName));
                            }
                        });
                    });
                }), a159;
            }
        },
        {
            key: "handleCandleStickBoxData",
            value: function(t349, e256) {
                var i190 = this.w.globals, a161 = {};
                return this.isFormat2DArray() ? a161 = this.handleCandleStickBoxDataFormat("array", t349, e256) : this.isFormatXY() && (a161 = this.handleCandleStickBoxDataFormat("xy", t349, e256)), i190.seriesCandleO[e256] = a161.o, i190.seriesCandleH[e256] = a161.h, i190.seriesCandleM[e256] = a161.m, i190.seriesCandleL[e256] = a161.l, i190.seriesCandleC[e256] = a161.c, a161;
            }
        },
        {
            key: "handleRangeDataFormat",
            value: function(t350, e257, i191) {
                var a162 = [], s124 = [], r104 = e257[i191].data.filter(function(t351, e258, i192) {
                    return e258 === i192.findIndex(function(e259) {
                        return e259.x === t351.x;
                    });
                }).map(function(t352, e) {
                    return {
                        x: t352.x,
                        overlaps: [],
                        y: []
                    };
                }), o88 = "Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts", n79 = new E(this.ctx).getActiveConfigSeriesIndex();
                if ("array" === t350) {
                    if (2 !== e257[n79].data[0][1].length) throw new Error(o88);
                    for(var l59 = 0; l59 < e257[i191].data.length; l59++)a162.push(e257[i191].data[l59][1][0]), s124.push(e257[i191].data[l59][1][1]);
                } else if ("xy" === t350) {
                    if (2 !== e257[n79].data[0].y.length) throw new Error(o88);
                    for(var h53 = function(t353) {
                        var o89 = x.randomId(), n80 = e257[i191].data[t353].x, l60 = {
                            y1: e257[i191].data[t353].y[0],
                            y2: e257[i191].data[t353].y[1],
                            rangeName: o89
                        };
                        e257[i191].data[t353].rangeName = o89;
                        var h55 = r104.findIndex(function(t354) {
                            return t354.x === n80;
                        });
                        r104[h55].y.push(l60), a162.push(l60.y1), s124.push(l60.y2);
                    }, c47 = 0; c47 < e257[i191].data.length; c47++)h53(c47);
                }
                return {
                    start: a162,
                    end: s124,
                    rangeUniques: r104
                };
            }
        },
        {
            key: "handleCandleStickBoxDataFormat",
            value: function(t355, e260, i193) {
                var a163 = this.w, s125 = "boxPlot" === a163.config.chart.type || "boxPlot" === a163.config.series[i193].type, r105 = [], o90 = [], n81 = [], l61 = [], h56 = [];
                if ("array" === t355) {
                    if (s125 && 6 === e260[i193].data[0].length || !s125 && 5 === e260[i193].data[0].length) for(var c48 = 0; c48 < e260[i193].data.length; c48++)r105.push(e260[i193].data[c48][1]), o90.push(e260[i193].data[c48][2]), s125 ? (n81.push(e260[i193].data[c48][3]), l61.push(e260[i193].data[c48][4]), h56.push(e260[i193].data[c48][5])) : (l61.push(e260[i193].data[c48][3]), h56.push(e260[i193].data[c48][4]));
                    else for(var d43 = 0; d43 < e260[i193].data.length; d43++)Array.isArray(e260[i193].data[d43][1]) && (r105.push(e260[i193].data[d43][1][0]), o90.push(e260[i193].data[d43][1][1]), s125 ? (n81.push(e260[i193].data[d43][1][2]), l61.push(e260[i193].data[d43][1][3]), h56.push(e260[i193].data[d43][1][4])) : (l61.push(e260[i193].data[d43][1][2]), h56.push(e260[i193].data[d43][1][3])));
                } else if ("xy" === t355) for(var g38 = 0; g38 < e260[i193].data.length; g38++)Array.isArray(e260[i193].data[g38].y) && (r105.push(e260[i193].data[g38].y[0]), o90.push(e260[i193].data[g38].y[1]), s125 ? (n81.push(e260[i193].data[g38].y[2]), l61.push(e260[i193].data[g38].y[3]), h56.push(e260[i193].data[g38].y[4])) : (l61.push(e260[i193].data[g38].y[2]), h56.push(e260[i193].data[g38].y[3])));
                return {
                    o: r105,
                    h: o90,
                    m: n81,
                    l: l61,
                    c: h56
                };
            }
        },
        {
            key: "parseDataAxisCharts",
            value: function(t356) {
                var e261 = this, i194 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx, a164 = this.w.config, s126 = this.w.globals, r106 = new R(i194), o91 = a164.labels.length > 0 ? a164.labels.slice() : a164.xaxis.categories.slice();
                s126.isRangeBar = "rangeBar" === a164.chart.type && s126.isBarHorizontal, s126.hasGroups = "category" === a164.xaxis.type && a164.xaxis.group.groups.length > 0, s126.hasGroups && (s126.groups = a164.xaxis.group.groups);
                for(var n82 = function() {
                    for(var t357 = 0; t357 < o91.length; t357++)if ("string" == typeof o91[t357]) {
                        if (!r106.isValidDate(o91[t357])) throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");
                        e261.twoDSeriesX.push(r106.parseDate(o91[t357]));
                    } else e261.twoDSeriesX.push(o91[t357]);
                }, l62 = 0; l62 < t356.length; l62++){
                    if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t356[l62].data) return void console.error("It is a possibility that you may have not included 'data' property in series.");
                    if ("rangeBar" !== a164.chart.type && "rangeArea" !== a164.chart.type && "rangeBar" !== t356[l62].type && "rangeArea" !== t356[l62].type || (s126.isRangeData = !0, this.handleRangeData(t356, l62)), this.isMultiFormat()) this.isFormat2DArray() ? this.handleFormat2DArray(t356, l62) : this.isFormatXY() && this.handleFormatXY(t356, l62), "candlestick" !== a164.chart.type && "candlestick" !== t356[l62].type && "boxPlot" !== a164.chart.type && "boxPlot" !== t356[l62].type || this.handleCandleStickBoxData(t356, l62), s126.series.push(this.twoDSeries), s126.labels.push(this.twoDSeriesX), s126.seriesX.push(this.twoDSeriesX), s126.seriesGoals = this.seriesGoals, l62 !== this.activeSeriesIndex || this.fallbackToCategory || (s126.isXNumeric = !0);
                    else {
                        "datetime" === a164.xaxis.type ? (s126.isXNumeric = !0, n82(), s126.seriesX.push(this.twoDSeriesX)) : "numeric" === a164.xaxis.type && (s126.isXNumeric = !0, o91.length > 0 && (this.twoDSeriesX = o91, s126.seriesX.push(this.twoDSeriesX))), s126.labels.push(this.twoDSeriesX);
                        var h57 = t356[l62].data.map(function(t358) {
                            return x.parseNumber(t358);
                        });
                        s126.series.push(h57);
                    }
                    s126.seriesZ.push(this.threeDSeries), void 0 !== t356[l62].name ? s126.seriesNames.push(t356[l62].name) : s126.seriesNames.push("series-" + parseInt(l62 + 1, 10)), void 0 !== t356[l62].color ? s126.seriesColors.push(t356[l62].color) : s126.seriesColors.push(void 0);
                }
                return this.w;
            }
        },
        {
            key: "parseDataNonAxisCharts",
            value: function(t359) {
                var e262 = this.w.globals, i195 = this.w.config;
                e262.series = t359.slice(), e262.seriesNames = i195.labels.slice();
                for(var a165 = 0; a165 < e262.series.length; a165++)void 0 === e262.seriesNames[a165] && e262.seriesNames.push("series-" + (a165 + 1));
                return this.w;
            }
        },
        {
            key: "handleExternalLabelsData",
            value: function(t360) {
                var e263 = this.w.config, i196 = this.w.globals;
                if (e263.xaxis.categories.length > 0) i196.labels = e263.xaxis.categories;
                else if (e263.labels.length > 0) i196.labels = e263.labels.slice();
                else if (this.fallbackToCategory) {
                    if (i196.labels = i196.labels[0], i196.seriesRangeBar.length && (i196.seriesRangeBar.map(function(t361) {
                        t361.forEach(function(t362) {
                            i196.labels.indexOf(t362.x) < 0 && t362.x && i196.labels.push(t362.x);
                        });
                    }), i196.labels = i196.labels.filter(function(t363, e264, i197) {
                        return i197.indexOf(t363) === e264;
                    })), e263.xaxis.convertedCatToNumeric) new D(e263).convertCatToNumericXaxis(e263, this.ctx, i196.seriesX[0]), this._generateExternalLabels(t360);
                } else this._generateExternalLabels(t360);
            }
        },
        {
            key: "_generateExternalLabels",
            value: function(t364) {
                var e265 = this.w.globals, i198 = this.w.config, a166 = [];
                if (e265.axisCharts) {
                    if (e265.series.length > 0) {
                        if (this.isFormatXY()) for(var s127 = i198.series.map(function(t365, e266) {
                            return t365.data.filter(function(t366, e267, i199) {
                                return i199.findIndex(function(e268) {
                                    return e268.x === t366.x;
                                }) === e267;
                            });
                        }), r107 = s127.reduce(function(t367, e269, i200, a167) {
                            return a167[t367].length > e269.length ? t367 : i200;
                        }, 0), o92 = 0; o92 < s127[r107].length; o92++)a166.push(o92 + 1);
                        else for(var n83 = 0; n83 < e265.series[e265.maxValsInArrayIndex].length; n83++)a166.push(n83 + 1);
                    }
                    e265.seriesX = [];
                    for(var l63 = 0; l63 < t364.length; l63++)e265.seriesX.push(a166);
                    e265.isXNumeric = !0;
                }
                if (0 === a166.length) {
                    a166 = e265.axisCharts ? [] : e265.series.map(function(t, e270) {
                        return e270 + 1;
                    });
                    for(var h58 = 0; h58 < t364.length; h58++)e265.seriesX.push(a166);
                }
                e265.labels = a166, i198.xaxis.convertedCatToNumeric && (e265.categoryLabels = a166.map(function(t368) {
                    return i198.xaxis.labels.formatter(t368);
                })), e265.noLabelsProvided = !0;
            }
        },
        {
            key: "parseData",
            value: function(t369) {
                var e271 = this.w, i201 = e271.config, a168 = e271.globals;
                if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = !1, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a168.axisCharts ? this.parseDataAxisCharts(t369) : this.parseDataNonAxisCharts(t369), this.coreUtils.getLargestSeries(), "bar" === i201.chart.type && i201.chart.stacked) {
                    var s128 = new E(this.ctx);
                    a168.series = s128.setNullSeriesToZeroValues(a168.series);
                }
                this.coreUtils.getSeriesTotals(), a168.axisCharts && this.coreUtils.getStackedSeriesTotals(), this.coreUtils.getPercentSeries(), a168.dataFormatXNumeric || a168.isXNumeric && ("numeric" !== i201.xaxis.type || 0 !== i201.labels.length || 0 !== i201.xaxis.categories.length) || this.handleExternalLabelsData(t369);
                for(var r108 = this.coreUtils.getCategoryLabels(a168.labels), o93 = 0; o93 < r108.length; o93++)if (Array.isArray(r108[o93])) {
                    a168.isMultiLineX = !0;
                    break;
                }
            }
        },
        {
            key: "excludeCollapsedSeriesInYAxis",
            value: function() {
                var t370 = this, e272 = this.w;
                e272.globals.ignoreYAxisIndexes = e272.globals.collapsedSeries.map(function(i202, a) {
                    if (t370.w.globals.isMultipleYAxis && !e272.config.chart.stacked) return i202.index;
                });
            }
        }
    ]), t341;
}(), V = function() {
    function t371(e273) {
        a(this, t371), this.ctx = e273, this.w = e273.w, this.tooltipKeyFormat = "dd MMM";
    }
    return r(t371, [
        {
            key: "xLabelFormat",
            value: function(t372, e274, i203, a169) {
                var s129 = this.w;
                if ("datetime" === s129.config.xaxis.type && void 0 === s129.config.xaxis.labels.formatter && void 0 === s129.config.tooltip.x.formatter) {
                    var r109 = new R(this.ctx);
                    return r109.formatDate(r109.getDate(e274), s129.config.tooltip.x.format);
                }
                return t372(e274, i203, a169);
            }
        },
        {
            key: "defaultGeneralFormatter",
            value: function(t373) {
                return Array.isArray(t373) ? t373.map(function(t374) {
                    return t374;
                }) : t373;
            }
        },
        {
            key: "defaultYFormatter",
            value: function(t375, e275, i204) {
                var a170 = this.w;
                return x.isNumber(t375) && (t375 = 0 !== a170.globals.yValueDecimal ? t375.toFixed(void 0 !== e275.decimalsInFloat ? e275.decimalsInFloat : a170.globals.yValueDecimal) : a170.globals.maxYArr[i204] - a170.globals.minYArr[i204] < 5 ? t375.toFixed(1) : t375.toFixed(0)), t375;
            }
        },
        {
            key: "setLabelFormatters",
            value: function() {
                var t376 = this, e276 = this.w;
                return e276.globals.xaxisTooltipFormatter = function(e277) {
                    return t376.defaultGeneralFormatter(e277);
                }, e276.globals.ttKeyFormatter = function(e278) {
                    return t376.defaultGeneralFormatter(e278);
                }, e276.globals.ttZFormatter = function(t377) {
                    return t377;
                }, e276.globals.legendFormatter = function(e279) {
                    return t376.defaultGeneralFormatter(e279);
                }, void 0 !== e276.config.xaxis.labels.formatter ? e276.globals.xLabelFormatter = e276.config.xaxis.labels.formatter : e276.globals.xLabelFormatter = function(t378) {
                    if (x.isNumber(t378)) {
                        if (!e276.config.xaxis.convertedCatToNumeric && "numeric" === e276.config.xaxis.type) {
                            if (x.isNumber(e276.config.xaxis.decimalsInFloat)) return t378.toFixed(e276.config.xaxis.decimalsInFloat);
                            var i205 = e276.globals.maxX - e276.globals.minX;
                            return i205 > 0 && i205 < 100 ? t378.toFixed(1) : t378.toFixed(0);
                        }
                        if (e276.globals.isBarHorizontal) {
                            if (e276.globals.maxY - e276.globals.minYArr < 4) return t378.toFixed(1);
                        }
                        return t378.toFixed(0);
                    }
                    return t378;
                }, "function" == typeof e276.config.tooltip.x.formatter ? e276.globals.ttKeyFormatter = e276.config.tooltip.x.formatter : e276.globals.ttKeyFormatter = e276.globals.xLabelFormatter, "function" == typeof e276.config.xaxis.tooltip.formatter && (e276.globals.xaxisTooltipFormatter = e276.config.xaxis.tooltip.formatter), (Array.isArray(e276.config.tooltip.y) || void 0 !== e276.config.tooltip.y.formatter) && (e276.globals.ttVal = e276.config.tooltip.y), void 0 !== e276.config.tooltip.z.formatter && (e276.globals.ttZFormatter = e276.config.tooltip.z.formatter), void 0 !== e276.config.legend.formatter && (e276.globals.legendFormatter = e276.config.legend.formatter), e276.config.yaxis.forEach(function(i206, a171) {
                    void 0 !== i206.labels.formatter ? e276.globals.yLabelFormatters[a171] = i206.labels.formatter : e276.globals.yLabelFormatters[a171] = function(s130) {
                        return e276.globals.xyCharts ? Array.isArray(s130) ? s130.map(function(e280) {
                            return t376.defaultYFormatter(e280, i206, a171);
                        }) : t376.defaultYFormatter(s130, i206, a171) : s130;
                    };
                }), e276.globals;
            }
        },
        {
            key: "heatmapLabelFormatters",
            value: function() {
                var t379 = this.w;
                if ("heatmap" === t379.config.chart.type) {
                    t379.globals.yAxisScale[0].result = t379.globals.seriesNames.slice();
                    var e281 = t379.globals.seriesNames.reduce(function(t380, e283) {
                        return t380.length > e283.length ? t380 : e283;
                    }, 0);
                    t379.globals.yAxisScale[0].niceMax = e281, t379.globals.yAxisScale[0].niceMin = e281;
                }
            }
        }
    ]), t371;
}(), G = function() {
    function t381(e284) {
        a(this, t381), this.ctx = e284, this.w = e284.w;
    }
    return r(t381, [
        {
            key: "getLabel",
            value: function(t382, e285, i207, a172) {
                var s131 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [], r110 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "12px", o94 = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6], n84 = this.w, l64 = void 0 === t382[a172] ? "" : t382[a172], h59 = l64, c49 = n84.globals.xLabelFormatter, d44 = n84.config.xaxis.labels.formatter, g39 = !1, u32 = new V(this.ctx), f28 = l64;
                o94 && (h59 = u32.xLabelFormat(c49, l64, f28, {
                    i: a172,
                    dateFormatter: new R(this.ctx).formatDate,
                    w: n84
                }), void 0 !== d44 && (h59 = d44(l64, t382[a172], {
                    i: a172,
                    dateFormatter: new R(this.ctx).formatDate,
                    w: n84
                })));
                var p25 = function(t383) {
                    var i208 = null;
                    return e285.forEach(function(t384) {
                        "month" === t384.unit ? i208 = "year" : "day" === t384.unit ? i208 = "month" : "hour" === t384.unit ? i208 = "day" : "minute" === t384.unit && (i208 = "hour");
                    }), i208 === t383;
                };
                e285.length > 0 ? (g39 = p25(e285[a172].unit), i207 = e285[a172].position, h59 = e285[a172].value) : "datetime" === n84.config.xaxis.type && void 0 === d44 && (h59 = ""), void 0 === h59 && (h59 = ""), h59 = Array.isArray(h59) ? h59 : h59.toString();
                var x20 = new m(this.ctx), b20 = {};
                b20 = n84.globals.rotateXLabels && o94 ? x20.getTextRects(h59, parseInt(r110, 10), null, "rotate(".concat(n84.config.xaxis.labels.rotate, " 0 0)"), !1) : x20.getTextRects(h59, parseInt(r110, 10));
                var v13 = !n84.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
                return !Array.isArray(h59) && (0 === h59.indexOf("NaN") || 0 === h59.toLowerCase().indexOf("invalid") || h59.toLowerCase().indexOf("infinity") >= 0 || s131.indexOf(h59) >= 0 && v13) && (h59 = ""), {
                    x: i207,
                    text: h59,
                    textRect: b20,
                    isBold: g39
                };
            }
        },
        {
            key: "checkLabelBasedOnTickamount",
            value: function(t385, e286, i209) {
                var a173 = this.w, s132 = a173.config.xaxis.tickAmount;
                return "dataPoints" === s132 && (s132 = Math.round(a173.globals.gridWidth / 120)), s132 > i209 || t385 % Math.round(i209 / (s132 + 1)) == 0 || (e286.text = ""), e286;
            }
        },
        {
            key: "checkForOverflowingLabels",
            value: function(t386, e287, i210, a174, s133) {
                var r111 = this.w;
                if (0 === t386 && r111.globals.skipFirstTimelinelabel && (e287.text = ""), t386 === i210 - 1 && r111.globals.skipLastTimelinelabel && (e287.text = ""), r111.config.xaxis.labels.hideOverlappingLabels && a174.length > 0) {
                    var o95 = s133[s133.length - 1];
                    e287.x < o95.textRect.width / (r111.globals.rotateXLabels ? Math.abs(r111.config.xaxis.labels.rotate) / 12 : 1.01) + o95.x && (e287.text = "");
                }
                return e287;
            }
        },
        {
            key: "checkForReversedLabels",
            value: function(t387, e288) {
                var i211 = this.w;
                return i211.config.yaxis[t387] && i211.config.yaxis[t387].reversed && e288.reverse(), e288;
            }
        },
        {
            key: "isYAxisHidden",
            value: function(t388) {
                var e289 = this.w, i212 = new y(this.ctx);
                return !e289.config.yaxis[t388].show || !e289.config.yaxis[t388].showForNullSeries && i212.isSeriesNull(t388) && -1 === e289.globals.collapsedSeriesIndices.indexOf(t388);
            }
        },
        {
            key: "getYAxisForeColor",
            value: function(t389, e290) {
                var i213 = this.w;
                return Array.isArray(t389) && i213.globals.yAxisScale[e290] && this.ctx.theme.pushExtraColors(t389, i213.globals.yAxisScale[e290].result.length, !1), t389;
            }
        },
        {
            key: "drawYAxisTicks",
            value: function(t390, e291, i214, a175, s134, r112, o96) {
                var n85 = this.w, l65 = new m(this.ctx), h60 = n85.globals.translateY;
                if (a175.show && e291 > 0) {
                    !0 === n85.config.yaxis[s134].opposite && (t390 += a175.width);
                    for(var c50 = e291; c50 >= 0; c50--){
                        var d45 = h60 + e291 / 10 + n85.config.yaxis[s134].labels.offsetY - 1;
                        n85.globals.isBarHorizontal && (d45 = r112 * c50), "heatmap" === n85.config.chart.type && (d45 += r112 / 2);
                        var g40 = l65.drawLine(t390 + i214.offsetX - a175.width + a175.offsetX, d45 + a175.offsetY, t390 + i214.offsetX + a175.offsetX, d45 + a175.offsetY, a175.color);
                        o96.add(g40), h60 += r112;
                    }
                }
            }
        }
    ]), t381;
}(), j = function() {
    function t391(e292) {
        a(this, t391), this.ctx = e292, this.w = e292.w;
    }
    return r(t391, [
        {
            key: "scaleSvgNode",
            value: function(t392, e293) {
                var i215 = parseFloat(t392.getAttributeNS(null, "width")), a176 = parseFloat(t392.getAttributeNS(null, "height"));
                t392.setAttributeNS(null, "width", i215 * e293), t392.setAttributeNS(null, "height", a176 * e293), t392.setAttributeNS(null, "viewBox", "0 0 " + i215 + " " + a176);
            }
        },
        {
            key: "fixSvgStringForIe11",
            value: function(t393) {
                if (!x.isIE11()) return t393.replace(/&nbsp;/g, "&#160;");
                var e294 = 0, i216 = t393.replace(/xmlns="http:\/\/www.w3.org\/2000\/svg"/g, function(t394) {
                    return 2 === ++e294 ? 'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"' : t394;
                });
                return i216 = (i216 = i216.replace(/xmlns:NS\d+=""/g, "")).replace(/NS\d+:(\w+:\w+=")/g, "$1");
            }
        },
        {
            key: "getSvgString",
            value: function(t395) {
                null == t395 && (t395 = 1);
                var e295 = this.w.globals.dom.Paper.svg();
                if (1 !== t395) {
                    var i217 = this.w.globals.dom.Paper.node.cloneNode(!0);
                    this.scaleSvgNode(i217, t395), e295 = (new XMLSerializer).serializeToString(i217);
                }
                return this.fixSvgStringForIe11(e295);
            }
        },
        {
            key: "cleanup",
            value: function() {
                var t396 = this.w, e296 = t396.globals.dom.baseEl.getElementsByClassName("apexcharts-xcrosshairs"), i218 = t396.globals.dom.baseEl.getElementsByClassName("apexcharts-ycrosshairs"), a177 = t396.globals.dom.baseEl.querySelectorAll(".apexcharts-zoom-rect, .apexcharts-selection-rect");
                Array.prototype.forEach.call(a177, function(t397) {
                    t397.setAttribute("width", 0);
                }), e296 && e296[0] && (e296[0].setAttribute("x", -500), e296[0].setAttribute("x1", -500), e296[0].setAttribute("x2", -500)), i218 && i218[0] && (i218[0].setAttribute("y", -100), i218[0].setAttribute("y1", -100), i218[0].setAttribute("y2", -100));
            }
        },
        {
            key: "svgUrl",
            value: function() {
                this.cleanup();
                var t398 = this.getSvgString(), e297 = new Blob([
                    t398
                ], {
                    type: "image/svg+xml;charset=utf-8"
                });
                return URL.createObjectURL(e297);
            }
        },
        {
            key: "dataURI",
            value: function(t399) {
                var e298 = this;
                return new Promise(function(i219) {
                    var a178 = e298.w, s135 = t399 ? t399.scale || t399.width / a178.globals.svgWidth : 1;
                    e298.cleanup();
                    var r113 = document.createElement("canvas");
                    r113.width = a178.globals.svgWidth * s135, r113.height = parseInt(a178.globals.dom.elWrap.style.height, 10) * s135;
                    var o97 = "transparent" === a178.config.chart.background ? "#fff" : a178.config.chart.background, n86 = r113.getContext("2d");
                    n86.fillStyle = o97, n86.fillRect(0, 0, r113.width * s135, r113.height * s135);
                    var l66 = e298.getSvgString(s135);
                    if (window.canvg && x.isIE11()) {
                        var h61 = window.canvg.Canvg.fromString(n86, l66, {
                            ignoreClear: !0,
                            ignoreDimensions: !0
                        });
                        h61.start();
                        var c51 = r113.msToBlob();
                        h61.stop(), i219({
                            blob: c51
                        });
                    } else {
                        var d46 = "data:image/svg+xml," + encodeURIComponent(l66), g41 = new Image;
                        g41.crossOrigin = "anonymous", g41.onload = function() {
                            if (n86.drawImage(g41, 0, 0), r113.msToBlob) {
                                var t400 = r113.msToBlob();
                                i219({
                                    blob: t400
                                });
                            } else {
                                var e299 = r113.toDataURL("image/png");
                                i219({
                                    imgURI: e299
                                });
                            }
                        }, g41.src = d46;
                    }
                });
            }
        },
        {
            key: "exportToSVG",
            value: function() {
                this.triggerDownload(this.svgUrl(), this.w.config.chart.toolbar.export.svg.filename, ".svg");
            }
        },
        {
            key: "exportToPng",
            value: function() {
                var t401 = this;
                this.dataURI().then(function(e300) {
                    var i220 = e300.imgURI, a179 = e300.blob;
                    a179 ? navigator.msSaveOrOpenBlob(a179, t401.w.globals.chartID + ".png") : t401.triggerDownload(i220, t401.w.config.chart.toolbar.export.png.filename, ".png");
                });
            }
        },
        {
            key: "exportToCSV",
            value: function(t402) {
                var e301 = this, i221 = t402.series, a180 = t402.columnDelimiter, s136 = void 0 === a180 ? "," : a180, r114 = t402.lineDelimiter, o98 = void 0 === r114 ? "\n" : r114, n87 = this.w;
                i221 || (i221 = n87.config.series);
                var l67 = [], h62 = [], c52 = "", d47 = new B(this.ctx), g42 = new G(this.ctx), u33 = function(t403) {
                    var i222 = "";
                    if (n87.globals.axisCharts) {
                        if ("category" === n87.config.xaxis.type || n87.config.xaxis.convertedCatToNumeric) {
                            if (n87.globals.isBarHorizontal) {
                                var a181 = n87.globals.yLabelFormatters[0], r115 = new E(e301.ctx).getActiveConfigSeriesIndex();
                                i222 = a181(n87.globals.labels[t403], {
                                    seriesIndex: r115,
                                    dataPointIndex: t403,
                                    w: n87
                                });
                            } else i222 = g42.getLabel(n87.globals.labels, n87.globals.timescaleLabels, 0, t403).text;
                        }
                        "datetime" === n87.config.xaxis.type && (n87.config.xaxis.categories.length ? i222 = n87.config.xaxis.categories[t403] : n87.config.labels.length && (i222 = n87.config.labels[t403]));
                    } else i222 = n87.config.labels[t403];
                    return Array.isArray(i222) && (i222 = i222.join(" ")), x.isNumber(i222) ? i222 : i222.split(s136).join("");
                };
                l67.push(n87.config.chart.toolbar.export.csv.headerCategory), i221.map(function(t404, e302) {
                    var i223 = t404.name ? t404.name : "series-".concat(e302);
                    n87.globals.axisCharts && l67.push(i223.split(s136).join("") ? i223.split(s136).join("") : "series-".concat(e302));
                }), n87.globals.axisCharts || (l67.push(n87.config.chart.toolbar.export.csv.headerValue), h62.push(l67.join(s136))), i221.map(function(t405, e303) {
                    n87.globals.axisCharts ? function(t406, e304) {
                        if (l67.length && 0 === e304 && h62.push(l67.join(s136)), t406.data && t406.data.length) for(var a182 = 0; a182 < t406.data.length; a182++){
                            l67 = [];
                            var r116 = u33(a182);
                            if (r116 || (d47.isFormatXY() ? r116 = i221[e304].data[a182].x : d47.isFormat2DArray() && (r116 = i221[e304].data[a182] ? i221[e304].data[a182][0] : "")), 0 === e304) {
                                l67.push((c53 = r116, "datetime" === n87.config.xaxis.type && String(c53).length >= 10 ? n87.config.chart.toolbar.export.csv.dateFormatter(r116) : x.isNumber(r116) ? r116 : r116.split(s136).join("")));
                                for(var o99 = 0; o99 < n87.globals.series.length; o99++)d47.isFormatXY() ? l67.push(i221[o99].data[a182].y) : l67.push(n87.globals.series[o99][a182]);
                            }
                            ("candlestick" === n87.config.chart.type || t406.type && "candlestick" === t406.type) && (l67.pop(), l67.push(n87.globals.seriesCandleO[e304][a182]), l67.push(n87.globals.seriesCandleH[e304][a182]), l67.push(n87.globals.seriesCandleL[e304][a182]), l67.push(n87.globals.seriesCandleC[e304][a182])), ("boxPlot" === n87.config.chart.type || t406.type && "boxPlot" === t406.type) && (l67.pop(), l67.push(n87.globals.seriesCandleO[e304][a182]), l67.push(n87.globals.seriesCandleH[e304][a182]), l67.push(n87.globals.seriesCandleM[e304][a182]), l67.push(n87.globals.seriesCandleL[e304][a182]), l67.push(n87.globals.seriesCandleC[e304][a182])), "rangeBar" === n87.config.chart.type && (l67.pop(), l67.push(n87.globals.seriesRangeStart[e304][a182]), l67.push(n87.globals.seriesRangeEnd[e304][a182])), l67.length && h62.push(l67.join(s136));
                        }
                        var c53;
                    }(t405, e303) : ((l67 = []).push(n87.globals.labels[e303].split(s136).join("")), l67.push(n87.globals.series[e303]), h62.push(l67.join(s136)));
                }), c52 += h62.join(o98), this.triggerDownload("data:text/csv; charset=utf-8," + encodeURIComponent("\uFEFF" + c52), n87.config.chart.toolbar.export.csv.filename, ".csv");
            }
        },
        {
            key: "triggerDownload",
            value: function(t407, e305, i224) {
                var a183 = document.createElement("a");
                a183.href = t407, a183.download = (e305 || this.w.globals.chartID) + i224, document.body.appendChild(a183), a183.click(), document.body.removeChild(a183);
            }
        }
    ]), t391;
}(), _ = function() {
    function t408(e306) {
        a(this, t408), this.ctx = e306, this.w = e306.w;
        var i225 = this.w;
        this.axesUtils = new G(e306), this.xaxisLabels = i225.globals.labels.slice(), i225.globals.timescaleLabels.length > 0 && !i225.globals.isBarHorizontal && (this.xaxisLabels = i225.globals.timescaleLabels.slice()), i225.config.xaxis.overwriteCategories && (this.xaxisLabels = i225.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], "top" === i225.config.xaxis.position ? this.offY = 0 : this.offY = i225.globals.gridHeight + 1, this.offY = this.offY + i225.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = "bar" === i225.config.chart.type && i225.config.plotOptions.bar.horizontal, this.xaxisFontSize = i225.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = i225.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = i225.config.xaxis.labels.style.colors, this.xaxisBorderWidth = i225.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = i225.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf("%") > -1 ? this.xaxisBorderWidth = i225.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = i225.config.xaxis.axisBorder.height, this.yaxis = i225.config.yaxis[0];
    }
    return r(t408, [
        {
            key: "drawXaxis",
            value: function() {
                var t409 = this.w, e307 = new m(this.ctx), i226 = e307.group({
                    class: "apexcharts-xaxis",
                    transform: "translate(".concat(t409.config.xaxis.offsetX, ", ").concat(t409.config.xaxis.offsetY, ")")
                }), a184 = e307.group({
                    class: "apexcharts-xaxis-texts-g",
                    transform: "translate(".concat(t409.globals.translateXAxisX, ", ").concat(t409.globals.translateXAxisY, ")")
                });
                i226.add(a184);
                for(var s137 = [], r117 = 0; r117 < this.xaxisLabels.length; r117++)s137.push(this.xaxisLabels[r117]);
                if (this.drawXAxisLabelAndGroup(!0, e307, a184, s137, t409.globals.isXNumeric, function(t, e308) {
                    return e308;
                }), t409.globals.hasGroups) {
                    var o100 = t409.globals.groups;
                    s137 = [];
                    for(var n88 = 0; n88 < o100.length; n88++)s137.push(o100[n88].title);
                    var l68 = {};
                    t409.config.xaxis.group.style && (l68.xaxisFontSize = t409.config.xaxis.group.style.fontSize, l68.xaxisFontFamily = t409.config.xaxis.group.style.fontFamily, l68.xaxisForeColors = t409.config.xaxis.group.style.colors, l68.fontWeight = t409.config.xaxis.group.style.fontWeight, l68.cssClass = t409.config.xaxis.group.style.cssClass), this.drawXAxisLabelAndGroup(!1, e307, a184, s137, !1, function(t410, e309) {
                        return o100[t410].cols * e309;
                    }, l68);
                }
                if (void 0 !== t409.config.xaxis.title.text) {
                    var h63 = e307.group({
                        class: "apexcharts-xaxis-title"
                    }), c54 = e307.drawText({
                        x: t409.globals.gridWidth / 2 + t409.config.xaxis.title.offsetX,
                        y: this.offY + parseFloat(this.xaxisFontSize) + t409.globals.xAxisLabelsHeight + t409.config.xaxis.title.offsetY,
                        text: t409.config.xaxis.title.text,
                        textAnchor: "middle",
                        fontSize: t409.config.xaxis.title.style.fontSize,
                        fontFamily: t409.config.xaxis.title.style.fontFamily,
                        fontWeight: t409.config.xaxis.title.style.fontWeight,
                        foreColor: t409.config.xaxis.title.style.color,
                        cssClass: "apexcharts-xaxis-title-text " + t409.config.xaxis.title.style.cssClass
                    });
                    h63.add(c54), i226.add(h63);
                }
                if (t409.config.xaxis.axisBorder.show) {
                    var d48 = t409.globals.barPadForNumericAxis, g43 = e307.drawLine(t409.globals.padHorizontal + t409.config.xaxis.axisBorder.offsetX - d48, this.offY, this.xaxisBorderWidth + d48, this.offY, t409.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);
                    i226.add(g43);
                }
                return i226;
            }
        },
        {
            key: "drawXAxisLabelAndGroup",
            value: function(t411, e310, i227, a185, s138, r118) {
                var o101, n89 = this, l69 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {}, h64 = [], c55 = [], d49 = this.w, g44 = l69.xaxisFontSize || this.xaxisFontSize, u34 = l69.xaxisFontFamily || this.xaxisFontFamily, f29 = l69.xaxisForeColors || this.xaxisForeColors, p26 = l69.fontWeight || d49.config.xaxis.labels.style.fontWeight, x21 = l69.cssClass || d49.config.xaxis.labels.style.cssClass, b21 = d49.globals.padHorizontal, v14 = a185.length, m5 = "category" === d49.config.xaxis.type ? d49.globals.dataPoints : v14;
                if (s138) {
                    var y13 = m5 > 1 ? m5 - 1 : m5;
                    o101 = d49.globals.gridWidth / y13, b21 = b21 + r118(0, o101) / 2 + d49.config.xaxis.labels.offsetX;
                } else o101 = d49.globals.gridWidth / m5, b21 = b21 + r118(0, o101) + d49.config.xaxis.labels.offsetX;
                for(var w11 = function(s139) {
                    var l70 = b21 - r118(s139, o101) / 2 + d49.config.xaxis.labels.offsetX;
                    0 === s139 && 1 === v14 && o101 / 2 === b21 && 1 === m5 && (l70 = d49.globals.gridWidth / 2);
                    var y14 = n89.axesUtils.getLabel(a185, d49.globals.timescaleLabels, l70, s139, h64, g44, t411), w12 = 28;
                    d49.globals.rotateXLabels && t411 && (w12 = 22), t411 || (w12 = w12 + parseFloat(g44) + (d49.globals.xAxisLabelsHeight - d49.globals.xAxisGroupLabelsHeight) + (d49.globals.rotateXLabels ? 10 : 0)), y14 = void 0 !== d49.config.xaxis.tickAmount && "dataPoints" !== d49.config.xaxis.tickAmount && "datetime" !== d49.config.xaxis.type ? n89.axesUtils.checkLabelBasedOnTickamount(s139, y14, v14) : n89.axesUtils.checkForOverflowingLabels(s139, y14, v14, h64, c55);
                    if (t411 && y14.text && d49.globals.xaxisLabelsCount++, d49.config.xaxis.labels.show) {
                        var k12 = e310.drawText({
                            x: y14.x,
                            y: n89.offY + d49.config.xaxis.labels.offsetY + w12 - ("top" === d49.config.xaxis.position ? d49.globals.xAxisHeight + d49.config.xaxis.axisTicks.height - 2 : 0),
                            text: y14.text,
                            textAnchor: "middle",
                            fontWeight: y14.isBold ? 600 : p26,
                            fontSize: g44,
                            fontFamily: u34,
                            foreColor: Array.isArray(f29) ? t411 && d49.config.xaxis.convertedCatToNumeric ? f29[d49.globals.minX + s139 - 1] : f29[s139] : f29,
                            isPlainText: !1,
                            cssClass: (t411 ? "apexcharts-xaxis-label " : "apexcharts-xaxis-group-label ") + x21
                        });
                        if (i227.add(k12), t411) {
                            var A9 = document.createElementNS(d49.globals.SVGNS, "title");
                            A9.textContent = Array.isArray(y14.text) ? y14.text.join(" ") : y14.text, k12.node.appendChild(A9), "" !== y14.text && (h64.push(y14.text), c55.push(y14));
                        }
                    }
                    s139 < v14 - 1 && (b21 += r118(s139 + 1, o101));
                }, k11 = 0; k11 <= v14 - 1; k11++)w11(k11);
            }
        },
        {
            key: "drawXaxisInversed",
            value: function(t412) {
                var e311, i228, a186 = this, s140 = this.w, r119 = new m(this.ctx), o102 = s140.config.yaxis[0].opposite ? s140.globals.translateYAxisX[t412] : 0, n90 = r119.group({
                    class: "apexcharts-yaxis apexcharts-xaxis-inversed",
                    rel: t412
                }), l71 = r119.group({
                    class: "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g",
                    transform: "translate(" + o102 + ", 0)"
                });
                n90.add(l71);
                var h65 = [];
                if (s140.config.yaxis[t412].show) for(var c56 = 0; c56 < this.xaxisLabels.length; c56++)h65.push(this.xaxisLabels[c56]);
                e311 = s140.globals.gridHeight / h65.length, i228 = -e311 / 2.2;
                var d50 = s140.globals.yLabelFormatters[0], g45 = s140.config.yaxis[0].labels;
                if (g45.show) for(var u35 = function(o103) {
                    var n91 = void 0 === h65[o103] ? "" : h65[o103];
                    n91 = d50(n91, {
                        seriesIndex: t412,
                        dataPointIndex: o103,
                        w: s140
                    });
                    var c57 = a186.axesUtils.getYAxisForeColor(g45.style.colors, t412), u36 = 0;
                    Array.isArray(n91) && (u36 = n91.length / 2 * parseInt(g45.style.fontSize, 10));
                    var f31 = r119.drawText({
                        x: g45.offsetX - 15,
                        y: i228 + e311 + g45.offsetY - u36,
                        text: n91,
                        textAnchor: a186.yaxis.opposite ? "start" : "end",
                        foreColor: Array.isArray(c57) ? c57[o103] : c57,
                        fontSize: g45.style.fontSize,
                        fontFamily: g45.style.fontFamily,
                        fontWeight: g45.style.fontWeight,
                        isPlainText: !1,
                        cssClass: "apexcharts-yaxis-label " + g45.style.cssClass,
                        maxWidth: g45.maxWidth
                    });
                    l71.add(f31);
                    var p28 = document.createElementNS(s140.globals.SVGNS, "title");
                    if (p28.textContent = Array.isArray(n91) ? n91.join(" ") : n91, f31.node.appendChild(p28), 0 !== s140.config.yaxis[t412].labels.rotate) {
                        var x23 = r119.rotateAroundCenter(f31.node);
                        f31.node.setAttribute("transform", "rotate(".concat(s140.config.yaxis[t412].labels.rotate, " 0 ").concat(x23.y, ")"));
                    }
                    i228 += e311;
                }, f30 = 0; f30 <= h65.length - 1; f30++)u35(f30);
                if (void 0 !== s140.config.yaxis[0].title.text) {
                    var p27 = r119.group({
                        class: "apexcharts-yaxis-title apexcharts-xaxis-title-inversed",
                        transform: "translate(" + o102 + ", 0)"
                    }), x22 = r119.drawText({
                        x: 0,
                        y: s140.globals.gridHeight / 2,
                        text: s140.config.yaxis[0].title.text,
                        textAnchor: "middle",
                        foreColor: s140.config.yaxis[0].title.style.color,
                        fontSize: s140.config.yaxis[0].title.style.fontSize,
                        fontWeight: s140.config.yaxis[0].title.style.fontWeight,
                        fontFamily: s140.config.yaxis[0].title.style.fontFamily,
                        cssClass: "apexcharts-yaxis-title-text " + s140.config.yaxis[0].title.style.cssClass
                    });
                    p27.add(x22), n90.add(p27);
                }
                var b22 = 0;
                this.isCategoryBarHorizontal && s140.config.yaxis[0].opposite && (b22 = s140.globals.gridWidth);
                var v15 = s140.config.xaxis.axisBorder;
                if (v15.show) {
                    var y15 = r119.drawLine(s140.globals.padHorizontal + v15.offsetX + b22, 1 + v15.offsetY, s140.globals.padHorizontal + v15.offsetX + b22, s140.globals.gridHeight + v15.offsetY, v15.color, 0);
                    n90.add(y15);
                }
                return s140.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(b22, h65.length, s140.config.yaxis[0].axisBorder, s140.config.yaxis[0].axisTicks, 0, e311, n90), n90;
            }
        },
        {
            key: "drawXaxisTicks",
            value: function(t413, e312, i229) {
                var a187 = this.w, s141 = t413;
                if (!(t413 < 0 || t413 - 2 > a187.globals.gridWidth)) {
                    var r120 = this.offY + a187.config.xaxis.axisTicks.offsetY;
                    if (e312 = e312 + r120 + a187.config.xaxis.axisTicks.height, "top" === a187.config.xaxis.position && (e312 = r120 - a187.config.xaxis.axisTicks.height), a187.config.xaxis.axisTicks.show) {
                        var o104 = new m(this.ctx).drawLine(t413 + a187.config.xaxis.axisTicks.offsetX, r120 + a187.config.xaxis.offsetY, s141 + a187.config.xaxis.axisTicks.offsetX, e312 + a187.config.xaxis.offsetY, a187.config.xaxis.axisTicks.color);
                        i229.add(o104), o104.node.classList.add("apexcharts-xaxis-tick");
                    }
                }
            }
        },
        {
            key: "getXAxisTicksPositions",
            value: function() {
                var t414 = this.w, e313 = [], i230 = this.xaxisLabels.length, a188 = t414.globals.padHorizontal;
                if (t414.globals.timescaleLabels.length > 0) for(var s142 = 0; s142 < i230; s142++)a188 = this.xaxisLabels[s142].position, e313.push(a188);
                else for(var r121 = i230, o105 = 0; o105 < r121; o105++){
                    var n92 = r121;
                    t414.globals.isXNumeric && "bar" !== t414.config.chart.type && (n92 -= 1), a188 += t414.globals.gridWidth / n92, e313.push(a188);
                }
                return e313;
            }
        },
        {
            key: "xAxisLabelCorrections",
            value: function() {
                var t415 = this.w, e314 = new m(this.ctx), i231 = t415.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"), a189 = t415.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)"), s143 = t415.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"), r122 = t415.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");
                if (t415.globals.rotateXLabels || t415.config.xaxis.labels.rotateAlways) for(var o106 = 0; o106 < a189.length; o106++){
                    var n93 = e314.rotateAroundCenter(a189[o106]);
                    n93.y = n93.y - 1, n93.x = n93.x + 1, a189[o106].setAttribute("transform", "rotate(".concat(t415.config.xaxis.labels.rotate, " ").concat(n93.x, " ").concat(n93.y, ")")), a189[o106].setAttribute("text-anchor", "end");
                    i231.setAttribute("transform", "translate(0, ".concat(-10, ")"));
                    var l72 = a189[o106].childNodes;
                    t415.config.xaxis.labels.trim && Array.prototype.forEach.call(l72, function(i232) {
                        e314.placeTextWithEllipsis(i232, i232.textContent, t415.globals.xAxisLabelsHeight - ("bottom" === t415.config.legend.position ? 20 : 10));
                    });
                }
                else !function() {
                    for(var i233 = t415.globals.gridWidth / (t415.globals.labels.length + 1), s144 = 0; s144 < a189.length; s144++){
                        var r123 = a189[s144].childNodes;
                        t415.config.xaxis.labels.trim && "datetime" !== t415.config.xaxis.type && Array.prototype.forEach.call(r123, function(t416) {
                            e314.placeTextWithEllipsis(t416, t416.textContent, i233);
                        });
                    }
                }();
                if (s143.length > 0) {
                    var h66 = s143[s143.length - 1].getBBox(), c58 = s143[0].getBBox();
                    h66.x < -20 && s143[s143.length - 1].parentNode.removeChild(s143[s143.length - 1]), c58.x + c58.width > t415.globals.gridWidth && !t415.globals.isBarHorizontal && s143[0].parentNode.removeChild(s143[0]);
                    for(var d51 = 0; d51 < r122.length; d51++)e314.placeTextWithEllipsis(r122[d51], r122[d51].textContent, t415.config.yaxis[0].labels.maxWidth - (t415.config.yaxis[0].title.text ? 2 * parseFloat(t415.config.yaxis[0].title.style.fontSize) : 0) - 15);
                }
            }
        }
    ]), t408;
}(), U = function() {
    function t417(e315) {
        a(this, t417), this.ctx = e315, this.w = e315.w;
        var i234 = this.w;
        this.xaxisLabels = i234.globals.labels.slice(), this.axesUtils = new G(e315), this.isRangeBar = i234.globals.seriesRangeBar.length, i234.globals.timescaleLabels.length > 0 && (this.xaxisLabels = i234.globals.timescaleLabels.slice());
    }
    return r(t417, [
        {
            key: "drawGridArea",
            value: function() {
                var t418 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e316 = this.w, i235 = new m(this.ctx);
                null === t418 && (t418 = i235.group({
                    class: "apexcharts-grid"
                }));
                var a190 = i235.drawLine(e316.globals.padHorizontal, 1, e316.globals.padHorizontal, e316.globals.gridHeight, "transparent"), s145 = i235.drawLine(e316.globals.padHorizontal, e316.globals.gridHeight, e316.globals.gridWidth, e316.globals.gridHeight, "transparent");
                return t418.add(s145), t418.add(a190), t418;
            }
        },
        {
            key: "drawGrid",
            value: function() {
                var t419 = null;
                return this.w.globals.axisCharts && (t419 = this.renderGrid(), this.drawGridArea(t419.el)), t419;
            }
        },
        {
            key: "createGridMask",
            value: function() {
                var t420 = this.w, e317 = t420.globals, i236 = new m(this.ctx), a191 = Array.isArray(t420.config.stroke.width) ? 0 : t420.config.stroke.width;
                if (Array.isArray(t420.config.stroke.width)) {
                    var s146 = 0;
                    t420.config.stroke.width.forEach(function(t421) {
                        s146 = Math.max(s146, t421);
                    }), a191 = s146;
                }
                e317.dom.elGridRectMask = document.createElementNS(e317.SVGNS, "clipPath"), e317.dom.elGridRectMask.setAttribute("id", "gridRectMask".concat(e317.cuid)), e317.dom.elGridRectMarkerMask = document.createElementNS(e317.SVGNS, "clipPath"), e317.dom.elGridRectMarkerMask.setAttribute("id", "gridRectMarkerMask".concat(e317.cuid)), e317.dom.elForecastMask = document.createElementNS(e317.SVGNS, "clipPath"), e317.dom.elForecastMask.setAttribute("id", "forecastMask".concat(e317.cuid)), e317.dom.elNonForecastMask = document.createElementNS(e317.SVGNS, "clipPath"), e317.dom.elNonForecastMask.setAttribute("id", "nonForecastMask".concat(e317.cuid));
                var r124 = t420.config.chart.type, o107 = 0, n94 = 0;
                ("bar" === r124 || "rangeBar" === r124 || "candlestick" === r124 || "boxPlot" === r124 || t420.globals.comboBarCount > 0) && t420.globals.isXNumeric && !t420.globals.isBarHorizontal && (o107 = t420.config.grid.padding.left, n94 = t420.config.grid.padding.right, e317.barPadForNumericAxis > o107 && (o107 = e317.barPadForNumericAxis, n94 = e317.barPadForNumericAxis)), e317.dom.elGridRect = i236.drawRect(-a191 / 2 - o107 - 2, -a191 / 2, e317.gridWidth + a191 + n94 + o107 + 4, e317.gridHeight + a191, 0, "#fff");
                var l73 = t420.globals.markers.largestSize + 1;
                e317.dom.elGridRectMarker = i236.drawRect(2 * -l73, 2 * -l73, e317.gridWidth + 4 * l73, e317.gridHeight + 4 * l73, 0, "#fff"), e317.dom.elGridRectMask.appendChild(e317.dom.elGridRect.node), e317.dom.elGridRectMarkerMask.appendChild(e317.dom.elGridRectMarker.node);
                var h67 = e317.dom.baseEl.querySelector("defs");
                h67.appendChild(e317.dom.elGridRectMask), h67.appendChild(e317.dom.elForecastMask), h67.appendChild(e317.dom.elNonForecastMask), h67.appendChild(e317.dom.elGridRectMarkerMask);
            }
        },
        {
            key: "_drawGridLines",
            value: function(t422) {
                var e318 = t422.i, i237 = t422.x1, a192 = t422.y1, s147 = t422.x2, r125 = t422.y2, o108 = t422.xCount, n95 = t422.parent, l74 = this.w;
                if (!(0 === e318 && l74.globals.skipFirstTimelinelabel || e318 === o108 - 1 && l74.globals.skipLastTimelinelabel && !l74.config.xaxis.labels.formatter || "radar" === l74.config.chart.type)) {
                    l74.config.grid.xaxis.lines.show && this._drawGridLine({
                        x1: i237,
                        y1: a192,
                        x2: s147,
                        y2: r125,
                        parent: n95
                    });
                    var h68 = 0;
                    if (l74.globals.hasGroups && "between" === l74.config.xaxis.tickPlacement) {
                        var c59 = l74.globals.groups;
                        if (c59) {
                            for(var d52 = 0, g46 = 0; d52 < e318 && g46 < c59.length; g46++)d52 += c59[g46].cols;
                            d52 === e318 && (h68 = .6 * l74.globals.xAxisLabelsHeight);
                        }
                    }
                    new _(this.ctx).drawXaxisTicks(i237, h68, this.elg);
                }
            }
        },
        {
            key: "_drawGridLine",
            value: function(t423) {
                var e319 = t423.x1, i238 = t423.y1, a193 = t423.x2, s148 = t423.y2, r126 = t423.parent, o109 = this.w, n96 = r126.node.classList.contains("apexcharts-gridlines-horizontal"), l75 = o109.config.grid.strokeDashArray, h69 = o109.globals.barPadForNumericAxis, c60 = new m(this).drawLine(e319 - (n96 ? h69 : 0), i238, a193 + (n96 ? h69 : 0), s148, o109.config.grid.borderColor, l75);
                c60.node.classList.add("apexcharts-gridline"), r126.add(c60);
            }
        },
        {
            key: "_drawGridBandRect",
            value: function(t424) {
                var e320 = t424.c, i239 = t424.x1, a194 = t424.y1, s149 = t424.x2, r127 = t424.y2, o110 = t424.type, n97 = this.w, l76 = new m(this.ctx), h70 = n97.globals.barPadForNumericAxis;
                if ("column" !== o110 || "datetime" !== n97.config.xaxis.type) {
                    var c61 = n97.config.grid[o110].colors[e320], d53 = l76.drawRect(i239 - ("row" === o110 ? h70 : 0), a194, s149 + ("row" === o110 ? 2 * h70 : 0), r127, 0, c61, n97.config.grid[o110].opacity);
                    this.elg.add(d53), d53.attr("clip-path", "url(#gridRectMask".concat(n97.globals.cuid, ")")), d53.node.classList.add("apexcharts-grid-".concat(o110));
                }
            }
        },
        {
            key: "_drawXYLines",
            value: function(t425) {
                var e321 = this, i240 = t425.xCount, a195 = t425.tickAmount, s150 = this.w;
                if (s150.config.grid.xaxis.lines.show || s150.config.xaxis.axisTicks.show) {
                    var r128, o111 = s150.globals.padHorizontal, n98 = s150.globals.gridHeight;
                    s150.globals.timescaleLabels.length ? function(t426) {
                        for(var a196 = t426.xC, s151 = t426.x1, r130 = t426.y1, o113 = t426.x2, n100 = t426.y2, l78 = 0; l78 < a196; l78++)s151 = e321.xaxisLabels[l78].position, o113 = e321.xaxisLabels[l78].position, e321._drawGridLines({
                            i: l78,
                            x1: s151,
                            y1: r130,
                            x2: o113,
                            y2: n100,
                            xCount: i240,
                            parent: e321.elgridLinesV
                        });
                    }({
                        xC: i240,
                        x1: o111,
                        y1: 0,
                        x2: r128,
                        y2: n98
                    }) : (s150.globals.isXNumeric && (i240 = s150.globals.xAxisScale.result.length), s150.config.xaxis.convertedCatToNumeric && (i240 = s150.globals.xaxisLabelsCount), function(t427) {
                        var a197 = t427.xC, r131 = t427.x1, o114 = t427.y1, n101 = t427.x2, l79 = t427.y2;
                        if (void 0 !== s150.config.xaxis.tickAmount && "dataPoints" !== s150.config.xaxis.tickAmount && "on" === s150.config.xaxis.tickPlacement) s150.globals.dom.baseEl.querySelectorAll(".apexcharts-text.apexcharts-xaxis-label tspan:not(:empty)").forEach(function(t428, a198) {
                            var s152 = t428.getBBox();
                            e321._drawGridLines({
                                i: a198,
                                x1: s152.x + s152.width / 2,
                                y1: o114,
                                x2: s152.x + s152.width / 2,
                                y2: l79,
                                xCount: i240,
                                parent: e321.elgridLinesV
                            });
                        });
                        else for(var h72 = 0; h72 < a197 + (s150.globals.isXNumeric ? 0 : 1); h72++)0 === h72 && 1 === a197 && 1 === s150.globals.dataPoints && (n101 = r131 = s150.globals.gridWidth / 2), e321._drawGridLines({
                            i: h72,
                            x1: r131,
                            y1: o114,
                            x2: n101,
                            y2: l79,
                            xCount: i240,
                            parent: e321.elgridLinesV
                        }), n101 = r131 += s150.globals.gridWidth / (s150.globals.isXNumeric ? a197 - 1 : a197);
                    }({
                        xC: i240,
                        x1: o111,
                        y1: 0,
                        x2: r128,
                        y2: n98
                    }));
                }
                if (s150.config.grid.yaxis.lines.show) {
                    var l77 = 0, h71 = 0, c62 = s150.globals.gridWidth, d54 = a195 + 1;
                    this.isRangeBar && (d54 = s150.globals.labels.length);
                    for(var g47 = 0; g47 < d54 + (this.isRangeBar ? 1 : 0); g47++)this._drawGridLine({
                        x1: 0,
                        y1: l77,
                        x2: c62,
                        y2: h71,
                        parent: this.elgridLinesH
                    }), h71 = l77 += s150.globals.gridHeight / (this.isRangeBar ? d54 : a195);
                }
            }
        },
        {
            key: "_drawInvertedXYLines",
            value: function(t429) {
                var e322 = t429.xCount, i241 = this.w;
                if (i241.config.grid.xaxis.lines.show || i241.config.xaxis.axisTicks.show) for(var a199, s153 = i241.globals.padHorizontal, r132 = i241.globals.gridHeight, o115 = 0; o115 < e322 + 1; o115++)i241.config.grid.xaxis.lines.show && this._drawGridLine({
                    x1: s153,
                    y1: 0,
                    x2: a199,
                    y2: r132,
                    parent: this.elgridLinesV
                }), new _(this.ctx).drawXaxisTicks(s153, 0, this.elg), a199 = s153 = s153 + i241.globals.gridWidth / e322 + .3;
                if (i241.config.grid.yaxis.lines.show) for(var n102 = 0, l80 = 0, h73 = i241.globals.gridWidth, c63 = 0; c63 < i241.globals.dataPoints + 1; c63++)this._drawGridLine({
                    x1: 0,
                    y1: n102,
                    x2: h73,
                    y2: l80,
                    parent: this.elgridLinesH
                }), l80 = n102 += i241.globals.gridHeight / i241.globals.dataPoints;
            }
        },
        {
            key: "renderGrid",
            value: function() {
                var t430 = this.w, e323 = new m(this.ctx);
                this.elg = e323.group({
                    class: "apexcharts-grid"
                }), this.elgridLinesH = e323.group({
                    class: "apexcharts-gridlines-horizontal"
                }), this.elgridLinesV = e323.group({
                    class: "apexcharts-gridlines-vertical"
                }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t430.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide());
                for(var i242, a200 = t430.globals.yAxisScale.length ? t430.globals.yAxisScale[0].result.length - 1 : 5, s154 = 0; s154 < t430.globals.series.length && (void 0 !== t430.globals.yAxisScale[s154] && (a200 = t430.globals.yAxisScale[s154].result.length - 1), !(a200 > 2)); s154++);
                return !t430.globals.isBarHorizontal || this.isRangeBar ? (i242 = this.xaxisLabels.length, this.isRangeBar && (a200 = t430.globals.labels.length, t430.config.xaxis.tickAmount && t430.config.xaxis.labels.formatter && (i242 = t430.config.xaxis.tickAmount)), this._drawXYLines({
                    xCount: i242,
                    tickAmount: a200
                })) : (i242 = a200, a200 = t430.globals.xTickAmount, this._drawInvertedXYLines({
                    xCount: i242,
                    tickAmount: a200
                })), this.drawGridBands(i242, a200), {
                    el: this.elg,
                    xAxisTickWidth: t430.globals.gridWidth / i242
                };
            }
        },
        {
            key: "drawGridBands",
            value: function(t431, e324) {
                var i243 = this.w;
                if (void 0 !== i243.config.grid.row.colors && i243.config.grid.row.colors.length > 0) for(var a201 = 0, s155 = i243.globals.gridHeight / e324, r133 = i243.globals.gridWidth, o116 = 0, n103 = 0; o116 < e324; o116++, n103++)n103 >= i243.config.grid.row.colors.length && (n103 = 0), this._drawGridBandRect({
                    c: n103,
                    x1: 0,
                    y1: a201,
                    x2: r133,
                    y2: s155,
                    type: "row"
                }), a201 += i243.globals.gridHeight / e324;
                if (void 0 !== i243.config.grid.column.colors && i243.config.grid.column.colors.length > 0) for(var l81 = i243.globals.isBarHorizontal || "category" !== i243.config.xaxis.type && !i243.config.xaxis.convertedCatToNumeric ? t431 : t431 - 1, h74 = i243.globals.padHorizontal, c64 = i243.globals.padHorizontal + i243.globals.gridWidth / l81, d55 = i243.globals.gridHeight, g48 = 0, u37 = 0; g48 < t431; g48++, u37++)u37 >= i243.config.grid.column.colors.length && (u37 = 0), this._drawGridBandRect({
                    c: u37,
                    x1: h74,
                    y1: 0,
                    x2: c64,
                    y2: d55,
                    type: "column"
                }), h74 += i243.globals.gridWidth / l81;
            }
        }
    ]), t417;
}(), q = function() {
    function t432(e325) {
        a(this, t432), this.ctx = e325, this.w = e325.w;
    }
    return r(t432, [
        {
            key: "niceScale",
            value: function(t433, e326) {
                var i244 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10, a202 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s156 = arguments.length > 4 ? arguments[4] : void 0, r134 = this.w, o117 = Math.abs(e326 - t433);
                if ("dataPoints" === (i244 = this._adjustTicksForSmallRange(i244, a202, o117)) && (i244 = r134.globals.dataPoints - 1), t433 === Number.MIN_VALUE && 0 === e326 || !x.isNumber(t433) && !x.isNumber(e326) || t433 === Number.MIN_VALUE && e326 === -Number.MAX_VALUE) {
                    t433 = 0, e326 = i244;
                    var n104 = this.linearScale(t433, e326, i244);
                    return n104;
                }
                t433 > e326 ? (console.warn("axis.min cannot be greater than axis.max"), e326 = t433 + .1) : t433 === e326 && (t433 = 0 === t433 ? 0 : t433 - .5, e326 = 0 === e326 ? 2 : e326 + .5);
                var l82 = [];
                o117 < 1 && s156 && ("candlestick" === r134.config.chart.type || "candlestick" === r134.config.series[a202].type || "boxPlot" === r134.config.chart.type || "boxPlot" === r134.config.series[a202].type || r134.globals.isRangeData) && (e326 *= 1.01);
                var h75 = i244 + 1;
                h75 < 2 ? h75 = 2 : h75 > 2 && (h75 -= 2);
                var c65 = o117 / h75, d56 = Math.floor(x.log10(c65)), g49 = Math.pow(10, d56), u38 = Math.round(c65 / g49);
                u38 < 1 && (u38 = 1);
                var f32 = u38 * g49, p29 = f32 * Math.floor(t433 / f32), b23 = f32 * Math.ceil(e326 / f32), v16 = p29;
                if (s156 && o117 > 2) {
                    for(; l82.push(v16), !((v16 += f32) > b23););
                    return {
                        result: l82,
                        niceMin: l82[0],
                        niceMax: l82[l82.length - 1]
                    };
                }
                var m6 = t433;
                (l82 = []).push(m6);
                for(var y16 = Math.abs(e326 - t433) / i244, w13 = 0; w13 <= i244; w13++)m6 += y16, l82.push(m6);
                return l82[l82.length - 2] >= e326 && l82.pop(), {
                    result: l82,
                    niceMin: l82[0],
                    niceMax: l82[l82.length - 1]
                };
            }
        },
        {
            key: "linearScale",
            value: function(t434, e327) {
                var i245 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10, a203 = arguments.length > 3 ? arguments[3] : void 0, s157 = Math.abs(e327 - t434);
                "dataPoints" === (i245 = this._adjustTicksForSmallRange(i245, a203, s157)) && (i245 = this.w.globals.dataPoints - 1);
                var r135 = s157 / i245;
                i245 === Number.MAX_VALUE && (i245 = 10, r135 = 1);
                for(var o118 = [], n105 = t434; i245 >= 0;)o118.push(n105), n105 += r135, i245 -= 1;
                return {
                    result: o118,
                    niceMin: o118[0],
                    niceMax: o118[o118.length - 1]
                };
            }
        },
        {
            key: "logarithmicScaleNice",
            value: function(t435, e328, i246) {
                e328 <= 0 && (e328 = Math.max(t435, i246)), t435 <= 0 && (t435 = Math.min(e328, i246));
                for(var a204 = [], s158 = Math.ceil(Math.log(e328) / Math.log(i246) + 1), r136 = Math.floor(Math.log(t435) / Math.log(i246)); r136 < s158; r136++)a204.push(Math.pow(i246, r136));
                return {
                    result: a204,
                    niceMin: a204[0],
                    niceMax: a204[a204.length - 1]
                };
            }
        },
        {
            key: "logarithmicScale",
            value: function(t436, e329, i247) {
                e329 <= 0 && (e329 = Math.max(t436, i247)), t436 <= 0 && (t436 = Math.min(e329, i247));
                for(var a205 = [], s159 = Math.log(e329) / Math.log(i247), r137 = Math.log(t436) / Math.log(i247), o119 = s159 - r137, n106 = Math.round(o119), l83 = o119 / n106, h76 = 0, c66 = r137; h76 < n106; h76++, c66 += l83)a205.push(Math.pow(i247, c66));
                return a205.push(Math.pow(i247, s159)), {
                    result: a205,
                    niceMin: t436,
                    niceMax: e329
                };
            }
        },
        {
            key: "_adjustTicksForSmallRange",
            value: function(t437, e330, i248) {
                var a206 = t437;
                if (void 0 !== e330 && this.w.config.yaxis[e330].labels.formatter && void 0 === this.w.config.yaxis[e330].tickAmount) {
                    var s160 = this.w.config.yaxis[e330].labels.formatter(1);
                    x.isNumber(Number(s160)) && !x.isFloat(s160) && (a206 = Math.ceil(i248));
                }
                return a206 < t437 ? a206 : t437;
            }
        },
        {
            key: "setYScaleForIndex",
            value: function(t438, e331, i249) {
                var a207 = this.w.globals, s161 = this.w.config, r138 = a207.isBarHorizontal ? s161.xaxis : s161.yaxis[t438];
                void 0 === a207.yAxisScale[t438] && (a207.yAxisScale[t438] = []);
                var o120 = Math.abs(i249 - e331);
                if (r138.logarithmic && o120 <= 5 && (a207.invalidLogScale = !0), r138.logarithmic && o120 > 5) a207.allSeriesCollapsed = !1, a207.yAxisScale[t438] = this.logarithmicScale(e331, i249, r138.logBase), a207.yAxisScale[t438] = r138.forceNiceScale ? this.logarithmicScaleNice(e331, i249, r138.logBase) : this.logarithmicScale(e331, i249, r138.logBase);
                else if (i249 !== -Number.MAX_VALUE && x.isNumber(i249)) {
                    if (a207.allSeriesCollapsed = !1, void 0 === r138.min && void 0 === r138.max || r138.forceNiceScale) {
                        var n107 = void 0 === s161.yaxis[t438].max && void 0 === s161.yaxis[t438].min || s161.yaxis[t438].forceNiceScale;
                        a207.yAxisScale[t438] = this.niceScale(e331, i249, r138.tickAmount ? r138.tickAmount : o120 < 5 && o120 > 1 ? o120 + 1 : 5, t438, n107);
                    } else a207.yAxisScale[t438] = this.linearScale(e331, i249, r138.tickAmount, t438);
                } else a207.yAxisScale[t438] = this.linearScale(0, 5, 5);
            }
        },
        {
            key: "setXScale",
            value: function(t439, e332) {
                var i250 = this.w, a208 = i250.globals, s162 = i250.config.xaxis, r139 = Math.abs(e332 - t439);
                return e332 !== -Number.MAX_VALUE && x.isNumber(e332) ? a208.xAxisScale = this.linearScale(t439, e332, s162.tickAmount ? s162.tickAmount : r139 < 5 && r139 > 1 ? r139 + 1 : 5, 0) : a208.xAxisScale = this.linearScale(0, 5, 5), a208.xAxisScale;
            }
        },
        {
            key: "setMultipleYScales",
            value: function() {
                var t440 = this, e333 = this.w.globals, i251 = this.w.config, a209 = e333.minYArr.concat([]), s163 = e333.maxYArr.concat([]), r140 = [];
                i251.yaxis.forEach(function(e334, o121) {
                    var n108 = o121;
                    i251.series.forEach(function(t441, i252) {
                        t441.name === e334.seriesName && (n108 = i252, o121 !== i252 ? r140.push({
                            index: i252,
                            similarIndex: o121,
                            alreadyExists: !0
                        }) : r140.push({
                            index: i252
                        }));
                    });
                    var l84 = a209[n108], h77 = s163[n108];
                    t440.setYScaleForIndex(o121, l84, h77);
                }), this.sameScaleInMultipleAxes(a209, s163, r140);
            }
        },
        {
            key: "sameScaleInMultipleAxes",
            value: function(t442, e335, i253) {
                var a210 = this, s164 = this.w.config, r141 = this.w.globals, o122 = [];
                i253.forEach(function(t443) {
                    t443.alreadyExists && (void 0 === o122[t443.index] && (o122[t443.index] = []), o122[t443.index].push(t443.index), o122[t443.index].push(t443.similarIndex));
                }), r141.yAxisSameScaleIndices = o122, o122.forEach(function(t444, e336) {
                    o122.forEach(function(i254, a211) {
                        var s165, r142;
                        e336 !== a211 && (s165 = t444, r142 = i254, s165.filter(function(t445) {
                            return -1 !== r142.indexOf(t445);
                        })).length > 0 && (o122[e336] = o122[e336].concat(o122[a211]));
                    });
                });
                var n109 = o122.map(function(t446) {
                    return t446.filter(function(e337, i255) {
                        return t446.indexOf(e337) === i255;
                    });
                }).map(function(t447) {
                    return t447.sort();
                });
                o122 = o122.filter(function(t448) {
                    return !!t448;
                });
                var l85 = n109.slice(), h78 = l85.map(function(t449) {
                    return JSON.stringify(t449);
                });
                l85 = l85.filter(function(t450, e338) {
                    return h78.indexOf(JSON.stringify(t450)) === e338;
                });
                var c67 = [], d57 = [];
                t442.forEach(function(t451, i256) {
                    l85.forEach(function(a212, s166) {
                        a212.indexOf(i256) > -1 && (void 0 === c67[s166] && (c67[s166] = [], d57[s166] = []), c67[s166].push({
                            key: i256,
                            value: t451
                        }), d57[s166].push({
                            key: i256,
                            value: e335[i256]
                        }));
                    });
                });
                var g50 = Array.apply(null, Array(l85.length)).map(Number.prototype.valueOf, Number.MIN_VALUE), u39 = Array.apply(null, Array(l85.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);
                c67.forEach(function(t452, e339) {
                    t452.forEach(function(t453, i) {
                        g50[e339] = Math.min(t453.value, g50[e339]);
                    });
                }), d57.forEach(function(t454, e340) {
                    t454.forEach(function(t455, i) {
                        u39[e340] = Math.max(t455.value, u39[e340]);
                    });
                }), t442.forEach(function(t456, e341) {
                    d57.forEach(function(t457, i257) {
                        var o123 = g50[i257], n110 = u39[i257];
                        s164.chart.stacked && (n110 = 0, t457.forEach(function(t458, e342) {
                            t458.value !== -Number.MAX_VALUE && (n110 += t458.value), o123 !== Number.MIN_VALUE && (o123 += c67[i257][e342].value);
                        })), t457.forEach(function(i, l86) {
                            t457[l86].key === e341 && (void 0 !== s164.yaxis[e341].min && (o123 = "function" == typeof s164.yaxis[e341].min ? s164.yaxis[e341].min(r141.minY) : s164.yaxis[e341].min), void 0 !== s164.yaxis[e341].max && (n110 = "function" == typeof s164.yaxis[e341].max ? s164.yaxis[e341].max(r141.maxY) : s164.yaxis[e341].max), a210.setYScaleForIndex(e341, o123, n110));
                        });
                    });
                });
            }
        },
        {
            key: "autoScaleY",
            value: function(t459, e343, i258) {
                t459 || (t459 = this);
                var a213 = t459.w;
                if (a213.globals.isMultipleYAxis || a213.globals.collapsedSeries.length) return console.warn("autoScaleYaxis is not supported in a multi-yaxis chart."), e343;
                var s167 = a213.globals.seriesX[0], r143 = a213.config.chart.stacked;
                return e343.forEach(function(t460, o124) {
                    for(var n111 = 0, l87 = 0; l87 < s167.length; l87++)if (s167[l87] >= i258.xaxis.min) {
                        n111 = l87;
                        break;
                    }
                    var h79, c68, d58 = a213.globals.minYArr[o124], g51 = a213.globals.maxYArr[o124], u40 = a213.globals.stackedSeriesTotals;
                    a213.globals.series.forEach(function(o125, l88) {
                        var f33 = o125[n111];
                        r143 ? (f33 = u40[n111], h79 = c68 = f33, u40.forEach(function(t461, e344) {
                            s167[e344] <= i258.xaxis.max && s167[e344] >= i258.xaxis.min && (t461 > c68 && null !== t461 && (c68 = t461), o125[e344] < h79 && null !== o125[e344] && (h79 = o125[e344]));
                        })) : (h79 = c68 = f33, o125.forEach(function(t462, e345) {
                            if (s167[e345] <= i258.xaxis.max && s167[e345] >= i258.xaxis.min) {
                                var r144 = t462, o126 = t462;
                                a213.globals.series.forEach(function(i259, a) {
                                    null !== t462 && (r144 = Math.min(i259[e345], r144), o126 = Math.max(i259[e345], o126));
                                }), o126 > c68 && null !== o126 && (c68 = o126), r144 < h79 && null !== r144 && (h79 = r144);
                            }
                        })), void 0 === h79 && void 0 === c68 && (h79 = d58, c68 = g51), c68 *= c68 < 0 ? .9 : 1.1, 0 === (h79 *= h79 < 0 ? 1.1 : .9) && 0 === c68 && (h79 = -1, c68 = 1), c68 < 0 && c68 < g51 && (c68 = g51), h79 < 0 && h79 > d58 && (h79 = d58), e343.length > 1 ? (e343[l88].min = void 0 === t460.min ? h79 : t460.min, e343[l88].max = void 0 === t460.max ? c68 : t460.max) : (e343[0].min = void 0 === t460.min ? h79 : t460.min, e343[0].max = void 0 === t460.max ? c68 : t460.max);
                    });
                }), e343;
            }
        }
    ]), t432;
}(), Z = function() {
    function t463(e346) {
        a(this, t463), this.ctx = e346, this.w = e346.w, this.scales = new q(e346);
    }
    return r(t463, [
        {
            key: "init",
            value: function() {
                this.setYRange(), this.setXRange(), this.setZRange();
            }
        },
        {
            key: "getMinYMaxY",
            value: function(t464) {
                var e347 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE, i260 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE, a214 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s168 = this.w.config, r145 = this.w.globals, o127 = -Number.MAX_VALUE, n112 = Number.MIN_VALUE;
                null === a214 && (a214 = t464 + 1);
                var l89 = r145.series, h80 = l89, c69 = l89;
                "candlestick" === s168.chart.type ? (h80 = r145.seriesCandleL, c69 = r145.seriesCandleH) : "boxPlot" === s168.chart.type ? (h80 = r145.seriesCandleO, c69 = r145.seriesCandleC) : r145.isRangeData && (h80 = r145.seriesRangeStart, c69 = r145.seriesRangeEnd);
                for(var d59 = t464; d59 < a214; d59++){
                    r145.dataPoints = Math.max(r145.dataPoints, l89[d59].length), r145.categoryLabels.length && (r145.dataPoints = r145.categoryLabels.filter(function(t465) {
                        return void 0 !== t465;
                    }).length);
                    for(var g52 = 0; g52 < r145.series[d59].length; g52++){
                        var u41 = l89[d59][g52];
                        null !== u41 && x.isNumber(u41) ? (void 0 !== c69[d59][g52] && (o127 = Math.max(o127, c69[d59][g52]), e347 = Math.min(e347, c69[d59][g52])), void 0 !== h80[d59][g52] && (e347 = Math.min(e347, h80[d59][g52]), i260 = Math.max(i260, h80[d59][g52])), "candlestick" !== this.w.config.chart.type && "boxPlot" !== this.w.config.chart.type || (void 0 !== r145.seriesCandleC[d59][g52] && (o127 = Math.max(o127, r145.seriesCandleO[d59][g52]), o127 = Math.max(o127, r145.seriesCandleH[d59][g52]), o127 = Math.max(o127, r145.seriesCandleL[d59][g52]), o127 = Math.max(o127, r145.seriesCandleC[d59][g52]), "boxPlot" === this.w.config.chart.type && (o127 = Math.max(o127, r145.seriesCandleM[d59][g52]))), !s168.series[d59].type || "candlestick" === s168.series[d59].type && "boxPlot" === s168.series[d59].type || (o127 = Math.max(o127, r145.series[d59][g52]), e347 = Math.min(e347, r145.series[d59][g52])), i260 = o127), r145.seriesGoals[d59] && r145.seriesGoals[d59][g52] && Array.isArray(r145.seriesGoals[d59][g52]) && r145.seriesGoals[d59][g52].forEach(function(t466) {
                            n112 !== Number.MIN_VALUE && (n112 = Math.min(n112, t466.value), e347 = n112), o127 = Math.max(o127, t466.value), i260 = o127;
                        }), x.isFloat(u41) && (u41 = x.noExponents(u41), r145.yValueDecimal = Math.max(r145.yValueDecimal, u41.toString().split(".")[1].length)), n112 > h80[d59][g52] && h80[d59][g52] < 0 && (n112 = h80[d59][g52])) : r145.hasNullValues = !0;
                    }
                }
                return "rangeBar" === s168.chart.type && r145.seriesRangeStart.length && r145.isBarHorizontal && (n112 = e347), "bar" === s168.chart.type && (n112 < 0 && o127 < 0 && (o127 = 0), n112 === Number.MIN_VALUE && (n112 = 0)), {
                    minY: n112,
                    maxY: o127,
                    lowestY: e347,
                    highestY: i260
                };
            }
        },
        {
            key: "setYRange",
            value: function() {
                var t467 = this.w.globals, e348 = this.w.config;
                t467.maxY = -Number.MAX_VALUE, t467.minY = Number.MIN_VALUE;
                var i261 = Number.MAX_VALUE;
                if (t467.isMultipleYAxis) for(var a215 = 0; a215 < t467.series.length; a215++){
                    var s169 = this.getMinYMaxY(a215, i261, null, a215 + 1);
                    t467.minYArr.push(s169.minY), t467.maxYArr.push(s169.maxY), i261 = s169.lowestY;
                }
                var r146 = this.getMinYMaxY(0, i261, null, t467.series.length);
                if (t467.minY = r146.minY, t467.maxY = r146.maxY, i261 = r146.lowestY, e348.chart.stacked && this._setStackedMinMax(), ("line" === e348.chart.type || "area" === e348.chart.type || "candlestick" === e348.chart.type || "boxPlot" === e348.chart.type || "rangeBar" === e348.chart.type && !t467.isBarHorizontal) && t467.minY === Number.MIN_VALUE && i261 !== -Number.MAX_VALUE && i261 !== t467.maxY) {
                    var o128 = t467.maxY - i261;
                    (i261 >= 0 && i261 <= 10 || void 0 !== e348.yaxis[0].min || void 0 !== e348.yaxis[0].max) && (o128 = 0), t467.minY = i261 - 5 * o128 / 100, i261 > 0 && t467.minY < 0 && (t467.minY = 0), t467.maxY = t467.maxY + 5 * o128 / 100;
                }
                if (e348.yaxis.forEach(function(e349, i262) {
                    void 0 !== e349.max && ("number" == typeof e349.max ? t467.maxYArr[i262] = e349.max : "function" == typeof e349.max && (t467.maxYArr[i262] = e349.max(t467.isMultipleYAxis ? t467.maxYArr[i262] : t467.maxY)), t467.maxY = t467.maxYArr[i262]), void 0 !== e349.min && ("number" == typeof e349.min ? t467.minYArr[i262] = e349.min : "function" == typeof e349.min && (t467.minYArr[i262] = e349.min(t467.isMultipleYAxis ? t467.minYArr[i262] === Number.MIN_VALUE ? 0 : t467.minYArr[i262] : t467.minY)), t467.minY = t467.minYArr[i262]);
                }), t467.isBarHorizontal) [
                    "min",
                    "max"
                ].forEach(function(i263) {
                    void 0 !== e348.xaxis[i263] && "number" == typeof e348.xaxis[i263] && ("min" === i263 ? t467.minY = e348.xaxis[i263] : t467.maxY = e348.xaxis[i263]);
                });
                return t467.isMultipleYAxis ? (this.scales.setMultipleYScales(), t467.minY = i261, t467.yAxisScale.forEach(function(e350, i264) {
                    t467.minYArr[i264] = e350.niceMin, t467.maxYArr[i264] = e350.niceMax;
                })) : (this.scales.setYScaleForIndex(0, t467.minY, t467.maxY), t467.minY = t467.yAxisScale[0].niceMin, t467.maxY = t467.yAxisScale[0].niceMax, t467.minYArr[0] = t467.yAxisScale[0].niceMin, t467.maxYArr[0] = t467.yAxisScale[0].niceMax), {
                    minY: t467.minY,
                    maxY: t467.maxY,
                    minYArr: t467.minYArr,
                    maxYArr: t467.maxYArr,
                    yAxisScale: t467.yAxisScale
                };
            }
        },
        {
            key: "setXRange",
            value: function() {
                var t468 = this.w.globals, e351 = this.w.config, i265 = "numeric" === e351.xaxis.type || "datetime" === e351.xaxis.type || "category" === e351.xaxis.type && !t468.noLabelsProvided || t468.noLabelsProvided || t468.isXNumeric;
                if (t468.isXNumeric && function() {
                    for(var e352 = 0; e352 < t468.series.length; e352++)if (t468.labels[e352]) for(var i266 = 0; i266 < t468.labels[e352].length; i266++)null !== t468.labels[e352][i266] && x.isNumber(t468.labels[e352][i266]) && (t468.maxX = Math.max(t468.maxX, t468.labels[e352][i266]), t468.initialMaxX = Math.max(t468.maxX, t468.labels[e352][i266]), t468.minX = Math.min(t468.minX, t468.labels[e352][i266]), t468.initialMinX = Math.min(t468.minX, t468.labels[e352][i266]));
                }(), t468.noLabelsProvided && 0 === e351.xaxis.categories.length && (t468.maxX = t468.labels[t468.labels.length - 1], t468.initialMaxX = t468.labels[t468.labels.length - 1], t468.minX = 1, t468.initialMinX = 1), t468.isXNumeric || t468.noLabelsProvided || t468.dataFormatXNumeric) {
                    var a216;
                    if (void 0 === e351.xaxis.tickAmount ? (a216 = Math.round(t468.svgWidth / 150), "numeric" === e351.xaxis.type && t468.dataPoints < 30 && (a216 = t468.dataPoints - 1), a216 > t468.dataPoints && 0 !== t468.dataPoints && (a216 = t468.dataPoints - 1)) : "dataPoints" === e351.xaxis.tickAmount ? (t468.series.length > 1 && (a216 = t468.series[t468.maxValsInArrayIndex].length - 1), t468.isXNumeric && (a216 = t468.maxX - t468.minX - 1)) : a216 = e351.xaxis.tickAmount, t468.xTickAmount = a216, void 0 !== e351.xaxis.max && "number" == typeof e351.xaxis.max && (t468.maxX = e351.xaxis.max), void 0 !== e351.xaxis.min && "number" == typeof e351.xaxis.min && (t468.minX = e351.xaxis.min), void 0 !== e351.xaxis.range && (t468.minX = t468.maxX - e351.xaxis.range), t468.minX !== Number.MAX_VALUE && t468.maxX !== -Number.MAX_VALUE) {
                        if (e351.xaxis.convertedCatToNumeric && !t468.dataFormatXNumeric) {
                            for(var s170 = [], r147 = t468.minX - 1; r147 < t468.maxX; r147++)s170.push(r147 + 1);
                            t468.xAxisScale = {
                                result: s170,
                                niceMin: s170[0],
                                niceMax: s170[s170.length - 1]
                            };
                        } else t468.xAxisScale = this.scales.setXScale(t468.minX, t468.maxX);
                    } else t468.xAxisScale = this.scales.linearScale(1, a216, a216), t468.noLabelsProvided && t468.labels.length > 0 && (t468.xAxisScale = this.scales.linearScale(1, t468.labels.length, a216 - 1), t468.seriesX = t468.labels.slice());
                    i265 && (t468.labels = t468.xAxisScale.result.slice());
                }
                return t468.isBarHorizontal && t468.labels.length && (t468.xTickAmount = t468.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), {
                    minX: t468.minX,
                    maxX: t468.maxX
                };
            }
        },
        {
            key: "setZRange",
            value: function() {
                var t469 = this.w.globals;
                if (t469.isDataXYZ) {
                    for(var e353 = 0; e353 < t469.series.length; e353++)if (void 0 !== t469.seriesZ[e353]) for(var i267 = 0; i267 < t469.seriesZ[e353].length; i267++)null !== t469.seriesZ[e353][i267] && x.isNumber(t469.seriesZ[e353][i267]) && (t469.maxZ = Math.max(t469.maxZ, t469.seriesZ[e353][i267]), t469.minZ = Math.min(t469.minZ, t469.seriesZ[e353][i267]));
                }
            }
        },
        {
            key: "_handleSingleDataPoint",
            value: function() {
                var t470 = this.w.globals, e354 = this.w.config;
                if (t470.minX === t470.maxX) {
                    var i268 = new R(this.ctx);
                    if ("datetime" === e354.xaxis.type) {
                        var a217 = i268.getDate(t470.minX);
                        e354.xaxis.labels.datetimeUTC ? a217.setUTCDate(a217.getUTCDate() - 2) : a217.setDate(a217.getDate() - 2), t470.minX = new Date(a217).getTime();
                        var s171 = i268.getDate(t470.maxX);
                        e354.xaxis.labels.datetimeUTC ? s171.setUTCDate(s171.getUTCDate() + 2) : s171.setDate(s171.getDate() + 2), t470.maxX = new Date(s171).getTime();
                    } else ("numeric" === e354.xaxis.type || "category" === e354.xaxis.type && !t470.noLabelsProvided) && (t470.minX = t470.minX - 2, t470.initialMinX = t470.minX, t470.maxX = t470.maxX + 2, t470.initialMaxX = t470.maxX);
                }
            }
        },
        {
            key: "_getMinXDiff",
            value: function() {
                var t471 = this.w.globals;
                t471.isXNumeric && t471.seriesX.forEach(function(e355, i269) {
                    1 === e355.length && e355.push(t471.seriesX[t471.maxValsInArrayIndex][t471.seriesX[t471.maxValsInArrayIndex].length - 1]);
                    var a218 = e355.slice();
                    a218.sort(function(t472, e356) {
                        return t472 - e356;
                    }), a218.forEach(function(e357, i270) {
                        if (i270 > 0) {
                            var s172 = e357 - a218[i270 - 1];
                            s172 > 0 && (t471.minXDiff = Math.min(s172, t471.minXDiff));
                        }
                    }), 1 !== t471.dataPoints && t471.minXDiff !== Number.MAX_VALUE || (t471.minXDiff = .5);
                });
            }
        },
        {
            key: "_setStackedMinMax",
            value: function() {
                var t473 = this.w.globals, e358 = [], i271 = [];
                if (t473.series.length) for(var a219 = 0; a219 < t473.series[t473.maxValsInArrayIndex].length; a219++)for(var s173 = 0, r148 = 0, o129 = 0; o129 < t473.series.length; o129++)null !== t473.series[o129][a219] && x.isNumber(t473.series[o129][a219]) && (t473.series[o129][a219] > 0 ? s173 = s173 + parseFloat(t473.series[o129][a219]) + 1e-4 : r148 += parseFloat(t473.series[o129][a219])), o129 === t473.series.length - 1 && (e358.push(s173), i271.push(r148));
                for(var n113 = 0; n113 < e358.length; n113++)t473.maxY = Math.max(t473.maxY, e358[n113]), t473.minY = Math.min(t473.minY, i271[n113]);
            }
        }
    ]), t463;
}(), $ = function() {
    function t474(e359) {
        a(this, t474), this.ctx = e359, this.w = e359.w;
        var i272 = this.w;
        this.xaxisFontSize = i272.config.xaxis.labels.style.fontSize, this.axisFontFamily = i272.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = i272.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = "bar" === i272.config.chart.type && i272.config.plotOptions.bar.horizontal, this.xAxisoffX = 0, "bottom" === i272.config.xaxis.position && (this.xAxisoffX = i272.globals.gridHeight), this.drawnLabels = [], this.axesUtils = new G(e359);
    }
    return r(t474, [
        {
            key: "drawYaxis",
            value: function(t475) {
                var e360 = this, i273 = this.w, a220 = new m(this.ctx), s174 = i273.config.yaxis[t475].labels.style, r149 = s174.fontSize, o130 = s174.fontFamily, n114 = s174.fontWeight, l90 = a220.group({
                    class: "apexcharts-yaxis",
                    rel: t475,
                    transform: "translate(" + i273.globals.translateYAxisX[t475] + ", 0)"
                });
                if (this.axesUtils.isYAxisHidden(t475)) return l90;
                var h81 = a220.group({
                    class: "apexcharts-yaxis-texts-g"
                });
                l90.add(h81);
                var c70 = i273.globals.yAxisScale[t475].result.length - 1, d60 = i273.globals.gridHeight / c70, g53 = i273.globals.translateY, u42 = i273.globals.yLabelFormatters[t475], f34 = i273.globals.yAxisScale[t475].result.slice();
                f34 = this.axesUtils.checkForReversedLabels(t475, f34);
                var p30 = "";
                if (i273.config.yaxis[t475].labels.show) for(var x24 = function(l91) {
                    var x25 = f34[l91];
                    x25 = u42(x25, l91, i273);
                    var b25 = i273.config.yaxis[t475].labels.padding;
                    i273.config.yaxis[t475].opposite && 0 !== i273.config.yaxis.length && (b25 *= -1);
                    var v18 = e360.axesUtils.getYAxisForeColor(s174.colors, t475), m7 = a220.drawText({
                        x: b25,
                        y: g53 + c70 / 10 + i273.config.yaxis[t475].labels.offsetY + 1,
                        text: x25,
                        textAnchor: i273.config.yaxis[t475].opposite ? "start" : "end",
                        fontSize: r149,
                        fontFamily: o130,
                        fontWeight: n114,
                        maxWidth: i273.config.yaxis[t475].labels.maxWidth,
                        foreColor: Array.isArray(v18) ? v18[l91] : v18,
                        isPlainText: !1,
                        cssClass: "apexcharts-yaxis-label " + s174.cssClass
                    });
                    l91 === c70 && (p30 = m7), h81.add(m7);
                    var y18 = document.createElementNS(i273.globals.SVGNS, "title");
                    if (y18.textContent = Array.isArray(x25) ? x25.join(" ") : x25, m7.node.appendChild(y18), 0 !== i273.config.yaxis[t475].labels.rotate) {
                        var w15 = a220.rotateAroundCenter(p30.node), k14 = a220.rotateAroundCenter(m7.node);
                        m7.node.setAttribute("transform", "rotate(".concat(i273.config.yaxis[t475].labels.rotate, " ").concat(w15.x, " ").concat(k14.y, ")"));
                    }
                    g53 += d60;
                }, b24 = c70; b24 >= 0; b24--)x24(b24);
                if (void 0 !== i273.config.yaxis[t475].title.text) {
                    var v17 = a220.group({
                        class: "apexcharts-yaxis-title"
                    }), y17 = 0;
                    i273.config.yaxis[t475].opposite && (y17 = i273.globals.translateYAxisX[t475]);
                    var w14 = a220.drawText({
                        x: y17,
                        y: i273.globals.gridHeight / 2 + i273.globals.translateY + i273.config.yaxis[t475].title.offsetY,
                        text: i273.config.yaxis[t475].title.text,
                        textAnchor: "end",
                        foreColor: i273.config.yaxis[t475].title.style.color,
                        fontSize: i273.config.yaxis[t475].title.style.fontSize,
                        fontWeight: i273.config.yaxis[t475].title.style.fontWeight,
                        fontFamily: i273.config.yaxis[t475].title.style.fontFamily,
                        cssClass: "apexcharts-yaxis-title-text " + i273.config.yaxis[t475].title.style.cssClass
                    });
                    v17.add(w14), l90.add(v17);
                }
                var k13 = i273.config.yaxis[t475].axisBorder, A10 = 31 + k13.offsetX;
                if (i273.config.yaxis[t475].opposite && (A10 = -31 - k13.offsetX), k13.show) {
                    var S8 = a220.drawLine(A10, i273.globals.translateY + k13.offsetY - 2, A10, i273.globals.gridHeight + i273.globals.translateY + k13.offsetY + 2, k13.color, 0, k13.width);
                    l90.add(S8);
                }
                return i273.config.yaxis[t475].axisTicks.show && this.axesUtils.drawYAxisTicks(A10, c70, k13, i273.config.yaxis[t475].axisTicks, t475, d60, l90), l90;
            }
        },
        {
            key: "drawYaxisInversed",
            value: function(t476) {
                var e361 = this.w, i274 = new m(this.ctx), a221 = i274.group({
                    class: "apexcharts-xaxis apexcharts-yaxis-inversed"
                }), s175 = i274.group({
                    class: "apexcharts-xaxis-texts-g",
                    transform: "translate(".concat(e361.globals.translateXAxisX, ", ").concat(e361.globals.translateXAxisY, ")")
                });
                a221.add(s175);
                var r150 = e361.globals.yAxisScale[t476].result.length - 1, o131 = e361.globals.gridWidth / r150 + .1, n115 = o131 + e361.config.xaxis.labels.offsetX, l92 = e361.globals.xLabelFormatter, h82 = e361.globals.yAxisScale[t476].result.slice(), c71 = e361.globals.timescaleLabels;
                c71.length > 0 && (this.xaxisLabels = c71.slice(), r150 = (h82 = c71.slice()).length), h82 = this.axesUtils.checkForReversedLabels(t476, h82);
                var d61 = c71.length;
                if (e361.config.xaxis.labels.show) for(var g54 = d61 ? 0 : r150; d61 ? g54 < d61 : g54 >= 0; d61 ? g54++ : g54--){
                    var u43 = h82[g54];
                    u43 = l92(u43, g54, e361);
                    var f35 = e361.globals.gridWidth + e361.globals.padHorizontal - (n115 - o131 + e361.config.xaxis.labels.offsetX);
                    if (c71.length) {
                        var p31 = this.axesUtils.getLabel(h82, c71, f35, g54, this.drawnLabels, this.xaxisFontSize);
                        f35 = p31.x, u43 = p31.text, this.drawnLabels.push(p31.text), 0 === g54 && e361.globals.skipFirstTimelinelabel && (u43 = ""), g54 === h82.length - 1 && e361.globals.skipLastTimelinelabel && (u43 = "");
                    }
                    var x26 = i274.drawText({
                        x: f35,
                        y: this.xAxisoffX + e361.config.xaxis.labels.offsetY + 30 - ("top" === e361.config.xaxis.position ? e361.globals.xAxisHeight + e361.config.xaxis.axisTicks.height - 2 : 0),
                        text: u43,
                        textAnchor: "middle",
                        foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t476] : this.xaxisForeColors,
                        fontSize: this.xaxisFontSize,
                        fontFamily: this.xaxisFontFamily,
                        fontWeight: e361.config.xaxis.labels.style.fontWeight,
                        isPlainText: !1,
                        cssClass: "apexcharts-xaxis-label " + e361.config.xaxis.labels.style.cssClass
                    });
                    s175.add(x26), x26.tspan(u43);
                    var b26 = document.createElementNS(e361.globals.SVGNS, "title");
                    b26.textContent = u43, x26.node.appendChild(b26), n115 += o131;
                }
                return this.inversedYAxisTitleText(a221), this.inversedYAxisBorder(a221), a221;
            }
        },
        {
            key: "inversedYAxisBorder",
            value: function(t477) {
                var e362 = this.w, i275 = new m(this.ctx), a222 = e362.config.xaxis.axisBorder;
                if (a222.show) {
                    var s176 = 0;
                    "bar" === e362.config.chart.type && e362.globals.isXNumeric && (s176 -= 15);
                    var r151 = i275.drawLine(e362.globals.padHorizontal + s176 + a222.offsetX, this.xAxisoffX, e362.globals.gridWidth, this.xAxisoffX, a222.color, 0, a222.height);
                    t477.add(r151);
                }
            }
        },
        {
            key: "inversedYAxisTitleText",
            value: function(t478) {
                var e363 = this.w, i276 = new m(this.ctx);
                if (void 0 !== e363.config.xaxis.title.text) {
                    var a223 = i276.group({
                        class: "apexcharts-xaxis-title apexcharts-yaxis-title-inversed"
                    }), s177 = i276.drawText({
                        x: e363.globals.gridWidth / 2 + e363.config.xaxis.title.offsetX,
                        y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e363.config.xaxis.title.style.fontSize) + e363.config.xaxis.title.offsetY + 20,
                        text: e363.config.xaxis.title.text,
                        textAnchor: "middle",
                        fontSize: e363.config.xaxis.title.style.fontSize,
                        fontFamily: e363.config.xaxis.title.style.fontFamily,
                        fontWeight: e363.config.xaxis.title.style.fontWeight,
                        foreColor: e363.config.xaxis.title.style.color,
                        cssClass: "apexcharts-xaxis-title-text " + e363.config.xaxis.title.style.cssClass
                    });
                    a223.add(s177), t478.add(a223);
                }
            }
        },
        {
            key: "yAxisTitleRotate",
            value: function(t479, e364) {
                var i277 = this.w, a224 = new m(this.ctx), s178 = {
                    width: 0,
                    height: 0
                }, r152 = {
                    width: 0,
                    height: 0
                }, o132 = i277.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(t479, "'] .apexcharts-yaxis-texts-g"));
                null !== o132 && (s178 = o132.getBoundingClientRect());
                var n116 = i277.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t479, "'] .apexcharts-yaxis-title text"));
                if (null !== n116 && (r152 = n116.getBoundingClientRect()), null !== n116) {
                    var l93 = this.xPaddingForYAxisTitle(t479, s178, r152, e364);
                    n116.setAttribute("x", l93.xPos - (e364 ? 10 : 0));
                }
                if (null !== n116) {
                    var h83 = a224.rotateAroundCenter(n116);
                    n116.setAttribute("transform", "rotate(".concat(e364 ? -1 * i277.config.yaxis[t479].title.rotate : i277.config.yaxis[t479].title.rotate, " ").concat(h83.x, " ").concat(h83.y, ")"));
                }
            }
        },
        {
            key: "xPaddingForYAxisTitle",
            value: function(t480, e365, i278, a225) {
                var s179 = this.w, r153 = 0, o133 = 0, n117 = 10;
                return void 0 === s179.config.yaxis[t480].title.text || t480 < 0 ? {
                    xPos: o133,
                    padd: 0
                } : (a225 ? (o133 = e365.width + s179.config.yaxis[t480].title.offsetX + i278.width / 2 + n117 / 2, 0 === (r153 += 1) && (o133 -= n117 / 2)) : (o133 = -1 * e365.width + s179.config.yaxis[t480].title.offsetX + n117 / 2 + i278.width / 2, s179.globals.isBarHorizontal && (n117 = 25, o133 = -1 * e365.width - s179.config.yaxis[t480].title.offsetX - n117)), {
                    xPos: o133,
                    padd: n117
                });
            }
        },
        {
            key: "setYAxisXPosition",
            value: function(t481, e366) {
                var i279 = this.w, a226 = 0, s180 = 0, r154 = 18, o134 = 1;
                i279.config.yaxis.length > 1 && (this.multipleYs = !0), i279.config.yaxis.map(function(n118, l94) {
                    var h84 = i279.globals.ignoreYAxisIndexes.indexOf(l94) > -1 || !n118.show || n118.floating || 0 === t481[l94].width, c72 = t481[l94].width + e366[l94].width;
                    n118.opposite ? i279.globals.isBarHorizontal ? (s180 = i279.globals.gridWidth + i279.globals.translateX - 1, i279.globals.translateYAxisX[l94] = s180 - n118.labels.offsetX) : (s180 = i279.globals.gridWidth + i279.globals.translateX + o134, h84 || (o134 = o134 + c72 + 20), i279.globals.translateYAxisX[l94] = s180 - n118.labels.offsetX + 20) : (a226 = i279.globals.translateX - r154, h84 || (r154 = r154 + c72 + 20), i279.globals.translateYAxisX[l94] = a226 + n118.labels.offsetX);
                });
            }
        },
        {
            key: "setYAxisTextAlignments",
            value: function() {
                var t482 = this.w, e367 = t482.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis");
                (e367 = x.listToArray(e367)).forEach(function(e, i280) {
                    var a227 = t482.config.yaxis[i280];
                    if (a227 && void 0 !== a227.labels.align) {
                        var s181 = t482.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(i280, "'] .apexcharts-yaxis-texts-g")), r155 = t482.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(i280, "'] .apexcharts-yaxis-label"));
                        r155 = x.listToArray(r155);
                        var o135 = s181.getBoundingClientRect();
                        "left" === a227.labels.align ? (r155.forEach(function(t483, e) {
                            t483.setAttribute("text-anchor", "start");
                        }), a227.opposite || s181.setAttribute("transform", "translate(-".concat(o135.width, ", 0)"))) : "center" === a227.labels.align ? (r155.forEach(function(t484, e) {
                            t484.setAttribute("text-anchor", "middle");
                        }), s181.setAttribute("transform", "translate(".concat(o135.width / 2 * (a227.opposite ? 1 : -1), ", 0)"))) : "right" === a227.labels.align && (r155.forEach(function(t485, e) {
                            t485.setAttribute("text-anchor", "end");
                        }), a227.opposite && s181.setAttribute("transform", "translate(".concat(o135.width, ", 0)")));
                    }
                });
            }
        }
    ]), t474;
}(), J = function() {
    function t486(e368) {
        a(this, t486), this.ctx = e368, this.w = e368.w, this.documentEvent = x.bind(this.documentEvent, this);
    }
    return r(t486, [
        {
            key: "addEventListener",
            value: function(t487, e369) {
                var i281 = this.w;
                i281.globals.events.hasOwnProperty(t487) ? i281.globals.events[t487].push(e369) : i281.globals.events[t487] = [
                    e369
                ];
            }
        },
        {
            key: "removeEventListener",
            value: function(t488, e370) {
                var i282 = this.w;
                if (i282.globals.events.hasOwnProperty(t488)) {
                    var a228 = i282.globals.events[t488].indexOf(e370);
                    -1 !== a228 && i282.globals.events[t488].splice(a228, 1);
                }
            }
        },
        {
            key: "fireEvent",
            value: function(t489, e371) {
                var i283 = this.w;
                if (i283.globals.events.hasOwnProperty(t489)) {
                    e371 && e371.length || (e371 = []);
                    for(var a229 = i283.globals.events[t489], s182 = a229.length, r156 = 0; r156 < s182; r156++)a229[r156].apply(null, e371);
                }
            }
        },
        {
            key: "setupEventHandlers",
            value: function() {
                var t490 = this, e372 = this.w, i284 = this.ctx, a230 = e372.globals.dom.baseEl.querySelector(e372.globals.chartClass);
                this.ctx.eventList.forEach(function(t491) {
                    a230.addEventListener(t491, function(t492) {
                        var a231 = Object.assign({}, e372, {
                            seriesIndex: e372.globals.capturedSeriesIndex,
                            dataPointIndex: e372.globals.capturedDataPointIndex
                        });
                        "mousemove" === t492.type || "touchmove" === t492.type ? "function" == typeof e372.config.chart.events.mouseMove && e372.config.chart.events.mouseMove(t492, i284, a231) : "mouseleave" === t492.type || "touchleave" === t492.type ? "function" == typeof e372.config.chart.events.mouseLeave && e372.config.chart.events.mouseLeave(t492, i284, a231) : ("mouseup" === t492.type && 1 === t492.which || "touchend" === t492.type) && ("function" == typeof e372.config.chart.events.click && e372.config.chart.events.click(t492, i284, a231), i284.ctx.events.fireEvent("click", [
                            t492,
                            i284,
                            a231
                        ]));
                    }, {
                        capture: !1,
                        passive: !0
                    });
                }), this.ctx.eventList.forEach(function(i285) {
                    e372.globals.dom.baseEl.addEventListener(i285, t490.documentEvent, {
                        passive: !0
                    });
                }), this.ctx.core.setupBrushHandler();
            }
        },
        {
            key: "documentEvent",
            value: function(t493) {
                var e373 = this.w, i286 = t493.target.className;
                if ("click" === t493.type) {
                    var a232 = e373.globals.dom.baseEl.querySelector(".apexcharts-menu");
                    a232 && a232.classList.contains("apexcharts-menu-open") && "apexcharts-menu-icon" !== i286 && a232.classList.remove("apexcharts-menu-open");
                }
                e373.globals.clientX = "touchmove" === t493.type ? t493.touches[0].clientX : t493.clientX, e373.globals.clientY = "touchmove" === t493.type ? t493.touches[0].clientY : t493.clientY;
            }
        }
    ]), t486;
}(), Q = function() {
    function t494(e374) {
        a(this, t494), this.ctx = e374, this.w = e374.w;
    }
    return r(t494, [
        {
            key: "setCurrentLocaleValues",
            value: function(t495) {
                var e375 = this.w.config.chart.locales;
                window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e375 = this.w.config.chart.locales.concat(window.Apex.chart.locales));
                var i287 = e375.filter(function(e376) {
                    return e376.name === t495;
                })[0];
                if (!i287) throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");
                var a233 = x.extend(C, i287);
                this.w.globals.locale = a233.options;
            }
        }
    ]), t494;
}(), K = function() {
    function t496(e377) {
        a(this, t496), this.ctx = e377, this.w = e377.w;
    }
    return r(t496, [
        {
            key: "drawAxis",
            value: function(t497, e378) {
                var i288, a234, s183 = this.w.globals, r157 = this.w.config, o136 = new _(this.ctx), n119 = new $(this.ctx);
                s183.axisCharts && "radar" !== t497 && (s183.isBarHorizontal ? (a234 = n119.drawYaxisInversed(0), i288 = o136.drawXaxisInversed(0), s183.dom.elGraphical.add(i288), s183.dom.elGraphical.add(a234)) : (i288 = o136.drawXaxis(), s183.dom.elGraphical.add(i288), r157.yaxis.map(function(t, e379) {
                    -1 === s183.ignoreYAxisIndexes.indexOf(e379) && (a234 = n119.drawYaxis(e379), s183.dom.Paper.add(a234));
                })));
            }
        }
    ]), t496;
}(), tt = function() {
    function t498(e380) {
        a(this, t498), this.ctx = e380, this.w = e380.w;
    }
    return r(t498, [
        {
            key: "drawXCrosshairs",
            value: function() {
                var t499 = this.w, e381 = new m(this.ctx), i289 = new v(this.ctx), a235 = t499.config.xaxis.crosshairs.fill.gradient, s184 = t499.config.xaxis.crosshairs.dropShadow, r158 = t499.config.xaxis.crosshairs.fill.type, o137 = a235.colorFrom, n120 = a235.colorTo, l95 = a235.opacityFrom, h85 = a235.opacityTo, c73 = a235.stops, d62 = s184.enabled, g55 = s184.left, u44 = s184.top, f36 = s184.blur, p32 = s184.color, b27 = s184.opacity, y19 = t499.config.xaxis.crosshairs.fill.color;
                if (t499.config.xaxis.crosshairs.show) {
                    "gradient" === r158 && (y19 = e381.drawGradient("vertical", o137, n120, l95, h85, null, c73, null));
                    var w16 = e381.drawRect();
                    1 === t499.config.xaxis.crosshairs.width && (w16 = e381.drawLine());
                    var k15 = t499.globals.gridHeight;
                    (!x.isNumber(k15) || k15 < 0) && (k15 = 0);
                    var A11 = t499.config.xaxis.crosshairs.width;
                    (!x.isNumber(A11) || A11 < 0) && (A11 = 0), w16.attr({
                        class: "apexcharts-xcrosshairs",
                        x: 0,
                        y: 0,
                        y2: k15,
                        width: A11,
                        height: k15,
                        fill: y19,
                        filter: "none",
                        "fill-opacity": t499.config.xaxis.crosshairs.opacity,
                        stroke: t499.config.xaxis.crosshairs.stroke.color,
                        "stroke-width": t499.config.xaxis.crosshairs.stroke.width,
                        "stroke-dasharray": t499.config.xaxis.crosshairs.stroke.dashArray
                    }), d62 && (w16 = i289.dropShadow(w16, {
                        left: g55,
                        top: u44,
                        blur: f36,
                        color: p32,
                        opacity: b27
                    })), t499.globals.dom.elGraphical.add(w16);
                }
            }
        },
        {
            key: "drawYCrosshairs",
            value: function() {
                var t500 = this.w, e382 = new m(this.ctx), i290 = t500.config.yaxis[0].crosshairs, a236 = t500.globals.barPadForNumericAxis;
                if (t500.config.yaxis[0].crosshairs.show) {
                    var s185 = e382.drawLine(-a236, 0, t500.globals.gridWidth + a236, 0, i290.stroke.color, i290.stroke.dashArray, i290.stroke.width);
                    s185.attr({
                        class: "apexcharts-ycrosshairs"
                    }), t500.globals.dom.elGraphical.add(s185);
                }
                var r159 = e382.drawLine(-a236, 0, t500.globals.gridWidth + a236, 0, i290.stroke.color, 0, 0);
                r159.attr({
                    class: "apexcharts-ycrosshairs-hidden"
                }), t500.globals.dom.elGraphical.add(r159);
            }
        }
    ]), t498;
}(), et = function() {
    function t501(e383) {
        a(this, t501), this.ctx = e383, this.w = e383.w;
    }
    return r(t501, [
        {
            key: "checkResponsiveConfig",
            value: function(t502) {
                var e384 = this, i291 = this.w, a237 = i291.config;
                if (0 !== a237.responsive.length) {
                    var s186 = a237.responsive.slice();
                    s186.sort(function(t503, e385) {
                        return t503.breakpoint > e385.breakpoint ? 1 : e385.breakpoint > t503.breakpoint ? -1 : 0;
                    }).reverse();
                    var r160 = new N({}), o138 = function() {
                        var t504 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a238 = s186[0].breakpoint, o140 = window.innerWidth > 0 ? window.innerWidth : screen.width;
                        if (o140 > a238) {
                            var n123 = y.extendArrayProps(r160, i291.globals.initialConfig, i291);
                            t504 = x.extend(n123, t504), t504 = x.extend(i291.config, t504), e384.overrideResponsiveOptions(t504);
                        } else for(var l96 = 0; l96 < s186.length; l96++)o140 < s186[l96].breakpoint && (t504 = y.extendArrayProps(r160, s186[l96].options, i291), t504 = x.extend(i291.config, t504), e384.overrideResponsiveOptions(t504));
                    };
                    if (t502) {
                        var n121 = y.extendArrayProps(r160, t502, i291);
                        n121 = x.extend(i291.config, n121), o138(n121 = x.extend(n121, t502));
                    } else o138({});
                }
            }
        },
        {
            key: "overrideResponsiveOptions",
            value: function(t505) {
                var e386 = new N(t505).init({
                    responsiveOverride: !0
                });
                this.w.config = e386;
            }
        }
    ]), t501;
}(), it = function() {
    function t506(e387) {
        a(this, t506), this.ctx = e387, this.colors = [], this.w = e387.w;
        var i292 = this.w;
        this.isColorFn = !1, this.isHeatmapDistributed = "treemap" === i292.config.chart.type && i292.config.plotOptions.treemap.distributed || "heatmap" === i292.config.chart.type && i292.config.plotOptions.heatmap.distributed, this.isBarDistributed = i292.config.plotOptions.bar.distributed && ("bar" === i292.config.chart.type || "rangeBar" === i292.config.chart.type);
    }
    return r(t506, [
        {
            key: "init",
            value: function() {
                this.setDefaultColors();
            }
        },
        {
            key: "setDefaultColors",
            value: function() {
                var t507 = this, e388 = this.w, i293 = new x;
                if (e388.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(e388.config.theme.mode)), void 0 === e388.config.colors ? e388.globals.colors = this.predefined() : (e388.globals.colors = e388.config.colors, Array.isArray(e388.config.colors) && e388.config.colors.length > 0 && "function" == typeof e388.config.colors[0] && (e388.globals.colors = e388.config.series.map(function(i, a240) {
                    var s188 = e388.config.colors[a240];
                    return s188 || (s188 = e388.config.colors[0]), "function" == typeof s188 ? (t507.isColorFn = !0, s188({
                        value: e388.globals.axisCharts ? e388.globals.series[a240][0] ? e388.globals.series[a240][0] : 0 : e388.globals.series[a240],
                        seriesIndex: a240,
                        dataPointIndex: a240,
                        w: e388
                    })) : s188;
                }))), e388.globals.seriesColors.map(function(t508, i294) {
                    t508 && (e388.globals.colors[i294] = t508);
                }), e388.config.theme.monochrome.enabled) {
                    var a239 = [], s187 = e388.globals.series.length;
                    (this.isBarDistributed || this.isHeatmapDistributed) && (s187 = e388.globals.series[0].length * e388.globals.series.length);
                    for(var r161 = e388.config.theme.monochrome.color, o141 = 1 / (s187 / e388.config.theme.monochrome.shadeIntensity), n124 = e388.config.theme.monochrome.shadeTo, l97 = 0, h86 = 0; h86 < s187; h86++){
                        var c74 = void 0;
                        "dark" === n124 ? (c74 = i293.shadeColor(-1 * l97, r161), l97 += o141) : (c74 = i293.shadeColor(l97, r161), l97 += o141), a239.push(c74);
                    }
                    e388.globals.colors = a239.slice();
                }
                var d63 = e388.globals.colors.slice();
                this.pushExtraColors(e388.globals.colors);
                [
                    "fill",
                    "stroke"
                ].forEach(function(i295) {
                    void 0 === e388.config[i295].colors ? e388.globals[i295].colors = t507.isColorFn ? e388.config.colors : d63 : e388.globals[i295].colors = e388.config[i295].colors.slice(), t507.pushExtraColors(e388.globals[i295].colors);
                }), void 0 === e388.config.dataLabels.style.colors ? e388.globals.dataLabels.style.colors = d63 : e388.globals.dataLabels.style.colors = e388.config.dataLabels.style.colors.slice(), this.pushExtraColors(e388.globals.dataLabels.style.colors, 50), void 0 === e388.config.plotOptions.radar.polygons.fill.colors ? e388.globals.radarPolygons.fill.colors = [
                    "dark" === e388.config.theme.mode ? "#424242" : "none"
                ] : e388.globals.radarPolygons.fill.colors = e388.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(e388.globals.radarPolygons.fill.colors, 20), void 0 === e388.config.markers.colors ? e388.globals.markers.colors = d63 : e388.globals.markers.colors = e388.config.markers.colors.slice(), this.pushExtraColors(e388.globals.markers.colors);
            }
        },
        {
            key: "pushExtraColors",
            value: function(t509, e389) {
                var i296 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a241 = this.w, s189 = e389 || a241.globals.series.length;
                if (null === i296 && (i296 = this.isBarDistributed || this.isHeatmapDistributed || "heatmap" === a241.config.chart.type && a241.config.plotOptions.heatmap.colorScale.inverse), i296 && a241.globals.series.length && (s189 = a241.globals.series[a241.globals.maxValsInArrayIndex].length * a241.globals.series.length), t509.length < s189) for(var r162 = s189 - t509.length, o142 = 0; o142 < r162; o142++)t509.push(t509[o142]);
            }
        },
        {
            key: "updateThemeOptions",
            value: function(t510) {
                t510.chart = t510.chart || {}, t510.tooltip = t510.tooltip || {};
                var e390 = t510.theme.mode || "light", i297 = t510.theme.palette ? t510.theme.palette : "dark" === e390 ? "palette4" : "palette1", a242 = t510.chart.foreColor ? t510.chart.foreColor : "dark" === e390 ? "#f6f7f8" : "#373d3f";
                return t510.tooltip.theme = e390, t510.chart.foreColor = a242, t510.theme.palette = i297, t510;
            }
        },
        {
            key: "predefined",
            value: function() {
                switch(this.w.config.theme.palette){
                    case "palette1":
                        this.colors = [
                            "#008FFB",
                            "#00E396",
                            "#FEB019",
                            "#FF4560",
                            "#775DD0"
                        ];
                        break;
                    case "palette2":
                        this.colors = [
                            "#3f51b5",
                            "#03a9f4",
                            "#4caf50",
                            "#f9ce1d",
                            "#FF9800"
                        ];
                        break;
                    case "palette3":
                        this.colors = [
                            "#33b2df",
                            "#546E7A",
                            "#d4526e",
                            "#13d8aa",
                            "#A5978B"
                        ];
                        break;
                    case "palette4":
                        this.colors = [
                            "#4ecdc4",
                            "#c7f464",
                            "#81D4FA",
                            "#fd6a6a",
                            "#546E7A"
                        ];
                        break;
                    case "palette5":
                        this.colors = [
                            "#2b908f",
                            "#f9a3a4",
                            "#90ee7e",
                            "#fa4443",
                            "#69d2e7"
                        ];
                        break;
                    case "palette6":
                        this.colors = [
                            "#449DD1",
                            "#F86624",
                            "#EA3546",
                            "#662E9B",
                            "#C5D86D"
                        ];
                        break;
                    case "palette7":
                        this.colors = [
                            "#D7263D",
                            "#1B998B",
                            "#2E294E",
                            "#F46036",
                            "#E2C044"
                        ];
                        break;
                    case "palette8":
                        this.colors = [
                            "#662E9B",
                            "#F86624",
                            "#F9C80E",
                            "#EA3546",
                            "#43BCCD"
                        ];
                        break;
                    case "palette9":
                        this.colors = [
                            "#5C4742",
                            "#A5978B",
                            "#8D5B4C",
                            "#5A2A27",
                            "#C4BBAF"
                        ];
                        break;
                    case "palette10":
                        this.colors = [
                            "#A300D6",
                            "#7D02EB",
                            "#5653FE",
                            "#2983FF",
                            "#00B1F2"
                        ];
                        break;
                    default:
                        this.colors = [
                            "#008FFB",
                            "#00E396",
                            "#FEB019",
                            "#FF4560",
                            "#775DD0"
                        ];
                }
                return this.colors;
            }
        }
    ]), t506;
}(), at = function() {
    function t511(e391) {
        a(this, t511), this.ctx = e391, this.w = e391.w;
    }
    return r(t511, [
        {
            key: "draw",
            value: function() {
                this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle");
            }
        },
        {
            key: "drawTitleSubtitle",
            value: function(t512) {
                var e392 = this.w, i298 = "title" === t512 ? e392.config.title : e392.config.subtitle, a243 = e392.globals.svgWidth / 2, s190 = i298.offsetY, r163 = "middle";
                if ("left" === i298.align ? (a243 = 10, r163 = "start") : "right" === i298.align && (a243 = e392.globals.svgWidth - 10, r163 = "end"), a243 += i298.offsetX, s190 = s190 + parseInt(i298.style.fontSize, 10) + i298.margin / 2, void 0 !== i298.text) {
                    var o143 = new m(this.ctx).drawText({
                        x: a243,
                        y: s190,
                        text: i298.text,
                        textAnchor: r163,
                        fontSize: i298.style.fontSize,
                        fontFamily: i298.style.fontFamily,
                        fontWeight: i298.style.fontWeight,
                        foreColor: i298.style.color,
                        opacity: 1
                    });
                    o143.node.setAttribute("class", "apexcharts-".concat(t512, "-text")), e392.globals.dom.Paper.add(o143);
                }
            }
        }
    ]), t511;
}(), st = function() {
    function t513(e393) {
        a(this, t513), this.w = e393.w, this.dCtx = e393;
    }
    return r(t513, [
        {
            key: "getTitleSubtitleCoords",
            value: function(t514) {
                var e394 = this.w, i299 = 0, a244 = 0, s191 = "title" === t514 ? e394.config.title.floating : e394.config.subtitle.floating, r164 = e394.globals.dom.baseEl.querySelector(".apexcharts-".concat(t514, "-text"));
                if (null !== r164 && !s191) {
                    var o144 = r164.getBoundingClientRect();
                    i299 = o144.width, a244 = e394.globals.axisCharts ? o144.height + 5 : o144.height;
                }
                return {
                    width: i299,
                    height: a244
                };
            }
        },
        {
            key: "getLegendsRect",
            value: function() {
                var t515 = this.w, e395 = t515.globals.dom.baseEl.querySelector(".apexcharts-legend");
                t515.config.legend.height || "top" !== t515.config.legend.position && "bottom" !== t515.config.legend.position || (e395.style.maxHeight = t515.globals.svgHeight / 2 + "px");
                var i300 = Object.assign({}, x.getBoundingClientRect(e395));
                return null !== e395 && !t515.config.legend.floating && t515.config.legend.show ? this.dCtx.lgRect = {
                    x: i300.x,
                    y: i300.y,
                    height: i300.height,
                    width: 0 === i300.height ? 0 : i300.width
                } : this.dCtx.lgRect = {
                    x: 0,
                    y: 0,
                    height: 0,
                    width: 0
                }, "left" !== t515.config.legend.position && "right" !== t515.config.legend.position || 1.5 * this.dCtx.lgRect.width > t515.globals.svgWidth && (this.dCtx.lgRect.width = t515.globals.svgWidth / 1.5), this.dCtx.lgRect;
            }
        },
        {
            key: "getLargestStringFromMultiArr",
            value: function(t516, e396) {
                var i301 = t516;
                if (this.w.globals.isMultiLineX) {
                    var a245 = e396.map(function(t517, e) {
                        return Array.isArray(t517) ? t517.length : 1;
                    }), s192 = Math.max.apply(Math, u(a245));
                    i301 = e396[a245.indexOf(s192)];
                }
                return i301;
            }
        }
    ]), t513;
}(), rt = function() {
    function t518(e397) {
        a(this, t518), this.w = e397.w, this.dCtx = e397;
    }
    return r(t518, [
        {
            key: "getxAxisLabelsCoords",
            value: function() {
                var t519, e398 = this.w, i302 = e398.globals.labels.slice();
                if (e398.config.xaxis.convertedCatToNumeric && 0 === i302.length && (i302 = e398.globals.categoryLabels), e398.globals.timescaleLabels.length > 0) {
                    var a246 = this.getxAxisTimeScaleLabelsCoords();
                    t519 = {
                        width: a246.width,
                        height: a246.height
                    }, e398.globals.rotateXLabels = !1;
                } else {
                    this.dCtx.lgWidthForSideLegends = "left" !== e398.config.legend.position && "right" !== e398.config.legend.position || e398.config.legend.floating ? 0 : this.dCtx.lgRect.width;
                    var s193 = e398.globals.xLabelFormatter, r165 = x.getLargestStringFromArr(i302), o145 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r165, i302);
                    e398.globals.isBarHorizontal && (o145 = r165 = e398.globals.yAxisScale[0].result.reduce(function(t520, e399) {
                        return t520.length > e399.length ? t520 : e399;
                    }, 0));
                    var n125 = new V(this.dCtx.ctx), l98 = r165;
                    r165 = n125.xLabelFormat(s193, r165, l98, {
                        i: void 0,
                        dateFormatter: new R(this.dCtx.ctx).formatDate,
                        w: e398
                    }), o145 = n125.xLabelFormat(s193, o145, l98, {
                        i: void 0,
                        dateFormatter: new R(this.dCtx.ctx).formatDate,
                        w: e398
                    }), (e398.config.xaxis.convertedCatToNumeric && void 0 === r165 || "" === String(r165).trim()) && (o145 = r165 = "1");
                    var h87 = new m(this.dCtx.ctx), c75 = h87.getTextRects(r165, e398.config.xaxis.labels.style.fontSize), d64 = c75;
                    if (r165 !== o145 && (d64 = h87.getTextRects(o145, e398.config.xaxis.labels.style.fontSize)), (t519 = {
                        width: c75.width >= d64.width ? c75.width : d64.width,
                        height: c75.height >= d64.height ? c75.height : d64.height
                    }).width * i302.length > e398.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e398.config.xaxis.labels.rotate || e398.config.xaxis.labels.rotateAlways) {
                        if (!e398.globals.isBarHorizontal) {
                            e398.globals.rotateXLabels = !0;
                            var g56 = function(t521) {
                                return h87.getTextRects(t521, e398.config.xaxis.labels.style.fontSize, e398.config.xaxis.labels.style.fontFamily, "rotate(".concat(e398.config.xaxis.labels.rotate, " 0 0)"), !1);
                            };
                            c75 = g56(r165), r165 !== o145 && (d64 = g56(o145)), t519.height = (c75.height > d64.height ? c75.height : d64.height) / 1.5, t519.width = c75.width > d64.width ? c75.width : d64.width;
                        }
                    } else e398.globals.rotateXLabels = !1;
                }
                return e398.config.xaxis.labels.show || (t519 = {
                    width: 0,
                    height: 0
                }), {
                    width: t519.width,
                    height: t519.height
                };
            }
        },
        {
            key: "getxAxisGroupLabelsCoords",
            value: function() {
                var t522, e400 = this.w;
                if (!e400.globals.hasGroups) return {
                    width: 0,
                    height: 0
                };
                var i303, a247 = (null === (t522 = e400.config.xaxis.group.style) || void 0 === t522 ? void 0 : t522.fontSize) || e400.config.xaxis.labels.style.fontSize, s194 = e400.globals.groups.map(function(t523) {
                    return t523.title;
                }), r166 = x.getLargestStringFromArr(s194), o146 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r166, s194), n126 = new m(this.dCtx.ctx), l99 = n126.getTextRects(r166, a247), h88 = l99;
                return r166 !== o146 && (h88 = n126.getTextRects(o146, a247)), i303 = {
                    width: l99.width >= h88.width ? l99.width : h88.width,
                    height: l99.height >= h88.height ? l99.height : h88.height
                }, e400.config.xaxis.labels.show || (i303 = {
                    width: 0,
                    height: 0
                }), {
                    width: i303.width,
                    height: i303.height
                };
            }
        },
        {
            key: "getxAxisTitleCoords",
            value: function() {
                var t524 = this.w, e401 = 0, i304 = 0;
                if (void 0 !== t524.config.xaxis.title.text) {
                    var a248 = new m(this.dCtx.ctx).getTextRects(t524.config.xaxis.title.text, t524.config.xaxis.title.style.fontSize);
                    e401 = a248.width, i304 = a248.height;
                }
                return {
                    width: e401,
                    height: i304
                };
            }
        },
        {
            key: "getxAxisTimeScaleLabelsCoords",
            value: function() {
                var t525, e402 = this.w;
                this.dCtx.timescaleLabels = e402.globals.timescaleLabels.slice();
                var i305 = this.dCtx.timescaleLabels.map(function(t526) {
                    return t526.value;
                }), a249 = i305.reduce(function(t527, e403) {
                    return void 0 === t527 ? (console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"), 0) : t527.length > e403.length ? t527 : e403;
                }, 0);
                return 1.05 * (t525 = new m(this.dCtx.ctx).getTextRects(a249, e402.config.xaxis.labels.style.fontSize)).width * i305.length > e402.globals.gridWidth && 0 !== e402.config.xaxis.labels.rotate && (e402.globals.overlappingXLabels = !0), t525;
            }
        },
        {
            key: "additionalPaddingXLabels",
            value: function(t528) {
                var e404 = this, i306 = this.w, a250 = i306.globals, s195 = i306.config, r167 = s195.xaxis.type, o147 = t528.width;
                a250.skipLastTimelinelabel = !1, a250.skipFirstTimelinelabel = !1;
                var n127 = i306.config.yaxis[0].opposite && i306.globals.isBarHorizontal, l100 = function(t529, n128) {
                    (function(t530) {
                        return -1 !== a250.collapsedSeriesIndices.indexOf(t530);
                    })(n128) || function(t531) {
                        if (e404.dCtx.timescaleLabels && e404.dCtx.timescaleLabels.length) {
                            var n129 = e404.dCtx.timescaleLabels[0], l101 = e404.dCtx.timescaleLabels[e404.dCtx.timescaleLabels.length - 1].position + o147 / 1.75 - e404.dCtx.yAxisWidthRight, h89 = n129.position - o147 / 1.75 + e404.dCtx.yAxisWidthLeft, c76 = "right" === i306.config.legend.position && e404.dCtx.lgRect.width > 0 ? e404.dCtx.lgRect.width : 0;
                            l101 > a250.svgWidth - a250.translateX - c76 && (a250.skipLastTimelinelabel = !0), h89 < -(t531.show && !t531.floating || "bar" !== s195.chart.type && "candlestick" !== s195.chart.type && "rangeBar" !== s195.chart.type && "boxPlot" !== s195.chart.type ? 10 : o147 / 1.75) && (a250.skipFirstTimelinelabel = !0);
                        } else "datetime" === r167 ? e404.dCtx.gridPad.right < o147 && !a250.rotateXLabels && (a250.skipLastTimelinelabel = !0) : "datetime" !== r167 && e404.dCtx.gridPad.right < o147 / 2 - e404.dCtx.yAxisWidthRight && !a250.rotateXLabels && !i306.config.xaxis.labels.trim && ("between" !== i306.config.xaxis.tickPlacement || i306.globals.isBarHorizontal) && (e404.dCtx.xPadRight = o147 / 2 + 1);
                    }(t529);
                };
                s195.yaxis.forEach(function(t532, i307) {
                    n127 ? (e404.dCtx.gridPad.left < o147 && (e404.dCtx.xPadLeft = o147 / 2 + 1), e404.dCtx.xPadRight = o147 / 2 + 1) : l100(t532, i307);
                });
            }
        }
    ]), t518;
}(), ot = function() {
    function t533(e405) {
        a(this, t533), this.w = e405.w, this.dCtx = e405;
    }
    return r(t533, [
        {
            key: "getyAxisLabelsCoords",
            value: function() {
                var t534 = this, e406 = this.w, i308 = [], a251 = 10, s196 = new G(this.dCtx.ctx);
                return e406.config.yaxis.map(function(r168, o148) {
                    var n130 = e406.globals.yAxisScale[o148], l102 = 0;
                    if (!s196.isYAxisHidden(o148) && r168.labels.show && void 0 !== r168.labels.minWidth && (l102 = r168.labels.minWidth), !s196.isYAxisHidden(o148) && r168.labels.show && n130.result.length) {
                        var h90 = e406.globals.yLabelFormatters[o148], c77 = n130.niceMin === Number.MIN_VALUE ? 0 : n130.niceMin, d65 = String(c77).length > String(n130.niceMax).length ? c77 : n130.niceMax, g57 = h90(d65, {
                            seriesIndex: o148,
                            dataPointIndex: -1,
                            w: e406
                        }), u45 = g57;
                        if (void 0 !== g57 && 0 !== g57.length || (g57 = d65), e406.globals.isBarHorizontal) {
                            a251 = 0;
                            var f37 = e406.globals.labels.slice();
                            g57 = h90(g57 = x.getLargestStringFromArr(f37), {
                                seriesIndex: o148,
                                dataPointIndex: -1,
                                w: e406
                            }), u45 = t534.dCtx.dimHelpers.getLargestStringFromMultiArr(g57, f37);
                        }
                        var p33 = new m(t534.dCtx.ctx), b28 = "rotate(".concat(r168.labels.rotate, " 0 0)"), v19 = p33.getTextRects(g57, r168.labels.style.fontSize, r168.labels.style.fontFamily, b28, !1), y20 = v19;
                        g57 !== u45 && (y20 = p33.getTextRects(u45, r168.labels.style.fontSize, r168.labels.style.fontFamily, b28, !1)), i308.push({
                            width: (l102 > y20.width || l102 > v19.width ? l102 : y20.width > v19.width ? y20.width : v19.width) + a251,
                            height: y20.height > v19.height ? y20.height : v19.height
                        });
                    } else i308.push({
                        width: 0,
                        height: 0
                    });
                }), i308;
            }
        },
        {
            key: "getyAxisTitleCoords",
            value: function() {
                var t535 = this, e407 = this.w, i309 = [];
                return e407.config.yaxis.map(function(e408, a) {
                    if (e408.show && void 0 !== e408.title.text) {
                        var s197 = new m(t535.dCtx.ctx), r169 = "rotate(".concat(e408.title.rotate, " 0 0)"), o149 = s197.getTextRects(e408.title.text, e408.title.style.fontSize, e408.title.style.fontFamily, r169, !1);
                        i309.push({
                            width: o149.width,
                            height: o149.height
                        });
                    } else i309.push({
                        width: 0,
                        height: 0
                    });
                }), i309;
            }
        },
        {
            key: "getTotalYAxisWidth",
            value: function() {
                var t536 = this.w, e409 = 0, i310 = 0, a252 = 0, s198 = t536.globals.yAxisScale.length > 1 ? 10 : 0, r170 = new G(this.dCtx.ctx), o150 = function(o151, n131) {
                    var l103 = t536.config.yaxis[n131].floating, h91 = 0;
                    o151.width > 0 && !l103 ? (h91 = o151.width + s198, function(e410) {
                        return t536.globals.ignoreYAxisIndexes.indexOf(e410) > -1;
                    }(n131) && (h91 = h91 - o151.width - s198)) : h91 = l103 || r170.isYAxisHidden(n131) ? 0 : 5, t536.config.yaxis[n131].opposite ? a252 += h91 : i310 += h91, e409 += h91;
                };
                return t536.globals.yLabelsCoords.map(function(t537, e411) {
                    o150(t537, e411);
                }), t536.globals.yTitleCoords.map(function(t538, e412) {
                    o150(t538, e412);
                }), t536.globals.isBarHorizontal && !t536.config.yaxis[0].floating && (e409 = t536.globals.yLabelsCoords[0].width + t536.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i310, this.dCtx.yAxisWidthRight = a252, e409;
            }
        }
    ]), t533;
}(), nt = function() {
    function t539(e413) {
        a(this, t539), this.w = e413.w, this.dCtx = e413;
    }
    return r(t539, [
        {
            key: "gridPadForColumnsInNumericAxis",
            value: function(t540) {
                var e414 = this.w;
                if (e414.globals.noData || e414.globals.allSeriesCollapsed) return 0;
                var i311 = function(t541) {
                    return "bar" === t541 || "rangeBar" === t541 || "candlestick" === t541 || "boxPlot" === t541;
                }, a253 = e414.config.chart.type, s199 = 0, r171 = i311(a253) ? e414.config.series.length : 1;
                if (e414.globals.comboBarCount > 0 && (r171 = e414.globals.comboBarCount), e414.globals.collapsedSeries.forEach(function(t542) {
                    i311(t542.type) && (r171 -= 1);
                }), e414.config.chart.stacked && (r171 = 1), (i311(a253) || e414.globals.comboBarCount > 0) && e414.globals.isXNumeric && !e414.globals.isBarHorizontal && r171 > 0) {
                    var o152, n132, l104 = Math.abs(e414.globals.initialMaxX - e414.globals.initialMinX);
                    l104 <= 3 && (l104 = e414.globals.dataPoints), o152 = l104 / t540, e414.globals.minXDiff && e414.globals.minXDiff / o152 > 0 && (n132 = e414.globals.minXDiff / o152), n132 > t540 / 2 && (n132 /= 2), (s199 = n132 / r171 * parseInt(e414.config.plotOptions.bar.columnWidth, 10) / 100) < 1 && (s199 = 1), s199 = s199 / (r171 > 1 ? 1 : 1.5) + 5, e414.globals.barPadForNumericAxis = s199;
                }
                return s199;
            }
        },
        {
            key: "gridPadFortitleSubtitle",
            value: function() {
                var t543 = this, e415 = this.w, i312 = e415.globals, a254 = this.dCtx.isSparkline || !e415.globals.axisCharts ? 0 : 10;
                [
                    "title",
                    "subtitle"
                ].forEach(function(i313) {
                    void 0 !== e415.config[i313].text ? a254 += e415.config[i313].margin : a254 += t543.dCtx.isSparkline || !e415.globals.axisCharts ? 0 : 5;
                }), !e415.config.legend.show || "bottom" !== e415.config.legend.position || e415.config.legend.floating || e415.globals.axisCharts || (a254 += 10);
                var s200 = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"), r172 = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
                i312.gridHeight = i312.gridHeight - s200.height - r172.height - a254, i312.translateY = i312.translateY + s200.height + r172.height + a254;
            }
        },
        {
            key: "setGridXPosForDualYAxis",
            value: function(t544, e416) {
                var i314 = this.w, a255 = new G(this.dCtx.ctx);
                i314.config.yaxis.map(function(s201, r173) {
                    -1 !== i314.globals.ignoreYAxisIndexes.indexOf(r173) || s201.floating || a255.isYAxisHidden(r173) || (s201.opposite && (i314.globals.translateX = i314.globals.translateX - (e416[r173].width + t544[r173].width) - parseInt(i314.config.yaxis[r173].labels.style.fontSize, 10) / 1.2 - 12), i314.globals.translateX < 2 && (i314.globals.translateX = 2));
                });
            }
        }
    ]), t539;
}(), lt = function() {
    function t545(e417) {
        a(this, t545), this.ctx = e417, this.w = e417.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new st(this), this.dimYAxis = new ot(this), this.dimXAxis = new rt(this), this.dimGrid = new nt(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;
    }
    return r(t545, [
        {
            key: "plotCoords",
            value: function() {
                var t546 = this, e418 = this.w, i315 = e418.globals;
                this.lgRect = this.dimHelpers.getLegendsRect(), this.isSparkline && (e418.config.markers.discrete.length > 0 || e418.config.markers.size > 0) && Object.entries(this.gridPad).forEach(function(e419) {
                    var i316 = g(e419, 2), a257 = i316[0], s202 = i316[1];
                    t546.gridPad[a257] = Math.max(s202, t546.w.globals.markers.largestSize / 1.5);
                }), i315.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), i315.gridHeight = i315.gridHeight - this.gridPad.top - this.gridPad.bottom, i315.gridWidth = i315.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;
                var a256 = this.dimGrid.gridPadForColumnsInNumericAxis(i315.gridWidth);
                i315.gridWidth = i315.gridWidth - 2 * a256, i315.translateX = i315.translateX + this.gridPad.left + this.xPadLeft + (a256 > 0 ? a256 + 4 : 0), i315.translateY = i315.translateY + this.gridPad.top;
            }
        },
        {
            key: "setDimensionsForAxisCharts",
            value: function() {
                var t547 = this, e420 = this.w, i317 = e420.globals, a258 = this.dimYAxis.getyAxisLabelsCoords(), s203 = this.dimYAxis.getyAxisTitleCoords();
                e420.globals.yLabelsCoords = [], e420.globals.yTitleCoords = [], e420.config.yaxis.map(function(t, i318) {
                    e420.globals.yLabelsCoords.push({
                        width: a258[i318].width,
                        index: i318
                    }), e420.globals.yTitleCoords.push({
                        width: s203[i318].width,
                        index: i318
                    });
                }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();
                var r174 = this.dimXAxis.getxAxisLabelsCoords(), o153 = this.dimXAxis.getxAxisGroupLabelsCoords(), n133 = this.dimXAxis.getxAxisTitleCoords();
                this.conditionalChecksForAxisCoords(r174, n133, o153), i317.translateXAxisY = e420.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i317.translateXAxisX = e420.globals.rotateXLabels && e420.globals.isXNumeric && e420.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e420.globals.isBarHorizontal && (i317.rotateXLabels = !1, i317.translateXAxisY = parseInt(e420.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i317.translateXAxisY = i317.translateXAxisY + e420.config.xaxis.labels.offsetY, i317.translateXAxisX = i317.translateXAxisX + e420.config.xaxis.labels.offsetX;
                var l105 = this.yAxisWidth, h92 = this.xAxisHeight;
                i317.xAxisLabelsHeight = this.xAxisHeight - n133.height, i317.xAxisGroupLabelsHeight = i317.xAxisLabelsHeight - r174.height, i317.xAxisLabelsWidth = this.xAxisWidth, i317.xAxisHeight = this.xAxisHeight;
                var c78 = 10;
                ("radar" === e420.config.chart.type || this.isSparkline) && (l105 = 0, h92 = i317.goldenPadding), this.isSparkline && (this.lgRect = {
                    height: 0,
                    width: 0
                }), (this.isSparkline || "treemap" === e420.config.chart.type) && (l105 = 0, h92 = 0, c78 = 0), this.isSparkline || this.dimXAxis.additionalPaddingXLabels(r174);
                var d66 = function() {
                    i317.translateX = l105, i317.gridHeight = i317.svgHeight - t547.lgRect.height - h92 - (t547.isSparkline || "treemap" === e420.config.chart.type ? 0 : e420.globals.rotateXLabels ? 10 : 15), i317.gridWidth = i317.svgWidth - l105;
                };
                switch("top" === e420.config.xaxis.position && (c78 = i317.xAxisHeight - e420.config.xaxis.axisTicks.height - 5), e420.config.legend.position){
                    case "bottom":
                        i317.translateY = c78, d66();
                        break;
                    case "top":
                        i317.translateY = this.lgRect.height + c78, d66();
                        break;
                    case "left":
                        i317.translateY = c78, i317.translateX = this.lgRect.width + l105, i317.gridHeight = i317.svgHeight - h92 - 12, i317.gridWidth = i317.svgWidth - this.lgRect.width - l105;
                        break;
                    case "right":
                        i317.translateY = c78, i317.translateX = l105, i317.gridHeight = i317.svgHeight - h92 - 12, i317.gridWidth = i317.svgWidth - this.lgRect.width - l105 - 5;
                        break;
                    default:
                        throw new Error("Legend position not supported");
                }
                this.dimGrid.setGridXPosForDualYAxis(s203, a258), new $(this.ctx).setYAxisXPosition(a258, s203);
            }
        },
        {
            key: "setDimensionsForNonAxisCharts",
            value: function() {
                var t548 = this.w, e421 = t548.globals, i319 = t548.config, a259 = 0;
                t548.config.legend.show && !t548.config.legend.floating && (a259 = 20);
                var s204 = "pie" === i319.chart.type || "polarArea" === i319.chart.type || "donut" === i319.chart.type ? "pie" : "radialBar", r175 = i319.plotOptions[s204].offsetY, o154 = i319.plotOptions[s204].offsetX;
                if (!i319.legend.show || i319.legend.floating) return e421.gridHeight = e421.svgHeight - i319.grid.padding.left + i319.grid.padding.right, e421.gridWidth = e421.gridHeight, e421.translateY = r175, void (e421.translateX = o154 + (e421.svgWidth - e421.gridWidth) / 2);
                switch(i319.legend.position){
                    case "bottom":
                        e421.gridHeight = e421.svgHeight - this.lgRect.height - e421.goldenPadding, e421.gridWidth = e421.svgWidth, e421.translateY = r175 - 10, e421.translateX = o154 + (e421.svgWidth - e421.gridWidth) / 2;
                        break;
                    case "top":
                        e421.gridHeight = e421.svgHeight - this.lgRect.height - e421.goldenPadding, e421.gridWidth = e421.svgWidth, e421.translateY = this.lgRect.height + r175 + 10, e421.translateX = o154 + (e421.svgWidth - e421.gridWidth) / 2;
                        break;
                    case "left":
                        e421.gridWidth = e421.svgWidth - this.lgRect.width - a259, e421.gridHeight = "auto" !== i319.chart.height ? e421.svgHeight : e421.gridWidth, e421.translateY = r175, e421.translateX = o154 + this.lgRect.width + a259;
                        break;
                    case "right":
                        e421.gridWidth = e421.svgWidth - this.lgRect.width - a259 - 5, e421.gridHeight = "auto" !== i319.chart.height ? e421.svgHeight : e421.gridWidth, e421.translateY = r175, e421.translateX = o154 + 10;
                        break;
                    default:
                        throw new Error("Legend position not supported");
                }
            }
        },
        {
            key: "conditionalChecksForAxisCoords",
            value: function(t549, e422, i320) {
                var a260 = this.w, s205 = a260.globals.hasGroups ? 2 : 1, r176 = i320.height + t549.height + e422.height, o155 = a260.globals.isMultiLineX ? 1.2 : a260.globals.LINE_HEIGHT_RATIO, n134 = a260.globals.rotateXLabels ? 22 : 10, l106 = a260.globals.rotateXLabels && "bottom" === a260.config.legend.position ? 10 : 0;
                this.xAxisHeight = r176 * o155 + s205 * n134 + l106, this.xAxisWidth = t549.width, this.xAxisHeight - e422.height > a260.config.xaxis.labels.maxHeight && (this.xAxisHeight = a260.config.xaxis.labels.maxHeight), a260.config.xaxis.labels.minHeight && this.xAxisHeight < a260.config.xaxis.labels.minHeight && (this.xAxisHeight = a260.config.xaxis.labels.minHeight), a260.config.xaxis.floating && (this.xAxisHeight = 0);
                var h93 = 0, c79 = 0;
                a260.config.yaxis.forEach(function(t550) {
                    h93 += t550.labels.minWidth, c79 += t550.labels.maxWidth;
                }), this.yAxisWidth < h93 && (this.yAxisWidth = h93), this.yAxisWidth > c79 && (this.yAxisWidth = c79);
            }
        }
    ]), t545;
}(), ht = function() {
    function t551(e423) {
        a(this, t551), this.w = e423.w, this.lgCtx = e423;
    }
    return r(t551, [
        {
            key: "getLegendStyles",
            value: function() {
                var t552 = document.createElement("style");
                t552.setAttribute("type", "text/css");
                var e424 = document.createTextNode("	\n    	\n      .apexcharts-legend {	\n        display: flex;	\n        overflow: auto;	\n        padding: 0 10px;	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {	\n        flex-wrap: wrap	\n      }	\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {	\n        flex-direction: column;	\n        bottom: 0;	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {	\n        justify-content: flex-start;	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {	\n        justify-content: center;  	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {	\n        justify-content: flex-end;	\n      }	\n      .apexcharts-legend-series {	\n        cursor: pointer;	\n        line-height: normal;	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{	\n        display: flex;	\n        align-items: center;	\n      }	\n      .apexcharts-legend-text {	\n        position: relative;	\n        font-size: 14px;	\n      }	\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {	\n        pointer-events: none;	\n      }	\n      .apexcharts-legend-marker {	\n        position: relative;	\n        display: inline-block;	\n        cursor: pointer;	\n        margin-right: 3px;	\n        border-style: solid;\n      }	\n      	\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{	\n        display: inline-block;	\n      }	\n      .apexcharts-legend-series.apexcharts-no-click {	\n        cursor: auto;	\n      }	\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {	\n        display: none !important;	\n      }	\n      .apexcharts-inactive-legend {	\n        opacity: 0.45;	\n      }");
                return t552.appendChild(e424), t552;
            }
        },
        {
            key: "getLegendBBox",
            value: function() {
                var t553 = this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect(), e425 = t553.width;
                return {
                    clwh: t553.height,
                    clww: e425
                };
            }
        },
        {
            key: "appendToForeignObject",
            value: function() {
                var t554 = this.w.globals;
                t554.dom.elLegendForeign = document.createElementNS(t554.SVGNS, "foreignObject");
                var e426 = t554.dom.elLegendForeign;
                e426.setAttribute("x", 0), e426.setAttribute("y", 0), e426.setAttribute("width", t554.svgWidth), e426.setAttribute("height", t554.svgHeight), t554.dom.elLegendWrap.setAttribute("xmlns", "http://www.w3.org/1999/xhtml"), e426.appendChild(t554.dom.elLegendWrap), e426.appendChild(this.getLegendStyles()), t554.dom.Paper.node.insertBefore(e426, t554.dom.elGraphical.node);
            }
        },
        {
            key: "toggleDataSeries",
            value: function(t555, e427) {
                var i321 = this, a261 = this.w;
                if (a261.globals.axisCharts || "radialBar" === a261.config.chart.type) {
                    a261.globals.resized = !0;
                    var s206 = null, r177 = null;
                    if (a261.globals.risingSeries = [], a261.globals.axisCharts ? (s206 = a261.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t555, "']")), r177 = parseInt(s206.getAttribute("data:realIndex"), 10)) : (s206 = a261.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(t555 + 1, "']")), r177 = parseInt(s206.getAttribute("rel"), 10) - 1), e427) [
                        {
                            cs: a261.globals.collapsedSeries,
                            csi: a261.globals.collapsedSeriesIndices
                        },
                        {
                            cs: a261.globals.ancillaryCollapsedSeries,
                            csi: a261.globals.ancillaryCollapsedSeriesIndices
                        }
                    ].forEach(function(t556) {
                        i321.riseCollapsedSeries(t556.cs, t556.csi, r177);
                    });
                    else this.hideSeries({
                        seriesEl: s206,
                        realIndex: r177
                    });
                } else {
                    var o156 = a261.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(t555 + 1, "'] path")), n135 = a261.config.chart.type;
                    if ("pie" === n135 || "polarArea" === n135 || "donut" === n135) {
                        var l107 = a261.config.plotOptions.pie.donut.labels;
                        new m(this.lgCtx.ctx).pathMouseDown(o156.members[0], null), this.lgCtx.ctx.pie.printDataLabelsInner(o156.members[0].node, l107);
                    }
                    o156.fire("click");
                }
            }
        },
        {
            key: "hideSeries",
            value: function(t557) {
                var e428 = t557.seriesEl, i322 = t557.realIndex, a262 = this.w, s207 = x.clone(a262.config.series);
                if (a262.globals.axisCharts) {
                    var r178 = !1;
                    if (a262.config.yaxis[i322] && a262.config.yaxis[i322].show && a262.config.yaxis[i322].showAlways && (r178 = !0, a262.globals.ancillaryCollapsedSeriesIndices.indexOf(i322) < 0 && (a262.globals.ancillaryCollapsedSeries.push({
                        index: i322,
                        data: s207[i322].data.slice(),
                        type: e428.parentNode.className.baseVal.split("-")[1]
                    }), a262.globals.ancillaryCollapsedSeriesIndices.push(i322))), !r178) {
                        a262.globals.collapsedSeries.push({
                            index: i322,
                            data: s207[i322].data.slice(),
                            type: e428.parentNode.className.baseVal.split("-")[1]
                        }), a262.globals.collapsedSeriesIndices.push(i322);
                        var o157 = a262.globals.risingSeries.indexOf(i322);
                        a262.globals.risingSeries.splice(o157, 1);
                    }
                } else a262.globals.collapsedSeries.push({
                    index: i322,
                    data: s207[i322]
                }), a262.globals.collapsedSeriesIndices.push(i322);
                for(var n136 = e428.childNodes, l108 = 0; l108 < n136.length; l108++)n136[l108].classList.contains("apexcharts-series-markers-wrap") && (n136[l108].classList.contains("apexcharts-hide") ? n136[l108].classList.remove("apexcharts-hide") : n136[l108].classList.add("apexcharts-hide"));
                a262.globals.allSeriesCollapsed = a262.globals.collapsedSeries.length === a262.config.series.length, s207 = this._getSeriesBasedOnCollapsedState(s207), this.lgCtx.ctx.updateHelpers._updateSeries(s207, a262.config.chart.animations.dynamicAnimation.enabled);
            }
        },
        {
            key: "riseCollapsedSeries",
            value: function(t558, e429, i323) {
                var a263 = this.w, s208 = x.clone(a263.config.series);
                if (t558.length > 0) {
                    for(var r179 = 0; r179 < t558.length; r179++)t558[r179].index === i323 && (a263.globals.axisCharts ? (s208[i323].data = t558[r179].data.slice(), t558.splice(r179, 1), e429.splice(r179, 1), a263.globals.risingSeries.push(i323)) : (s208[i323] = t558[r179].data, t558.splice(r179, 1), e429.splice(r179, 1), a263.globals.risingSeries.push(i323)));
                    s208 = this._getSeriesBasedOnCollapsedState(s208), this.lgCtx.ctx.updateHelpers._updateSeries(s208, a263.config.chart.animations.dynamicAnimation.enabled);
                }
            }
        },
        {
            key: "_getSeriesBasedOnCollapsedState",
            value: function(t559) {
                var e430 = this.w;
                return e430.globals.axisCharts ? t559.forEach(function(i, a264) {
                    e430.globals.collapsedSeriesIndices.indexOf(a264) > -1 && (t559[a264].data = []);
                }) : t559.forEach(function(i, a265) {
                    e430.globals.collapsedSeriesIndices.indexOf(a265) > -1 && (t559[a265] = 0);
                }), t559;
            }
        }
    ]), t551;
}(), ct = function() {
    function t560(e431, i) {
        a(this, t560), this.ctx = e431, this.w = e431.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = "bar" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new ht(this);
    }
    return r(t560, [
        {
            key: "init",
            value: function() {
                var t561 = this.w, e432 = t561.globals, i324 = t561.config;
                if ((i324.legend.showForSingleSeries && 1 === e432.series.length || this.isBarsDistributed || e432.series.length > 1 || !e432.axisCharts) && i324.legend.show) {
                    for(; e432.dom.elLegendWrap.firstChild;)e432.dom.elLegendWrap.removeChild(e432.dom.elLegendWrap.firstChild);
                    this.drawLegends(), x.isIE11() ? document.getElementsByTagName("head")[0].appendChild(this.legendHelpers.getLegendStyles()) : this.legendHelpers.appendToForeignObject(), "bottom" === i324.legend.position || "top" === i324.legend.position ? this.legendAlignHorizontal() : "right" !== i324.legend.position && "left" !== i324.legend.position || this.legendAlignVertical();
                }
            }
        },
        {
            key: "drawLegends",
            value: function() {
                var t562 = this, e433 = this.w, i325 = e433.config.legend.fontFamily, a266 = e433.globals.seriesNames, s209 = e433.globals.colors.slice();
                if ("heatmap" === e433.config.chart.type) {
                    var r180 = e433.config.plotOptions.heatmap.colorScale.ranges;
                    a266 = r180.map(function(t563) {
                        return t563.name ? t563.name : t563.from + " - " + t563.to;
                    }), s209 = r180.map(function(t564) {
                        return t564.color;
                    });
                } else this.isBarsDistributed && (a266 = e433.globals.labels.slice());
                e433.config.legend.customLegendItems.length && (a266 = e433.config.legend.customLegendItems);
                for(var o158 = e433.globals.legendFormatter, n137 = e433.config.legend.inverseOrder, l109 = n137 ? a266.length - 1 : 0; n137 ? l109 >= 0 : l109 <= a266.length - 1; n137 ? l109-- : l109++){
                    var h94 = o158(a266[l109], {
                        seriesIndex: l109,
                        w: e433
                    }), c80 = !1, d67 = !1;
                    if (e433.globals.collapsedSeries.length > 0) for(var g58 = 0; g58 < e433.globals.collapsedSeries.length; g58++)e433.globals.collapsedSeries[g58].index === l109 && (c80 = !0);
                    if (e433.globals.ancillaryCollapsedSeriesIndices.length > 0) for(var u46 = 0; u46 < e433.globals.ancillaryCollapsedSeriesIndices.length; u46++)e433.globals.ancillaryCollapsedSeriesIndices[u46] === l109 && (d67 = !0);
                    var f38 = document.createElement("span");
                    f38.classList.add("apexcharts-legend-marker");
                    var p34 = e433.config.legend.markers.offsetX, b29 = e433.config.legend.markers.offsetY, v20 = e433.config.legend.markers.height, w17 = e433.config.legend.markers.width, k16 = e433.config.legend.markers.strokeWidth, A12 = e433.config.legend.markers.strokeColor, S9 = e433.config.legend.markers.radius, C8 = f38.style;
                    C8.background = s209[l109], C8.color = s209[l109], C8.setProperty("background", s209[l109], "important"), e433.config.legend.markers.fillColors && e433.config.legend.markers.fillColors[l109] && (C8.background = e433.config.legend.markers.fillColors[l109]), void 0 !== e433.globals.seriesColors[l109] && (C8.background = e433.globals.seriesColors[l109], C8.color = e433.globals.seriesColors[l109]), C8.height = Array.isArray(v20) ? parseFloat(v20[l109]) + "px" : parseFloat(v20) + "px", C8.width = Array.isArray(w17) ? parseFloat(w17[l109]) + "px" : parseFloat(w17) + "px", C8.left = (Array.isArray(p34) ? parseFloat(p34[l109]) : parseFloat(p34)) + "px", C8.top = (Array.isArray(b29) ? parseFloat(b29[l109]) : parseFloat(b29)) + "px", C8.borderWidth = Array.isArray(k16) ? k16[l109] : k16, C8.borderColor = Array.isArray(A12) ? A12[l109] : A12, C8.borderRadius = Array.isArray(S9) ? parseFloat(S9[l109]) + "px" : parseFloat(S9) + "px", e433.config.legend.markers.customHTML && (Array.isArray(e433.config.legend.markers.customHTML) ? e433.config.legend.markers.customHTML[l109] && (f38.innerHTML = e433.config.legend.markers.customHTML[l109]()) : f38.innerHTML = e433.config.legend.markers.customHTML()), m.setAttrs(f38, {
                        rel: l109 + 1,
                        "data:collapsed": c80 || d67
                    }), (c80 || d67) && f38.classList.add("apexcharts-inactive-legend");
                    var L8 = document.createElement("div"), P8 = document.createElement("span");
                    P8.classList.add("apexcharts-legend-text"), P8.innerHTML = Array.isArray(h94) ? h94.join(" ") : h94;
                    var M7 = e433.config.legend.labels.useSeriesColors ? e433.globals.colors[l109] : e433.config.legend.labels.colors;
                    M7 || (M7 = e433.config.chart.foreColor), P8.style.color = M7, P8.style.fontSize = parseFloat(e433.config.legend.fontSize) + "px", P8.style.fontWeight = e433.config.legend.fontWeight, P8.style.fontFamily = i325 || e433.config.chart.fontFamily, m.setAttrs(P8, {
                        rel: l109 + 1,
                        i: l109,
                        "data:default-text": encodeURIComponent(h94),
                        "data:collapsed": c80 || d67
                    }), L8.appendChild(f38), L8.appendChild(P8);
                    var T7 = new y(this.ctx);
                    if (!e433.config.legend.showForZeroSeries) 0 === T7.getSeriesTotalByIndex(l109) && T7.seriesHaveSameValues(l109) && !T7.isSeriesNull(l109) && -1 === e433.globals.collapsedSeriesIndices.indexOf(l109) && -1 === e433.globals.ancillaryCollapsedSeriesIndices.indexOf(l109) && L8.classList.add("apexcharts-hidden-zero-series");
                    e433.config.legend.showForNullSeries || T7.isSeriesNull(l109) && -1 === e433.globals.collapsedSeriesIndices.indexOf(l109) && -1 === e433.globals.ancillaryCollapsedSeriesIndices.indexOf(l109) && L8.classList.add("apexcharts-hidden-null-series"), e433.globals.dom.elLegendWrap.appendChild(L8), e433.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(e433.config.legend.horizontalAlign)), e433.globals.dom.elLegendWrap.classList.add("apx-legend-position-" + e433.config.legend.position), L8.classList.add("apexcharts-legend-series"), L8.style.margin = "".concat(e433.config.legend.itemMargin.vertical, "px ").concat(e433.config.legend.itemMargin.horizontal, "px"), e433.globals.dom.elLegendWrap.style.width = e433.config.legend.width ? e433.config.legend.width + "px" : "", e433.globals.dom.elLegendWrap.style.height = e433.config.legend.height ? e433.config.legend.height + "px" : "", m.setAttrs(L8, {
                        rel: l109 + 1,
                        seriesName: x.escapeString(a266[l109]),
                        "data:collapsed": c80 || d67
                    }), (c80 || d67) && L8.classList.add("apexcharts-inactive-legend"), e433.config.legend.onItemClick.toggleDataSeries || L8.classList.add("apexcharts-no-click");
                }
                e433.globals.dom.elWrap.addEventListener("click", t562.onLegendClick, !0), e433.config.legend.onItemHover.highlightDataSeries && 0 === e433.config.legend.customLegendItems.length && (e433.globals.dom.elWrap.addEventListener("mousemove", t562.onLegendHovered, !0), e433.globals.dom.elWrap.addEventListener("mouseout", t562.onLegendHovered, !0));
            }
        },
        {
            key: "setLegendWrapXY",
            value: function(t565, e434) {
                var i326 = this.w, a267 = i326.globals.dom.baseEl.querySelector(".apexcharts-legend"), s210 = a267.getBoundingClientRect(), r181 = 0, o159 = 0;
                if ("bottom" === i326.config.legend.position) o159 += i326.globals.svgHeight - s210.height / 2;
                else if ("top" === i326.config.legend.position) {
                    var n138 = new lt(this.ctx), l110 = n138.dimHelpers.getTitleSubtitleCoords("title").height, h95 = n138.dimHelpers.getTitleSubtitleCoords("subtitle").height;
                    o159 = o159 + (l110 > 0 ? l110 - 10 : 0) + (h95 > 0 ? h95 - 10 : 0);
                }
                a267.style.position = "absolute", r181 = r181 + t565 + i326.config.legend.offsetX, o159 = o159 + e434 + i326.config.legend.offsetY, a267.style.left = r181 + "px", a267.style.top = o159 + "px", "bottom" === i326.config.legend.position ? (a267.style.top = "auto", a267.style.bottom = 5 - i326.config.legend.offsetY + "px") : "right" === i326.config.legend.position && (a267.style.left = "auto", a267.style.right = 25 + i326.config.legend.offsetX + "px");
                [
                    "width",
                    "height"
                ].forEach(function(t566) {
                    a267.style[t566] && (a267.style[t566] = parseInt(i326.config.legend[t566], 10) + "px");
                });
            }
        },
        {
            key: "legendAlignHorizontal",
            value: function() {
                var t567 = this.w;
                t567.globals.dom.baseEl.querySelector(".apexcharts-legend").style.right = 0;
                var e435 = this.legendHelpers.getLegendBBox(), i327 = new lt(this.ctx), a268 = i327.dimHelpers.getTitleSubtitleCoords("title"), s211 = i327.dimHelpers.getTitleSubtitleCoords("subtitle"), r182 = 0;
                "bottom" === t567.config.legend.position ? r182 = -e435.clwh / 1.8 : "top" === t567.config.legend.position && (r182 = a268.height + s211.height + t567.config.title.margin + t567.config.subtitle.margin - 10), this.setLegendWrapXY(20, r182);
            }
        },
        {
            key: "legendAlignVertical",
            value: function() {
                var t568 = this.w, e436 = this.legendHelpers.getLegendBBox(), i328 = 0;
                "left" === t568.config.legend.position && (i328 = 20), "right" === t568.config.legend.position && (i328 = t568.globals.svgWidth - e436.clww - 10), this.setLegendWrapXY(i328, 20);
            }
        },
        {
            key: "onLegendHovered",
            value: function(t569) {
                var e437 = this.w, i329 = t569.target.classList.contains("apexcharts-legend-text") || t569.target.classList.contains("apexcharts-legend-marker");
                if ("heatmap" === e437.config.chart.type || this.isBarsDistributed) {
                    if (i329) {
                        var a269 = parseInt(t569.target.getAttribute("rel"), 10) - 1;
                        this.ctx.events.fireEvent("legendHover", [
                            this.ctx,
                            a269,
                            this.w
                        ]), new E(this.ctx).highlightRangeInSeries(t569, t569.target);
                    }
                } else !t569.target.classList.contains("apexcharts-inactive-legend") && i329 && new E(this.ctx).toggleSeriesOnHover(t569, t569.target);
            }
        },
        {
            key: "onLegendClick",
            value: function(t570) {
                var e438 = this.w;
                if (!e438.config.legend.customLegendItems.length && (t570.target.classList.contains("apexcharts-legend-text") || t570.target.classList.contains("apexcharts-legend-marker"))) {
                    var i330 = parseInt(t570.target.getAttribute("rel"), 10) - 1, a270 = "true" === t570.target.getAttribute("data:collapsed"), s212 = this.w.config.chart.events.legendClick;
                    "function" == typeof s212 && s212(this.ctx, i330, this.w), this.ctx.events.fireEvent("legendClick", [
                        this.ctx,
                        i330,
                        this.w
                    ]);
                    var r183 = this.w.config.legend.markers.onClick;
                    "function" == typeof r183 && t570.target.classList.contains("apexcharts-legend-marker") && (r183(this.ctx, i330, this.w), this.ctx.events.fireEvent("legendMarkerClick", [
                        this.ctx,
                        i330,
                        this.w
                    ])), "treemap" !== e438.config.chart.type && "heatmap" !== e438.config.chart.type && !this.isBarsDistributed && e438.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i330, a270);
                }
            }
        }
    ]), t560;
}(), dt = function() {
    function t571(e439) {
        a(this, t571), this.ctx = e439, this.w = e439.w;
        var i331 = this.w;
        this.ev = this.w.config.chart.events, this.selectedClass = "apexcharts-selected", this.localeValues = this.w.globals.locale.toolbar, this.minX = i331.globals.minX, this.maxX = i331.globals.maxX;
    }
    return r(t571, [
        {
            key: "createToolbar",
            value: function() {
                var t572 = this, e440 = this.w, i332 = function() {
                    return document.createElement("div");
                }, a271 = i332();
                if (a271.setAttribute("class", "apexcharts-toolbar"), a271.style.top = e440.config.chart.toolbar.offsetY + "px", a271.style.right = 3 - e440.config.chart.toolbar.offsetX + "px", e440.globals.dom.elWrap.appendChild(a271), this.elZoom = i332(), this.elZoomIn = i332(), this.elZoomOut = i332(), this.elPan = i332(), this.elSelection = i332(), this.elZoomReset = i332(), this.elMenuIcon = i332(), this.elMenu = i332(), this.elCustomIcons = [], this.t = e440.config.chart.toolbar.tools, Array.isArray(this.t.customIcons)) for(var s213 = 0; s213 < this.t.customIcons.length; s213++)this.elCustomIcons.push(i332());
                var r184 = [], o160 = function(i333, a272, s214) {
                    var o161 = i333.toLowerCase();
                    t572.t[o161] && e440.config.chart.zoom.enabled && r184.push({
                        el: a272,
                        icon: "string" == typeof t572.t[o161] ? t572.t[o161] : s214,
                        title: t572.localeValues[i333],
                        class: "apexcharts-".concat(o161, "-icon")
                    });
                };
                o160("zoomIn", this.elZoomIn, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'), o160("zoomOut", this.elZoomOut, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n');
                var n139 = function(i334) {
                    t572.t[i334] && e440.config.chart[i334].enabled && r184.push({
                        el: "zoom" === i334 ? t572.elZoom : t572.elSelection,
                        icon: "string" == typeof t572.t[i334] ? t572.t[i334] : "zoom" === i334 ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>' : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>',
                        title: t572.localeValues["zoom" === i334 ? "selectionZoom" : "selection"],
                        class: e440.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-".concat(i334, "-icon")
                    });
                };
                n139("zoom"), n139("selection"), this.t.pan && e440.config.chart.zoom.enabled && r184.push({
                    el: this.elPan,
                    icon: "string" == typeof this.t.pan ? this.t.pan : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>',
                    title: this.localeValues.pan,
                    class: e440.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-pan-icon"
                }), o160("reset", this.elZoomReset, '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'), this.t.download && r184.push({
                    el: this.elMenuIcon,
                    icon: "string" == typeof this.t.download ? this.t.download : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
                    title: this.localeValues.menu,
                    class: "apexcharts-menu-icon"
                });
                for(var l111 = 0; l111 < this.elCustomIcons.length; l111++)r184.push({
                    el: this.elCustomIcons[l111],
                    icon: this.t.customIcons[l111].icon,
                    title: this.t.customIcons[l111].title,
                    index: this.t.customIcons[l111].index,
                    class: "apexcharts-toolbar-custom-icon " + this.t.customIcons[l111].class
                });
                r184.forEach(function(t573, e441) {
                    t573.index && x.moveIndexInArray(r184, e441, t573.index);
                });
                for(var h96 = 0; h96 < r184.length; h96++)m.setAttrs(r184[h96].el, {
                    class: r184[h96].class,
                    title: r184[h96].title
                }), r184[h96].el.innerHTML = r184[h96].icon, a271.appendChild(r184[h96].el);
                this._createHamburgerMenu(a271), e440.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e440.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e440.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners();
            }
        },
        {
            key: "_createHamburgerMenu",
            value: function(t574) {
                this.elMenuItems = [], t574.appendChild(this.elMenu), m.setAttrs(this.elMenu, {
                    class: "apexcharts-menu"
                });
                var e442 = [
                    {
                        name: "exportSVG",
                        title: this.localeValues.exportToSVG
                    },
                    {
                        name: "exportPNG",
                        title: this.localeValues.exportToPNG
                    },
                    {
                        name: "exportCSV",
                        title: this.localeValues.exportToCSV
                    }
                ];
                this.w.globals.allSeriesHasEqualX || e442.splice(2, 1);
                for(var i335 = 0; i335 < e442.length; i335++)this.elMenuItems.push(document.createElement("div")), this.elMenuItems[i335].innerHTML = e442[i335].title, m.setAttrs(this.elMenuItems[i335], {
                    class: "apexcharts-menu-item ".concat(e442[i335].name),
                    title: e442[i335].title
                }), this.elMenu.appendChild(this.elMenuItems[i335]);
            }
        },
        {
            key: "addToolbarEventListeners",
            value: function() {
                var t575 = this;
                this.elZoomReset.addEventListener("click", this.handleZoomReset.bind(this)), this.elSelection.addEventListener("click", this.toggleZoomSelection.bind(this, "selection")), this.elZoom.addEventListener("click", this.toggleZoomSelection.bind(this, "zoom")), this.elZoomIn.addEventListener("click", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener("click", this.handleZoomOut.bind(this)), this.elPan.addEventListener("click", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener("click", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function(e444) {
                    e444.classList.contains("exportSVG") ? e444.addEventListener("click", t575.handleDownload.bind(t575, "svg")) : e444.classList.contains("exportPNG") ? e444.addEventListener("click", t575.handleDownload.bind(t575, "png")) : e444.classList.contains("exportCSV") && e444.addEventListener("click", t575.handleDownload.bind(t575, "csv"));
                });
                for(var e443 = 0; e443 < this.t.customIcons.length; e443++)this.elCustomIcons[e443].addEventListener("click", this.t.customIcons[e443].click.bind(this, this.ctx, this.ctx.w));
            }
        },
        {
            key: "toggleZoomSelection",
            value: function(t576) {
                this.ctx.getSyncedCharts().forEach(function(e445) {
                    e445.ctx.toolbar.toggleOtherControls();
                    var i336 = "selection" === t576 ? e445.ctx.toolbar.elSelection : e445.ctx.toolbar.elZoom, a273 = "selection" === t576 ? "selectionEnabled" : "zoomEnabled";
                    e445.w.globals[a273] = !e445.w.globals[a273], i336.classList.contains(e445.ctx.toolbar.selectedClass) ? i336.classList.remove(e445.ctx.toolbar.selectedClass) : i336.classList.add(e445.ctx.toolbar.selectedClass);
                });
            }
        },
        {
            key: "getToolbarIconsReference",
            value: function() {
                var t577 = this.w;
                this.elZoom || (this.elZoom = t577.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")), this.elPan || (this.elPan = t577.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")), this.elSelection || (this.elSelection = t577.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"));
            }
        },
        {
            key: "enableZoomPanFromToolbar",
            value: function(t578) {
                this.toggleOtherControls(), "pan" === t578 ? this.w.globals.panEnabled = !0 : this.w.globals.zoomEnabled = !0;
                var e446 = "pan" === t578 ? this.elPan : this.elZoom, i337 = "pan" === t578 ? this.elZoom : this.elPan;
                e446 && e446.classList.add(this.selectedClass), i337 && i337.classList.remove(this.selectedClass);
            }
        },
        {
            key: "togglePanning",
            value: function() {
                this.ctx.getSyncedCharts().forEach(function(t579) {
                    t579.ctx.toolbar.toggleOtherControls(), t579.w.globals.panEnabled = !t579.w.globals.panEnabled, t579.ctx.toolbar.elPan.classList.contains(t579.ctx.toolbar.selectedClass) ? t579.ctx.toolbar.elPan.classList.remove(t579.ctx.toolbar.selectedClass) : t579.ctx.toolbar.elPan.classList.add(t579.ctx.toolbar.selectedClass);
                });
            }
        },
        {
            key: "toggleOtherControls",
            value: function() {
                var t580 = this, e447 = this.w;
                e447.globals.panEnabled = !1, e447.globals.zoomEnabled = !1, e447.globals.selectionEnabled = !1, this.getToolbarIconsReference(), [
                    this.elPan,
                    this.elSelection,
                    this.elZoom
                ].forEach(function(e448) {
                    e448 && e448.classList.remove(t580.selectedClass);
                });
            }
        },
        {
            key: "handleZoomIn",
            value: function() {
                var t581 = this.w;
                t581.globals.isRangeBar && (this.minX = t581.globals.minY, this.maxX = t581.globals.maxY);
                var e449 = (this.minX + this.maxX) / 2, i338 = (this.minX + e449) / 2, a274 = (this.maxX + e449) / 2, s215 = this._getNewMinXMaxX(i338, a274);
                t581.globals.disableZoomIn || this.zoomUpdateOptions(s215.minX, s215.maxX);
            }
        },
        {
            key: "handleZoomOut",
            value: function() {
                var t582 = this.w;
                if (t582.globals.isRangeBar && (this.minX = t582.globals.minY, this.maxX = t582.globals.maxY), !("datetime" === t582.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3)) {
                    var e450 = (this.minX + this.maxX) / 2, i339 = this.minX - (e450 - this.minX), a275 = this.maxX - (e450 - this.maxX), s216 = this._getNewMinXMaxX(i339, a275);
                    t582.globals.disableZoomOut || this.zoomUpdateOptions(s216.minX, s216.maxX);
                }
            }
        },
        {
            key: "_getNewMinXMaxX",
            value: function(t583, e451) {
                var i340 = this.w.config.xaxis.convertedCatToNumeric;
                return {
                    minX: i340 ? Math.floor(t583) : t583,
                    maxX: i340 ? Math.floor(e451) : e451
                };
            }
        },
        {
            key: "zoomUpdateOptions",
            value: function(t584, e452) {
                var i341 = this.w;
                if (void 0 !== t584 || void 0 !== e452) {
                    if (!(i341.config.xaxis.convertedCatToNumeric && (t584 < 1 && (t584 = 1, e452 = i341.globals.dataPoints), e452 - t584 < 2))) {
                        var a276 = {
                            min: t584,
                            max: e452
                        }, s217 = this.getBeforeZoomRange(a276);
                        s217 && (a276 = s217.xaxis);
                        var r185 = {
                            xaxis: a276
                        }, o162 = x.clone(i341.globals.initialConfig.yaxis);
                        if (i341.config.chart.zoom.autoScaleYaxis) o162 = new q(this.ctx).autoScaleY(this.ctx, o162, {
                            xaxis: a276
                        });
                        i341.config.chart.group || (r185.yaxis = o162), this.w.globals.zoomed = !0, this.ctx.updateHelpers._updateOptions(r185, !1, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a276, o162);
                    }
                } else this.handleZoomReset();
            }
        },
        {
            key: "zoomCallback",
            value: function(t585, e453) {
                "function" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, {
                    xaxis: t585,
                    yaxis: e453
                });
            }
        },
        {
            key: "getBeforeZoomRange",
            value: function(t586, e454) {
                var i342 = null;
                return "function" == typeof this.ev.beforeZoom && (i342 = this.ev.beforeZoom(this, {
                    xaxis: t586,
                    yaxis: e454
                })), i342;
            }
        },
        {
            key: "toggleMenu",
            value: function() {
                var t587 = this;
                window.setTimeout(function() {
                    t587.elMenu.classList.contains("apexcharts-menu-open") ? t587.elMenu.classList.remove("apexcharts-menu-open") : t587.elMenu.classList.add("apexcharts-menu-open");
                }, 0);
            }
        },
        {
            key: "handleDownload",
            value: function(t588) {
                var e455 = this.w, i343 = new j(this.ctx);
                switch(t588){
                    case "svg":
                        i343.exportToSVG(this.ctx);
                        break;
                    case "png":
                        i343.exportToPng(this.ctx);
                        break;
                    case "csv":
                        i343.exportToCSV({
                            series: e455.config.series,
                            columnDelimiter: e455.config.chart.toolbar.export.csv.columnDelimiter
                        });
                }
            }
        },
        {
            key: "handleZoomReset",
            value: function(t589) {
                this.ctx.getSyncedCharts().forEach(function(t590) {
                    var e456 = t590.w;
                    if (e456.globals.lastXAxis.min = void 0, e456.globals.lastXAxis.max = void 0, t590.updateHelpers.revertDefaultAxisMinMax(), "function" == typeof e456.config.chart.events.beforeResetZoom) {
                        var i344 = e456.config.chart.events.beforeResetZoom(t590, e456);
                        i344 && t590.updateHelpers.revertDefaultAxisMinMax(i344);
                    }
                    "function" == typeof e456.config.chart.events.zoomed && t590.ctx.toolbar.zoomCallback({
                        min: e456.config.xaxis.min,
                        max: e456.config.xaxis.max
                    }), e456.globals.zoomed = !1;
                    var a277 = t590.ctx.series.emptyCollapsedSeries(x.clone(e456.globals.initialSeries));
                    t590.updateHelpers._updateSeries(a277, e456.config.chart.animations.dynamicAnimation.enabled);
                });
            }
        },
        {
            key: "destroy",
            value: function() {
                this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;
            }
        }
    ]), t571;
}(), gt = function(t591) {
    n(i345, dt);
    var e457 = d(i345);
    function i345(t592) {
        var s218;
        return a(this, i345), (s218 = e457.call(this, t592)).ctx = t592, s218.w = t592.w, s218.dragged = !1, s218.graphics = new m(s218.ctx), s218.eventList = [
            "mousedown",
            "mouseleave",
            "mousemove",
            "touchstart",
            "touchmove",
            "mouseup",
            "touchend"
        ], s218.clientX = 0, s218.clientY = 0, s218.startX = 0, s218.endX = 0, s218.dragX = 0, s218.startY = 0, s218.endY = 0, s218.dragY = 0, s218.moveDirection = "none", s218;
    }
    return r(i345, [
        {
            key: "init",
            value: function(t593) {
                var e458 = this, i346 = t593.xyRatios, a278 = this.w, s219 = this;
                this.xyRatios = i346, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a278.globals.dom.baseEl.querySelector(".apexcharts-grid"), this.zoomRect.node.classList.add("apexcharts-zoom-rect"), this.selectionRect.node.classList.add("apexcharts-selection-rect"), a278.globals.dom.elGraphical.add(this.zoomRect), a278.globals.dom.elGraphical.add(this.selectionRect), "x" === a278.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({
                    minX: 0,
                    minY: 0,
                    maxX: a278.globals.gridWidth,
                    maxY: a278.globals.gridHeight
                }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : "y" === a278.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({
                    minX: 0,
                    maxX: a278.globals.gridWidth
                }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : this.slDraggableRect = this.selectionRect.draggable().on("dragmove", this.selectionDragging.bind(this, "dragging")), this.preselectedSelection(), this.hoverArea = a278.globals.dom.baseEl.querySelector("".concat(a278.globals.chartClass, " .apexcharts-svg")), this.hoverArea.classList.add("apexcharts-zoomable"), this.eventList.forEach(function(t594) {
                    e458.hoverArea.addEventListener(t594, s219.svgMouseEvents.bind(s219, i346), {
                        capture: !1,
                        passive: !0
                    });
                });
            }
        },
        {
            key: "destroy",
            value: function() {
                this.slDraggableRect && (this.slDraggableRect.draggable(!1), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;
            }
        },
        {
            key: "svgMouseEvents",
            value: function(t595, e459) {
                var i347 = this.w, a279 = this, s220 = this.ctx.toolbar, r186 = i347.globals.zoomEnabled ? i347.config.chart.zoom.type : i347.config.chart.selection.type, o163 = i347.config.chart.toolbar.autoSelected;
                if (e459.shiftKey ? (this.shiftWasPressed = !0, s220.enableZoomPanFromToolbar("pan" === o163 ? "zoom" : "pan")) : this.shiftWasPressed && (s220.enableZoomPanFromToolbar(o163), this.shiftWasPressed = !1), e459.target) {
                    var n140, l112 = e459.target.classList;
                    if (e459.target.parentNode && null !== e459.target.parentNode && (n140 = e459.target.parentNode.classList), !(l112.contains("apexcharts-selection-rect") || l112.contains("apexcharts-legend-marker") || l112.contains("apexcharts-legend-text") || n140 && n140.contains("apexcharts-toolbar"))) {
                        if (a279.clientX = "touchmove" === e459.type || "touchstart" === e459.type ? e459.touches[0].clientX : "touchend" === e459.type ? e459.changedTouches[0].clientX : e459.clientX, a279.clientY = "touchmove" === e459.type || "touchstart" === e459.type ? e459.touches[0].clientY : "touchend" === e459.type ? e459.changedTouches[0].clientY : e459.clientY, "mousedown" === e459.type && 1 === e459.which) {
                            var h97 = a279.gridRect.getBoundingClientRect();
                            a279.startX = a279.clientX - h97.left, a279.startY = a279.clientY - h97.top, a279.dragged = !1, a279.w.globals.mousedown = !0;
                        }
                        if (("mousemove" === e459.type && 1 === e459.which || "touchmove" === e459.type) && (a279.dragged = !0, i347.globals.panEnabled ? (i347.globals.selection = null, a279.w.globals.mousedown && a279.panDragging({
                            context: a279,
                            zoomtype: r186,
                            xyRatios: t595
                        })) : (a279.w.globals.mousedown && i347.globals.zoomEnabled || a279.w.globals.mousedown && i347.globals.selectionEnabled) && (a279.selection = a279.selectionDrawing({
                            context: a279,
                            zoomtype: r186
                        }))), "mouseup" === e459.type || "touchend" === e459.type || "mouseleave" === e459.type) {
                            var c81 = a279.gridRect.getBoundingClientRect();
                            a279.w.globals.mousedown && (a279.endX = a279.clientX - c81.left, a279.endY = a279.clientY - c81.top, a279.dragX = Math.abs(a279.endX - a279.startX), a279.dragY = Math.abs(a279.endY - a279.startY), (i347.globals.zoomEnabled || i347.globals.selectionEnabled) && a279.selectionDrawn({
                                context: a279,
                                zoomtype: r186
                            }), i347.globals.panEnabled && i347.config.xaxis.convertedCatToNumeric && a279.delayedPanScrolled()), i347.globals.zoomEnabled && a279.hideSelectionRect(this.selectionRect), a279.dragged = !1, a279.w.globals.mousedown = !1;
                        }
                        this.makeSelectionRectDraggable();
                    }
                }
            }
        },
        {
            key: "makeSelectionRectDraggable",
            value: function() {
                var t596 = this.w;
                if (this.selectionRect) {
                    var e460 = this.selectionRect.node.getBoundingClientRect();
                    e460.width > 0 && e460.height > 0 && this.slDraggableRect.selectize({
                        points: "l, r",
                        pointSize: 8,
                        pointType: "rect"
                    }).resize({
                        constraint: {
                            minX: 0,
                            minY: 0,
                            maxX: t596.globals.gridWidth,
                            maxY: t596.globals.gridHeight
                        }
                    }).on("resizing", this.selectionDragging.bind(this, "resizing"));
                }
            }
        },
        {
            key: "preselectedSelection",
            value: function() {
                var t597 = this.w, e461 = this.xyRatios;
                if (!t597.globals.zoomEnabled) {
                    if (void 0 !== t597.globals.selection && null !== t597.globals.selection) this.drawSelectionRect(t597.globals.selection);
                    else if (void 0 !== t597.config.chart.selection.xaxis.min && void 0 !== t597.config.chart.selection.xaxis.max) {
                        var i348 = (t597.config.chart.selection.xaxis.min - t597.globals.minX) / e461.xRatio, a280 = {
                            x: i348,
                            y: 0,
                            width: t597.globals.gridWidth - (t597.globals.maxX - t597.config.chart.selection.xaxis.max) / e461.xRatio - i348,
                            height: t597.globals.gridHeight,
                            translateX: 0,
                            translateY: 0,
                            selectionEnabled: !0
                        };
                        this.drawSelectionRect(a280), this.makeSelectionRectDraggable(), "function" == typeof t597.config.chart.events.selection && t597.config.chart.events.selection(this.ctx, {
                            xaxis: {
                                min: t597.config.chart.selection.xaxis.min,
                                max: t597.config.chart.selection.xaxis.max
                            },
                            yaxis: {}
                        });
                    }
                }
            }
        },
        {
            key: "drawSelectionRect",
            value: function(t598) {
                var e462 = t598.x, i349 = t598.y, a281 = t598.width, s221 = t598.height, r187 = t598.translateX, o164 = void 0 === r187 ? 0 : r187, n141 = t598.translateY, l113 = void 0 === n141 ? 0 : n141, h98 = this.w, c82 = this.zoomRect, d68 = this.selectionRect;
                if (this.dragged || null !== h98.globals.selection) {
                    var g59 = {
                        transform: "translate(" + o164 + ", " + l113 + ")"
                    };
                    h98.globals.zoomEnabled && this.dragged && (a281 < 0 && (a281 = 1), c82.attr({
                        x: e462,
                        y: i349,
                        width: a281,
                        height: s221,
                        fill: h98.config.chart.zoom.zoomedArea.fill.color,
                        "fill-opacity": h98.config.chart.zoom.zoomedArea.fill.opacity,
                        stroke: h98.config.chart.zoom.zoomedArea.stroke.color,
                        "stroke-width": h98.config.chart.zoom.zoomedArea.stroke.width,
                        "stroke-opacity": h98.config.chart.zoom.zoomedArea.stroke.opacity
                    }), m.setAttrs(c82.node, g59)), h98.globals.selectionEnabled && (d68.attr({
                        x: e462,
                        y: i349,
                        width: a281 > 0 ? a281 : 0,
                        height: s221 > 0 ? s221 : 0,
                        fill: h98.config.chart.selection.fill.color,
                        "fill-opacity": h98.config.chart.selection.fill.opacity,
                        stroke: h98.config.chart.selection.stroke.color,
                        "stroke-width": h98.config.chart.selection.stroke.width,
                        "stroke-dasharray": h98.config.chart.selection.stroke.dashArray,
                        "stroke-opacity": h98.config.chart.selection.stroke.opacity
                    }), m.setAttrs(d68.node, g59));
                }
            }
        },
        {
            key: "hideSelectionRect",
            value: function(t599) {
                t599 && t599.attr({
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0
                });
            }
        },
        {
            key: "selectionDrawing",
            value: function(t600) {
                var e463 = t600.context, i350 = t600.zoomtype, a282 = this.w, s222 = e463, r188 = this.gridRect.getBoundingClientRect(), o165 = s222.startX - 1, n142 = s222.startY, l114 = !1, h99 = !1, c83 = s222.clientX - r188.left - o165, d69 = s222.clientY - r188.top - n142, g60 = {};
                return Math.abs(c83 + o165) > a282.globals.gridWidth ? c83 = a282.globals.gridWidth - o165 : s222.clientX - r188.left < 0 && (c83 = o165), o165 > s222.clientX - r188.left && (l114 = !0, c83 = Math.abs(c83)), n142 > s222.clientY - r188.top && (h99 = !0, d69 = Math.abs(d69)), g60 = "x" === i350 ? {
                    x: l114 ? o165 - c83 : o165,
                    y: 0,
                    width: c83,
                    height: a282.globals.gridHeight
                } : "y" === i350 ? {
                    x: 0,
                    y: h99 ? n142 - d69 : n142,
                    width: a282.globals.gridWidth,
                    height: d69
                } : {
                    x: l114 ? o165 - c83 : o165,
                    y: h99 ? n142 - d69 : n142,
                    width: c83,
                    height: d69
                }, s222.drawSelectionRect(g60), s222.selectionDragging("resizing"), g60;
            }
        },
        {
            key: "selectionDragging",
            value: function(t601, e464) {
                var i351 = this, a283 = this.w, s223 = this.xyRatios, r189 = this.selectionRect, o166 = 0;
                "resizing" === t601 && (o166 = 30);
                var n143 = function(t602) {
                    return parseFloat(r189.node.getAttribute(t602));
                }, l115 = {
                    x: n143("x"),
                    y: n143("y"),
                    width: n143("width"),
                    height: n143("height")
                };
                a283.globals.selection = l115, "function" == typeof a283.config.chart.events.selection && a283.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function() {
                    var t603 = i351.gridRect.getBoundingClientRect(), e465 = r189.node.getBoundingClientRect(), o167 = {
                        xaxis: {
                            min: a283.globals.xAxisScale.niceMin + (e465.left - t603.left) * s223.xRatio,
                            max: a283.globals.xAxisScale.niceMin + (e465.right - t603.left) * s223.xRatio
                        },
                        yaxis: {
                            min: a283.globals.yAxisScale[0].niceMin + (t603.bottom - e465.bottom) * s223.yRatio[0],
                            max: a283.globals.yAxisScale[0].niceMax - (e465.top - t603.top) * s223.yRatio[0]
                        }
                    };
                    a283.config.chart.events.selection(i351.ctx, o167), a283.config.chart.brush.enabled && void 0 !== a283.config.chart.events.brushScrolled && a283.config.chart.events.brushScrolled(i351.ctx, o167);
                }, o166));
            }
        },
        {
            key: "selectionDrawn",
            value: function(t604) {
                var e466 = t604.context, i352 = t604.zoomtype, a284 = this.w, s224 = e466, r190 = this.xyRatios, o168 = this.ctx.toolbar;
                if (s224.startX > s224.endX) {
                    var n144 = s224.startX;
                    s224.startX = s224.endX, s224.endX = n144;
                }
                if (s224.startY > s224.endY) {
                    var l116 = s224.startY;
                    s224.startY = s224.endY, s224.endY = l116;
                }
                var h100 = void 0, c84 = void 0;
                a284.globals.isRangeBar ? (h100 = a284.globals.yAxisScale[0].niceMin + s224.startX * r190.invertedYRatio, c84 = a284.globals.yAxisScale[0].niceMin + s224.endX * r190.invertedYRatio) : (h100 = a284.globals.xAxisScale.niceMin + s224.startX * r190.xRatio, c84 = a284.globals.xAxisScale.niceMin + s224.endX * r190.xRatio);
                var d70 = [], g61 = [];
                if (a284.config.yaxis.forEach(function(t, e467) {
                    d70.push(a284.globals.yAxisScale[e467].niceMax - r190.yRatio[e467] * s224.startY), g61.push(a284.globals.yAxisScale[e467].niceMax - r190.yRatio[e467] * s224.endY);
                }), s224.dragged && (s224.dragX > 10 || s224.dragY > 10) && h100 !== c84) {
                    if (a284.globals.zoomEnabled) {
                        var u47 = x.clone(a284.globals.initialConfig.yaxis), f39 = x.clone(a284.globals.initialConfig.xaxis);
                        if (a284.globals.zoomed = !0, a284.config.xaxis.convertedCatToNumeric && (h100 = Math.floor(h100), c84 = Math.floor(c84), h100 < 1 && (h100 = 1, c84 = a284.globals.dataPoints), c84 - h100 < 2 && (c84 = h100 + 1)), "xy" !== i352 && "x" !== i352 || (f39 = {
                            min: h100,
                            max: c84
                        }), "xy" !== i352 && "y" !== i352 || u47.forEach(function(t, e468) {
                            u47[e468].min = g61[e468], u47[e468].max = d70[e468];
                        }), a284.config.chart.zoom.autoScaleYaxis) {
                            var p35 = new q(s224.ctx);
                            u47 = p35.autoScaleY(s224.ctx, u47, {
                                xaxis: f39
                            });
                        }
                        if (o168) {
                            var b30 = o168.getBeforeZoomRange(f39, u47);
                            b30 && (f39 = b30.xaxis ? b30.xaxis : f39, u47 = b30.yaxis ? b30.yaxis : u47);
                        }
                        var v21 = {
                            xaxis: f39
                        };
                        a284.config.chart.group || (v21.yaxis = u47), s224.ctx.updateHelpers._updateOptions(v21, !1, s224.w.config.chart.animations.dynamicAnimation.enabled), "function" == typeof a284.config.chart.events.zoomed && o168.zoomCallback(f39, u47);
                    } else if (a284.globals.selectionEnabled) {
                        var m8, y21 = null;
                        m8 = {
                            min: h100,
                            max: c84
                        }, "xy" !== i352 && "y" !== i352 || (y21 = x.clone(a284.config.yaxis)).forEach(function(t, e469) {
                            y21[e469].min = g61[e469], y21[e469].max = d70[e469];
                        }), a284.globals.selection = s224.selection, "function" == typeof a284.config.chart.events.selection && a284.config.chart.events.selection(s224.ctx, {
                            xaxis: m8,
                            yaxis: y21
                        });
                    }
                }
            }
        },
        {
            key: "panDragging",
            value: function(t605) {
                var e470 = t605.context, i353 = this.w, a285 = e470;
                if (void 0 !== i353.globals.lastClientPosition.x) {
                    var s225 = i353.globals.lastClientPosition.x - a285.clientX, r191 = i353.globals.lastClientPosition.y - a285.clientY;
                    Math.abs(s225) > Math.abs(r191) && s225 > 0 ? this.moveDirection = "left" : Math.abs(s225) > Math.abs(r191) && s225 < 0 ? this.moveDirection = "right" : Math.abs(r191) > Math.abs(s225) && r191 > 0 ? this.moveDirection = "up" : Math.abs(r191) > Math.abs(s225) && r191 < 0 && (this.moveDirection = "down");
                }
                i353.globals.lastClientPosition = {
                    x: a285.clientX,
                    y: a285.clientY
                };
                var o169 = i353.globals.isRangeBar ? i353.globals.minY : i353.globals.minX, n145 = i353.globals.isRangeBar ? i353.globals.maxY : i353.globals.maxX;
                i353.config.xaxis.convertedCatToNumeric || a285.panScrolled(o169, n145);
            }
        },
        {
            key: "delayedPanScrolled",
            value: function() {
                var t606 = this.w, e471 = t606.globals.minX, i354 = t606.globals.maxX, a286 = (t606.globals.maxX - t606.globals.minX) / 2;
                "left" === this.moveDirection ? (e471 = t606.globals.minX + a286, i354 = t606.globals.maxX + a286) : "right" === this.moveDirection && (e471 = t606.globals.minX - a286, i354 = t606.globals.maxX - a286), e471 = Math.floor(e471), i354 = Math.floor(i354), this.updateScrolledChart({
                    xaxis: {
                        min: e471,
                        max: i354
                    }
                }, e471, i354);
            }
        },
        {
            key: "panScrolled",
            value: function(t607, e472) {
                var i355 = this.w, a287 = this.xyRatios, s226 = x.clone(i355.globals.initialConfig.yaxis), r192 = a287.xRatio, o170 = i355.globals.minX, n146 = i355.globals.maxX;
                i355.globals.isRangeBar && (r192 = a287.invertedYRatio, o170 = i355.globals.minY, n146 = i355.globals.maxY), "left" === this.moveDirection ? (t607 = o170 + i355.globals.gridWidth / 15 * r192, e472 = n146 + i355.globals.gridWidth / 15 * r192) : "right" === this.moveDirection && (t607 = o170 - i355.globals.gridWidth / 15 * r192, e472 = n146 - i355.globals.gridWidth / 15 * r192), i355.globals.isRangeBar || (t607 < i355.globals.initialMinX || e472 > i355.globals.initialMaxX) && (t607 = o170, e472 = n146);
                var l117 = {
                    min: t607,
                    max: e472
                };
                i355.config.chart.zoom.autoScaleYaxis && (s226 = new q(this.ctx).autoScaleY(this.ctx, s226, {
                    xaxis: l117
                }));
                var h101 = {
                    xaxis: {
                        min: t607,
                        max: e472
                    }
                };
                i355.config.chart.group || (h101.yaxis = s226), this.updateScrolledChart(h101, t607, e472);
            }
        },
        {
            key: "updateScrolledChart",
            value: function(t608, e473, i356) {
                var a288 = this.w;
                this.ctx.updateHelpers._updateOptions(t608, !1, !1), "function" == typeof a288.config.chart.events.scrolled && a288.config.chart.events.scrolled(this.ctx, {
                    xaxis: {
                        min: e473,
                        max: i356
                    }
                });
            }
        }
    ]), i345;
}(), ut = function() {
    function t609(e474) {
        a(this, t609), this.w = e474.w, this.ttCtx = e474, this.ctx = e474.ctx;
    }
    return r(t609, [
        {
            key: "getNearestValues",
            value: function(t610) {
                var e475 = t610.hoverArea, i357 = t610.elGrid, a289 = t610.clientX, s227 = t610.clientY, r193 = this.w, o171 = i357.getBoundingClientRect(), n147 = o171.width, l118 = o171.height, h102 = n147 / (r193.globals.dataPoints - 1), c85 = l118 / r193.globals.dataPoints, d71 = this.hasBars();
                !r193.globals.comboCharts && !d71 || r193.config.xaxis.convertedCatToNumeric || (h102 = n147 / r193.globals.dataPoints);
                var g62 = a289 - o171.left - r193.globals.barPadForNumericAxis, u48 = s227 - o171.top;
                g62 < 0 || u48 < 0 || g62 > n147 || u48 > l118 ? (e475.classList.remove("hovering-zoom"), e475.classList.remove("hovering-pan")) : r193.globals.zoomEnabled ? (e475.classList.remove("hovering-pan"), e475.classList.add("hovering-zoom")) : r193.globals.panEnabled && (e475.classList.remove("hovering-zoom"), e475.classList.add("hovering-pan"));
                var f40 = Math.round(g62 / h102), p36 = Math.floor(u48 / c85);
                d71 && !r193.config.xaxis.convertedCatToNumeric && (f40 = Math.ceil(g62 / h102), f40 -= 1);
                var b31 = null, v22 = null, m9 = [], y22 = [];
                if (r193.globals.seriesXvalues.forEach(function(t611) {
                    m9.push([
                        t611[0] + 1e-6
                    ].concat(t611));
                }), r193.globals.seriesYvalues.forEach(function(t612) {
                    y22.push([
                        t612[0] + 1e-6
                    ].concat(t612));
                }), m9 = m9.map(function(t613) {
                    return t613.filter(function(t614) {
                        return x.isNumber(t614);
                    });
                }), y22 = y22.map(function(t615) {
                    return t615.filter(function(t616) {
                        return x.isNumber(t616);
                    });
                }), r193.globals.isXNumeric) {
                    var w18 = this.ttCtx.getElGrid().getBoundingClientRect(), k17 = g62 * (w18.width / n147), A13 = u48 * (w18.height / l118);
                    b31 = (v22 = this.closestInMultiArray(k17, A13, m9, y22)).index, f40 = v22.j, null !== b31 && (m9 = r193.globals.seriesXvalues[b31], f40 = (v22 = this.closestInArray(k17, m9)).index);
                }
                return r193.globals.capturedSeriesIndex = null === b31 ? -1 : b31, (!f40 || f40 < 1) && (f40 = 0), r193.globals.isBarHorizontal ? r193.globals.capturedDataPointIndex = p36 : r193.globals.capturedDataPointIndex = f40, {
                    capturedSeries: b31,
                    j: r193.globals.isBarHorizontal ? p36 : f40,
                    hoverX: g62,
                    hoverY: u48
                };
            }
        },
        {
            key: "closestInMultiArray",
            value: function(t617, e476, i358, a290) {
                var s228 = this.w, r194 = 0, o172 = null, n148 = -1;
                s228.globals.series.length > 1 ? r194 = this.getFirstActiveXArray(i358) : o172 = 0;
                var l119 = i358[r194][0], h103 = Math.abs(t617 - l119);
                if (i358.forEach(function(e477) {
                    e477.forEach(function(e478, i359) {
                        var a291 = Math.abs(t617 - e478);
                        a291 < h103 && (h103 = a291, n148 = i359);
                    });
                }), -1 !== n148) {
                    var c86 = a290[r194][n148], d72 = Math.abs(e476 - c86);
                    o172 = r194, a290.forEach(function(t618, i360) {
                        var a292 = Math.abs(e476 - t618[n148]);
                        a292 < d72 && (d72 = a292, o172 = i360);
                    });
                }
                return {
                    index: o172,
                    j: n148
                };
            }
        },
        {
            key: "getFirstActiveXArray",
            value: function(t619) {
                for(var e479 = this.w, i361 = 0, a293 = t619.map(function(t620, e480) {
                    return t620.length > 0 ? e480 : -1;
                }), s229 = 0; s229 < a293.length; s229++)if (-1 !== a293[s229] && -1 === e479.globals.collapsedSeriesIndices.indexOf(s229) && -1 === e479.globals.ancillaryCollapsedSeriesIndices.indexOf(s229)) {
                    i361 = a293[s229];
                    break;
                }
                return i361;
            }
        },
        {
            key: "closestInArray",
            value: function(t621, e481) {
                for(var i362 = e481[0], a294 = null, s230 = Math.abs(t621 - i362), r195 = 0; r195 < e481.length; r195++){
                    var o173 = Math.abs(t621 - e481[r195]);
                    o173 < s230 && (s230 = o173, a294 = r195);
                }
                return {
                    index: a294
                };
            }
        },
        {
            key: "isXoverlap",
            value: function(t622) {
                var e482 = [], i363 = this.w.globals.seriesX.filter(function(t623) {
                    return void 0 !== t623[0];
                });
                if (i363.length > 0) for(var a295 = 0; a295 < i363.length - 1; a295++)void 0 !== i363[a295][t622] && void 0 !== i363[a295 + 1][t622] && i363[a295][t622] !== i363[a295 + 1][t622] && e482.push("unEqual");
                return 0 === e482.length;
            }
        },
        {
            key: "isInitialSeriesSameLen",
            value: function() {
                for(var t624 = !0, e483 = this.w.globals.initialSeries, i364 = 0; i364 < e483.length - 1; i364++)if (e483[i364].data.length !== e483[i364 + 1].data.length) {
                    t624 = !1;
                    break;
                }
                return t624;
            }
        },
        {
            key: "getBarsHeight",
            value: function(t625) {
                return u(t625).reduce(function(t626, e484) {
                    return t626 + e484.getBBox().height;
                }, 0);
            }
        },
        {
            key: "getElMarkers",
            value: function() {
                return this.w.globals.dom.baseEl.querySelectorAll(" .apexcharts-series-markers");
            }
        },
        {
            key: "getAllMarkers",
            value: function() {
                var t627 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap");
                (t627 = u(t627)).sort(function(t628, e486) {
                    var i365 = Number(t628.getAttribute("data:realIndex")), a296 = Number(e486.getAttribute("data:realIndex"));
                    return a296 < i365 ? 1 : a296 > i365 ? -1 : 0;
                });
                var e485 = [];
                return t627.forEach(function(t629) {
                    e485.push(t629.querySelector(".apexcharts-marker"));
                }), e485;
            }
        },
        {
            key: "hasMarkers",
            value: function() {
                return this.getElMarkers().length > 0;
            }
        },
        {
            key: "getElBars",
            value: function() {
                return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series");
            }
        },
        {
            key: "hasBars",
            value: function() {
                return this.getElBars().length > 0;
            }
        },
        {
            key: "getHoverMarkerSize",
            value: function(t630) {
                var e487 = this.w, i366 = e487.config.markers.hover.size;
                return void 0 === i366 && (i366 = e487.globals.markers.size[t630] + e487.config.markers.hover.sizeOffset), i366;
            }
        },
        {
            key: "toggleAllTooltipSeriesGroups",
            value: function(t631) {
                var e488 = this.w, i367 = this.ttCtx;
                0 === i367.allTooltipSeriesGroups.length && (i367.allTooltipSeriesGroups = e488.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));
                for(var a297 = i367.allTooltipSeriesGroups, s231 = 0; s231 < a297.length; s231++)"enable" === t631 ? (a297[s231].classList.add("apexcharts-active"), a297[s231].style.display = e488.config.tooltip.items.display) : (a297[s231].classList.remove("apexcharts-active"), a297[s231].style.display = "none");
            }
        }
    ]), t609;
}(), ft = function() {
    function t632(e489) {
        a(this, t632), this.w = e489.w, this.ctx = e489.ctx, this.ttCtx = e489, this.tooltipUtil = new ut(e489);
    }
    return r(t632, [
        {
            key: "drawSeriesTexts",
            value: function(t633) {
                var e490 = t633.shared, i368 = void 0 === e490 || e490, a298 = t633.ttItems, s232 = t633.i, r196 = void 0 === s232 ? 0 : s232, o174 = t633.j, n149 = void 0 === o174 ? null : o174, l120 = t633.y1, h104 = t633.y2, c87 = t633.e, d73 = this.w;
                void 0 !== d73.config.tooltip.custom ? this.handleCustomTooltip({
                    i: r196,
                    j: n149,
                    y1: l120,
                    y2: h104,
                    w: d73
                }) : this.toggleActiveInactiveSeries(i368);
                var g63 = this.getValuesToPrint({
                    i: r196,
                    j: n149
                });
                this.printLabels({
                    i: r196,
                    j: n149,
                    values: g63,
                    ttItems: a298,
                    shared: i368,
                    e: c87
                });
                var u49 = this.ttCtx.getElTooltip();
                this.ttCtx.tooltipRect.ttWidth = u49.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = u49.getBoundingClientRect().height;
            }
        },
        {
            key: "printLabels",
            value: function(t634) {
                var i369, a299 = this, s233 = t634.i, r197 = t634.j, o175 = t634.values, n150 = t634.ttItems, l121 = t634.shared, h105 = t634.e, c88 = this.w, d74 = [], g64 = function(t635) {
                    return c88.globals.seriesGoals[t635] && c88.globals.seriesGoals[t635][r197] && Array.isArray(c88.globals.seriesGoals[t635][r197]);
                }, u50 = o175.xVal, f41 = o175.zVal, p37 = o175.xAxisTTVal, x27 = "", b32 = c88.globals.colors[s233];
                null !== r197 && c88.config.plotOptions.bar.distributed && (b32 = c88.globals.colors[r197]);
                for(var v23 = function(t636, o176) {
                    var v24 = a299.getFormatters(s233);
                    x27 = a299.getSeriesName({
                        fn: v24.yLbTitleFormatter,
                        index: s233,
                        seriesIndex: s233,
                        j: r197
                    }), "treemap" === c88.config.chart.type && (x27 = v24.yLbTitleFormatter(String(c88.config.series[s233].data[r197].x), {
                        series: c88.globals.series,
                        seriesIndex: s233,
                        dataPointIndex: r197,
                        w: c88
                    }));
                    var m11 = c88.config.tooltip.inverseOrder ? o176 : t636;
                    if (c88.globals.axisCharts) {
                        var y24 = function(t637) {
                            return v24.yLbFormatter(c88.globals.series[t637][r197], {
                                series: c88.globals.series,
                                seriesIndex: t637,
                                dataPointIndex: r197,
                                w: c88
                            });
                        };
                        if (l121) v24 = a299.getFormatters(m11), x27 = a299.getSeriesName({
                            fn: v24.yLbTitleFormatter,
                            index: m11,
                            seriesIndex: s233,
                            j: r197
                        }), b32 = c88.globals.colors[m11], i369 = y24(m11), g64(m11) && (d74 = c88.globals.seriesGoals[m11][r197].map(function(t638) {
                            return {
                                attrs: t638,
                                val: v24.yLbFormatter(t638.value, {
                                    seriesIndex: m11,
                                    dataPointIndex: r197,
                                    w: c88
                                })
                            };
                        }));
                        else {
                            var w19, k18 = null == h105 || null === (w19 = h105.target) || void 0 === w19 ? void 0 : w19.getAttribute("fill");
                            k18 && (b32 = -1 !== k18.indexOf("url") ? document.querySelector(k18.substr(4).slice(0, -1)).childNodes[0].getAttribute("stroke") : k18), i369 = y24(s233), g64(s233) && Array.isArray(c88.globals.seriesGoals[s233][r197]) && (d74 = c88.globals.seriesGoals[s233][r197].map(function(t639) {
                                return {
                                    attrs: t639,
                                    val: v24.yLbFormatter(t639.value, {
                                        seriesIndex: s233,
                                        dataPointIndex: r197,
                                        w: c88
                                    })
                                };
                            }));
                        }
                    }
                    null === r197 && (i369 = v24.yLbFormatter(c88.globals.series[s233], e(e({}, c88), {}, {
                        seriesIndex: s233,
                        dataPointIndex: s233
                    }))), a299.DOMHandling({
                        i: s233,
                        t: m11,
                        j: r197,
                        ttItems: n150,
                        values: {
                            val: i369,
                            goalVals: d74,
                            xVal: u50,
                            xAxisTTVal: p37,
                            zVal: f41
                        },
                        seriesName: x27,
                        shared: l121,
                        pColor: b32
                    });
                }, m10 = 0, y23 = c88.globals.series.length - 1; m10 < c88.globals.series.length; m10++, y23--)v23(m10, y23);
            }
        },
        {
            key: "getFormatters",
            value: function(t640) {
                var e491, i370 = this.w, a300 = i370.globals.yLabelFormatters[t640];
                return void 0 !== i370.globals.ttVal ? Array.isArray(i370.globals.ttVal) ? (a300 = i370.globals.ttVal[t640] && i370.globals.ttVal[t640].formatter, e491 = i370.globals.ttVal[t640] && i370.globals.ttVal[t640].title && i370.globals.ttVal[t640].title.formatter) : (a300 = i370.globals.ttVal.formatter, "function" == typeof i370.globals.ttVal.title.formatter && (e491 = i370.globals.ttVal.title.formatter)) : e491 = i370.config.tooltip.y.title.formatter, "function" != typeof a300 && (a300 = i370.globals.yLabelFormatters[0] ? i370.globals.yLabelFormatters[0] : function(t641) {
                    return t641;
                }), "function" != typeof e491 && (e491 = function(t642) {
                    return t642;
                }), {
                    yLbFormatter: a300,
                    yLbTitleFormatter: e491
                };
            }
        },
        {
            key: "getSeriesName",
            value: function(t643) {
                var e492 = t643.fn, i371 = t643.index, a301 = t643.seriesIndex, s234 = t643.j, r198 = this.w;
                return e492(String(r198.globals.seriesNames[i371]), {
                    series: r198.globals.series,
                    seriesIndex: a301,
                    dataPointIndex: s234,
                    w: r198
                });
            }
        },
        {
            key: "DOMHandling",
            value: function(t644) {
                t644.i;
                var e493 = t644.t, i372 = t644.j, a302 = t644.ttItems, s235 = t644.values, r199 = t644.seriesName, o177 = t644.shared, n151 = t644.pColor, l122 = this.w, h106 = this.ttCtx, c89 = s235.val, d75 = s235.goalVals, g65 = s235.xVal, u51 = s235.xAxisTTVal, f42 = s235.zVal, p38 = null;
                p38 = a302[e493].children, l122.config.tooltip.fillSeriesColor && (a302[e493].style.backgroundColor = n151, p38[0].style.display = "none"), h106.showTooltipTitle && (null === h106.tooltipTitle && (h106.tooltipTitle = l122.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")), h106.tooltipTitle.innerHTML = g65), h106.isXAxisTooltipEnabled && (h106.xaxisTooltipText.innerHTML = "" !== u51 ? u51 : g65);
                var x28 = a302[e493].querySelector(".apexcharts-tooltip-text-y-label");
                x28 && (x28.innerHTML = r199 || "");
                var b33 = a302[e493].querySelector(".apexcharts-tooltip-text-y-value");
                b33 && (b33.innerHTML = void 0 !== c89 ? c89 : ""), p38[0] && p38[0].classList.contains("apexcharts-tooltip-marker") && (l122.config.tooltip.marker.fillColors && Array.isArray(l122.config.tooltip.marker.fillColors) && (n151 = l122.config.tooltip.marker.fillColors[e493]), p38[0].style.backgroundColor = n151), l122.config.tooltip.marker.show || (p38[0].style.display = "none");
                var v25 = a302[e493].querySelector(".apexcharts-tooltip-text-goals-label"), m12 = a302[e493].querySelector(".apexcharts-tooltip-text-goals-value");
                if (d75.length && l122.globals.seriesGoals[e493]) {
                    var y25 = function() {
                        var t645 = "<div >", e494 = "<div>";
                        d75.forEach(function(i373, a) {
                            t645 += ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '.concat(i373.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;"></span> ').concat(i373.attrs.name, "</div>"), e494 += "<div>".concat(i373.val, "</div>");
                        }), v25.innerHTML = t645 + "</div>", m12.innerHTML = e494 + "</div>";
                    };
                    o177 ? l122.globals.seriesGoals[e493][i372] && Array.isArray(l122.globals.seriesGoals[e493][i372]) ? y25() : (v25.innerHTML = "", m12.innerHTML = "") : y25();
                } else v25.innerHTML = "", m12.innerHTML = "";
                null !== f42 && (a302[e493].querySelector(".apexcharts-tooltip-text-z-label").innerHTML = l122.config.tooltip.z.title, a302[e493].querySelector(".apexcharts-tooltip-text-z-value").innerHTML = void 0 !== f42 ? f42 : "");
                o177 && p38[0] && (null == c89 || l122.globals.ancillaryCollapsedSeriesIndices.indexOf(e493) > -1 || l122.globals.collapsedSeriesIndices.indexOf(e493) > -1 ? p38[0].parentNode.style.display = "none" : p38[0].parentNode.style.display = l122.config.tooltip.items.display);
            }
        },
        {
            key: "toggleActiveInactiveSeries",
            value: function(t646) {
                var e495 = this.w;
                if (t646) this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
                else {
                    this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
                    var i374 = e495.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group");
                    i374 && (i374.classList.add("apexcharts-active"), i374.style.display = e495.config.tooltip.items.display);
                }
            }
        },
        {
            key: "getValuesToPrint",
            value: function(t647) {
                var e496 = t647.i, i375 = t647.j, a303 = this.w, s236 = this.ctx.series.filteredSeriesX(), r200 = "", o178 = "", n152 = null, l123 = null, h107 = {
                    series: a303.globals.series,
                    seriesIndex: e496,
                    dataPointIndex: i375,
                    w: a303
                }, c90 = a303.globals.ttZFormatter;
                null === i375 ? l123 = a303.globals.series[e496] : a303.globals.isXNumeric && "treemap" !== a303.config.chart.type ? (r200 = s236[e496][i375], 0 === s236[e496].length && (r200 = s236[this.tooltipUtil.getFirstActiveXArray(s236)][i375])) : r200 = void 0 !== a303.globals.labels[i375] ? a303.globals.labels[i375] : "";
                var d76 = r200;
                a303.globals.isXNumeric && "datetime" === a303.config.xaxis.type ? r200 = new V(this.ctx).xLabelFormat(a303.globals.ttKeyFormatter, d76, d76, {
                    i: void 0,
                    dateFormatter: new R(this.ctx).formatDate,
                    w: this.w
                }) : r200 = a303.globals.isBarHorizontal ? a303.globals.yLabelFormatters[0](d76, h107) : a303.globals.xLabelFormatter(d76, h107);
                return void 0 !== a303.config.tooltip.x.formatter && (r200 = a303.globals.ttKeyFormatter(d76, h107)), a303.globals.seriesZ.length > 0 && a303.globals.seriesZ[e496].length > 0 && (n152 = c90(a303.globals.seriesZ[e496][i375], a303)), o178 = "function" == typeof a303.config.xaxis.tooltip.formatter ? a303.globals.xaxisTooltipFormatter(d76, h107) : r200, {
                    val: Array.isArray(l123) ? l123.join(" ") : l123,
                    xVal: Array.isArray(r200) ? r200.join(" ") : r200,
                    xAxisTTVal: Array.isArray(o178) ? o178.join(" ") : o178,
                    zVal: n152
                };
            }
        },
        {
            key: "handleCustomTooltip",
            value: function(t648) {
                var e497 = t648.i, i376 = t648.j, a304 = t648.y1, s237 = t648.y2, r201 = t648.w, o179 = this.ttCtx.getElTooltip(), n153 = r201.config.tooltip.custom;
                Array.isArray(n153) && n153[e497] && (n153 = n153[e497]), o179.innerHTML = n153({
                    ctx: this.ctx,
                    series: r201.globals.series,
                    seriesIndex: e497,
                    dataPointIndex: i376,
                    y1: a304,
                    y2: s237,
                    w: r201
                });
            }
        }
    ]), t632;
}(), pt = function() {
    function t649(e498) {
        a(this, t649), this.ttCtx = e498, this.ctx = e498.ctx, this.w = e498.w;
    }
    return r(t649, [
        {
            key: "moveXCrosshairs",
            value: function(t650) {
                var e499 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i377 = this.ttCtx, a305 = this.w, s238 = i377.getElXCrosshairs(), r202 = t650 - i377.xcrosshairsWidth / 2, o180 = a305.globals.labels.slice().length;
                if (null !== e499 && (r202 = a305.globals.gridWidth / o180 * e499), null === s238 || a305.globals.isBarHorizontal || (s238.setAttribute("x", r202), s238.setAttribute("x1", r202), s238.setAttribute("x2", r202), s238.setAttribute("y2", a305.globals.gridHeight), s238.classList.add("apexcharts-active")), r202 < 0 && (r202 = 0), r202 > a305.globals.gridWidth && (r202 = a305.globals.gridWidth), i377.isXAxisTooltipEnabled) {
                    var n154 = r202;
                    "tickWidth" !== a305.config.xaxis.crosshairs.width && "barWidth" !== a305.config.xaxis.crosshairs.width || (n154 = r202 + i377.xcrosshairsWidth / 2), this.moveXAxisTooltip(n154);
                }
            }
        },
        {
            key: "moveYCrosshairs",
            value: function(t651) {
                var e500 = this.ttCtx;
                null !== e500.ycrosshairs && m.setAttrs(e500.ycrosshairs, {
                    y1: t651,
                    y2: t651
                }), null !== e500.ycrosshairsHidden && m.setAttrs(e500.ycrosshairsHidden, {
                    y1: t651,
                    y2: t651
                });
            }
        },
        {
            key: "moveXAxisTooltip",
            value: function(t652) {
                var e501 = this.w, i378 = this.ttCtx;
                if (null !== i378.xaxisTooltip && 0 !== i378.xcrosshairsWidth) {
                    i378.xaxisTooltip.classList.add("apexcharts-active");
                    var a306 = i378.xaxisOffY + e501.config.xaxis.tooltip.offsetY + e501.globals.translateY + 1 + e501.config.xaxis.offsetY;
                    if (t652 -= i378.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t652)) {
                        t652 += e501.globals.translateX;
                        var s239;
                        s239 = new m(this.ctx).getTextRects(i378.xaxisTooltipText.innerHTML), i378.xaxisTooltipText.style.minWidth = s239.width + "px", i378.xaxisTooltip.style.left = t652 + "px", i378.xaxisTooltip.style.top = a306 + "px";
                    }
                }
            }
        },
        {
            key: "moveYAxisTooltip",
            value: function(t653) {
                var e502 = this.w, i379 = this.ttCtx;
                null === i379.yaxisTTEls && (i379.yaxisTTEls = e502.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
                var a307 = parseInt(i379.ycrosshairsHidden.getAttribute("y1"), 10), s240 = e502.globals.translateY + a307, r203 = i379.yaxisTTEls[t653].getBoundingClientRect().height, o181 = e502.globals.translateYAxisX[t653] - 2;
                e502.config.yaxis[t653].opposite && (o181 -= 26), s240 -= r203 / 2, -1 === e502.globals.ignoreYAxisIndexes.indexOf(t653) ? (i379.yaxisTTEls[t653].classList.add("apexcharts-active"), i379.yaxisTTEls[t653].style.top = s240 + "px", i379.yaxisTTEls[t653].style.left = o181 + e502.config.yaxis[t653].tooltip.offsetX + "px") : i379.yaxisTTEls[t653].classList.remove("apexcharts-active");
            }
        },
        {
            key: "moveTooltip",
            value: function(t654, e503) {
                var i380 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a308 = this.w, s241 = this.ttCtx, r204 = s241.getElTooltip(), o182 = s241.tooltipRect, n155 = null !== i380 ? parseFloat(i380) : 1, l124 = parseFloat(t654) + n155 + 5, h108 = parseFloat(e503) + n155 / 2;
                if (l124 > a308.globals.gridWidth / 2 && (l124 = l124 - o182.ttWidth - n155 - 10), l124 > a308.globals.gridWidth - o182.ttWidth - 10 && (l124 = a308.globals.gridWidth - o182.ttWidth), l124 < -20 && (l124 = -20), a308.config.tooltip.followCursor) {
                    var c91 = s241.getElGrid(), d77 = c91.getBoundingClientRect();
                    h108 = s241.e.clientY + a308.globals.translateY - d77.top - o182.ttHeight / 2;
                } else a308.globals.isBarHorizontal || (o182.ttHeight / 2 + h108 > a308.globals.gridHeight && (h108 = a308.globals.gridHeight - o182.ttHeight + a308.globals.translateY), h108 < 0 && (h108 = 0));
                isNaN(l124) || (l124 += a308.globals.translateX, r204.style.left = l124 + "px", r204.style.top = h108 + "px");
            }
        },
        {
            key: "moveMarkers",
            value: function(t655, e504) {
                var i381 = this.w, a309 = this.ttCtx;
                if (i381.globals.markers.size[t655] > 0) for(var s242 = i381.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(t655, "'] .apexcharts-marker")), r205 = 0; r205 < s242.length; r205++)parseInt(s242[r205].getAttribute("rel"), 10) === e504 && (a309.marker.resetPointsSize(), a309.marker.enlargeCurrentPoint(e504, s242[r205]));
                else a309.marker.resetPointsSize(), this.moveDynamicPointOnHover(e504, t655);
            }
        },
        {
            key: "moveDynamicPointOnHover",
            value: function(t656, e505) {
                var i382, a310, s243 = this.w, r206 = this.ttCtx, o183 = s243.globals.pointsArray, n156 = r206.tooltipUtil.getHoverMarkerSize(e505), l125 = s243.config.series[e505].type;
                if (!l125 || "column" !== l125 && "candlestick" !== l125 && "boxPlot" !== l125) {
                    i382 = o183[e505][t656][0], a310 = o183[e505][t656][1] ? o183[e505][t656][1] : 0;
                    var h109 = s243.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e505, "'] .apexcharts-series-markers circle"));
                    h109 && a310 < s243.globals.gridHeight && a310 > 0 && (h109.setAttribute("r", n156), h109.setAttribute("cx", i382), h109.setAttribute("cy", a310)), this.moveXCrosshairs(i382), r206.fixedTooltip || this.moveTooltip(i382, a310, n156);
                }
            }
        },
        {
            key: "moveDynamicPointsOnHover",
            value: function(t657) {
                var e506, i383 = this.ttCtx, a311 = i383.w, s244 = 0, r207 = 0, o184 = a311.globals.pointsArray;
                e506 = new E(this.ctx).getActiveConfigSeriesIndex(!0);
                var n157 = i383.tooltipUtil.getHoverMarkerSize(e506);
                o184[e506] && (s244 = o184[e506][t657][0], r207 = o184[e506][t657][1]);
                var l126 = i383.tooltipUtil.getAllMarkers();
                if (null !== l126) for(var h110 = 0; h110 < a311.globals.series.length; h110++){
                    var c92 = o184[h110];
                    if (a311.globals.comboCharts && void 0 === c92 && l126.splice(h110, 0, null), c92 && c92.length) {
                        var d78 = o184[h110][t657][1];
                        l126[h110].setAttribute("cx", s244), null !== d78 && !isNaN(d78) && d78 < a311.globals.gridHeight + n157 && d78 + n157 > 0 ? (l126[h110] && l126[h110].setAttribute("r", n157), l126[h110] && l126[h110].setAttribute("cy", d78)) : l126[h110] && l126[h110].setAttribute("r", 0);
                    }
                }
                if (this.moveXCrosshairs(s244), !i383.fixedTooltip) {
                    var g66 = r207 || a311.globals.gridHeight;
                    this.moveTooltip(s244, g66, n157);
                }
            }
        },
        {
            key: "moveStickyTooltipOverBars",
            value: function(t658) {
                var e507 = this.w, i384 = this.ttCtx, a312 = e507.globals.columnSeries ? e507.globals.columnSeries.length : e507.globals.series.length, s245 = a312 >= 2 && a312 % 2 == 0 ? Math.floor(a312 / 2) : Math.floor(a312 / 2) + 1;
                e507.globals.isBarHorizontal && (s245 = new E(this.ctx).getActiveConfigSeriesIndex(!1, "desc") + 1);
                var r208 = e507.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(s245, "'] path[j='").concat(t658, "'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(s245, "'] path[j='").concat(t658, "'], .apexcharts-boxPlot-series .apexcharts-series[rel='").concat(s245, "'] path[j='").concat(t658, "'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(s245, "'] path[j='").concat(t658, "']")), o185 = r208 ? parseFloat(r208.getAttribute("cx")) : 0, n158 = r208 ? parseFloat(r208.getAttribute("cy")) : 0, l127 = r208 ? parseFloat(r208.getAttribute("barWidth")) : 0, h111 = r208 ? parseFloat(r208.getAttribute("barHeight")) : 0, c93 = i384.getElGrid().getBoundingClientRect(), d79 = r208.classList.contains("apexcharts-candlestick-area") || r208.classList.contains("apexcharts-boxPlot-area");
                if (e507.globals.isXNumeric ? (r208 && !d79 && (o185 -= a312 % 2 != 0 ? l127 / 2 : 0), r208 && d79 && e507.globals.comboCharts && (o185 -= l127 / 2)) : e507.globals.isBarHorizontal || (o185 = i384.xAxisTicksPositions[t658 - 1] + i384.dataPointsDividedWidth / 2, isNaN(o185) && (o185 = i384.xAxisTicksPositions[t658] - i384.dataPointsDividedWidth / 2)), e507.globals.isBarHorizontal ? (n158 > e507.globals.gridHeight / 2 && (n158 -= i384.tooltipRect.ttHeight), (n158 = n158 + e507.config.grid.padding.top + h111 / 3) + h111 > e507.globals.gridHeight && (n158 = e507.globals.gridHeight - h111)) : e507.config.tooltip.followCursor ? n158 = i384.e.clientY - c93.top - i384.tooltipRect.ttHeight / 2 : n158 + i384.tooltipRect.ttHeight + 15 > e507.globals.gridHeight && (n158 = e507.globals.gridHeight), n158 < -10 && (n158 = -10), e507.globals.isBarHorizontal || this.moveXCrosshairs(o185), !i384.fixedTooltip) {
                    var g67 = n158 || e507.globals.gridHeight;
                    this.moveTooltip(o185, g67);
                }
            }
        }
    ]), t649;
}(), xt = function() {
    function t659(e508) {
        a(this, t659), this.w = e508.w, this.ttCtx = e508, this.ctx = e508.ctx, this.tooltipPosition = new pt(e508);
    }
    return r(t659, [
        {
            key: "drawDynamicPoints",
            value: function() {
                var t660 = this.w, e509 = new m(this.ctx), i385 = new T(this.ctx), a313 = t660.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
                a313 = u(a313), t660.config.chart.stacked && a313.sort(function(t661, e510) {
                    return parseFloat(t661.getAttribute("data:realIndex")) - parseFloat(e510.getAttribute("data:realIndex"));
                });
                for(var s246 = 0; s246 < a313.length; s246++){
                    var r209 = a313[s246].querySelector(".apexcharts-series-markers-wrap");
                    if (null !== r209) {
                        var o186 = void 0, n159 = "apexcharts-marker w".concat((Math.random() + 1).toString(36).substring(4));
                        "line" !== t660.config.chart.type && "area" !== t660.config.chart.type || t660.globals.comboCharts || t660.config.tooltip.intersect || (n159 += " no-pointer-events");
                        var l128 = i385.getMarkerConfig({
                            cssClass: n159,
                            seriesIndex: Number(r209.getAttribute("data:realIndex"))
                        });
                        (o186 = e509.drawMarker(0, 0, l128)).node.setAttribute("default-marker-size", 0);
                        var h112 = document.createElementNS(t660.globals.SVGNS, "g");
                        h112.classList.add("apexcharts-series-markers"), h112.appendChild(o186.node), r209.appendChild(h112);
                    }
                }
            }
        },
        {
            key: "enlargeCurrentPoint",
            value: function(t662, e511) {
                var i386 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a314 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s247 = this.w;
                "bubble" !== s247.config.chart.type && this.newPointSize(t662, e511);
                var r210 = e511.getAttribute("cx"), o187 = e511.getAttribute("cy");
                if (null !== i386 && null !== a314 && (r210 = i386, o187 = a314), this.tooltipPosition.moveXCrosshairs(r210), !this.fixedTooltip) {
                    if ("radar" === s247.config.chart.type) {
                        var n160 = this.ttCtx.getElGrid(), l129 = n160.getBoundingClientRect();
                        r210 = this.ttCtx.e.clientX - l129.left;
                    }
                    this.tooltipPosition.moveTooltip(r210, o187, s247.config.markers.hover.size);
                }
            }
        },
        {
            key: "enlargePoints",
            value: function(t663) {
                for(var e512 = this.w, i387 = this, a315 = this.ttCtx, s248 = t663, r211 = e512.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), o188 = e512.config.markers.hover.size, n161 = 0; n161 < r211.length; n161++){
                    var l130 = r211[n161].getAttribute("rel"), h113 = r211[n161].getAttribute("index");
                    if (void 0 === o188 && (o188 = e512.globals.markers.size[h113] + e512.config.markers.hover.sizeOffset), s248 === parseInt(l130, 10)) {
                        i387.newPointSize(s248, r211[n161]);
                        var c94 = r211[n161].getAttribute("cx"), d80 = r211[n161].getAttribute("cy");
                        i387.tooltipPosition.moveXCrosshairs(c94), a315.fixedTooltip || i387.tooltipPosition.moveTooltip(c94, d80, o188);
                    } else i387.oldPointSize(r211[n161]);
                }
            }
        },
        {
            key: "newPointSize",
            value: function(t664, e513) {
                var i388 = this.w, a316 = i388.config.markers.hover.size, s249 = 0 === t664 ? e513.parentNode.firstChild : e513.parentNode.lastChild;
                if ("0" !== s249.getAttribute("default-marker-size")) {
                    var r212 = parseInt(s249.getAttribute("index"), 10);
                    void 0 === a316 && (a316 = i388.globals.markers.size[r212] + i388.config.markers.hover.sizeOffset), a316 < 0 && (a316 = 0), s249.setAttribute("r", a316);
                }
            }
        },
        {
            key: "oldPointSize",
            value: function(t665) {
                var e514 = parseFloat(t665.getAttribute("default-marker-size"));
                t665.setAttribute("r", e514);
            }
        },
        {
            key: "resetPointsSize",
            value: function() {
                for(var t666 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), e515 = 0; e515 < t666.length; e515++){
                    var i389 = parseFloat(t666[e515].getAttribute("default-marker-size"));
                    x.isNumber(i389) && i389 >= 0 ? t666[e515].setAttribute("r", i389) : t666[e515].setAttribute("r", 0);
                }
            }
        }
    ]), t659;
}(), bt = function() {
    function t667(e516) {
        a(this, t667), this.w = e516.w, this.ttCtx = e516;
    }
    return r(t667, [
        {
            key: "getAttr",
            value: function(t668, e517) {
                return parseFloat(t668.target.getAttribute(e517));
            }
        },
        {
            key: "handleHeatTreeTooltip",
            value: function(t669) {
                var e518 = t669.e, i390 = t669.opt, a317 = t669.x, s250 = t669.y, r213 = t669.type, o189 = this.ttCtx, n162 = this.w;
                if (e518.target.classList.contains("apexcharts-".concat(r213, "-rect"))) {
                    var l131 = this.getAttr(e518, "i"), h114 = this.getAttr(e518, "j"), c95 = this.getAttr(e518, "cx"), d81 = this.getAttr(e518, "cy"), g68 = this.getAttr(e518, "width"), u52 = this.getAttr(e518, "height");
                    if (o189.tooltipLabels.drawSeriesTexts({
                        ttItems: i390.ttItems,
                        i: l131,
                        j: h114,
                        shared: !1,
                        e: e518
                    }), n162.globals.capturedSeriesIndex = l131, n162.globals.capturedDataPointIndex = h114, a317 = c95 + o189.tooltipRect.ttWidth / 2 + g68, s250 = d81 + o189.tooltipRect.ttHeight / 2 - u52 / 2, o189.tooltipPosition.moveXCrosshairs(c95 + g68 / 2), a317 > n162.globals.gridWidth / 2 && (a317 = c95 - o189.tooltipRect.ttWidth / 2 + g68), o189.w.config.tooltip.followCursor) {
                        var f43 = n162.globals.dom.elWrap.getBoundingClientRect();
                        a317 = n162.globals.clientX - f43.left - (a317 > n162.globals.gridWidth / 2 ? o189.tooltipRect.ttWidth : 0), s250 = n162.globals.clientY - f43.top - (s250 > n162.globals.gridHeight / 2 ? o189.tooltipRect.ttHeight : 0);
                    }
                }
                return {
                    x: a317,
                    y: s250
                };
            }
        },
        {
            key: "handleMarkerTooltip",
            value: function(t670) {
                var e519, i391, a318 = t670.e, s251 = t670.opt, r214 = t670.x, o190 = t670.y, n163 = this.w, l132 = this.ttCtx;
                if (a318.target.classList.contains("apexcharts-marker")) {
                    var h115 = parseInt(s251.paths.getAttribute("cx"), 10), c96 = parseInt(s251.paths.getAttribute("cy"), 10), d82 = parseFloat(s251.paths.getAttribute("val"));
                    if (i391 = parseInt(s251.paths.getAttribute("rel"), 10), e519 = parseInt(s251.paths.parentNode.parentNode.parentNode.getAttribute("rel"), 10) - 1, l132.intersect) {
                        var g69 = x.findAncestor(s251.paths, "apexcharts-series");
                        g69 && (e519 = parseInt(g69.getAttribute("data:realIndex"), 10));
                    }
                    if (l132.tooltipLabels.drawSeriesTexts({
                        ttItems: s251.ttItems,
                        i: e519,
                        j: i391,
                        shared: !l132.showOnIntersect && n163.config.tooltip.shared,
                        e: a318
                    }), "mouseup" === a318.type && l132.markerClick(a318, e519, i391), n163.globals.capturedSeriesIndex = e519, n163.globals.capturedDataPointIndex = i391, r214 = h115, o190 = c96 + n163.globals.translateY - 1.4 * l132.tooltipRect.ttHeight, l132.w.config.tooltip.followCursor) {
                        var u53 = l132.getElGrid().getBoundingClientRect();
                        o190 = l132.e.clientY + n163.globals.translateY - u53.top;
                    }
                    d82 < 0 && (o190 = c96), l132.marker.enlargeCurrentPoint(i391, s251.paths, r214, o190);
                }
                return {
                    x: r214,
                    y: o190
                };
            }
        },
        {
            key: "handleBarTooltip",
            value: function(t671) {
                var e520, i392, a319 = t671.e, s252 = t671.opt, r215 = this.w, o191 = this.ttCtx, n164 = o191.getElTooltip(), l133 = 0, h116 = 0, c97 = 0, d83 = this.getBarTooltipXY({
                    e: a319,
                    opt: s252
                });
                e520 = d83.i;
                var g70 = d83.barHeight, u54 = d83.j;
                r215.globals.capturedSeriesIndex = e520, r215.globals.capturedDataPointIndex = u54, r215.globals.isBarHorizontal && o191.tooltipUtil.hasBars() || !r215.config.tooltip.shared ? (h116 = d83.x, c97 = d83.y, i392 = Array.isArray(r215.config.stroke.width) ? r215.config.stroke.width[e520] : r215.config.stroke.width, l133 = h116) : r215.globals.comboCharts || r215.config.tooltip.shared || (l133 /= 2), isNaN(c97) ? c97 = r215.globals.svgHeight - o191.tooltipRect.ttHeight : c97 < 0 && (c97 = 0);
                var f44 = parseInt(s252.paths.parentNode.getAttribute("data:realIndex"), 10), p39 = r215.globals.isMultipleYAxis ? r215.config.yaxis[f44] && r215.config.yaxis[f44].reversed : r215.config.yaxis[0].reversed;
                if (h116 + o191.tooltipRect.ttWidth > r215.globals.gridWidth && !p39 ? h116 -= o191.tooltipRect.ttWidth : h116 < 0 && (h116 = 0), o191.w.config.tooltip.followCursor) {
                    var x29 = o191.getElGrid().getBoundingClientRect();
                    c97 = o191.e.clientY - x29.top;
                }
                null === o191.tooltip && (o191.tooltip = r215.globals.dom.baseEl.querySelector(".apexcharts-tooltip")), r215.config.tooltip.shared || (r215.globals.comboBarCount > 0 ? o191.tooltipPosition.moveXCrosshairs(l133 + i392 / 2) : o191.tooltipPosition.moveXCrosshairs(l133)), !o191.fixedTooltip && (!r215.config.tooltip.shared || r215.globals.isBarHorizontal && o191.tooltipUtil.hasBars()) && (p39 && (h116 -= o191.tooltipRect.ttWidth) < 0 && (h116 = 0), !p39 || r215.globals.isBarHorizontal && o191.tooltipUtil.hasBars() || (c97 = c97 + g70 - 2 * (r215.globals.series[e520][u54] < 0 ? g70 : 0)), o191.tooltipRect.ttHeight + c97 > r215.globals.gridHeight ? c97 = r215.globals.gridHeight - o191.tooltipRect.ttHeight + r215.globals.translateY : (c97 = c97 + r215.globals.translateY - o191.tooltipRect.ttHeight / 2) < 0 && (c97 = 0), n164.style.left = h116 + r215.globals.translateX + "px", n164.style.top = c97 + "px");
            }
        },
        {
            key: "getBarTooltipXY",
            value: function(t672) {
                var e521 = t672.e, i393 = t672.opt, a320 = this.w, s253 = null, r216 = this.ttCtx, o192 = 0, n165 = 0, l134 = 0, h117 = 0, c98 = 0, d84 = e521.target.classList;
                if (d84.contains("apexcharts-bar-area") || d84.contains("apexcharts-candlestick-area") || d84.contains("apexcharts-boxPlot-area") || d84.contains("apexcharts-rangebar-area")) {
                    var g71 = e521.target, u55 = g71.getBoundingClientRect(), f45 = i393.elGrid.getBoundingClientRect(), p40 = u55.height;
                    c98 = u55.height;
                    var x30 = u55.width, b34 = parseInt(g71.getAttribute("cx"), 10), v26 = parseInt(g71.getAttribute("cy"), 10);
                    h117 = parseFloat(g71.getAttribute("barWidth"));
                    var m13 = "touchmove" === e521.type ? e521.touches[0].clientX : e521.clientX;
                    s253 = parseInt(g71.getAttribute("j"), 10), o192 = parseInt(g71.parentNode.getAttribute("rel"), 10) - 1;
                    var y26 = g71.getAttribute("data-range-y1"), w20 = g71.getAttribute("data-range-y2");
                    a320.globals.comboCharts && (o192 = parseInt(g71.parentNode.getAttribute("data:realIndex"), 10)), r216.tooltipLabels.drawSeriesTexts({
                        ttItems: i393.ttItems,
                        i: o192,
                        j: s253,
                        y1: y26 ? parseInt(y26, 10) : null,
                        y2: w20 ? parseInt(w20, 10) : null,
                        shared: !r216.showOnIntersect && a320.config.tooltip.shared,
                        e: e521
                    }), a320.config.tooltip.followCursor ? a320.globals.isBarHorizontal ? (n165 = m13 - f45.left + 15, l134 = v26 - r216.dataPointsDividedHeight + p40 / 2 - r216.tooltipRect.ttHeight / 2) : (n165 = a320.globals.isXNumeric ? b34 - x30 / 2 : b34 - r216.dataPointsDividedWidth + x30 / 2, l134 = e521.clientY - f45.top - r216.tooltipRect.ttHeight / 2 - 15) : a320.globals.isBarHorizontal ? ((n165 = b34) < r216.xyRatios.baseLineInvertedY && (n165 = b34 - r216.tooltipRect.ttWidth), l134 = v26 - r216.dataPointsDividedHeight + p40 / 2 - r216.tooltipRect.ttHeight / 2) : (n165 = a320.globals.isXNumeric ? b34 - x30 / 2 : b34 - r216.dataPointsDividedWidth + x30 / 2, l134 = v26);
                }
                return {
                    x: n165,
                    y: l134,
                    barHeight: c98,
                    barWidth: h117,
                    i: o192,
                    j: s253
                };
            }
        }
    ]), t667;
}(), vt = function() {
    function t673(e522) {
        a(this, t673), this.w = e522.w, this.ttCtx = e522;
    }
    return r(t673, [
        {
            key: "drawXaxisTooltip",
            value: function() {
                var t674 = this.w, e523 = this.ttCtx, i394 = "bottom" === t674.config.xaxis.position;
                e523.xaxisOffY = i394 ? t674.globals.gridHeight + 1 : -t674.globals.xAxisHeight - t674.config.xaxis.axisTicks.height + 3;
                var a321 = i394 ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom" : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top", s254 = t674.globals.dom.elWrap;
                e523.isXAxisTooltipEnabled && null === t674.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") && (e523.xaxisTooltip = document.createElement("div"), e523.xaxisTooltip.setAttribute("class", a321 + " apexcharts-theme-" + t674.config.tooltip.theme), s254.appendChild(e523.xaxisTooltip), e523.xaxisTooltipText = document.createElement("div"), e523.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"), e523.xaxisTooltipText.style.fontFamily = t674.config.xaxis.tooltip.style.fontFamily || t674.config.chart.fontFamily, e523.xaxisTooltipText.style.fontSize = t674.config.xaxis.tooltip.style.fontSize, e523.xaxisTooltip.appendChild(e523.xaxisTooltipText));
            }
        },
        {
            key: "drawYaxisTooltip",
            value: function() {
                for(var t675 = this.w, e524 = this.ttCtx, i395 = function(i396) {
                    var a323 = t675.config.yaxis[i396].opposite || t675.config.yaxis[i396].crosshairs.opposite;
                    e524.yaxisOffX = a323 ? t675.globals.gridWidth + 1 : 1;
                    var s255 = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i396, a323 ? " apexcharts-yaxistooltip-right" : " apexcharts-yaxistooltip-left");
                    t675.globals.yAxisSameScaleIndices.map(function(e525, a324) {
                        e525.map(function(e, a325) {
                            a325 === i396 && (s255 += t675.config.yaxis[a325].show ? " " : " apexcharts-yaxistooltip-hidden");
                        });
                    });
                    var r217 = t675.globals.dom.elWrap;
                    null === t675.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i396)) && (e524.yaxisTooltip = document.createElement("div"), e524.yaxisTooltip.setAttribute("class", s255 + " apexcharts-theme-" + t675.config.tooltip.theme), r217.appendChild(e524.yaxisTooltip), 0 === i396 && (e524.yaxisTooltipText = []), e524.yaxisTooltipText[i396] = document.createElement("div"), e524.yaxisTooltipText[i396].classList.add("apexcharts-yaxistooltip-text"), e524.yaxisTooltip.appendChild(e524.yaxisTooltipText[i396]));
                }, a322 = 0; a322 < t675.config.yaxis.length; a322++)i395(a322);
            }
        },
        {
            key: "setXCrosshairWidth",
            value: function() {
                var t676 = this.w, e526 = this.ttCtx, i397 = e526.getElXCrosshairs();
                if (e526.xcrosshairsWidth = parseInt(t676.config.xaxis.crosshairs.width, 10), t676.globals.comboCharts) {
                    var a326 = t676.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
                    if (null !== a326 && "barWidth" === t676.config.xaxis.crosshairs.width) {
                        var s256 = parseFloat(a326.getAttribute("barWidth"));
                        e526.xcrosshairsWidth = s256;
                    } else if ("tickWidth" === t676.config.xaxis.crosshairs.width) {
                        var r218 = t676.globals.labels.length;
                        e526.xcrosshairsWidth = t676.globals.gridWidth / r218;
                    }
                } else if ("tickWidth" === t676.config.xaxis.crosshairs.width) {
                    var o193 = t676.globals.labels.length;
                    e526.xcrosshairsWidth = t676.globals.gridWidth / o193;
                } else if ("barWidth" === t676.config.xaxis.crosshairs.width) {
                    var n166 = t676.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
                    if (null !== n166) {
                        var l135 = parseFloat(n166.getAttribute("barWidth"));
                        e526.xcrosshairsWidth = l135;
                    } else e526.xcrosshairsWidth = 1;
                }
                t676.globals.isBarHorizontal && (e526.xcrosshairsWidth = 0), null !== i397 && e526.xcrosshairsWidth > 0 && i397.setAttribute("width", e526.xcrosshairsWidth);
            }
        },
        {
            key: "handleYCrosshair",
            value: function() {
                var t677 = this.w, e527 = this.ttCtx;
                e527.ycrosshairs = t677.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"), e527.ycrosshairsHidden = t677.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden");
            }
        },
        {
            key: "drawYaxisTooltipText",
            value: function(t678, e528, i398) {
                var a327 = this.ttCtx, s257 = this.w, r219 = s257.globals.yLabelFormatters[t678];
                if (a327.yaxisTooltips[t678]) {
                    var o194 = a327.getElGrid().getBoundingClientRect(), n167 = (e528 - o194.top) * i398.yRatio[t678], l136 = s257.globals.maxYArr[t678] - s257.globals.minYArr[t678], h118 = s257.globals.minYArr[t678] + (l136 - n167);
                    a327.tooltipPosition.moveYCrosshairs(e528 - o194.top), a327.yaxisTooltipText[t678].innerHTML = r219(h118), a327.tooltipPosition.moveYAxisTooltip(t678);
                }
            }
        }
    ]), t673;
}(), mt = function() {
    function t679(e529) {
        a(this, t679), this.ctx = e529, this.w = e529.w;
        var i399 = this.w;
        this.tConfig = i399.config.tooltip, this.tooltipUtil = new ut(this), this.tooltipLabels = new ft(this), this.tooltipPosition = new pt(this), this.marker = new xt(this), this.intersect = new bt(this), this.axesTooltip = new vt(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !i399.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now();
    }
    return r(t679, [
        {
            key: "getElTooltip",
            value: function(t680) {
                return t680 || (t680 = this), t680.w.globals.dom.baseEl ? t680.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip") : null;
            }
        },
        {
            key: "getElXCrosshairs",
            value: function() {
                return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs");
            }
        },
        {
            key: "getElGrid",
            value: function() {
                return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid");
            }
        },
        {
            key: "drawTooltip",
            value: function(t681) {
                var e530 = this.w;
                this.xyRatios = t681, this.isXAxisTooltipEnabled = e530.config.xaxis.tooltip.enabled && e530.globals.axisCharts, this.yaxisTooltips = e530.config.yaxis.map(function(t682, i) {
                    return !!(t682.show && t682.tooltip.enabled && e530.globals.axisCharts);
                }), this.allTooltipSeriesGroups = [], e530.globals.axisCharts || (this.showTooltipTitle = !1);
                var i400 = document.createElement("div");
                if (i400.classList.add("apexcharts-tooltip"), e530.config.tooltip.cssClass && i400.classList.add(e530.config.tooltip.cssClass), i400.classList.add("apexcharts-theme-".concat(this.tConfig.theme)), e530.globals.dom.elWrap.appendChild(i400), e530.globals.axisCharts) {
                    this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();
                    var a328 = new _(this.ctx);
                    this.xAxisTicksPositions = a328.getXAxisTicksPositions();
                }
                if (!e530.globals.comboCharts && !this.tConfig.intersect && "rangeBar" !== e530.config.chart.type || this.tConfig.shared || (this.showOnIntersect = !0), 0 !== e530.config.markers.size && 0 !== e530.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e530.globals.collapsedSeries.length !== e530.globals.series.length) {
                    this.dataPointsDividedHeight = e530.globals.gridHeight / e530.globals.dataPoints, this.dataPointsDividedWidth = e530.globals.gridWidth / e530.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement("div"), this.tooltipTitle.classList.add("apexcharts-tooltip-title"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e530.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i400.appendChild(this.tooltipTitle));
                    var s258 = e530.globals.series.length;
                    (e530.globals.xyCharts || e530.globals.comboCharts) && this.tConfig.shared && (s258 = this.showOnIntersect ? 1 : e530.globals.series.length), this.legendLabels = e530.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text"), this.ttItems = this.createTTElements(s258), this.addSVGEvents();
                }
            }
        },
        {
            key: "createTTElements",
            value: function(t683) {
                for(var e531 = this, i401 = this.w, a329 = [], s259 = this.getElTooltip(), r220 = function(r221) {
                    var o196 = document.createElement("div");
                    o196.classList.add("apexcharts-tooltip-series-group"), o196.style.order = i401.config.tooltip.inverseOrder ? t683 - r221 : r221 + 1, e531.tConfig.shared && e531.tConfig.enabledOnSeries && Array.isArray(e531.tConfig.enabledOnSeries) && e531.tConfig.enabledOnSeries.indexOf(r221) < 0 && o196.classList.add("apexcharts-tooltip-series-group-hidden");
                    var n168 = document.createElement("span");
                    n168.classList.add("apexcharts-tooltip-marker"), n168.style.backgroundColor = i401.globals.colors[r221], o196.appendChild(n168);
                    var l137 = document.createElement("div");
                    l137.classList.add("apexcharts-tooltip-text"), l137.style.fontFamily = e531.tConfig.style.fontFamily || i401.config.chart.fontFamily, l137.style.fontSize = e531.tConfig.style.fontSize, [
                        "y",
                        "goals",
                        "z"
                    ].forEach(function(t684) {
                        var e532 = document.createElement("div");
                        e532.classList.add("apexcharts-tooltip-".concat(t684, "-group"));
                        var i402 = document.createElement("span");
                        i402.classList.add("apexcharts-tooltip-text-".concat(t684, "-label")), e532.appendChild(i402);
                        var a330 = document.createElement("span");
                        a330.classList.add("apexcharts-tooltip-text-".concat(t684, "-value")), e532.appendChild(a330), l137.appendChild(e532);
                    }), o196.appendChild(l137), s259.appendChild(o196), a329.push(o196);
                }, o195 = 0; o195 < t683; o195++)r220(o195);
                return a329;
            }
        },
        {
            key: "addSVGEvents",
            value: function() {
                var t685 = this.w, e533 = t685.config.chart.type, i403 = this.getElTooltip(), a331 = !("bar" !== e533 && "candlestick" !== e533 && "boxPlot" !== e533 && "rangeBar" !== e533), s260 = "area" === e533 || "line" === e533 || "scatter" === e533 || "bubble" === e533 || "radar" === e533, r222 = t685.globals.dom.Paper.node, o197 = this.getElGrid();
                o197 && (this.seriesBound = o197.getBoundingClientRect());
                var n169, l138 = [], h119 = [], c99 = {
                    hoverArea: r222,
                    elGrid: o197,
                    tooltipEl: i403,
                    tooltipY: l138,
                    tooltipX: h119,
                    ttItems: this.ttItems
                };
                if (t685.globals.axisCharts && (s260 ? n169 = t685.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker") : a331 ? n169 = t685.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area") : "heatmap" !== e533 && "treemap" !== e533 || (n169 = t685.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap")), n169 && n169.length)) for(var d85 = 0; d85 < n169.length; d85++)l138.push(n169[d85].getAttribute("cy")), h119.push(n169[d85].getAttribute("cx"));
                if (t685.globals.xyCharts && !this.showOnIntersect || t685.globals.comboCharts && !this.showOnIntersect || a331 && this.tooltipUtil.hasBars() && this.tConfig.shared) this.addPathsEventListeners([
                    r222
                ], c99);
                else if (a331 && !t685.globals.comboCharts || s260 && this.showOnIntersect) this.addDatapointEventsListeners(c99);
                else if (!t685.globals.axisCharts || "heatmap" === e533 || "treemap" === e533) {
                    var g72 = t685.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
                    this.addPathsEventListeners(g72, c99);
                }
                if (this.showOnIntersect) {
                    var u56 = t685.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker");
                    u56.length > 0 && this.addPathsEventListeners(u56, c99), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c99);
                }
            }
        },
        {
            key: "drawFixedTooltipRect",
            value: function() {
                var t686 = this.w, e534 = this.getElTooltip(), i404 = e534.getBoundingClientRect(), a332 = i404.width + 10, s261 = i404.height + 10, r223 = this.tConfig.fixed.offsetX, o198 = this.tConfig.fixed.offsetY, n170 = this.tConfig.fixed.position.toLowerCase();
                return n170.indexOf("right") > -1 && (r223 = r223 + t686.globals.svgWidth - a332 + 10), n170.indexOf("bottom") > -1 && (o198 = o198 + t686.globals.svgHeight - s261 - 10), e534.style.left = r223 + "px", e534.style.top = o198 + "px", {
                    x: r223,
                    y: o198,
                    ttWidth: a332,
                    ttHeight: s261
                };
            }
        },
        {
            key: "addDatapointEventsListeners",
            value: function(t687) {
                var e535 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area");
                this.addPathsEventListeners(e535, t687);
            }
        },
        {
            key: "addPathsEventListeners",
            value: function(t688, e536) {
                for(var i405 = this, a333 = function(a334) {
                    var s263 = {
                        paths: t688[a334],
                        tooltipEl: e536.tooltipEl,
                        tooltipY: e536.tooltipY,
                        tooltipX: e536.tooltipX,
                        elGrid: e536.elGrid,
                        hoverArea: e536.hoverArea,
                        ttItems: e536.ttItems
                    };
                    [
                        "mousemove",
                        "mouseup",
                        "touchmove",
                        "mouseout",
                        "touchend"
                    ].map(function(e537) {
                        return t688[a334].addEventListener(e537, i405.onSeriesHover.bind(i405, s263), {
                            capture: !1,
                            passive: !0
                        });
                    });
                }, s262 = 0; s262 < t688.length; s262++)a333(s262);
            }
        },
        {
            key: "onSeriesHover",
            value: function(t689, e538) {
                var i406 = this, a335 = Date.now() - this.lastHoverTime;
                a335 >= 100 ? this.seriesHover(t689, e538) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout(function() {
                    i406.seriesHover(t689, e538);
                }, 100 - a335));
            }
        },
        {
            key: "seriesHover",
            value: function(t690, e539) {
                var i407 = this;
                this.lastHoverTime = Date.now();
                var a336 = [], s264 = this.w;
                s264.config.chart.group && (a336 = this.ctx.getGroupedCharts()), s264.globals.axisCharts && (s264.globals.minX === -1 / 0 && s264.globals.maxX === 1 / 0 || 0 === s264.globals.dataPoints) || (a336.length ? a336.forEach(function(a337) {
                    var s265 = i407.getElTooltip(a337), r224 = {
                        paths: t690.paths,
                        tooltipEl: s265,
                        tooltipY: t690.tooltipY,
                        tooltipX: t690.tooltipX,
                        elGrid: t690.elGrid,
                        hoverArea: t690.hoverArea,
                        ttItems: a337.w.globals.tooltip.ttItems
                    };
                    a337.w.globals.minX === i407.w.globals.minX && a337.w.globals.maxX === i407.w.globals.maxX && a337.w.globals.tooltip.seriesHoverByContext({
                        chartCtx: a337,
                        ttCtx: a337.w.globals.tooltip,
                        opt: r224,
                        e: e539
                    });
                }) : this.seriesHoverByContext({
                    chartCtx: this.ctx,
                    ttCtx: this.w.globals.tooltip,
                    opt: t690,
                    e: e539
                }));
            }
        },
        {
            key: "seriesHoverByContext",
            value: function(t691) {
                var e540 = t691.chartCtx, i408 = t691.ttCtx, a338 = t691.opt, s266 = t691.e, r225 = e540.w, o199 = this.getElTooltip();
                if (o199) {
                    if (i408.tooltipRect = {
                        x: 0,
                        y: 0,
                        ttWidth: o199.getBoundingClientRect().width,
                        ttHeight: o199.getBoundingClientRect().height
                    }, i408.e = s266, i408.tooltipUtil.hasBars() && !r225.globals.comboCharts && !i408.isBarShared) {
                        if (this.tConfig.onDatasetHover.highlightDataSeries) new E(e540).toggleSeriesOnHover(s266, s266.target.parentNode);
                    }
                    i408.fixedTooltip && i408.drawFixedTooltipRect(), r225.globals.axisCharts ? i408.axisChartsTooltips({
                        e: s266,
                        opt: a338,
                        tooltipRect: i408.tooltipRect
                    }) : i408.nonAxisChartsTooltips({
                        e: s266,
                        opt: a338,
                        tooltipRect: i408.tooltipRect
                    });
                }
            }
        },
        {
            key: "axisChartsTooltips",
            value: function(t692) {
                var e541, i409, a339 = t692.e, s267 = t692.opt, r226 = this.w, o200 = s267.elGrid.getBoundingClientRect(), n171 = "touchmove" === a339.type ? a339.touches[0].clientX : a339.clientX, l139 = "touchmove" === a339.type ? a339.touches[0].clientY : a339.clientY;
                if (this.clientY = l139, this.clientX = n171, r226.globals.capturedSeriesIndex = -1, r226.globals.capturedDataPointIndex = -1, l139 < o200.top || l139 > o200.top + o200.height) this.handleMouseOut(s267);
                else {
                    if (Array.isArray(this.tConfig.enabledOnSeries) && !r226.config.tooltip.shared) {
                        var h120 = parseInt(s267.paths.getAttribute("index"), 10);
                        if (this.tConfig.enabledOnSeries.indexOf(h120) < 0) return void this.handleMouseOut(s267);
                    }
                    var c100 = this.getElTooltip(), d86 = this.getElXCrosshairs(), g73 = r226.globals.xyCharts || "bar" === r226.config.chart.type && !r226.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || r226.globals.comboCharts && this.tooltipUtil.hasBars();
                    if ("mousemove" === a339.type || "touchmove" === a339.type || "mouseup" === a339.type) {
                        if (r226.globals.collapsedSeries.length + r226.globals.ancillaryCollapsedSeries.length === r226.globals.series.length) return;
                        null !== d86 && d86.classList.add("apexcharts-active");
                        var u57 = this.yaxisTooltips.filter(function(t693) {
                            return !0 === t693;
                        });
                        if (null !== this.ycrosshairs && u57.length && this.ycrosshairs.classList.add("apexcharts-active"), g73 && !this.showOnIntersect) this.handleStickyTooltip(a339, n171, l139, s267);
                        else if ("heatmap" === r226.config.chart.type || "treemap" === r226.config.chart.type) {
                            var f46 = this.intersect.handleHeatTreeTooltip({
                                e: a339,
                                opt: s267,
                                x: e541,
                                y: i409,
                                type: r226.config.chart.type
                            });
                            e541 = f46.x, i409 = f46.y, c100.style.left = e541 + "px", c100.style.top = i409 + "px";
                        } else this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({
                            e: a339,
                            opt: s267
                        }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({
                            e: a339,
                            opt: s267,
                            x: e541,
                            y: i409
                        });
                        if (this.yaxisTooltips.length) for(var p41 = 0; p41 < r226.config.yaxis.length; p41++)this.axesTooltip.drawYaxisTooltipText(p41, l139, this.xyRatios);
                        s267.tooltipEl.classList.add("apexcharts-active");
                    } else "mouseout" !== a339.type && "touchend" !== a339.type || this.handleMouseOut(s267);
                }
            }
        },
        {
            key: "nonAxisChartsTooltips",
            value: function(t694) {
                var e542 = t694.e, i410 = t694.opt, a340 = t694.tooltipRect, s268 = this.w, r227 = i410.paths.getAttribute("rel"), o201 = this.getElTooltip(), n172 = s268.globals.dom.elWrap.getBoundingClientRect();
                if ("mousemove" === e542.type || "touchmove" === e542.type) {
                    o201.classList.add("apexcharts-active"), this.tooltipLabels.drawSeriesTexts({
                        ttItems: i410.ttItems,
                        i: parseInt(r227, 10) - 1,
                        shared: !1
                    });
                    var l140 = s268.globals.clientX - n172.left - a340.ttWidth / 2, h121 = s268.globals.clientY - n172.top - a340.ttHeight - 10;
                    if (o201.style.left = l140 + "px", o201.style.top = h121 + "px", s268.config.legend.tooltipHoverFormatter) {
                        var c101 = r227 - 1, d87 = (0, s268.config.legend.tooltipHoverFormatter)(this.legendLabels[c101].getAttribute("data:default-text"), {
                            seriesIndex: c101,
                            dataPointIndex: c101,
                            w: s268
                        });
                        this.legendLabels[c101].innerHTML = d87;
                    }
                } else "mouseout" !== e542.type && "touchend" !== e542.type || (o201.classList.remove("apexcharts-active"), s268.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t695) {
                    var e543 = t695.getAttribute("data:default-text");
                    t695.innerHTML = decodeURIComponent(e543);
                }));
            }
        },
        {
            key: "handleStickyTooltip",
            value: function(t696, e544, i411, a341) {
                var s269 = this.w, r228 = this.tooltipUtil.getNearestValues({
                    context: this,
                    hoverArea: a341.hoverArea,
                    elGrid: a341.elGrid,
                    clientX: e544,
                    clientY: i411
                }), o202 = r228.j, n173 = r228.capturedSeries, l141 = a341.elGrid.getBoundingClientRect();
                r228.hoverX < 0 || r228.hoverX > l141.width ? this.handleMouseOut(a341) : null !== n173 ? this.handleStickyCapturedSeries(t696, n173, a341, o202) : (this.tooltipUtil.isXoverlap(o202) || s269.globals.isBarHorizontal) && this.create(t696, this, 0, o202, a341.ttItems);
            }
        },
        {
            key: "handleStickyCapturedSeries",
            value: function(t697, e545, i412, a342) {
                var s270 = this.w;
                if (!this.tConfig.shared && null === s270.globals.series[e545][a342]) return void this.handleMouseOut(i412);
                void 0 !== s270.globals.series[e545][a342] ? this.tConfig.shared && this.tooltipUtil.isXoverlap(a342) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t697, this, e545, a342, i412.ttItems) : this.create(t697, this, e545, a342, i412.ttItems, !1) : this.tooltipUtil.isXoverlap(a342) && this.create(t697, this, 0, a342, i412.ttItems);
            }
        },
        {
            key: "deactivateHoverFilter",
            value: function() {
                for(var t698 = this.w, e546 = new m(this.ctx), i413 = t698.globals.dom.Paper.select(".apexcharts-bar-area"), a343 = 0; a343 < i413.length; a343++)e546.pathMouseLeave(i413[a343]);
            }
        },
        {
            key: "handleMouseOut",
            value: function(t699) {
                var e547 = this.w, i414 = this.getElXCrosshairs();
                if (t699.tooltipEl.classList.remove("apexcharts-active"), this.deactivateHoverFilter(), "bubble" !== e547.config.chart.type && this.marker.resetPointsSize(), null !== i414 && i414.classList.remove("apexcharts-active"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove("apexcharts-active"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove("apexcharts-active"), this.yaxisTooltips.length) {
                    null === this.yaxisTTEls && (this.yaxisTTEls = e547.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
                    for(var a344 = 0; a344 < this.yaxisTTEls.length; a344++)this.yaxisTTEls[a344].classList.remove("apexcharts-active");
                }
                e547.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t700) {
                    var e548 = t700.getAttribute("data:default-text");
                    t700.innerHTML = decodeURIComponent(e548);
                });
            }
        },
        {
            key: "markerClick",
            value: function(t701, e549, i415) {
                var a345 = this.w;
                "function" == typeof a345.config.chart.events.markerClick && a345.config.chart.events.markerClick(t701, this.ctx, {
                    seriesIndex: e549,
                    dataPointIndex: i415,
                    w: a345
                }), this.ctx.events.fireEvent("markerClick", [
                    t701,
                    this.ctx,
                    {
                        seriesIndex: e549,
                        dataPointIndex: i415,
                        w: a345
                    }
                ]);
            }
        },
        {
            key: "create",
            value: function(t702, e550, i416, a346, s271) {
                var r229 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, o203 = this.w, n174 = e550;
                "mouseup" === t702.type && this.markerClick(t702, i416, a346), null === r229 && (r229 = this.tConfig.shared);
                var l142 = this.tooltipUtil.hasMarkers(), h122 = this.tooltipUtil.getElBars();
                if (o203.config.legend.tooltipHoverFormatter) {
                    var c102 = o203.config.legend.tooltipHoverFormatter, d88 = Array.from(this.legendLabels);
                    d88.forEach(function(t703) {
                        var e551 = t703.getAttribute("data:default-text");
                        t703.innerHTML = decodeURIComponent(e551);
                    });
                    for(var g74 = 0; g74 < d88.length; g74++){
                        var u58 = d88[g74], f47 = parseInt(u58.getAttribute("i"), 10), p42 = decodeURIComponent(u58.getAttribute("data:default-text")), x31 = c102(p42, {
                            seriesIndex: r229 ? f47 : i416,
                            dataPointIndex: a346,
                            w: o203
                        });
                        if (r229) u58.innerHTML = o203.globals.collapsedSeriesIndices.indexOf(f47) < 0 ? x31 : p42;
                        else if (u58.innerHTML = f47 === i416 ? x31 : p42, i416 === f47) break;
                    }
                }
                if (r229) {
                    if (n174.tooltipLabels.drawSeriesTexts({
                        ttItems: s271,
                        i: i416,
                        j: a346,
                        shared: !this.showOnIntersect && this.tConfig.shared
                    }), l142 && (o203.globals.markers.largestSize > 0 ? n174.marker.enlargePoints(a346) : n174.tooltipPosition.moveDynamicPointsOnHover(a346)), this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(h122), this.barSeriesHeight > 0)) {
                        var b35 = new m(this.ctx), v27 = o203.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(a346, "']"));
                        this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(a346);
                        for(var y27 = 0; y27 < v27.length; y27++)b35.pathMouseEnter(v27[y27]);
                    }
                } else n174.tooltipLabels.drawSeriesTexts({
                    shared: !1,
                    ttItems: s271,
                    i: i416,
                    j: a346
                }), this.tooltipUtil.hasBars() && n174.tooltipPosition.moveStickyTooltipOverBars(a346), l142 && n174.tooltipPosition.moveMarkers(i416, a346);
            }
        }
    ]), t679;
}(), yt = function(t704) {
    n(s272, F);
    var i417 = d(s272);
    function s272() {
        return a(this, s272), i417.apply(this, arguments);
    }
    return r(s272, [
        {
            key: "draw",
            value: function(t705, i418) {
                var a347 = this, s273 = this.w;
                this.graphics = new m(this.ctx), this.bar = new F(this.ctx, this.xyRatios);
                var r230 = new y(this.ctx, s273);
                t705 = r230.getLogSeries(t705), this.yRatio = r230.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t705), "100%" === s273.config.chart.stackType && (t705 = s273.globals.seriesPercent.slice()), this.series = t705, this.totalItems = 0, this.prevY = [], this.prevX = [], this.prevYF = [], this.prevXF = [], this.prevYVal = [], this.prevXVal = [], this.xArrj = [], this.xArrjF = [], this.xArrjVal = [], this.yArrj = [], this.yArrjF = [], this.yArrjVal = [];
                for(var o204 = 0; o204 < t705.length; o204++)t705[o204].length > 0 && (this.totalItems += t705[o204].length);
                for(var n175 = this.graphics.group({
                    class: "apexcharts-bar-series apexcharts-plot-series"
                }), l143 = 0, h123 = 0, c103 = function(r231, o205) {
                    var c104 = void 0, d90 = void 0, g76 = void 0, u59 = void 0, f48 = [], p43 = [], b36 = s273.globals.comboCharts ? i418[r231] : r231;
                    a347.yRatio.length > 1 && (a347.yaxisIndex = b36), a347.isReversed = s273.config.yaxis[a347.yaxisIndex] && s273.config.yaxis[a347.yaxisIndex].reversed;
                    var v28 = a347.graphics.group({
                        class: "apexcharts-series",
                        seriesName: x.escapeString(s273.globals.seriesNames[b36]),
                        rel: r231 + 1,
                        "data:realIndex": b36
                    });
                    a347.ctx.series.addCollapsedClassToSeries(v28, b36);
                    var m14 = a347.graphics.group({
                        class: "apexcharts-datalabels",
                        "data:realIndex": b36
                    }), y28 = 0, w21 = 0, k19 = a347.initialPositions(l143, h123, c104, d90, g76, u59);
                    h123 = k19.y, y28 = k19.barHeight, d90 = k19.yDivision, u59 = k19.zeroW, l143 = k19.x, w21 = k19.barWidth, c104 = k19.xDivision, g76 = k19.zeroH, a347.yArrj = [], a347.yArrjF = [], a347.yArrjVal = [], a347.xArrj = [], a347.xArrjF = [], a347.xArrjVal = [], 1 === a347.prevY.length && a347.prevY[0].every(function(t706) {
                        return isNaN(t706);
                    }) && (a347.prevY[0] = a347.prevY[0].map(function(t) {
                        return g76;
                    }), a347.prevYF[0] = a347.prevYF[0].map(function(t) {
                        return 0;
                    }));
                    for(var A14 = 0; A14 < s273.globals.dataPoints; A14++){
                        var S10 = a347.barHelpers.getStrokeWidth(r231, A14, b36), C9 = {
                            indexes: {
                                i: r231,
                                j: A14,
                                realIndex: b36,
                                bc: o205
                            },
                            strokeWidth: S10,
                            x: l143,
                            y: h123,
                            elSeries: v28
                        }, L9 = null;
                        a347.isHorizontal ? (L9 = a347.drawStackedBarPaths(e(e({}, C9), {}, {
                            zeroW: u59,
                            barHeight: y28,
                            yDivision: d90
                        })), w21 = a347.series[r231][A14] / a347.invertedYRatio) : (L9 = a347.drawStackedColumnPaths(e(e({}, C9), {}, {
                            xDivision: c104,
                            barWidth: w21,
                            zeroH: g76
                        })), y28 = a347.series[r231][A14] / a347.yRatio[a347.yaxisIndex]), h123 = L9.y, l143 = L9.x, f48.push(l143), p43.push(h123);
                        var P9 = a347.barHelpers.getPathFillColor(t705, r231, A14, b36);
                        v28 = a347.renderSeries({
                            realIndex: b36,
                            pathFill: P9,
                            j: A14,
                            i: r231,
                            pathFrom: L9.pathFrom,
                            pathTo: L9.pathTo,
                            strokeWidth: S10,
                            elSeries: v28,
                            x: l143,
                            y: h123,
                            series: t705,
                            barHeight: y28,
                            barWidth: w21,
                            elDataLabelsWrap: m14,
                            type: "bar",
                            visibleSeries: 0
                        });
                    }
                    s273.globals.seriesXvalues[b36] = f48, s273.globals.seriesYvalues[b36] = p43, a347.prevY.push(a347.yArrj), a347.prevYF.push(a347.yArrjF), a347.prevYVal.push(a347.yArrjVal), a347.prevX.push(a347.xArrj), a347.prevXF.push(a347.xArrjF), a347.prevXVal.push(a347.xArrjVal), n175.add(v28);
                }, d89 = 0, g75 = 0; d89 < t705.length; d89++, g75++)c103(d89, g75);
                return n175;
            }
        },
        {
            key: "initialPositions",
            value: function(t707, e552, i419, a348, s274, r232) {
                var o206, n176, l144 = this.w;
                return this.isHorizontal ? (o206 = (o206 = a348 = l144.globals.gridHeight / l144.globals.dataPoints) * parseInt(l144.config.plotOptions.bar.barHeight, 10) / 100, r232 = this.baseLineInvertedY + l144.globals.padHorizontal + (this.isReversed ? l144.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0), e552 = (a348 - o206) / 2) : (n176 = i419 = l144.globals.gridWidth / l144.globals.dataPoints, n176 = l144.globals.isXNumeric && l144.globals.dataPoints > 1 ? (i419 = l144.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : n176 * parseInt(l144.config.plotOptions.bar.columnWidth, 10) / 100, s274 = this.baseLineY[this.yaxisIndex] + (this.isReversed ? l144.globals.gridHeight : 0) - (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), t707 = l144.globals.padHorizontal + (i419 - n176) / 2), {
                    x: t707,
                    y: e552,
                    yDivision: a348,
                    xDivision: i419,
                    barHeight: o206,
                    barWidth: n176,
                    zeroH: s274,
                    zeroW: r232
                };
            }
        },
        {
            key: "drawStackedBarPaths",
            value: function(t708) {
                for(var e553, i420 = t708.indexes, a349 = t708.barHeight, s275 = t708.strokeWidth, r233 = t708.zeroW, o207 = t708.x, n177 = t708.y, l145 = t708.yDivision, h124 = t708.elSeries, c105 = this.w, d91 = n177, g77 = i420.i, u60 = i420.j, f49 = 0, p44 = 0; p44 < this.prevXF.length; p44++)f49 += this.prevXF[p44][u60];
                if (g77 > 0) {
                    var x32 = r233;
                    this.prevXVal[g77 - 1][u60] < 0 ? x32 = this.series[g77][u60] >= 0 ? this.prevX[g77 - 1][u60] + f49 - 2 * (this.isReversed ? f49 : 0) : this.prevX[g77 - 1][u60] : this.prevXVal[g77 - 1][u60] >= 0 && (x32 = this.series[g77][u60] >= 0 ? this.prevX[g77 - 1][u60] : this.prevX[g77 - 1][u60] - f49 + 2 * (this.isReversed ? f49 : 0)), e553 = x32;
                } else e553 = r233;
                o207 = null === this.series[g77][u60] ? e553 : e553 + this.series[g77][u60] / this.invertedYRatio - 2 * (this.isReversed ? this.series[g77][u60] / this.invertedYRatio : 0);
                var b37 = this.barHelpers.getBarpaths({
                    barYPosition: d91,
                    barHeight: a349,
                    x1: e553,
                    x2: o207,
                    strokeWidth: s275,
                    series: this.series,
                    realIndex: i420.realIndex,
                    i: g77,
                    j: u60,
                    w: c105
                });
                return this.barHelpers.barBackground({
                    j: u60,
                    i: g77,
                    y1: d91,
                    y2: a349,
                    elSeries: h124
                }), n177 += l145, {
                    pathTo: b37.pathTo,
                    pathFrom: b37.pathFrom,
                    x: o207,
                    y: n177
                };
            }
        },
        {
            key: "drawStackedColumnPaths",
            value: function(t709) {
                var e554 = t709.indexes, i421 = t709.x, a350 = t709.y, s276 = t709.xDivision, r234 = t709.barWidth, o208 = t709.zeroH;
                t709.strokeWidth;
                var n178 = t709.elSeries, l146 = this.w, h125 = e554.i, c106 = e554.j, d92 = e554.bc;
                if (l146.globals.isXNumeric) {
                    var g78 = l146.globals.seriesX[h125][c106];
                    g78 || (g78 = 0), i421 = (g78 - l146.globals.minX) / this.xRatio - r234 / 2;
                }
                for(var u61, f50 = i421, p45 = 0, x33 = 0; x33 < this.prevYF.length; x33++)p45 += isNaN(this.prevYF[x33][c106]) ? 0 : this.prevYF[x33][c106];
                if (h125 > 0 && !l146.globals.isXNumeric || h125 > 0 && l146.globals.isXNumeric && l146.globals.seriesX[h125 - 1][c106] === l146.globals.seriesX[h125][c106]) {
                    var b38, v29, m15 = Math.min(this.yRatio.length + 1, h125 + 1);
                    if (void 0 !== this.prevY[h125 - 1]) {
                        for(var y29 = 1; y29 < m15; y29++)if (!isNaN(this.prevY[h125 - y29][c106])) {
                            v29 = this.prevY[h125 - y29][c106];
                            break;
                        }
                    }
                    for(var w22 = 1; w22 < m15; w22++){
                        if (this.prevYVal[h125 - w22][c106] < 0) {
                            b38 = this.series[h125][c106] >= 0 ? v29 - p45 + 2 * (this.isReversed ? p45 : 0) : v29;
                            break;
                        }
                        if (this.prevYVal[h125 - w22][c106] >= 0) {
                            b38 = this.series[h125][c106] >= 0 ? v29 : v29 + p45 - 2 * (this.isReversed ? p45 : 0);
                            break;
                        }
                    }
                    void 0 === b38 && (b38 = l146.globals.gridHeight), u61 = this.prevYF[0].every(function(t710) {
                        return 0 === t710;
                    }) && this.prevYF.slice(1, h125).every(function(t711) {
                        return t711.every(function(t712) {
                            return isNaN(t712);
                        });
                    }) ? l146.globals.gridHeight - o208 : b38;
                } else u61 = l146.globals.gridHeight - o208;
                a350 = u61 - this.series[h125][c106] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[h125][c106] / this.yRatio[this.yaxisIndex] : 0);
                var k20 = this.barHelpers.getColumnPaths({
                    barXPosition: f50,
                    barWidth: r234,
                    y1: u61,
                    y2: a350,
                    yRatio: this.yRatio[this.yaxisIndex],
                    strokeWidth: this.strokeWidth,
                    series: this.series,
                    realIndex: e554.realIndex,
                    i: h125,
                    j: c106,
                    w: l146
                });
                return this.barHelpers.barBackground({
                    bc: d92,
                    j: c106,
                    i: h125,
                    x1: f50,
                    x2: r234,
                    elSeries: n178
                }), i421 += s276, {
                    pathTo: k20.pathTo,
                    pathFrom: k20.pathFrom,
                    x: l146.globals.isXNumeric ? i421 - s276 : i421,
                    y: a350
                };
            }
        }
    ]), s272;
}(), wt = function(t713) {
    n(s277, F);
    var i422 = d(s277);
    function s277() {
        return a(this, s277), i422.apply(this, arguments);
    }
    return r(s277, [
        {
            key: "draw",
            value: function(t714, i423) {
                var a351 = this, s278 = this.w, r235 = new m(this.ctx), o209 = new M(this.ctx);
                this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = s278.config.plotOptions.bar.horizontal;
                var n179 = new y(this.ctx, s278);
                t714 = n179.getLogSeries(t714), this.series = t714, this.yRatio = n179.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t714);
                for(var l147 = r235.group({
                    class: "apexcharts-".concat(s278.config.chart.type, "-series apexcharts-plot-series")
                }), h126 = function(n180) {
                    a351.isBoxPlot = "boxPlot" === s278.config.chart.type || "boxPlot" === s278.config.series[n180].type;
                    var h127, c108, d93, g79, u62 = void 0, f51 = void 0, p46 = [], b39 = [], v30 = s278.globals.comboCharts ? i423[n180] : n180, m16 = r235.group({
                        class: "apexcharts-series",
                        seriesName: x.escapeString(s278.globals.seriesNames[v30]),
                        rel: n180 + 1,
                        "data:realIndex": v30
                    });
                    a351.ctx.series.addCollapsedClassToSeries(m16, v30), t714[n180].length > 0 && (a351.visibleI = a351.visibleI + 1);
                    var y30, w23;
                    a351.yRatio.length > 1 && (a351.yaxisIndex = v30);
                    var k21 = a351.barHelpers.initialPositions();
                    f51 = k21.y, y30 = k21.barHeight, c108 = k21.yDivision, g79 = k21.zeroW, u62 = k21.x, w23 = k21.barWidth, h127 = k21.xDivision, d93 = k21.zeroH, b39.push(u62 + w23 / 2);
                    for(var A15 = r235.group({
                        class: "apexcharts-datalabels",
                        "data:realIndex": v30
                    }), S11 = function(i424) {
                        var r236 = a351.barHelpers.getStrokeWidth(n180, i424, v30), l148 = null, x34 = {
                            indexes: {
                                i: n180,
                                j: i424,
                                realIndex: v30
                            },
                            x: u62,
                            y: f51,
                            strokeWidth: r236,
                            elSeries: m16
                        };
                        l148 = a351.isHorizontal ? a351.drawHorizontalBoxPaths(e(e({}, x34), {}, {
                            yDivision: c108,
                            barHeight: y30,
                            zeroW: g79
                        })) : a351.drawVerticalBoxPaths(e(e({}, x34), {}, {
                            xDivision: h127,
                            barWidth: w23,
                            zeroH: d93
                        })), f51 = l148.y, u62 = l148.x, i424 > 0 && b39.push(u62 + w23 / 2), p46.push(f51), l148.pathTo.forEach(function(e555, h128) {
                            var c109 = !a351.isBoxPlot && a351.candlestickOptions.wick.useFillColor ? l148.color[h128] : s278.globals.stroke.colors[n180], d94 = o209.fillPath({
                                seriesNumber: v30,
                                dataPointIndex: i424,
                                color: l148.color[h128],
                                value: t714[n180][i424]
                            });
                            a351.renderSeries({
                                realIndex: v30,
                                pathFill: d94,
                                lineFill: c109,
                                j: i424,
                                i: n180,
                                pathFrom: l148.pathFrom,
                                pathTo: e555,
                                strokeWidth: r236,
                                elSeries: m16,
                                x: u62,
                                y: f51,
                                series: t714,
                                barHeight: y30,
                                barWidth: w23,
                                elDataLabelsWrap: A15,
                                visibleSeries: a351.visibleI,
                                type: s278.config.chart.type
                            });
                        });
                    }, C10 = 0; C10 < s278.globals.dataPoints; C10++)S11(C10);
                    s278.globals.seriesXvalues[v30] = b39, s278.globals.seriesYvalues[v30] = p46, l147.add(m16);
                }, c107 = 0; c107 < t714.length; c107++)h126(c107);
                return l147;
            }
        },
        {
            key: "drawVerticalBoxPaths",
            value: function(t715) {
                var e556 = t715.indexes, i425 = t715.x;
                t715.y;
                var a352 = t715.xDivision, s279 = t715.barWidth, r237 = t715.zeroH, o210 = t715.strokeWidth, n181 = this.w, l149 = new m(this.ctx), h129 = e556.i, c110 = e556.j, d95 = !0, g80 = n181.config.plotOptions.candlestick.colors.upward, u63 = n181.config.plotOptions.candlestick.colors.downward, f52 = "";
                this.isBoxPlot && (f52 = [
                    this.boxOptions.colors.lower,
                    this.boxOptions.colors.upper
                ]);
                var p47 = this.yRatio[this.yaxisIndex], x35 = e556.realIndex, b40 = this.getOHLCValue(x35, c110), v31 = r237, y31 = r237;
                b40.o > b40.c && (d95 = !1);
                var w24 = Math.min(b40.o, b40.c), k22 = Math.max(b40.o, b40.c), A16 = b40.m;
                n181.globals.isXNumeric && (i425 = (n181.globals.seriesX[x35][c110] - n181.globals.minX) / this.xRatio - s279 / 2);
                var S12 = i425 + s279 * this.visibleI;
                void 0 === this.series[h129][c110] || null === this.series[h129][c110] ? (w24 = r237, k22 = r237) : (w24 = r237 - w24 / p47, k22 = r237 - k22 / p47, v31 = r237 - b40.h / p47, y31 = r237 - b40.l / p47, A16 = r237 - b40.m / p47);
                var C11 = l149.move(S12, r237), L10 = l149.move(S12 + s279 / 2, w24);
                return n181.globals.previousPaths.length > 0 && (L10 = this.getPreviousPath(x35, c110, !0)), C11 = this.isBoxPlot ? [
                    l149.move(S12, w24) + l149.line(S12 + s279 / 2, w24) + l149.line(S12 + s279 / 2, v31) + l149.line(S12 + s279 / 4, v31) + l149.line(S12 + s279 - s279 / 4, v31) + l149.line(S12 + s279 / 2, v31) + l149.line(S12 + s279 / 2, w24) + l149.line(S12 + s279, w24) + l149.line(S12 + s279, A16) + l149.line(S12, A16) + l149.line(S12, w24 + o210 / 2),
                    l149.move(S12, A16) + l149.line(S12 + s279, A16) + l149.line(S12 + s279, k22) + l149.line(S12 + s279 / 2, k22) + l149.line(S12 + s279 / 2, y31) + l149.line(S12 + s279 - s279 / 4, y31) + l149.line(S12 + s279 / 4, y31) + l149.line(S12 + s279 / 2, y31) + l149.line(S12 + s279 / 2, k22) + l149.line(S12, k22) + l149.line(S12, A16) + "z"
                ] : [
                    l149.move(S12, k22) + l149.line(S12 + s279 / 2, k22) + l149.line(S12 + s279 / 2, v31) + l149.line(S12 + s279 / 2, k22) + l149.line(S12 + s279, k22) + l149.line(S12 + s279, w24) + l149.line(S12 + s279 / 2, w24) + l149.line(S12 + s279 / 2, y31) + l149.line(S12 + s279 / 2, w24) + l149.line(S12, w24) + l149.line(S12, k22 - o210 / 2)
                ], L10 += l149.move(S12, w24), n181.globals.isXNumeric || (i425 += a352), {
                    pathTo: C11,
                    pathFrom: L10,
                    x: i425,
                    y: k22,
                    barXPosition: S12,
                    color: this.isBoxPlot ? f52 : d95 ? [
                        g80
                    ] : [
                        u63
                    ]
                };
            }
        },
        {
            key: "drawHorizontalBoxPaths",
            value: function(t716) {
                var e557 = t716.indexes;
                t716.x;
                var i426 = t716.y, a353 = t716.yDivision, s280 = t716.barHeight, r238 = t716.zeroW, o211 = t716.strokeWidth, n182 = this.w, l150 = new m(this.ctx), h130 = e557.i, c111 = e557.j, d96 = this.boxOptions.colors.lower;
                this.isBoxPlot && (d96 = [
                    this.boxOptions.colors.lower,
                    this.boxOptions.colors.upper
                ]);
                var g81 = this.invertedYRatio, u64 = e557.realIndex, f53 = this.getOHLCValue(u64, c111), p48 = r238, x36 = r238, b41 = Math.min(f53.o, f53.c), v32 = Math.max(f53.o, f53.c), y32 = f53.m;
                n182.globals.isXNumeric && (i426 = (n182.globals.seriesX[u64][c111] - n182.globals.minX) / this.invertedXRatio - s280 / 2);
                var w25 = i426 + s280 * this.visibleI;
                void 0 === this.series[h130][c111] || null === this.series[h130][c111] ? (b41 = r238, v32 = r238) : (b41 = r238 + b41 / g81, v32 = r238 + v32 / g81, p48 = r238 + f53.h / g81, x36 = r238 + f53.l / g81, y32 = r238 + f53.m / g81);
                var k23 = l150.move(r238, w25), A17 = l150.move(b41, w25 + s280 / 2);
                return n182.globals.previousPaths.length > 0 && (A17 = this.getPreviousPath(u64, c111, !0)), k23 = [
                    l150.move(b41, w25) + l150.line(b41, w25 + s280 / 2) + l150.line(p48, w25 + s280 / 2) + l150.line(p48, w25 + s280 / 2 - s280 / 4) + l150.line(p48, w25 + s280 / 2 + s280 / 4) + l150.line(p48, w25 + s280 / 2) + l150.line(b41, w25 + s280 / 2) + l150.line(b41, w25 + s280) + l150.line(y32, w25 + s280) + l150.line(y32, w25) + l150.line(b41 + o211 / 2, w25),
                    l150.move(y32, w25) + l150.line(y32, w25 + s280) + l150.line(v32, w25 + s280) + l150.line(v32, w25 + s280 / 2) + l150.line(x36, w25 + s280 / 2) + l150.line(x36, w25 + s280 - s280 / 4) + l150.line(x36, w25 + s280 / 4) + l150.line(x36, w25 + s280 / 2) + l150.line(v32, w25 + s280 / 2) + l150.line(v32, w25) + l150.line(y32, w25) + "z"
                ], A17 += l150.move(b41, w25), n182.globals.isXNumeric || (i426 += a353), {
                    pathTo: k23,
                    pathFrom: A17,
                    x: v32,
                    y: i426,
                    barYPosition: w25,
                    color: d96
                };
            }
        },
        {
            key: "getOHLCValue",
            value: function(t717, e558) {
                var i427 = this.w;
                return {
                    o: this.isBoxPlot ? i427.globals.seriesCandleH[t717][e558] : i427.globals.seriesCandleO[t717][e558],
                    h: this.isBoxPlot ? i427.globals.seriesCandleO[t717][e558] : i427.globals.seriesCandleH[t717][e558],
                    m: i427.globals.seriesCandleM[t717][e558],
                    l: this.isBoxPlot ? i427.globals.seriesCandleC[t717][e558] : i427.globals.seriesCandleL[t717][e558],
                    c: this.isBoxPlot ? i427.globals.seriesCandleL[t717][e558] : i427.globals.seriesCandleC[t717][e558]
                };
            }
        }
    ]), s277;
}(), kt = function() {
    function t718(e559) {
        a(this, t718), this.ctx = e559, this.w = e559.w;
    }
    return r(t718, [
        {
            key: "checkColorRange",
            value: function() {
                var t719 = this.w, e560 = !1, i428 = t719.config.plotOptions[t719.config.chart.type];
                return i428.colorScale.ranges.length > 0 && i428.colorScale.ranges.map(function(t720, i) {
                    t720.from <= 0 && (e560 = !0);
                }), e560;
            }
        },
        {
            key: "getShadeColor",
            value: function(t721, e561, i429, a354) {
                var s281 = this.w, r239 = 1, o212 = s281.config.plotOptions[t721].shadeIntensity, n183 = this.determineColor(t721, e561, i429);
                s281.globals.hasNegs || a354 ? r239 = s281.config.plotOptions[t721].reverseNegativeShade ? n183.percent < 0 ? n183.percent / 100 * (1.25 * o212) : (1 - n183.percent / 100) * (1.25 * o212) : n183.percent <= 0 ? 1 - (1 + n183.percent / 100) * o212 : (1 - n183.percent / 100) * o212 : (r239 = 1 - n183.percent / 100, "treemap" === t721 && (r239 = (1 - n183.percent / 100) * (1.25 * o212)));
                var l151 = n183.color, h131 = new x;
                return s281.config.plotOptions[t721].enableShades && (l151 = "dark" === this.w.config.theme.mode ? x.hexToRgba(h131.shadeColor(-1 * r239, n183.color), s281.config.fill.opacity) : x.hexToRgba(h131.shadeColor(r239, n183.color), s281.config.fill.opacity)), {
                    color: l151,
                    colorProps: n183
                };
            }
        },
        {
            key: "determineColor",
            value: function(t722, e562, i430) {
                var a355 = this.w, s282 = a355.globals.series[e562][i430], r240 = a355.config.plotOptions[t722], o213 = r240.colorScale.inverse ? i430 : e562;
                r240.distributed && "treemap" === a355.config.chart.type && (o213 = i430);
                var n184 = a355.globals.colors[o213], l152 = null, h132 = Math.min.apply(Math, u(a355.globals.series[e562])), c112 = Math.max.apply(Math, u(a355.globals.series[e562]));
                r240.distributed || "heatmap" !== t722 || (h132 = a355.globals.minY, c112 = a355.globals.maxY), void 0 !== r240.colorScale.min && (h132 = r240.colorScale.min < a355.globals.minY ? r240.colorScale.min : a355.globals.minY, c112 = r240.colorScale.max > a355.globals.maxY ? r240.colorScale.max : a355.globals.maxY);
                var d97 = Math.abs(c112) + Math.abs(h132), g82 = 100 * s282 / (0 === d97 ? d97 - 1e-6 : d97);
                r240.colorScale.ranges.length > 0 && r240.colorScale.ranges.map(function(t723, e) {
                    if (s282 >= t723.from && s282 <= t723.to) {
                        n184 = t723.color, l152 = t723.foreColor ? t723.foreColor : null, h132 = t723.from, c112 = t723.to;
                        var i431 = Math.abs(c112) + Math.abs(h132);
                        g82 = 100 * s282 / (0 === i431 ? i431 - 1e-6 : i431);
                    }
                });
                return {
                    color: n184,
                    foreColor: l152,
                    percent: g82
                };
            }
        },
        {
            key: "calculateDataLabels",
            value: function(t724) {
                var e563 = t724.text, i432 = t724.x, a356 = t724.y, s283 = t724.i, r241 = t724.j, o214 = t724.colorProps, n185 = t724.fontSize, l153 = this.w.config.dataLabels, h133 = new m(this.ctx), c113 = new z(this.ctx), d98 = null;
                if (l153.enabled) {
                    d98 = h133.group({
                        class: "apexcharts-data-labels"
                    });
                    var g83 = l153.offsetX, u65 = l153.offsetY, f54 = i432 + g83, p49 = a356 + parseFloat(l153.style.fontSize) / 3 + u65;
                    c113.plotDataLabelsText({
                        x: f54,
                        y: p49,
                        text: e563,
                        i: s283,
                        j: r241,
                        color: o214.foreColor,
                        parent: d98,
                        fontSize: n185,
                        dataLabelsConfig: l153
                    });
                }
                return d98;
            }
        },
        {
            key: "addListeners",
            value: function(t725) {
                var e564 = new m(this.ctx);
                t725.node.addEventListener("mouseenter", e564.pathMouseEnter.bind(this, t725)), t725.node.addEventListener("mouseleave", e564.pathMouseLeave.bind(this, t725)), t725.node.addEventListener("mousedown", e564.pathMouseDown.bind(this, t725));
            }
        }
    ]), t718;
}(), At = function() {
    function t726(e565, i433) {
        a(this, t726), this.ctx = e565, this.w = e565.w, this.xRatio = i433.xRatio, this.yRatio = i433.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new kt(e565), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;
    }
    return r(t726, [
        {
            key: "draw",
            value: function(t727) {
                var e566 = this.w, i434 = new m(this.ctx), a357 = i434.group({
                    class: "apexcharts-heatmap"
                });
                a357.attr("clip-path", "url(#gridRectMask".concat(e566.globals.cuid, ")"));
                var s284 = e566.globals.gridWidth / e566.globals.dataPoints, r242 = e566.globals.gridHeight / e566.globals.series.length, o215 = 0, n186 = !1;
                this.negRange = this.helpers.checkColorRange();
                var l154 = t727.slice();
                e566.config.yaxis[0].reversed && (n186 = !0, l154.reverse());
                for(var h134 = n186 ? 0 : l154.length - 1; n186 ? h134 < l154.length : h134 >= 0; n186 ? h134++ : h134--){
                    var c114 = i434.group({
                        class: "apexcharts-series apexcharts-heatmap-series",
                        seriesName: x.escapeString(e566.globals.seriesNames[h134]),
                        rel: h134 + 1,
                        "data:realIndex": h134
                    });
                    if (this.ctx.series.addCollapsedClassToSeries(c114, h134), e566.config.chart.dropShadow.enabled) {
                        var d99 = e566.config.chart.dropShadow;
                        new v(this.ctx).dropShadow(c114, d99, h134);
                    }
                    for(var g84 = 0, u66 = e566.config.plotOptions.heatmap.shadeIntensity, f55 = 0; f55 < l154[h134].length; f55++){
                        var p50 = this.helpers.getShadeColor(e566.config.chart.type, h134, f55, this.negRange), b42 = p50.color, y33 = p50.colorProps;
                        if ("image" === e566.config.fill.type) b42 = new M(this.ctx).fillPath({
                            seriesNumber: h134,
                            dataPointIndex: f55,
                            opacity: e566.globals.hasNegs ? y33.percent < 0 ? 1 - (1 + y33.percent / 100) : u66 + y33.percent / 100 : y33.percent / 100,
                            patternID: x.randomId(),
                            width: e566.config.fill.image.width ? e566.config.fill.image.width : s284,
                            height: e566.config.fill.image.height ? e566.config.fill.image.height : r242
                        });
                        var w26 = this.rectRadius, k24 = i434.drawRect(g84, o215, s284, r242, w26);
                        if (k24.attr({
                            cx: g84,
                            cy: o215
                        }), k24.node.classList.add("apexcharts-heatmap-rect"), c114.add(k24), k24.attr({
                            fill: b42,
                            i: h134,
                            index: h134,
                            j: f55,
                            val: l154[h134][f55],
                            "stroke-width": this.strokeWidth,
                            stroke: e566.config.plotOptions.heatmap.useFillColorAsStroke ? b42 : e566.globals.stroke.colors[0],
                            color: b42
                        }), this.helpers.addListeners(k24), e566.config.chart.animations.enabled && !e566.globals.dataChanged) {
                            var A18 = 1;
                            e566.globals.resized || (A18 = e566.config.chart.animations.speed), this.animateHeatMap(k24, g84, o215, s284, r242, A18);
                        }
                        if (e566.globals.dataChanged) {
                            var S13 = 1;
                            if (this.dynamicAnim.enabled && e566.globals.shouldAnimate) {
                                S13 = this.dynamicAnim.speed;
                                var C12 = e566.globals.previousPaths[h134] && e566.globals.previousPaths[h134][f55] && e566.globals.previousPaths[h134][f55].color;
                                C12 || (C12 = "rgba(255, 255, 255, 0)"), this.animateHeatColor(k24, x.isColorHex(C12) ? C12 : x.rgb2hex(C12), x.isColorHex(b42) ? b42 : x.rgb2hex(b42), S13);
                            }
                        }
                        var L11 = (0, e566.config.dataLabels.formatter)(e566.globals.series[h134][f55], {
                            value: e566.globals.series[h134][f55],
                            seriesIndex: h134,
                            dataPointIndex: f55,
                            w: e566
                        }), P10 = this.helpers.calculateDataLabels({
                            text: L11,
                            x: g84 + s284 / 2,
                            y: o215 + r242 / 2,
                            i: h134,
                            j: f55,
                            colorProps: y33,
                            series: l154
                        });
                        null !== P10 && c114.add(P10), g84 += s284;
                    }
                    o215 += r242, a357.add(c114);
                }
                var T8 = e566.globals.yAxisScale[0].result.slice();
                e566.config.yaxis[0].reversed ? T8.unshift("") : T8.push(""), e566.globals.yAxisScale[0].result = T8;
                var I5 = e566.globals.gridHeight / e566.globals.series.length;
                return e566.config.yaxis[0].labels.offsetY = -I5 / 2, a357;
            }
        },
        {
            key: "animateHeatMap",
            value: function(t728, e567, i435, a358, s285, r243) {
                var o216 = new b(this.ctx);
                o216.animateRect(t728, {
                    x: e567 + a358 / 2,
                    y: i435 + s285 / 2,
                    width: 0,
                    height: 0
                }, {
                    x: e567,
                    y: i435,
                    width: a358,
                    height: s285
                }, r243, function() {
                    o216.animationCompleted(t728);
                });
            }
        },
        {
            key: "animateHeatColor",
            value: function(t729, e568, i436, a359) {
                t729.attr({
                    fill: e568
                }).animate(a359).attr({
                    fill: i436
                });
            }
        }
    ]), t726;
}(), St = function() {
    function t730(e569) {
        a(this, t730), this.ctx = e569, this.w = e569.w;
    }
    return r(t730, [
        {
            key: "drawYAxisTexts",
            value: function(t731, e570, i437, a360) {
                var s286 = this.w, r244 = s286.config.yaxis[0], o217 = s286.globals.yLabelFormatters[0];
                return new m(this.ctx).drawText({
                    x: t731 + r244.labels.offsetX,
                    y: e570 + r244.labels.offsetY,
                    text: o217(a360, i437),
                    textAnchor: "middle",
                    fontSize: r244.labels.style.fontSize,
                    fontFamily: r244.labels.style.fontFamily,
                    foreColor: Array.isArray(r244.labels.style.colors) ? r244.labels.style.colors[i437] : r244.labels.style.colors
                });
            }
        }
    ]), t730;
}(), Ct = function() {
    function t732(e571) {
        a(this, t732), this.ctx = e571, this.w = e571.w;
        var i438 = this.w;
        this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [
            0
        ], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== i438.globals.stroke.colors ? i438.globals.stroke.colors : i438.globals.colors, this.defaultSize = Math.min(i438.globals.gridWidth, i438.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = i438.globals.gridWidth / 2, "radialBar" === i438.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(i438.config.plotOptions.pie.endAngle - i438.config.plotOptions.pie.startAngle), this.initialAngle = i438.config.plotOptions.pie.startAngle % this.fullAngle, i438.globals.radialSize = this.defaultSize / 2.05 - i438.config.stroke.width - (i438.config.chart.sparkline.enabled ? 0 : i438.config.chart.dropShadow.blur), this.donutSize = i438.globals.radialSize * parseInt(i438.config.plotOptions.pie.donut.size, 10) / 100, this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = [];
    }
    return r(t732, [
        {
            key: "draw",
            value: function(t733) {
                var e572 = this, i439 = this.w, a361 = new m(this.ctx);
                if (this.ret = a361.group({
                    class: "apexcharts-pie"
                }), i439.globals.noData) return this.ret;
                for(var s287 = 0, r245 = 0; r245 < t733.length; r245++)s287 += x.negToZero(t733[r245]);
                var o218 = [], n187 = a361.group();
                0 === s287 && (s287 = 1e-5), t733.forEach(function(t734) {
                    e572.maxY = Math.max(e572.maxY, t734);
                }), i439.config.yaxis[0].max && (this.maxY = i439.config.yaxis[0].max), "back" === i439.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret);
                for(var l155 = 0; l155 < t733.length; l155++){
                    var h135 = this.fullAngle * x.negToZero(t733[l155]) / s287;
                    o218.push(h135), "polarArea" === this.chartType ? (o218[l155] = this.fullAngle / t733.length, this.sliceSizes.push(i439.globals.radialSize * t733[l155] / this.maxY)) : this.sliceSizes.push(i439.globals.radialSize);
                }
                if (i439.globals.dataChanged) {
                    for(var c115, d100 = 0, g85 = 0; g85 < i439.globals.previousPaths.length; g85++)d100 += x.negToZero(i439.globals.previousPaths[g85]);
                    for(var u67 = 0; u67 < i439.globals.previousPaths.length; u67++)c115 = this.fullAngle * x.negToZero(i439.globals.previousPaths[u67]) / d100, this.prevSectorAngleArr.push(c115);
                }
                this.donutSize < 0 && (this.donutSize = 0);
                var f56 = i439.config.plotOptions.pie.customScale, p51 = i439.globals.gridWidth / 2, b43 = i439.globals.gridHeight / 2, v33 = p51 - i439.globals.gridWidth / 2 * f56, y34 = b43 - i439.globals.gridHeight / 2 * f56;
                if ("donut" === this.chartType) {
                    var w27 = a361.drawCircle(this.donutSize);
                    w27.attr({
                        cx: this.centerX,
                        cy: this.centerY,
                        fill: i439.config.plotOptions.pie.donut.background ? i439.config.plotOptions.pie.donut.background : "transparent"
                    }), n187.add(w27);
                }
                var k25 = this.drawArcs(o218, t733);
                if (this.sliceLabels.forEach(function(t735) {
                    k25.add(t735);
                }), n187.attr({
                    transform: "translate(".concat(v33, ", ").concat(y34, ") scale(").concat(f56, ")")
                }), n187.add(k25), this.ret.add(n187), this.donutDataLabels.show) {
                    var A19 = this.renderInnerDataLabels(this.donutDataLabels, {
                        hollowSize: this.donutSize,
                        centerX: this.centerX,
                        centerY: this.centerY,
                        opacity: this.donutDataLabels.show,
                        translateX: v33,
                        translateY: y34
                    });
                    this.ret.add(A19);
                }
                return "front" === i439.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret), this.ret;
            }
        },
        {
            key: "drawArcs",
            value: function(t736, e573) {
                var i440 = this.w, a362 = new v(this.ctx), s288 = new m(this.ctx), r246 = new M(this.ctx), o219 = s288.group({
                    class: "apexcharts-slices"
                }), n188 = this.initialAngle, l156 = this.initialAngle, h136 = this.initialAngle, c116 = this.initialAngle;
                this.strokeWidth = i440.config.stroke.show ? i440.config.stroke.width : 0;
                for(var d101 = 0; d101 < t736.length; d101++){
                    var g86 = s288.group({
                        class: "apexcharts-series apexcharts-pie-series",
                        seriesName: x.escapeString(i440.globals.seriesNames[d101]),
                        rel: d101 + 1,
                        "data:realIndex": d101
                    });
                    o219.add(g86), l156 = c116, h136 = (n188 = h136) + t736[d101], c116 = l156 + this.prevSectorAngleArr[d101];
                    var u68 = h136 < n188 ? this.fullAngle + h136 - n188 : h136 - n188, f57 = r246.fillPath({
                        seriesNumber: d101,
                        size: this.sliceSizes[d101],
                        value: e573[d101]
                    }), p52 = this.getChangedPath(l156, c116), b44 = s288.drawPath({
                        d: p52,
                        stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d101] : this.lineColorArr,
                        strokeWidth: 0,
                        fill: f57,
                        fillOpacity: i440.config.fill.opacity,
                        classes: "apexcharts-pie-area apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(d101)
                    });
                    if (b44.attr({
                        index: 0,
                        j: d101
                    }), a362.setSelectionFilter(b44, 0, d101), i440.config.chart.dropShadow.enabled) {
                        var y35 = i440.config.chart.dropShadow;
                        a362.dropShadow(b44, y35, d101);
                    }
                    this.addListeners(b44, this.donutDataLabels), m.setAttrs(b44.node, {
                        "data:angle": u68,
                        "data:startAngle": n188,
                        "data:strokeWidth": this.strokeWidth,
                        "data:value": e573[d101]
                    });
                    var w28 = {
                        x: 0,
                        y: 0
                    };
                    "pie" === this.chartType || "polarArea" === this.chartType ? w28 = x.polarToCartesian(this.centerX, this.centerY, i440.globals.radialSize / 1.25 + i440.config.plotOptions.pie.dataLabels.offset, (n188 + u68 / 2) % this.fullAngle) : "donut" === this.chartType && (w28 = x.polarToCartesian(this.centerX, this.centerY, (i440.globals.radialSize + this.donutSize) / 2 + i440.config.plotOptions.pie.dataLabels.offset, (n188 + u68 / 2) % this.fullAngle)), g86.add(b44);
                    var k26 = 0;
                    if (!this.initialAnim || i440.globals.resized || i440.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (k26 = u68 / this.fullAngle * i440.config.chart.animations.speed) && (k26 = 1), this.animDur = k26 + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i440.globals.dataChanged ? this.animatePaths(b44, {
                        size: this.sliceSizes[d101],
                        endAngle: h136,
                        startAngle: n188,
                        prevStartAngle: l156,
                        prevEndAngle: c116,
                        animateStartingPos: !0,
                        i: d101,
                        animBeginArr: this.animBeginArr,
                        shouldSetPrevPaths: !0,
                        dur: i440.config.chart.animations.dynamicAnimation.speed
                    }) : this.animatePaths(b44, {
                        size: this.sliceSizes[d101],
                        endAngle: h136,
                        startAngle: n188,
                        i: d101,
                        totalItems: t736.length - 1,
                        animBeginArr: this.animBeginArr,
                        dur: k26
                    }), i440.config.plotOptions.pie.expandOnClick && "polarArea" !== this.chartType && b44.click(this.pieClicked.bind(this, d101)), void 0 !== i440.globals.selectedDataPoints[0] && i440.globals.selectedDataPoints[0].indexOf(d101) > -1 && this.pieClicked(d101), i440.config.dataLabels.enabled) {
                        var A20 = w28.x, S14 = w28.y, C13 = 100 * u68 / this.fullAngle + "%";
                        if (0 !== u68 && i440.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t736[d101]) {
                            var L12 = i440.config.dataLabels.formatter;
                            void 0 !== L12 && (C13 = L12(i440.globals.seriesPercent[d101][0], {
                                seriesIndex: d101,
                                w: i440
                            }));
                            var P11 = i440.globals.dataLabels.style.colors[d101], T9 = s288.group({
                                class: "apexcharts-datalabels"
                            }), I6 = s288.drawText({
                                x: A20,
                                y: S14,
                                text: C13,
                                textAnchor: "middle",
                                fontSize: i440.config.dataLabels.style.fontSize,
                                fontFamily: i440.config.dataLabels.style.fontFamily,
                                fontWeight: i440.config.dataLabels.style.fontWeight,
                                foreColor: P11
                            });
                            if (T9.add(I6), i440.config.dataLabels.dropShadow.enabled) {
                                var z4 = i440.config.dataLabels.dropShadow;
                                a362.dropShadow(I6, z4);
                            }
                            I6.node.classList.add("apexcharts-pie-label"), i440.config.chart.animations.animate && !1 === i440.globals.resized && (I6.node.classList.add("apexcharts-pie-label-delay"), I6.node.style.animationDelay = i440.config.chart.animations.speed / 940 + "s"), this.sliceLabels.push(T9);
                        }
                    }
                }
                return o219;
            }
        },
        {
            key: "addListeners",
            value: function(t737, e574) {
                var i441 = new m(this.ctx);
                t737.node.addEventListener("mouseenter", i441.pathMouseEnter.bind(this, t737)), t737.node.addEventListener("mouseleave", i441.pathMouseLeave.bind(this, t737)), t737.node.addEventListener("mouseleave", this.revertDataLabelsInner.bind(this, t737.node, e574)), t737.node.addEventListener("mousedown", i441.pathMouseDown.bind(this, t737)), this.donutDataLabels.total.showAlways || (t737.node.addEventListener("mouseenter", this.printDataLabelsInner.bind(this, t737.node, e574)), t737.node.addEventListener("mousedown", this.printDataLabelsInner.bind(this, t737.node, e574)));
            }
        },
        {
            key: "animatePaths",
            value: function(t738, e575) {
                var i442 = this.w, a363 = e575.endAngle < e575.startAngle ? this.fullAngle + e575.endAngle - e575.startAngle : e575.endAngle - e575.startAngle, s289 = a363, r247 = e575.startAngle, o220 = e575.startAngle;
                void 0 !== e575.prevStartAngle && void 0 !== e575.prevEndAngle && (r247 = e575.prevEndAngle, s289 = e575.prevEndAngle < e575.prevStartAngle ? this.fullAngle + e575.prevEndAngle - e575.prevStartAngle : e575.prevEndAngle - e575.prevStartAngle), e575.i === i442.config.series.length - 1 && (a363 + o220 > this.fullAngle ? e575.endAngle = e575.endAngle - (a363 + o220) : a363 + o220 < this.fullAngle && (e575.endAngle = e575.endAngle + (this.fullAngle - (a363 + o220)))), a363 === this.fullAngle && (a363 = this.fullAngle - .01), this.animateArc(t738, r247, o220, a363, s289, e575);
            }
        },
        {
            key: "animateArc",
            value: function(t739, e576, i443, a364, s290, r248) {
                var o221, n189 = this, l157 = this.w, h137 = new b(this.ctx), c117 = r248.size;
                (isNaN(e576) || isNaN(s290)) && (e576 = i443, s290 = a364, r248.dur = 0);
                var d102 = a364, g87 = i443, u69 = e576 < i443 ? this.fullAngle + e576 - i443 : e576 - i443;
                l157.globals.dataChanged && r248.shouldSetPrevPaths && r248.prevEndAngle && (o221 = n189.getPiePath({
                    me: n189,
                    startAngle: r248.prevStartAngle,
                    angle: r248.prevEndAngle < r248.prevStartAngle ? this.fullAngle + r248.prevEndAngle - r248.prevStartAngle : r248.prevEndAngle - r248.prevStartAngle,
                    size: c117
                }), t739.attr({
                    d: o221
                })), 0 !== r248.dur ? t739.animate(r248.dur, l157.globals.easing, r248.animBeginArr[r248.i]).afterAll(function() {
                    "pie" !== n189.chartType && "donut" !== n189.chartType && "polarArea" !== n189.chartType || this.animate(l157.config.chart.animations.dynamicAnimation.speed).attr({
                        "stroke-width": n189.strokeWidth
                    }), r248.i === l157.config.series.length - 1 && h137.animationCompleted(t739);
                }).during(function(l158) {
                    d102 = u69 + (a364 - u69) * l158, r248.animateStartingPos && (d102 = s290 + (a364 - s290) * l158, g87 = e576 - s290 + (i443 - (e576 - s290)) * l158), o221 = n189.getPiePath({
                        me: n189,
                        startAngle: g87,
                        angle: d102,
                        size: c117
                    }), t739.node.setAttribute("data:pathOrig", o221), t739.attr({
                        d: o221
                    });
                }) : (o221 = n189.getPiePath({
                    me: n189,
                    startAngle: g87,
                    angle: a364,
                    size: c117
                }), r248.isTrack || (l157.globals.animationEnded = !0), t739.node.setAttribute("data:pathOrig", o221), t739.attr({
                    d: o221,
                    "stroke-width": n189.strokeWidth
                }));
            }
        },
        {
            key: "pieClicked",
            value: function(t740) {
                var e577, i444 = this.w, a365 = this, s291 = a365.sliceSizes[t740] + (i444.config.plotOptions.pie.expandOnClick ? 4 : 0), r249 = i444.globals.dom.Paper.select(".apexcharts-".concat(a365.chartType.toLowerCase(), "-slice-").concat(t740)).members[0];
                if ("true" !== r249.attr("data:pieClicked")) {
                    var o222 = i444.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");
                    Array.prototype.forEach.call(o222, function(t741) {
                        t741.setAttribute("data:pieClicked", "false");
                        var e578 = t741.getAttribute("data:pathOrig");
                        t741.setAttribute("d", e578);
                    }), r249.attr("data:pieClicked", "true");
                    var n190 = parseInt(r249.attr("data:startAngle"), 10), l159 = parseInt(r249.attr("data:angle"), 10);
                    e577 = a365.getPiePath({
                        me: a365,
                        startAngle: n190,
                        angle: l159,
                        size: s291
                    }), 360 !== l159 && r249.plot(e577);
                } else {
                    r249.attr({
                        "data:pieClicked": "false"
                    }), this.revertDataLabelsInner(r249.node, this.donutDataLabels);
                    var h138 = r249.attr("data:pathOrig");
                    r249.attr({
                        d: h138
                    });
                }
            }
        },
        {
            key: "getChangedPath",
            value: function(t742, e579) {
                var i445 = "";
                return this.dynamicAnim && this.w.globals.dataChanged && (i445 = this.getPiePath({
                    me: this,
                    startAngle: t742,
                    angle: e579 - t742,
                    size: this.size
                })), i445;
            }
        },
        {
            key: "getPiePath",
            value: function(t743) {
                var e580 = t743.me, i446 = t743.startAngle, a366 = t743.angle, s292 = t743.size, r250 = i446, o223 = Math.PI * (r250 - 90) / 180, n191 = a366 + i446;
                Math.ceil(n191) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (n191 = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - .01), Math.ceil(n191) > this.fullAngle && (n191 -= this.fullAngle);
                var l160 = Math.PI * (n191 - 90) / 180, h139 = e580.centerX + s292 * Math.cos(o223), c118 = e580.centerY + s292 * Math.sin(o223), d103 = e580.centerX + s292 * Math.cos(l160), g88 = e580.centerY + s292 * Math.sin(l160), u70 = x.polarToCartesian(e580.centerX, e580.centerY, e580.donutSize, n191), f58 = x.polarToCartesian(e580.centerX, e580.centerY, e580.donutSize, r250), p53 = a366 > 180 ? 1 : 0, b45 = [
                    "M",
                    h139,
                    c118,
                    "A",
                    s292,
                    s292,
                    0,
                    p53,
                    1,
                    d103,
                    g88
                ];
                return "donut" === e580.chartType ? [].concat(b45, [
                    "L",
                    u70.x,
                    u70.y,
                    "A",
                    e580.donutSize,
                    e580.donutSize,
                    0,
                    p53,
                    0,
                    f58.x,
                    f58.y,
                    "L",
                    h139,
                    c118,
                    "z"
                ]).join(" ") : "pie" === e580.chartType || "polarArea" === e580.chartType ? [].concat(b45, [
                    "L",
                    e580.centerX,
                    e580.centerY,
                    "L",
                    h139,
                    c118
                ]).join(" ") : [].concat(b45).join(" ");
            }
        },
        {
            key: "drawPolarElements",
            value: function(t744) {
                var e581 = this.w, i447 = new q(this.ctx), a367 = new m(this.ctx), s293 = new St(this.ctx), r251 = a367.group(), o224 = a367.group(), n192 = i447.niceScale(0, Math.ceil(this.maxY), e581.config.yaxis[0].tickAmount, 0, !0), l161 = n192.result.reverse(), h140 = n192.result.length;
                this.maxY = n192.niceMax;
                for(var c119 = e581.globals.radialSize, d104 = c119 / (h140 - 1), g89 = 0; g89 < h140 - 1; g89++){
                    var u71 = a367.drawCircle(c119);
                    if (u71.attr({
                        cx: this.centerX,
                        cy: this.centerY,
                        fill: "none",
                        "stroke-width": e581.config.plotOptions.polarArea.rings.strokeWidth,
                        stroke: e581.config.plotOptions.polarArea.rings.strokeColor
                    }), e581.config.yaxis[0].show) {
                        var f59 = s293.drawYAxisTexts(this.centerX, this.centerY - c119 + parseInt(e581.config.yaxis[0].labels.style.fontSize, 10) / 2, g89, l161[g89]);
                        o224.add(f59);
                    }
                    r251.add(u71), c119 -= d104;
                }
                this.drawSpokes(t744), t744.add(r251), t744.add(o224);
            }
        },
        {
            key: "renderInnerDataLabels",
            value: function(t745, e582) {
                var i448 = this.w, a368 = new m(this.ctx), s294 = a368.group({
                    class: "apexcharts-datalabels-group",
                    transform: "translate(".concat(e582.translateX ? e582.translateX : 0, ", ").concat(e582.translateY ? e582.translateY : 0, ") scale(").concat(i448.config.plotOptions.pie.customScale, ")")
                }), r252 = t745.total.show;
                s294.node.style.opacity = e582.opacity;
                var o225, n193, l162 = e582.centerX, h141 = e582.centerY;
                o225 = void 0 === t745.name.color ? i448.globals.colors[0] : t745.name.color;
                var c120 = t745.name.fontSize, d105 = t745.name.fontFamily, g90 = t745.name.fontWeight;
                n193 = void 0 === t745.value.color ? i448.config.chart.foreColor : t745.value.color;
                var u72 = t745.value.formatter, f60 = "", p54 = "";
                if (r252 ? (o225 = t745.total.color, c120 = t745.total.fontSize, d105 = t745.total.fontFamily, g90 = t745.total.fontWeight, p54 = t745.total.label, f60 = t745.total.formatter(i448)) : 1 === i448.globals.series.length && (f60 = u72(i448.globals.series[0], i448), p54 = i448.globals.seriesNames[0]), p54 && (p54 = t745.name.formatter(p54, t745.total.show, i448)), t745.name.show) {
                    var x37 = a368.drawText({
                        x: l162,
                        y: h141 + parseFloat(t745.name.offsetY),
                        text: p54,
                        textAnchor: "middle",
                        foreColor: o225,
                        fontSize: c120,
                        fontWeight: g90,
                        fontFamily: d105
                    });
                    x37.node.classList.add("apexcharts-datalabel-label"), s294.add(x37);
                }
                if (t745.value.show) {
                    var b46 = t745.name.show ? parseFloat(t745.value.offsetY) + 16 : t745.value.offsetY, v34 = a368.drawText({
                        x: l162,
                        y: h141 + b46,
                        text: f60,
                        textAnchor: "middle",
                        foreColor: n193,
                        fontWeight: t745.value.fontWeight,
                        fontSize: t745.value.fontSize,
                        fontFamily: t745.value.fontFamily
                    });
                    v34.node.classList.add("apexcharts-datalabel-value"), s294.add(v34);
                }
                return s294;
            }
        },
        {
            key: "printInnerLabels",
            value: function(t746, e583, i449, a369) {
                var s295, r253 = this.w;
                a369 ? s295 = void 0 === t746.name.color ? r253.globals.colors[parseInt(a369.parentNode.getAttribute("rel"), 10) - 1] : t746.name.color : r253.globals.series.length > 1 && t746.total.show && (s295 = t746.total.color);
                var o226 = r253.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"), n194 = r253.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");
                i449 = (0, t746.value.formatter)(i449, r253), a369 || "function" != typeof t746.total.formatter || (i449 = t746.total.formatter(r253));
                var l163 = e583 === t746.total.label;
                e583 = t746.name.formatter(e583, l163, r253), null !== o226 && (o226.textContent = e583), null !== n194 && (n194.textContent = i449), null !== o226 && (o226.style.fill = s295);
            }
        },
        {
            key: "printDataLabelsInner",
            value: function(t747, e584) {
                var i450 = this.w, a370 = t747.getAttribute("data:value"), s296 = i450.globals.seriesNames[parseInt(t747.parentNode.getAttribute("rel"), 10) - 1];
                i450.globals.series.length > 1 && this.printInnerLabels(e584, s296, a370, t747);
                var r254 = i450.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
                null !== r254 && (r254.style.opacity = 1);
            }
        },
        {
            key: "drawSpokes",
            value: function(t748) {
                var e585 = this, i451 = this.w, a371 = new m(this.ctx), s297 = i451.config.plotOptions.polarArea.spokes;
                if (0 !== s297.strokeWidth) {
                    for(var r255 = [], o227 = 360 / i451.globals.series.length, n195 = 0; n195 < i451.globals.series.length; n195++)r255.push(x.polarToCartesian(this.centerX, this.centerY, i451.globals.radialSize, i451.config.plotOptions.pie.startAngle + o227 * n195));
                    r255.forEach(function(i452, r256) {
                        var o228 = a371.drawLine(i452.x, i452.y, e585.centerX, e585.centerY, Array.isArray(s297.connectorColors) ? s297.connectorColors[r256] : s297.connectorColors);
                        t748.add(o228);
                    });
                }
            }
        },
        {
            key: "revertDataLabelsInner",
            value: function(t749, e586, i453) {
                var a372 = this, s298 = this.w, r257 = s298.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group"), o229 = !1, n196 = s298.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area"), l164 = function(t750) {
                    var i454 = t750.makeSliceOut, s299 = t750.printLabel;
                    Array.prototype.forEach.call(n196, function(t751) {
                        "true" === t751.getAttribute("data:pieClicked") && (i454 && (o229 = !0), s299 && a372.printDataLabelsInner(t751, e586));
                    });
                };
                if (l164({
                    makeSliceOut: !0,
                    printLabel: !1
                }), e586.total.show && s298.globals.series.length > 1) o229 && !e586.total.showAlways ? l164({
                    makeSliceOut: !1,
                    printLabel: !0
                }) : this.printInnerLabels(e586, e586.total.label, e586.total.formatter(s298));
                else if (l164({
                    makeSliceOut: !1,
                    printLabel: !0
                }), !o229) {
                    if (s298.globals.selectedDataPoints.length && s298.globals.series.length > 1) {
                        if (s298.globals.selectedDataPoints[0].length > 0) {
                            var h142 = s298.globals.selectedDataPoints[0], c121 = s298.globals.dom.baseEl.querySelector(".apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(h142));
                            this.printDataLabelsInner(c121, e586);
                        } else r257 && s298.globals.selectedDataPoints.length && 0 === s298.globals.selectedDataPoints[0].length && (r257.style.opacity = 0);
                    } else r257 && s298.globals.series.length > 1 && (r257.style.opacity = 0);
                }
            }
        }
    ]), t732;
}(), Lt = function() {
    function t752(e587) {
        a(this, t752), this.ctx = e587, this.w = e587.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;
        var i455 = this.w;
        this.graphics = new m(this.ctx), this.lineColorArr = void 0 !== i455.globals.stroke.colors ? i455.globals.stroke.colors : i455.globals.colors, this.defaultSize = i455.globals.svgHeight < i455.globals.svgWidth ? i455.globals.gridHeight + 1.5 * i455.globals.goldenPadding : i455.globals.gridWidth, this.isLog = i455.config.yaxis[0].logarithmic, this.coreUtils = new y(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(i455.globals.maxY, 0) : i455.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.w.globals.minY, 0) : i455.globals.minY, this.polygons = i455.config.plotOptions.radar.polygons, this.strokeWidth = i455.config.stroke.show ? i455.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - i455.config.chart.dropShadow.blur, i455.config.xaxis.labels.show && (this.size = this.size - i455.globals.xAxisLabelsWidth / 1.75), void 0 !== i455.config.plotOptions.radar.size && (this.size = i455.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];
    }
    return r(t752, [
        {
            key: "draw",
            value: function(t753) {
                var i456 = this, a373 = this.w, s300 = new M(this.ctx), r258 = [], o230 = new z(this.ctx);
                t753.length && (this.dataPointsLen = t753[a373.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;
                var n197 = a373.globals.gridWidth / 2, l165 = a373.globals.gridHeight / 2, h143 = n197 + a373.config.plotOptions.radar.offsetX, c122 = l165 + a373.config.plotOptions.radar.offsetY, d106 = this.graphics.group({
                    class: "apexcharts-radar-series apexcharts-plot-series",
                    transform: "translate(".concat(h143 || 0, ", ").concat(c122 || 0, ")")
                }), g91 = [], u73 = null, f61 = null;
                if (this.yaxisLabels = this.graphics.group({
                    class: "apexcharts-yaxis"
                }), t753.forEach(function(t754, n198) {
                    var l166 = t754.length === a373.globals.dataPoints, h144 = i456.graphics.group().attr({
                        class: "apexcharts-series",
                        "data:longestSeries": l166,
                        seriesName: x.escapeString(a373.globals.seriesNames[n198]),
                        rel: n198 + 1,
                        "data:realIndex": n198
                    });
                    i456.dataRadiusOfPercent[n198] = [], i456.dataRadius[n198] = [], i456.angleArr[n198] = [], t754.forEach(function(t755, e588) {
                        var a374 = Math.abs(i456.maxValue - i456.minValue);
                        t755 += Math.abs(i456.minValue), i456.isLog && (t755 = i456.coreUtils.getLogVal(t755, 0)), i456.dataRadiusOfPercent[n198][e588] = t755 / a374, i456.dataRadius[n198][e588] = i456.dataRadiusOfPercent[n198][e588] * i456.size, i456.angleArr[n198][e588] = e588 * i456.disAngle;
                    }), g91 = i456.getDataPointsPos(i456.dataRadius[n198], i456.angleArr[n198]);
                    var c123 = i456.createPaths(g91, {
                        x: 0,
                        y: 0
                    });
                    u73 = i456.graphics.group({
                        class: "apexcharts-series-markers-wrap apexcharts-element-hidden"
                    }), f61 = i456.graphics.group({
                        class: "apexcharts-datalabels",
                        "data:realIndex": n198
                    }), a373.globals.delayedElements.push({
                        el: u73.node,
                        index: n198
                    });
                    var d107 = {
                        i: n198,
                        realIndex: n198,
                        animationDelay: n198,
                        initialSpeed: a373.config.chart.animations.speed,
                        dataChangeSpeed: a373.config.chart.animations.dynamicAnimation.speed,
                        className: "apexcharts-radar",
                        shouldClipToGrid: !1,
                        bindEventsOnPaths: !1,
                        stroke: a373.globals.stroke.colors[n198],
                        strokeLineCap: a373.config.stroke.lineCap
                    }, p56 = null;
                    a373.globals.previousPaths.length > 0 && (p56 = i456.getPreviousPath(n198));
                    for(var b47 = 0; b47 < c123.linePathsTo.length; b47++){
                        var m17 = i456.graphics.renderPaths(e(e({}, d107), {}, {
                            pathFrom: null === p56 ? c123.linePathsFrom[b47] : p56,
                            pathTo: c123.linePathsTo[b47],
                            strokeWidth: Array.isArray(i456.strokeWidth) ? i456.strokeWidth[n198] : i456.strokeWidth,
                            fill: "none",
                            drawShadow: !1
                        }));
                        h144.add(m17);
                        var y36 = s300.fillPath({
                            seriesNumber: n198
                        }), w29 = i456.graphics.renderPaths(e(e({}, d107), {}, {
                            pathFrom: null === p56 ? c123.areaPathsFrom[b47] : p56,
                            pathTo: c123.areaPathsTo[b47],
                            strokeWidth: 0,
                            fill: y36,
                            drawShadow: !1
                        }));
                        if (a373.config.chart.dropShadow.enabled) {
                            var k27 = new v(i456.ctx), A21 = a373.config.chart.dropShadow;
                            k27.dropShadow(w29, Object.assign({}, A21, {
                                noUserSpaceOnUse: !0
                            }), n198);
                        }
                        h144.add(w29);
                    }
                    t754.forEach(function(t, s301) {
                        var r259 = new T(i456.ctx).getMarkerConfig({
                            cssClass: "apexcharts-marker",
                            seriesIndex: n198,
                            dataPointIndex: s301
                        }), l167 = i456.graphics.drawMarker(g91[s301].x, g91[s301].y, r259);
                        l167.attr("rel", s301), l167.attr("j", s301), l167.attr("index", n198), l167.node.setAttribute("default-marker-size", r259.pSize);
                        var c124 = i456.graphics.group({
                            class: "apexcharts-series-markers"
                        });
                        c124 && c124.add(l167), u73.add(c124), h144.add(u73);
                        var d108 = a373.config.dataLabels;
                        if (d108.enabled) {
                            var p57 = d108.formatter(a373.globals.series[n198][s301], {
                                seriesIndex: n198,
                                dataPointIndex: s301,
                                w: a373
                            });
                            o230.plotDataLabelsText({
                                x: g91[s301].x,
                                y: g91[s301].y,
                                text: p57,
                                textAnchor: "middle",
                                i: n198,
                                j: n198,
                                parent: f61,
                                offsetCorrection: !1,
                                dataLabelsConfig: e({}, d108)
                            });
                        }
                        h144.add(f61);
                    }), r258.push(h144);
                }), this.drawPolygons({
                    parent: d106
                }), a373.config.xaxis.labels.show) {
                    var p55 = this.drawXAxisTexts();
                    d106.add(p55);
                }
                return r258.forEach(function(t756) {
                    d106.add(t756);
                }), d106.add(this.yaxisLabels), d106;
            }
        },
        {
            key: "drawPolygons",
            value: function(t757) {
                for(var e589 = this, i457 = this.w, a375 = t757.parent, s302 = new St(this.ctx), r260 = i457.globals.yAxisScale[0].result.reverse(), o231 = r260.length, n199 = [], l168 = this.size / (o231 - 1), h145 = 0; h145 < o231; h145++)n199[h145] = l168 * h145;
                n199.reverse();
                var c125 = [], d109 = [];
                n199.forEach(function(t758, i458) {
                    var a376 = x.getPolygonPos(t758, e589.dataPointsLen), s303 = "";
                    a376.forEach(function(t759, a377) {
                        if (0 === i458) {
                            var r261 = e589.graphics.drawLine(t759.x, t759.y, 0, 0, Array.isArray(e589.polygons.connectorColors) ? e589.polygons.connectorColors[a377] : e589.polygons.connectorColors);
                            d109.push(r261);
                        }
                        0 === a377 && e589.yaxisLabelsTextsPos.push({
                            x: t759.x,
                            y: t759.y
                        }), s303 += t759.x + "," + t759.y + " ";
                    }), c125.push(s303);
                }), c125.forEach(function(t760, s304) {
                    var r262 = e589.polygons.strokeColors, o232 = e589.polygons.strokeWidth, n200 = e589.graphics.drawPolygon(t760, Array.isArray(r262) ? r262[s304] : r262, Array.isArray(o232) ? o232[s304] : o232, i457.globals.radarPolygons.fill.colors[s304]);
                    a375.add(n200);
                }), d109.forEach(function(t761) {
                    a375.add(t761);
                }), i457.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function(t762, i459) {
                    var a378 = s302.drawYAxisTexts(t762.x, t762.y, i459, r260[i459]);
                    e589.yaxisLabels.add(a378);
                });
            }
        },
        {
            key: "drawXAxisTexts",
            value: function() {
                var t763 = this, i460 = this.w, a379 = i460.config.xaxis.labels, s305 = this.graphics.group({
                    class: "apexcharts-xaxis"
                }), r263 = x.getPolygonPos(this.size, this.dataPointsLen);
                return i460.globals.labels.forEach(function(o233, n201) {
                    var l169 = i460.config.xaxis.labels.formatter, h146 = new z(t763.ctx);
                    if (r263[n201]) {
                        var c126 = t763.getTextPos(r263[n201], t763.size), d110 = l169(o233, {
                            seriesIndex: -1,
                            dataPointIndex: n201,
                            w: i460
                        });
                        h146.plotDataLabelsText({
                            x: c126.newX,
                            y: c126.newY,
                            text: d110,
                            textAnchor: c126.textAnchor,
                            i: n201,
                            j: n201,
                            parent: s305,
                            color: Array.isArray(a379.style.colors) && a379.style.colors[n201] ? a379.style.colors[n201] : "#a8a8a8",
                            dataLabelsConfig: e({
                                textAnchor: c126.textAnchor,
                                dropShadow: {
                                    enabled: !1
                                }
                            }, a379),
                            offsetCorrection: !1
                        });
                    }
                }), s305;
            }
        },
        {
            key: "createPaths",
            value: function(t764, e590) {
                var i461 = this, a380 = [], s306 = [], r264 = [], o234 = [];
                if (t764.length) {
                    s306 = [
                        this.graphics.move(e590.x, e590.y)
                    ], o234 = [
                        this.graphics.move(e590.x, e590.y)
                    ];
                    var n202 = this.graphics.move(t764[0].x, t764[0].y), l170 = this.graphics.move(t764[0].x, t764[0].y);
                    t764.forEach(function(e591, a381) {
                        n202 += i461.graphics.line(e591.x, e591.y), l170 += i461.graphics.line(e591.x, e591.y), a381 === t764.length - 1 && (n202 += "Z", l170 += "Z");
                    }), a380.push(n202), r264.push(l170);
                }
                return {
                    linePathsFrom: s306,
                    linePathsTo: a380,
                    areaPathsFrom: o234,
                    areaPathsTo: r264
                };
            }
        },
        {
            key: "getTextPos",
            value: function(t765, e592) {
                var i462 = "middle", a382 = t765.x, s307 = t765.y;
                return Math.abs(t765.x) >= 10 ? t765.x > 0 ? (i462 = "start", a382 += 10) : t765.x < 0 && (i462 = "end", a382 -= 10) : i462 = "middle", Math.abs(t765.y) >= e592 - 10 && (t765.y < 0 ? s307 -= 10 : t765.y > 0 && (s307 += 10)), {
                    textAnchor: i462,
                    newX: a382,
                    newY: s307
                };
            }
        },
        {
            key: "getPreviousPath",
            value: function(t766) {
                for(var e593 = this.w, i463 = null, a383 = 0; a383 < e593.globals.previousPaths.length; a383++){
                    var s308 = e593.globals.previousPaths[a383];
                    s308.paths.length > 0 && parseInt(s308.realIndex, 10) === parseInt(t766, 10) && void 0 !== e593.globals.previousPaths[a383].paths[0] && (i463 = e593.globals.previousPaths[a383].paths[0].d);
                }
                return i463;
            }
        },
        {
            key: "getDataPointsPos",
            value: function(t767, e594) {
                var i464 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;
                t767 = t767 || [], e594 = e594 || [];
                for(var a384 = [], s309 = 0; s309 < i464; s309++){
                    var r265 = {};
                    r265.x = t767[s309] * Math.sin(e594[s309]), r265.y = -t767[s309] * Math.cos(e594[s309]), a384.push(r265);
                }
                return a384;
            }
        }
    ]), t752;
}(), Pt = function(t768) {
    n(i465, Ct);
    var e595 = d(i465);
    function i465(t769) {
        var s310;
        a(this, i465), (s310 = e595.call(this, t769)).ctx = t769, s310.w = t769.w, s310.animBeginArr = [
            0
        ], s310.animDur = 0;
        var r266 = s310.w;
        return s310.startAngle = r266.config.plotOptions.radialBar.startAngle, s310.endAngle = r266.config.plotOptions.radialBar.endAngle, s310.totalAngle = Math.abs(r266.config.plotOptions.radialBar.endAngle - r266.config.plotOptions.radialBar.startAngle), s310.trackStartAngle = r266.config.plotOptions.radialBar.track.startAngle, s310.trackEndAngle = r266.config.plotOptions.radialBar.track.endAngle, s310.donutDataLabels = s310.w.config.plotOptions.radialBar.dataLabels, s310.radialDataLabels = s310.donutDataLabels, s310.trackStartAngle || (s310.trackStartAngle = s310.startAngle), s310.trackEndAngle || (s310.trackEndAngle = s310.endAngle), 360 === s310.endAngle && (s310.endAngle = 359.99), s310.margin = parseInt(r266.config.plotOptions.radialBar.track.margin, 10), s310;
    }
    return r(i465, [
        {
            key: "draw",
            value: function(t770) {
                var e596 = this.w, i466 = new m(this.ctx), a385 = i466.group({
                    class: "apexcharts-radialbar"
                });
                if (e596.globals.noData) return a385;
                var s311 = i466.group(), r267 = this.defaultSize / 2, o235 = e596.globals.gridWidth / 2, n203 = this.defaultSize / 2.05;
                e596.config.chart.sparkline.enabled || (n203 = n203 - e596.config.stroke.width - e596.config.chart.dropShadow.blur);
                var l171 = e596.globals.fill.colors;
                if (e596.config.plotOptions.radialBar.track.show) {
                    var h147 = this.drawTracks({
                        size: n203,
                        centerX: o235,
                        centerY: r267,
                        colorArr: l171,
                        series: t770
                    });
                    s311.add(h147);
                }
                var c127 = this.drawArcs({
                    size: n203,
                    centerX: o235,
                    centerY: r267,
                    colorArr: l171,
                    series: t770
                }), d111 = 360;
                e596.config.plotOptions.radialBar.startAngle < 0 && (d111 = this.totalAngle);
                var g92 = (360 - d111) / 360;
                if (e596.globals.radialSize = n203 - n203 * g92, this.radialDataLabels.value.show) {
                    var u74 = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);
                    e596.globals.radialSize += u74 * g92;
                }
                return s311.add(c127.g), "front" === e596.config.plotOptions.radialBar.hollow.position && (c127.g.add(c127.elHollow), c127.dataLabels && c127.g.add(c127.dataLabels)), a385.add(s311), a385;
            }
        },
        {
            key: "drawTracks",
            value: function(t771) {
                var e597 = this.w, i467 = new m(this.ctx), a386 = i467.group({
                    class: "apexcharts-tracks"
                }), s312 = new v(this.ctx), r268 = new M(this.ctx), o236 = this.getStrokeWidth(t771);
                t771.size = t771.size - o236 / 2;
                for(var n204 = 0; n204 < t771.series.length; n204++){
                    var l172 = i467.group({
                        class: "apexcharts-radialbar-track apexcharts-track"
                    });
                    a386.add(l172), l172.attr({
                        rel: n204 + 1
                    }), t771.size = t771.size - o236 - this.margin;
                    var h148 = e597.config.plotOptions.radialBar.track, c128 = r268.fillPath({
                        seriesNumber: 0,
                        size: t771.size,
                        fillColors: Array.isArray(h148.background) ? h148.background[n204] : h148.background,
                        solid: !0
                    }), d112 = this.trackStartAngle, g93 = this.trackEndAngle;
                    Math.abs(g93) + Math.abs(d112) >= 360 && (g93 = 360 - Math.abs(this.startAngle) - .1);
                    var u75 = i467.drawPath({
                        d: "",
                        stroke: c128,
                        strokeWidth: o236 * parseInt(h148.strokeWidth, 10) / 100,
                        fill: "none",
                        strokeOpacity: h148.opacity,
                        classes: "apexcharts-radialbar-area"
                    });
                    if (h148.dropShadow.enabled) {
                        var f62 = h148.dropShadow;
                        s312.dropShadow(u75, f62);
                    }
                    l172.add(u75), u75.attr("id", "apexcharts-radialbarTrack-" + n204), this.animatePaths(u75, {
                        centerX: t771.centerX,
                        centerY: t771.centerY,
                        endAngle: g93,
                        startAngle: d112,
                        size: t771.size,
                        i: n204,
                        totalItems: 2,
                        animBeginArr: 0,
                        dur: 0,
                        isTrack: !0,
                        easing: e597.globals.easing
                    });
                }
                return a386;
            }
        },
        {
            key: "drawArcs",
            value: function(t772) {
                var e598 = this.w, i468 = new m(this.ctx), a387 = new M(this.ctx), s313 = new v(this.ctx), r269 = i468.group(), o237 = this.getStrokeWidth(t772);
                t772.size = t772.size - o237 / 2;
                var n205 = e598.config.plotOptions.radialBar.hollow.background, l173 = t772.size - o237 * t772.series.length - this.margin * t772.series.length - o237 * parseInt(e598.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2, h149 = l173 - e598.config.plotOptions.radialBar.hollow.margin;
                void 0 !== e598.config.plotOptions.radialBar.hollow.image && (n205 = this.drawHollowImage(t772, r269, l173, n205));
                var c129 = this.drawHollow({
                    size: h149,
                    centerX: t772.centerX,
                    centerY: t772.centerY,
                    fill: n205 || "transparent"
                });
                if (e598.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
                    var d113 = e598.config.plotOptions.radialBar.hollow.dropShadow;
                    s313.dropShadow(c129, d113);
                }
                var g94 = 1;
                !this.radialDataLabels.total.show && e598.globals.series.length > 1 && (g94 = 0);
                var u76 = null;
                this.radialDataLabels.show && (u76 = this.renderInnerDataLabels(this.radialDataLabels, {
                    hollowSize: l173,
                    centerX: t772.centerX,
                    centerY: t772.centerY,
                    opacity: g94
                })), "back" === e598.config.plotOptions.radialBar.hollow.position && (r269.add(c129), u76 && r269.add(u76));
                var f63 = !1;
                e598.config.plotOptions.radialBar.inverseOrder && (f63 = !0);
                for(var p58 = f63 ? t772.series.length - 1 : 0; f63 ? p58 >= 0 : p58 < t772.series.length; f63 ? p58-- : p58++){
                    var b48 = i468.group({
                        class: "apexcharts-series apexcharts-radial-series",
                        seriesName: x.escapeString(e598.globals.seriesNames[p58])
                    });
                    r269.add(b48), b48.attr({
                        rel: p58 + 1,
                        "data:realIndex": p58
                    }), this.ctx.series.addCollapsedClassToSeries(b48, p58), t772.size = t772.size - o237 - this.margin;
                    var y37 = a387.fillPath({
                        seriesNumber: p58,
                        size: t772.size,
                        value: t772.series[p58]
                    }), w30 = this.startAngle, k28 = void 0, A22 = x.negToZero(t772.series[p58] > 100 ? 100 : t772.series[p58]) / 100, S15 = Math.round(this.totalAngle * A22) + this.startAngle, C14 = void 0;
                    e598.globals.dataChanged && (k28 = this.startAngle, C14 = Math.round(this.totalAngle * x.negToZero(e598.globals.previousPaths[p58]) / 100) + k28), Math.abs(S15) + Math.abs(w30) >= 360 && (S15 -= .01), Math.abs(C14) + Math.abs(k28) >= 360 && (C14 -= .01);
                    var L13 = S15 - w30, P12 = Array.isArray(e598.config.stroke.dashArray) ? e598.config.stroke.dashArray[p58] : e598.config.stroke.dashArray, T10 = i468.drawPath({
                        d: "",
                        stroke: y37,
                        strokeWidth: o237,
                        fill: "none",
                        fillOpacity: e598.config.fill.opacity,
                        classes: "apexcharts-radialbar-area apexcharts-radialbar-slice-" + p58,
                        strokeDashArray: P12
                    });
                    if (m.setAttrs(T10.node, {
                        "data:angle": L13,
                        "data:value": t772.series[p58]
                    }), e598.config.chart.dropShadow.enabled) {
                        var I7 = e598.config.chart.dropShadow;
                        s313.dropShadow(T10, I7, p58);
                    }
                    s313.setSelectionFilter(T10, 0, p58), this.addListeners(T10, this.radialDataLabels), b48.add(T10), T10.attr({
                        index: 0,
                        j: p58
                    });
                    var z5 = 0;
                    !this.initialAnim || e598.globals.resized || e598.globals.dataChanged || (z5 = e598.config.chart.animations.speed), e598.globals.dataChanged && (z5 = e598.config.chart.animations.dynamicAnimation.speed), this.animDur = z5 / (1.2 * t772.series.length) + this.animDur, this.animBeginArr.push(this.animDur), this.animatePaths(T10, {
                        centerX: t772.centerX,
                        centerY: t772.centerY,
                        endAngle: S15,
                        startAngle: w30,
                        prevEndAngle: C14,
                        prevStartAngle: k28,
                        size: t772.size,
                        i: p58,
                        totalItems: 2,
                        animBeginArr: this.animBeginArr,
                        dur: z5,
                        shouldSetPrevPaths: !0,
                        easing: e598.globals.easing
                    });
                }
                return {
                    g: r269,
                    elHollow: c129,
                    dataLabels: u76
                };
            }
        },
        {
            key: "drawHollow",
            value: function(t773) {
                var e599 = new m(this.ctx).drawCircle(2 * t773.size);
                return e599.attr({
                    class: "apexcharts-radialbar-hollow",
                    cx: t773.centerX,
                    cy: t773.centerY,
                    r: t773.size,
                    fill: t773.fill
                }), e599;
            }
        },
        {
            key: "drawHollowImage",
            value: function(t774, e600, i469, a388) {
                var s314 = this.w, r270 = new M(this.ctx), o238 = x.randomId(), n206 = s314.config.plotOptions.radialBar.hollow.image;
                if (s314.config.plotOptions.radialBar.hollow.imageClipped) r270.clippedImgArea({
                    width: i469,
                    height: i469,
                    image: n206,
                    patternID: "pattern".concat(s314.globals.cuid).concat(o238)
                }), a388 = "url(#pattern".concat(s314.globals.cuid).concat(o238, ")");
                else {
                    var l174 = s314.config.plotOptions.radialBar.hollow.imageWidth, h150 = s314.config.plotOptions.radialBar.hollow.imageHeight;
                    if (void 0 === l174 && void 0 === h150) {
                        var c130 = s314.globals.dom.Paper.image(n206).loaded(function(e601) {
                            this.move(t774.centerX - e601.width / 2 + s314.config.plotOptions.radialBar.hollow.imageOffsetX, t774.centerY - e601.height / 2 + s314.config.plotOptions.radialBar.hollow.imageOffsetY);
                        });
                        e600.add(c130);
                    } else {
                        var d114 = s314.globals.dom.Paper.image(n206).loaded(function(e) {
                            this.move(t774.centerX - l174 / 2 + s314.config.plotOptions.radialBar.hollow.imageOffsetX, t774.centerY - h150 / 2 + s314.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l174, h150);
                        });
                        e600.add(d114);
                    }
                }
                return a388;
            }
        },
        {
            key: "getStrokeWidth",
            value: function(t775) {
                var e602 = this.w;
                return t775.size * (100 - parseInt(e602.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t775.series.length + 1) - this.margin;
            }
        }
    ]), i465;
}(), Mt = function() {
    function t776(e603) {
        a(this, t776), this.w = e603.w, this.lineCtx = e603;
    }
    return r(t776, [
        {
            key: "sameValueSeriesFix",
            value: function(t777, e604) {
                var i470 = this.w;
                if ("line" === i470.config.chart.type && ("gradient" === i470.config.fill.type || "gradient" === i470.config.fill.type[t777]) && new y(this.lineCtx.ctx, i470).seriesHaveSameValues(t777)) {
                    var a389 = e604[t777].slice();
                    a389[a389.length - 1] = a389[a389.length - 1] + 1e-6, e604[t777] = a389;
                }
                return e604;
            }
        },
        {
            key: "calculatePoints",
            value: function(t778) {
                var e605 = t778.series, i471 = t778.realIndex, a390 = t778.x, s315 = t778.y, r271 = t778.i, o239 = t778.j, n207 = t778.prevY, l175 = this.w, h151 = [], c131 = [];
                if (0 === o239) {
                    var d115 = this.lineCtx.categoryAxisCorrection + l175.config.markers.offsetX;
                    l175.globals.isXNumeric && (d115 = (l175.globals.seriesX[i471][0] - l175.globals.minX) / this.lineCtx.xRatio + l175.config.markers.offsetX), h151.push(d115), c131.push(x.isNumber(e605[r271][0]) ? n207 + l175.config.markers.offsetY : null), h151.push(a390 + l175.config.markers.offsetX), c131.push(x.isNumber(e605[r271][o239 + 1]) ? s315 + l175.config.markers.offsetY : null);
                } else h151.push(a390 + l175.config.markers.offsetX), c131.push(x.isNumber(e605[r271][o239 + 1]) ? s315 + l175.config.markers.offsetY : null);
                return {
                    x: h151,
                    y: c131
                };
            }
        },
        {
            key: "checkPreviousPaths",
            value: function(t779) {
                for(var e606 = t779.pathFromLine, i472 = t779.pathFromArea, a391 = t779.realIndex, s316 = this.w, r272 = 0; r272 < s316.globals.previousPaths.length; r272++){
                    var o240 = s316.globals.previousPaths[r272];
                    ("line" === o240.type || "area" === o240.type) && o240.paths.length > 0 && parseInt(o240.realIndex, 10) === parseInt(a391, 10) && ("line" === o240.type ? (this.lineCtx.appendPathFrom = !1, e606 = s316.globals.previousPaths[r272].paths[0].d) : "area" === o240.type && (this.lineCtx.appendPathFrom = !1, i472 = s316.globals.previousPaths[r272].paths[0].d, s316.config.stroke.show && s316.globals.previousPaths[r272].paths[1] && (e606 = s316.globals.previousPaths[r272].paths[1].d)));
                }
                return {
                    pathFromLine: e606,
                    pathFromArea: i472
                };
            }
        },
        {
            key: "determineFirstPrevY",
            value: function(t780) {
                var e607 = t780.i, i473 = t780.series, a392 = t780.prevY, s317 = t780.lineYPosition, r273 = this.w;
                if (void 0 !== i473[e607][0]) a392 = (s317 = r273.config.chart.stacked && e607 > 0 ? this.lineCtx.prevSeriesY[e607 - 1][0] : this.lineCtx.zeroY) - i473[e607][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] + 2 * (this.lineCtx.isReversed ? i473[e607][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] : 0);
                else if (r273.config.chart.stacked && e607 > 0 && void 0 === i473[e607][0]) {
                    for(var o241 = e607 - 1; o241 >= 0; o241--)if (null !== i473[o241][0] && void 0 !== i473[o241][0]) {
                        a392 = s317 = this.lineCtx.prevSeriesY[o241][0];
                        break;
                    }
                }
                return {
                    prevY: a392,
                    lineYPosition: s317
                };
            }
        }
    ]), t776;
}(), Tt = function() {
    function t781(e608, i474, s318) {
        a(this, t781), this.ctx = e608, this.w = e608.w, this.xyRatios = i474, this.pointsChart = !("bubble" !== this.w.config.chart.type && "scatter" !== this.w.config.chart.type) || s318, this.scatter = new I(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new Mt(this), this.markers = new T(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;
    }
    return r(t781, [
        {
            key: "draw",
            value: function(t782, e609, i475) {
                var a393 = this.w, s319 = new m(this.ctx), r274 = a393.globals.comboCharts ? e609 : a393.config.chart.type, o242 = s319.group({
                    class: "apexcharts-".concat(r274, "-series apexcharts-plot-series")
                }), n208 = new y(this.ctx, a393);
                this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t782 = n208.getLogSeries(t782), this.yRatio = n208.getLogYRatios(this.yRatio);
                for(var l176 = [], h152 = 0; h152 < t782.length; h152++){
                    t782 = this.lineHelpers.sameValueSeriesFix(h152, t782);
                    var c132 = a393.globals.comboCharts ? i475[h152] : h152;
                    this._initSerieVariables(t782, h152, c132);
                    var d116 = [], g95 = [], u77 = a393.globals.padHorizontal + this.categoryAxisCorrection;
                    this.ctx.series.addCollapsedClassToSeries(this.elSeries, c132), a393.globals.isXNumeric && a393.globals.seriesX.length > 0 && (u77 = (a393.globals.seriesX[c132][0] - a393.globals.minX) / this.xRatio), g95.push(u77);
                    var f64, p59 = u77, x38 = p59, b49 = this.zeroY;
                    b49 = this.lineHelpers.determineFirstPrevY({
                        i: h152,
                        series: t782,
                        prevY: b49,
                        lineYPosition: 0
                    }).prevY, d116.push(b49), f64 = b49;
                    var v35 = this._calculatePathsFrom({
                        series: t782,
                        i: h152,
                        realIndex: c132,
                        prevX: x38,
                        prevY: b49
                    }), w31 = this._iterateOverDataPoints({
                        series: t782,
                        realIndex: c132,
                        i: h152,
                        x: u77,
                        y: 1,
                        pX: p59,
                        pY: f64,
                        pathsFrom: v35,
                        linePaths: [],
                        areaPaths: [],
                        seriesIndex: i475,
                        lineYPosition: 0,
                        xArrj: g95,
                        yArrj: d116
                    });
                    this._handlePaths({
                        type: r274,
                        realIndex: c132,
                        i: h152,
                        paths: w31
                    }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), l176.push(this.elSeries);
                }
                if (a393.config.chart.stacked) for(var k29 = l176.length; k29 > 0; k29--)o242.add(l176[k29 - 1]);
                else for(var A23 = 0; A23 < l176.length; A23++)o242.add(l176[A23]);
                return o242;
            }
        },
        {
            key: "_initSerieVariables",
            value: function(t783, e610, i476) {
                var a394 = this.w, s320 = new m(this.ctx);
                this.xDivision = a394.globals.gridWidth / (a394.globals.dataPoints - ("on" === a394.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a394.config.stroke.width) ? a394.config.stroke.width[i476] : a394.config.stroke.width, this.yRatio.length > 1 && (this.yaxisIndex = i476), this.isReversed = a394.config.yaxis[this.yaxisIndex] && a394.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a394.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? a394.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), this.areaBottomY = this.zeroY, (this.zeroY > a394.globals.gridHeight || "end" === a394.config.plotOptions.area.fillTo) && (this.areaBottomY = a394.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s320.group({
                    class: "apexcharts-series",
                    seriesName: x.escapeString(a394.globals.seriesNames[i476])
                }), this.elPointsMain = s320.group({
                    class: "apexcharts-series-markers-wrap",
                    "data:realIndex": i476
                }), this.elDataLabelsWrap = s320.group({
                    class: "apexcharts-datalabels",
                    "data:realIndex": i476
                });
                var r275 = t783[e610].length === a394.globals.dataPoints;
                this.elSeries.attr({
                    "data:longestSeries": r275,
                    rel: e610 + 1,
                    "data:realIndex": i476
                }), this.appendPathFrom = !0;
            }
        },
        {
            key: "_calculatePathsFrom",
            value: function(t784) {
                var e611, i477, a395, s321, r276 = t784.series, o243 = t784.i, n209 = t784.realIndex, l177 = t784.prevX, h153 = t784.prevY, c133 = this.w, d117 = new m(this.ctx);
                if (null === r276[o243][0]) {
                    for(var g96 = 0; g96 < r276[o243].length; g96++)if (null !== r276[o243][g96]) {
                        l177 = this.xDivision * g96, h153 = this.zeroY - r276[o243][g96] / this.yRatio[this.yaxisIndex], e611 = d117.move(l177, h153), i477 = d117.move(l177, this.areaBottomY);
                        break;
                    }
                } else e611 = d117.move(l177, h153), i477 = d117.move(l177, this.areaBottomY) + d117.line(l177, h153);
                if (a395 = d117.move(-1, this.zeroY) + d117.line(-1, this.zeroY), s321 = d117.move(-1, this.zeroY) + d117.line(-1, this.zeroY), c133.globals.previousPaths.length > 0) {
                    var u78 = this.lineHelpers.checkPreviousPaths({
                        pathFromLine: a395,
                        pathFromArea: s321,
                        realIndex: n209
                    });
                    a395 = u78.pathFromLine, s321 = u78.pathFromArea;
                }
                return {
                    prevX: l177,
                    prevY: h153,
                    linePath: e611,
                    areaPath: i477,
                    pathFromLine: a395,
                    pathFromArea: s321
                };
            }
        },
        {
            key: "_handlePaths",
            value: function(t785) {
                var i478 = t785.type, a396 = t785.realIndex, s322 = t785.i, r277 = t785.paths, o244 = this.w, n210 = new m(this.ctx), l178 = new M(this.ctx);
                this.prevSeriesY.push(r277.yArrj), o244.globals.seriesXvalues[a396] = r277.xArrj, o244.globals.seriesYvalues[a396] = r277.yArrj;
                var h154 = o244.config.forecastDataPoints;
                if (h154.count > 0) {
                    var c134 = o244.globals.seriesXvalues[a396][o244.globals.seriesXvalues[a396].length - h154.count - 1], d118 = n210.drawRect(c134, 0, o244.globals.gridWidth, o244.globals.gridHeight, 0);
                    o244.globals.dom.elForecastMask.appendChild(d118.node);
                    var g97 = n210.drawRect(0, 0, c134, o244.globals.gridHeight, 0);
                    o244.globals.dom.elNonForecastMask.appendChild(g97.node);
                }
                this.pointsChart || o244.globals.delayedElements.push({
                    el: this.elPointsMain.node,
                    index: a396
                });
                var u79 = {
                    i: s322,
                    realIndex: a396,
                    animationDelay: s322,
                    initialSpeed: o244.config.chart.animations.speed,
                    dataChangeSpeed: o244.config.chart.animations.dynamicAnimation.speed,
                    className: "apexcharts-".concat(i478)
                };
                if ("area" === i478) for(var f65 = l178.fillPath({
                    seriesNumber: a396
                }), p60 = 0; p60 < r277.areaPaths.length; p60++){
                    var x39 = n210.renderPaths(e(e({}, u79), {}, {
                        pathFrom: r277.pathFromArea,
                        pathTo: r277.areaPaths[p60],
                        stroke: "none",
                        strokeWidth: 0,
                        strokeLineCap: null,
                        fill: f65
                    }));
                    this.elSeries.add(x39);
                }
                if (o244.config.stroke.show && !this.pointsChart) {
                    var b50 = null;
                    if ("line" === i478) b50 = l178.fillPath({
                        seriesNumber: a396,
                        i: s322
                    });
                    else if ("solid" === o244.config.stroke.fill.type) b50 = o244.globals.stroke.colors[a396];
                    else {
                        var v36 = o244.config.fill;
                        o244.config.fill = o244.config.stroke.fill, b50 = l178.fillPath({
                            seriesNumber: a396,
                            i: s322
                        }), o244.config.fill = v36;
                    }
                    for(var y38 = 0; y38 < r277.linePaths.length; y38++){
                        var w32 = e(e({}, u79), {}, {
                            pathFrom: r277.pathFromLine,
                            pathTo: r277.linePaths[y38],
                            stroke: b50,
                            strokeWidth: this.strokeWidth,
                            strokeLineCap: o244.config.stroke.lineCap,
                            fill: "none"
                        }), k30 = n210.renderPaths(w32);
                        if (this.elSeries.add(k30), h154.count > 0) {
                            var A24 = n210.renderPaths(w32);
                            A24.node.setAttribute("stroke-dasharray", h154.dashArray), h154.strokeWidth && A24.node.setAttribute("stroke-width", h154.strokeWidth), this.elSeries.add(A24), A24.attr("clip-path", "url(#forecastMask".concat(o244.globals.cuid, ")")), k30.attr("clip-path", "url(#nonForecastMask".concat(o244.globals.cuid, ")"));
                        }
                    }
                }
            }
        },
        {
            key: "_iterateOverDataPoints",
            value: function(t786) {
                for(var e612 = t786.series, i479 = t786.realIndex, a397 = t786.i, s323 = t786.x, r278 = t786.y, o245 = t786.pX, n211 = t786.pY, l179 = t786.pathsFrom, h155 = t786.linePaths, c135 = t786.areaPaths, d119 = t786.seriesIndex, g98 = t786.lineYPosition, u80 = t786.xArrj, f66 = t786.yArrj, p61 = this.w, b51 = new m(this.ctx), v37 = this.yRatio, y39 = l179.prevY, w33 = l179.linePath, k31 = l179.areaPath, A25 = l179.pathFromLine, S16 = l179.pathFromArea, C15 = x.isNumber(p61.globals.minYArr[i479]) ? p61.globals.minYArr[i479] : p61.globals.minY, L14 = p61.globals.dataPoints > 1 ? p61.globals.dataPoints - 1 : p61.globals.dataPoints, P13 = 0; P13 < L14; P13++){
                    var M8 = void 0 === e612[a397][P13 + 1] || null === e612[a397][P13 + 1];
                    if (p61.globals.isXNumeric) {
                        var T11 = p61.globals.seriesX[i479][P13 + 1];
                        void 0 === p61.globals.seriesX[i479][P13 + 1] && (T11 = p61.globals.seriesX[i479][L14 - 1]), s323 = (T11 - p61.globals.minX) / this.xRatio;
                    } else s323 += this.xDivision;
                    if (p61.config.chart.stacked) {
                        if (a397 > 0 && p61.globals.collapsedSeries.length < p61.config.series.length - 1) g98 = this.prevSeriesY[function(t787) {
                            for(var e613 = t787, i480 = 0; i480 < p61.globals.series.length; i480++)if (p61.globals.collapsedSeriesIndices.indexOf(t787) > -1) {
                                e613--;
                                break;
                            }
                            return e613 >= 0 ? e613 : 0;
                        }(a397 - 1)][P13 + 1];
                        else g98 = this.zeroY;
                    } else g98 = this.zeroY;
                    r278 = M8 ? g98 - C15 / v37[this.yaxisIndex] + 2 * (this.isReversed ? C15 / v37[this.yaxisIndex] : 0) : g98 - e612[a397][P13 + 1] / v37[this.yaxisIndex] + 2 * (this.isReversed ? e612[a397][P13 + 1] / v37[this.yaxisIndex] : 0), u80.push(s323), f66.push(r278);
                    var I8 = this.lineHelpers.calculatePoints({
                        series: e612,
                        x: s323,
                        y: r278,
                        realIndex: i479,
                        i: a397,
                        j: P13,
                        prevY: y39
                    }), z6 = this._createPaths({
                        series: e612,
                        i: a397,
                        realIndex: i479,
                        j: P13,
                        x: s323,
                        y: r278,
                        pX: o245,
                        pY: n211,
                        linePath: w33,
                        areaPath: k31,
                        linePaths: h155,
                        areaPaths: c135,
                        seriesIndex: d119
                    });
                    c135 = z6.areaPaths, h155 = z6.linePaths, o245 = z6.pX, n211 = z6.pY, k31 = z6.areaPath, w33 = z6.linePath, this.appendPathFrom && (A25 += b51.line(s323, this.zeroY), S16 += b51.line(s323, this.zeroY)), this.handleNullDataPoints(e612, I8, a397, P13, i479), this._handleMarkersAndLabels({
                        pointsPos: I8,
                        series: e612,
                        x: s323,
                        y: r278,
                        prevY: y39,
                        i: a397,
                        j: P13,
                        realIndex: i479
                    });
                }
                return {
                    yArrj: f66,
                    xArrj: u80,
                    pathFromArea: S16,
                    areaPaths: c135,
                    pathFromLine: A25,
                    linePaths: h155
                };
            }
        },
        {
            key: "_handleMarkersAndLabels",
            value: function(t788) {
                var e614 = t788.pointsPos;
                t788.series, t788.x, t788.y, t788.prevY;
                var i481 = t788.i, a398 = t788.j, s324 = t788.realIndex, r279 = this.w, o246 = new z(this.ctx);
                if (this.pointsChart) this.scatter.draw(this.elSeries, a398, {
                    realIndex: s324,
                    pointsPos: e614,
                    zRatio: this.zRatio,
                    elParent: this.elPointsMain
                });
                else {
                    r279.globals.series[i481].length > 1 && this.elPointsMain.node.classList.add("apexcharts-element-hidden");
                    var n212 = this.markers.plotChartMarkers(e614, s324, a398 + 1);
                    null !== n212 && this.elPointsMain.add(n212);
                }
                var l180 = o246.drawDataLabel(e614, s324, a398 + 1, null);
                null !== l180 && this.elDataLabelsWrap.add(l180);
            }
        },
        {
            key: "_createPaths",
            value: function(t789) {
                var e615 = t789.series, i482 = t789.i, a399 = t789.realIndex, s325 = t789.j, r280 = t789.x, o247 = t789.y, n213 = t789.pX, l181 = t789.pY, h156 = t789.linePath, c136 = t789.areaPath, d120 = t789.linePaths, g99 = t789.areaPaths, u81 = t789.seriesIndex, f67 = this.w, p62 = new m(this.ctx), x40 = f67.config.stroke.curve, b52 = this.areaBottomY;
                if (Array.isArray(f67.config.stroke.curve) && (x40 = Array.isArray(u81) ? f67.config.stroke.curve[u81[i482]] : f67.config.stroke.curve[i482]), "smooth" === x40) {
                    var v38 = .35 * (r280 - n213);
                    f67.globals.hasNullValues ? (null !== e615[i482][s325] && (null !== e615[i482][s325 + 1] ? (h156 = p62.move(n213, l181) + p62.curve(n213 + v38, l181, r280 - v38, o247, r280 + 1, o247), c136 = p62.move(n213 + 1, l181) + p62.curve(n213 + v38, l181, r280 - v38, o247, r280 + 1, o247) + p62.line(r280, b52) + p62.line(n213, b52) + "z") : (h156 = p62.move(n213, l181), c136 = p62.move(n213, l181) + "z")), d120.push(h156), g99.push(c136)) : (h156 += p62.curve(n213 + v38, l181, r280 - v38, o247, r280, o247), c136 += p62.curve(n213 + v38, l181, r280 - v38, o247, r280, o247)), n213 = r280, l181 = o247, s325 === e615[i482].length - 2 && (c136 = c136 + p62.curve(n213, l181, r280, o247, r280, b52) + p62.move(r280, o247) + "z", f67.globals.hasNullValues || (d120.push(h156), g99.push(c136)));
                } else {
                    if (null === e615[i482][s325 + 1]) {
                        h156 += p62.move(r280, o247);
                        var y40 = f67.globals.isXNumeric ? (f67.globals.seriesX[a399][s325] - f67.globals.minX) / this.xRatio : r280 - this.xDivision;
                        c136 = c136 + p62.line(y40, b52) + p62.move(r280, o247) + "z";
                    }
                    null === e615[i482][s325] && (h156 += p62.move(r280, o247), c136 += p62.move(r280, b52)), "stepline" === x40 ? (h156 = h156 + p62.line(r280, null, "H") + p62.line(null, o247, "V"), c136 = c136 + p62.line(r280, null, "H") + p62.line(null, o247, "V")) : "straight" === x40 && (h156 += p62.line(r280, o247), c136 += p62.line(r280, o247)), s325 === e615[i482].length - 2 && (c136 = c136 + p62.line(r280, b52) + p62.move(r280, o247) + "z", d120.push(h156), g99.push(c136));
                }
                return {
                    linePaths: d120,
                    areaPaths: g99,
                    pX: n213,
                    pY: l181,
                    linePath: h156,
                    areaPath: c136
                };
            }
        },
        {
            key: "handleNullDataPoints",
            value: function(t790, e616, i483, a400, s326) {
                var r281 = this.w;
                if (null === t790[i483][a400] && r281.config.markers.showNullDataPoints || 1 === t790[i483].length) {
                    var o248 = this.markers.plotChartMarkers(e616, s326, a400 + 1, this.strokeWidth - r281.config.markers.strokeWidth / 2, !0);
                    null !== o248 && this.elPointsMain.add(o248);
                }
            }
        }
    ]), t781;
}();
window.TreemapSquared = {}, window.TreemapSquared.generate = function() {
    function t791(e618, i485, a402, s328) {
        this.xoffset = e618, this.yoffset = i485, this.height = s328, this.width = a402, this.shortestEdge = function() {
            return Math.min(this.height, this.width);
        }, this.getCoordinates = function(t792) {
            var e619, i486 = [], a403 = this.xoffset, s329 = this.yoffset, o250 = r282(t792) / this.height, n214 = r282(t792) / this.width;
            if (this.width >= this.height) for(e619 = 0; e619 < t792.length; e619++)i486.push([
                a403,
                s329,
                a403 + o250,
                s329 + t792[e619] / o250
            ]), s329 += t792[e619] / o250;
            else for(e619 = 0; e619 < t792.length; e619++)i486.push([
                a403,
                s329,
                a403 + t792[e619] / n214,
                s329 + n214
            ]), a403 += t792[e619] / n214;
            return i486;
        }, this.cutArea = function(e620) {
            var i487;
            if (this.width >= this.height) {
                var a404 = e620 / this.height, s330 = this.width - a404;
                i487 = new t791(this.xoffset + a404, this.yoffset, s330, this.height);
            } else {
                var r283 = e620 / this.width, o251 = this.height - r283;
                i487 = new t791(this.xoffset, this.yoffset + r283, this.width, o251);
            }
            return i487;
        };
    }
    function e617(e621, a405, s331, o252, n215) {
        return o252 = void 0 === o252 ? 0 : o252, n215 = void 0 === n215 ? 0 : n215, function(t793) {
            var e622, i488, a406 = [];
            for(e622 = 0; e622 < t793.length; e622++)for(i488 = 0; i488 < t793[e622].length; i488++)a406.push(t793[e622][i488]);
            return a406;
        }(i484(function(t794, e623) {
            var i489, a407 = [], s332 = e623 / r282(t794);
            for(i489 = 0; i489 < t794.length; i489++)a407[i489] = t794[i489] * s332;
            return a407;
        }(e621, a405 * s331), [], new t791(o252, n215, a405, s331), []));
    }
    function i484(t795, e624, s333, o253) {
        var n216, l182, h157;
        if (0 !== t795.length) return n216 = s333.shortestEdge(), function(t796, e625, i490) {
            var s334;
            if (0 === t796.length) return !0;
            (s334 = t796.slice()).push(e625);
            var r284 = a401(t796, i490), o254 = a401(s334, i490);
            return r284 >= o254;
        }(e624, l182 = t795[0], n216) ? (e624.push(l182), i484(t795.slice(1), e624, s333, o253)) : (h157 = s333.cutArea(r282(e624), o253), o253.push(s333.getCoordinates(e624)), i484(t795, [], h157, o253)), o253;
        o253.push(s333.getCoordinates(e624));
    }
    function a401(t797, e626) {
        var i491 = Math.min.apply(Math, t797), a408 = Math.max.apply(Math, t797), s335 = r282(t797);
        return Math.max(Math.pow(e626, 2) * a408 / Math.pow(s335, 2), Math.pow(s335, 2) / (Math.pow(e626, 2) * i491));
    }
    function s327(t798) {
        return t798 && t798.constructor === Array;
    }
    function r282(t799) {
        var e627, i492 = 0;
        for(e627 = 0; e627 < t799.length; e627++)i492 += t799[e627];
        return i492;
    }
    function o249(t800) {
        var e628, i493 = 0;
        if (s327(t800[0])) for(e628 = 0; e628 < t800.length; e628++)i493 += o249(t800[e628]);
        else i493 = r282(t800);
        return i493;
    }
    return function t801(i494, a409, r285, n217, l183) {
        n217 = void 0 === n217 ? 0 : n217, l183 = void 0 === l183 ? 0 : l183;
        var h158, c137, d121 = [], g100 = [];
        if (s327(i494[0])) {
            for(c137 = 0; c137 < i494.length; c137++)d121[c137] = o249(i494[c137]);
            for(h158 = e617(d121, a409, r285, n217, l183), c137 = 0; c137 < i494.length; c137++)g100.push(t801(i494[c137], h158[c137][2] - h158[c137][0], h158[c137][3] - h158[c137][1], h158[c137][0], h158[c137][1]));
        } else g100 = e617(i494, a409, r285, n217, l183);
        return g100;
    };
}();
var It, zt, Xt = function() {
    function t802(e629, i) {
        a(this, t802), this.ctx = e629, this.w = e629.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new kt(e629), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = [];
    }
    return r(t802, [
        {
            key: "draw",
            value: function(t803) {
                var e630 = this, i495 = this.w, a410 = new m(this.ctx), s336 = new M(this.ctx), r286 = a410.group({
                    class: "apexcharts-treemap"
                });
                if (i495.globals.noData) return r286;
                var o255 = [];
                return t803.forEach(function(t804) {
                    var e631 = t804.map(function(t805) {
                        return Math.abs(t805);
                    });
                    o255.push(e631);
                }), this.negRange = this.helpers.checkColorRange(), i495.config.series.forEach(function(t806, i496) {
                    t806.data.forEach(function(t807) {
                        Array.isArray(e630.labels[i496]) || (e630.labels[i496] = []), e630.labels[i496].push(t807.x);
                    });
                }), window.TreemapSquared.generate(o255, i495.globals.gridWidth, i495.globals.gridHeight).forEach(function(o256, n218) {
                    var l184 = a410.group({
                        class: "apexcharts-series apexcharts-treemap-series",
                        seriesName: x.escapeString(i495.globals.seriesNames[n218]),
                        rel: n218 + 1,
                        "data:realIndex": n218
                    });
                    if (i495.config.chart.dropShadow.enabled) {
                        var h159 = i495.config.chart.dropShadow;
                        new v(e630.ctx).dropShadow(r286, h159, n218);
                    }
                    var c138 = a410.group({
                        class: "apexcharts-data-labels"
                    });
                    o256.forEach(function(r287, o257) {
                        var h160 = r287[0], c139 = r287[1], d122 = r287[2], g101 = r287[3], u82 = a410.drawRect(h160, c139, d122 - h160, g101 - c139, 0, "#fff", 1, e630.strokeWidth, i495.config.plotOptions.treemap.useFillColorAsStroke ? p63 : i495.globals.stroke.colors[n218]);
                        u82.attr({
                            cx: h160,
                            cy: c139,
                            index: n218,
                            i: n218,
                            j: o257,
                            width: d122 - h160,
                            height: g101 - c139
                        });
                        var f68 = e630.helpers.getShadeColor(i495.config.chart.type, n218, o257, e630.negRange), p63 = f68.color;
                        void 0 !== i495.config.series[n218].data[o257] && i495.config.series[n218].data[o257].fillColor && (p63 = i495.config.series[n218].data[o257].fillColor);
                        var x41 = s336.fillPath({
                            color: p63,
                            seriesNumber: n218,
                            dataPointIndex: o257
                        });
                        u82.node.classList.add("apexcharts-treemap-rect"), u82.attr({
                            fill: x41
                        }), e630.helpers.addListeners(u82);
                        var b53 = {
                            x: h160 + (d122 - h160) / 2,
                            y: c139 + (g101 - c139) / 2,
                            width: 0,
                            height: 0
                        }, v39 = {
                            x: h160,
                            y: c139,
                            width: d122 - h160,
                            height: g101 - c139
                        };
                        if (i495.config.chart.animations.enabled && !i495.globals.dataChanged) {
                            var m18 = 1;
                            i495.globals.resized || (m18 = i495.config.chart.animations.speed), e630.animateTreemap(u82, b53, v39, m18);
                        }
                        if (i495.globals.dataChanged) {
                            var y41 = 1;
                            e630.dynamicAnim.enabled && i495.globals.shouldAnimate && (y41 = e630.dynamicAnim.speed, i495.globals.previousPaths[n218] && i495.globals.previousPaths[n218][o257] && i495.globals.previousPaths[n218][o257].rect && (b53 = i495.globals.previousPaths[n218][o257].rect), e630.animateTreemap(u82, b53, v39, y41));
                        }
                        var w34 = e630.getFontSize(r287), k32 = i495.config.dataLabels.formatter(e630.labels[n218][o257], {
                            value: i495.globals.series[n218][o257],
                            seriesIndex: n218,
                            dataPointIndex: o257,
                            w: i495
                        }), A26 = e630.helpers.calculateDataLabels({
                            text: k32,
                            x: (h160 + d122) / 2,
                            y: (c139 + g101) / 2 + e630.strokeWidth / 2 + w34 / 3,
                            i: n218,
                            j: o257,
                            colorProps: f68,
                            fontSize: w34,
                            series: t803
                        });
                        i495.config.dataLabels.enabled && A26 && e630.rotateToFitLabel(A26, w34, k32, h160, c139, d122, g101), l184.add(u82), null !== A26 && l184.add(A26);
                    }), l184.add(c138), r286.add(l184);
                }), r286;
            }
        },
        {
            key: "getFontSize",
            value: function(t808) {
                var e632 = this.w;
                var i497, a411, s337, r288, o258 = function t809(e633) {
                    var i498, a412 = 0;
                    if (Array.isArray(e633[0])) for(i498 = 0; i498 < e633.length; i498++)a412 += t809(e633[i498]);
                    else for(i498 = 0; i498 < e633.length; i498++)a412 += e633[i498].length;
                    return a412;
                }(this.labels) / function t810(e634) {
                    var i499, a413 = 0;
                    if (Array.isArray(e634[0])) for(i499 = 0; i499 < e634.length; i499++)a413 += t810(e634[i499]);
                    else for(i499 = 0; i499 < e634.length; i499++)a413 += 1;
                    return a413;
                }(this.labels);
                return i497 = t808[2] - t808[0], a411 = t808[3] - t808[1], s337 = i497 * a411, r288 = Math.pow(s337, .5), Math.min(r288 / o258, parseInt(e632.config.dataLabels.style.fontSize, 10));
            }
        },
        {
            key: "rotateToFitLabel",
            value: function(t811, e635, i500, a414, s338, r289, o259) {
                var n219 = new m(this.ctx), l185 = n219.getTextRects(i500, e635);
                if (l185.width + this.w.config.stroke.width + 5 > r289 - a414 && l185.width <= o259 - s338) {
                    var h161 = n219.rotateAroundCenter(t811.node);
                    t811.node.setAttribute("transform", "rotate(-90 ".concat(h161.x, " ").concat(h161.y, ")"));
                }
            }
        },
        {
            key: "animateTreemap",
            value: function(t812, e636, i501, a415) {
                var s339 = new b(this.ctx);
                s339.animateRect(t812, {
                    x: e636.x,
                    y: e636.y,
                    width: e636.width,
                    height: e636.height
                }, {
                    x: i501.x,
                    y: i501.y,
                    width: i501.width,
                    height: i501.height
                }, a415, function() {
                    s339.animationCompleted(t812);
                });
            }
        }
    ]), t802;
}(), Et = function() {
    function t813(e637) {
        a(this, t813), this.ctx = e637, this.w = e637.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;
    }
    return r(t813, [
        {
            key: "calculateTimeScaleTicks",
            value: function(t814, i502) {
                var a416 = this, s340 = this.w;
                if (s340.globals.allSeriesCollapsed) return s340.globals.labels = [], s340.globals.timescaleLabels = [], [];
                var r290 = new R(this.ctx), o260 = (i502 - t814) / 864e5;
                this.determineInterval(o260), s340.globals.disableZoomIn = !1, s340.globals.disableZoomOut = !1, o260 < .00011574074074074075 ? s340.globals.disableZoomIn = !0 : o260 > 5e4 && (s340.globals.disableZoomOut = !0);
                var n220 = r290.getTimeUnitsfromTimestamp(t814, i502, this.utc), l186 = s340.globals.gridWidth / o260, h162 = l186 / 24, c140 = h162 / 60, d123 = c140 / 60, g102 = Math.floor(24 * o260), u83 = Math.floor(1440 * o260), f69 = Math.floor(86400 * o260), p64 = Math.floor(o260), x42 = Math.floor(o260 / 30), b54 = Math.floor(o260 / 365), v40 = {
                    minMillisecond: n220.minMillisecond,
                    minSecond: n220.minSecond,
                    minMinute: n220.minMinute,
                    minHour: n220.minHour,
                    minDate: n220.minDate,
                    minMonth: n220.minMonth,
                    minYear: n220.minYear
                }, m19 = {
                    firstVal: v40,
                    currentMillisecond: v40.minMillisecond,
                    currentSecond: v40.minSecond,
                    currentMinute: v40.minMinute,
                    currentHour: v40.minHour,
                    currentMonthDate: v40.minDate,
                    currentDate: v40.minDate,
                    currentMonth: v40.minMonth,
                    currentYear: v40.minYear,
                    daysWidthOnXAxis: l186,
                    hoursWidthOnXAxis: h162,
                    minutesWidthOnXAxis: c140,
                    secondsWidthOnXAxis: d123,
                    numberOfSeconds: f69,
                    numberOfMinutes: u83,
                    numberOfHours: g102,
                    numberOfDays: p64,
                    numberOfMonths: x42,
                    numberOfYears: b54
                };
                switch(this.tickInterval){
                    case "years":
                        this.generateYearScale(m19);
                        break;
                    case "months":
                    case "half_year":
                        this.generateMonthScale(m19);
                        break;
                    case "months_days":
                    case "months_fortnight":
                    case "days":
                    case "week_days":
                        this.generateDayScale(m19);
                        break;
                    case "hours":
                        this.generateHourScale(m19);
                        break;
                    case "minutes_fives":
                    case "minutes":
                        this.generateMinuteScale(m19);
                        break;
                    case "seconds_tens":
                    case "seconds_fives":
                    case "seconds":
                        this.generateSecondScale(m19);
                }
                var y42 = this.timeScaleArray.map(function(t815) {
                    var i503 = {
                        position: t815.position,
                        unit: t815.unit,
                        year: t815.year,
                        day: t815.day ? t815.day : 1,
                        hour: t815.hour ? t815.hour : 0,
                        month: t815.month + 1
                    };
                    return "month" === t815.unit ? e(e({}, i503), {}, {
                        day: 1,
                        value: t815.value + 1
                    }) : "day" === t815.unit || "hour" === t815.unit ? e(e({}, i503), {}, {
                        value: t815.value
                    }) : "minute" === t815.unit ? e(e({}, i503), {}, {
                        value: t815.value,
                        minute: t815.value
                    }) : "second" === t815.unit ? e(e({}, i503), {}, {
                        value: t815.value,
                        minute: t815.minute,
                        second: t815.second
                    }) : t815;
                });
                return y42.filter(function(t816) {
                    var e638 = 1, i504 = Math.ceil(s340.globals.gridWidth / 120), r291 = t816.value;
                    void 0 !== s340.config.xaxis.tickAmount && (i504 = s340.config.xaxis.tickAmount), y42.length > i504 && (e638 = Math.floor(y42.length / i504));
                    var o261 = !1, n221 = !1;
                    switch(a416.tickInterval){
                        case "years":
                            "year" === t816.unit && (o261 = !0);
                            break;
                        case "half_year":
                            e638 = 7, "year" === t816.unit && (o261 = !0);
                            break;
                        case "months":
                            e638 = 1, "year" === t816.unit && (o261 = !0);
                            break;
                        case "months_fortnight":
                            e638 = 15, "year" !== t816.unit && "month" !== t816.unit || (o261 = !0), 30 === r291 && (n221 = !0);
                            break;
                        case "months_days":
                            e638 = 10, "month" === t816.unit && (o261 = !0), 30 === r291 && (n221 = !0);
                            break;
                        case "week_days":
                            e638 = 8, "month" === t816.unit && (o261 = !0);
                            break;
                        case "days":
                            e638 = 1, "month" === t816.unit && (o261 = !0);
                            break;
                        case "hours":
                            "day" === t816.unit && (o261 = !0);
                            break;
                        case "minutes_fives":
                            r291 % 5 != 0 && (n221 = !0);
                            break;
                        case "seconds_tens":
                            r291 % 10 != 0 && (n221 = !0);
                            break;
                        case "seconds_fives":
                            r291 % 5 != 0 && (n221 = !0);
                    }
                    if ("hours" === a416.tickInterval || "minutes_fives" === a416.tickInterval || "seconds_tens" === a416.tickInterval || "seconds_fives" === a416.tickInterval) {
                        if (!n221) return !0;
                    } else if ((r291 % e638 == 0 || o261) && !n221) return !0;
                });
            }
        },
        {
            key: "recalcDimensionsBasedOnFormat",
            value: function(t817, e) {
                var i505 = this.w, a417 = this.formatDates(t817), s341 = this.removeOverlappingTS(a417);
                i505.globals.timescaleLabels = s341.slice(), new lt(this.ctx).plotCoords();
            }
        },
        {
            key: "determineInterval",
            value: function(t818) {
                var e639 = 24 * t818, i506 = 60 * e639;
                switch(!0){
                    case t818 / 365 > 5:
                        this.tickInterval = "years";
                        break;
                    case t818 > 800:
                        this.tickInterval = "half_year";
                        break;
                    case t818 > 180:
                        this.tickInterval = "months";
                        break;
                    case t818 > 90:
                        this.tickInterval = "months_fortnight";
                        break;
                    case t818 > 60:
                        this.tickInterval = "months_days";
                        break;
                    case t818 > 30:
                        this.tickInterval = "week_days";
                        break;
                    case t818 > 2:
                        this.tickInterval = "days";
                        break;
                    case e639 > 2.4:
                        this.tickInterval = "hours";
                        break;
                    case i506 > 15:
                        this.tickInterval = "minutes_fives";
                        break;
                    case i506 > 5:
                        this.tickInterval = "minutes";
                        break;
                    case i506 > 1:
                        this.tickInterval = "seconds_tens";
                        break;
                    case 60 * i506 > 20:
                        this.tickInterval = "seconds_fives";
                        break;
                    default:
                        this.tickInterval = "seconds";
                }
            }
        },
        {
            key: "generateYearScale",
            value: function(t819) {
                var e640 = t819.firstVal, i507 = t819.currentMonth, a418 = t819.currentYear, s342 = t819.daysWidthOnXAxis, r292 = t819.numberOfYears, o262 = e640.minYear, n222 = 0, l187 = new R(this.ctx), h163 = "year";
                if (e640.minDate > 1 || e640.minMonth > 0) {
                    var c141 = l187.determineRemainingDaysOfYear(e640.minYear, e640.minMonth, e640.minDate);
                    n222 = (l187.determineDaysOfYear(e640.minYear) - c141 + 1) * s342, o262 = e640.minYear + 1, this.timeScaleArray.push({
                        position: n222,
                        value: o262,
                        unit: h163,
                        year: o262,
                        month: x.monthMod(i507 + 1)
                    });
                } else 1 === e640.minDate && 0 === e640.minMonth && this.timeScaleArray.push({
                    position: n222,
                    value: o262,
                    unit: h163,
                    year: a418,
                    month: x.monthMod(i507 + 1)
                });
                for(var d124 = o262, g103 = n222, u84 = 0; u84 < r292; u84++)d124++, g103 = l187.determineDaysOfYear(d124 - 1) * s342 + g103, this.timeScaleArray.push({
                    position: g103,
                    value: d124,
                    unit: h163,
                    year: d124,
                    month: 1
                });
            }
        },
        {
            key: "generateMonthScale",
            value: function(t820) {
                var e641 = t820.firstVal, i508 = t820.currentMonthDate, a419 = t820.currentMonth, s343 = t820.currentYear, r293 = t820.daysWidthOnXAxis, o263 = t820.numberOfMonths, n223 = a419, l188 = 0, h164 = new R(this.ctx), c142 = "month", d125 = 0;
                if (e641.minDate > 1) {
                    l188 = (h164.determineDaysOfMonths(a419 + 1, e641.minYear) - i508 + 1) * r293, n223 = x.monthMod(a419 + 1);
                    var g104 = s343 + d125, u85 = x.monthMod(n223), f70 = n223;
                    0 === n223 && (c142 = "year", f70 = g104, u85 = 1, g104 += d125 += 1), this.timeScaleArray.push({
                        position: l188,
                        value: f70,
                        unit: c142,
                        year: g104,
                        month: u85
                    });
                } else this.timeScaleArray.push({
                    position: l188,
                    value: n223,
                    unit: c142,
                    year: s343,
                    month: x.monthMod(a419)
                });
                for(var p65 = n223 + 1, b55 = l188, v41 = 0, m20 = 1; v41 < o263; v41++, m20++){
                    0 === (p65 = x.monthMod(p65)) ? (c142 = "year", d125 += 1) : c142 = "month";
                    var y43 = this._getYear(s343, p65, d125);
                    b55 = h164.determineDaysOfMonths(p65, y43) * r293 + b55;
                    var w35 = 0 === p65 ? y43 : p65;
                    this.timeScaleArray.push({
                        position: b55,
                        value: w35,
                        unit: c142,
                        year: y43,
                        month: 0 === p65 ? 1 : p65
                    }), p65++;
                }
            }
        },
        {
            key: "generateDayScale",
            value: function(t821) {
                var e642 = t821.firstVal, i509 = t821.currentMonth, a420 = t821.currentYear, s344 = t821.hoursWidthOnXAxis, r294 = t821.numberOfDays, o264 = new R(this.ctx), n224 = "day", l189 = e642.minDate + 1, h165 = l189, c143 = function(t822, e643, i510) {
                    return t822 > o264.determineDaysOfMonths(e643 + 1, i510) ? (h165 = 1, n224 = "month", g105 = e643 += 1, e643) : e643;
                }, d126 = (24 - e642.minHour) * s344, g105 = l189, u86 = c143(h165, i509, a420);
                0 === e642.minHour && 1 === e642.minDate ? (d126 = 0, g105 = x.monthMod(e642.minMonth), n224 = "month", h165 = e642.minDate, r294++) : 1 !== e642.minDate && 0 === e642.minHour && 0 === e642.minMinute && (d126 = 0, l189 = e642.minDate, g105 = l189, u86 = c143(h165 = l189, i509, a420)), this.timeScaleArray.push({
                    position: d126,
                    value: g105,
                    unit: n224,
                    year: this._getYear(a420, u86, 0),
                    month: x.monthMod(u86),
                    day: h165
                });
                for(var f71 = d126, p66 = 0; p66 < r294; p66++){
                    n224 = "day", u86 = c143(h165 += 1, u86, this._getYear(a420, u86, 0));
                    var b56 = this._getYear(a420, u86, 0);
                    f71 = 24 * s344 + f71;
                    var v42 = 1 === h165 ? x.monthMod(u86) : h165;
                    this.timeScaleArray.push({
                        position: f71,
                        value: v42,
                        unit: n224,
                        year: b56,
                        month: x.monthMod(u86),
                        day: v42
                    });
                }
            }
        },
        {
            key: "generateHourScale",
            value: function(t823) {
                var e644 = t823.firstVal, i511 = t823.currentDate, a421 = t823.currentMonth, s345 = t823.currentYear, r295 = t823.minutesWidthOnXAxis, o265 = t823.numberOfHours, n225 = new R(this.ctx), l190 = "hour", h166 = function(t824, e645) {
                    return t824 > n225.determineDaysOfMonths(e645 + 1, s345) && (p67 = 1, e645 += 1), {
                        month: e645,
                        date: p67
                    };
                }, c144 = function(t825, e646) {
                    return t825 > n225.determineDaysOfMonths(e646 + 1, s345) ? e646 += 1 : e646;
                }, d127 = 60 - (e644.minMinute + e644.minSecond / 60), g106 = d127 * r295, u87 = e644.minHour + 1, f72 = u87 + 1;
                60 === d127 && (g106 = 0, f72 = (u87 = e644.minHour) + 1);
                var p67 = i511, b57 = c144(p67, a421);
                this.timeScaleArray.push({
                    position: g106,
                    value: u87,
                    unit: l190,
                    day: p67,
                    hour: f72,
                    year: s345,
                    month: x.monthMod(b57)
                });
                for(var v43 = g106, m21 = 0; m21 < o265; m21++){
                    if (l190 = "hour", f72 >= 24) f72 = 0, l190 = "day", b57 = h166(p67 += 1, b57).month, b57 = c144(p67, b57);
                    var y44 = this._getYear(s345, b57, 0);
                    v43 = 0 === f72 && 0 === m21 ? d127 * r295 : 60 * r295 + v43;
                    var w36 = 0 === f72 ? p67 : f72;
                    this.timeScaleArray.push({
                        position: v43,
                        value: w36,
                        unit: l190,
                        hour: f72,
                        day: p67,
                        year: y44,
                        month: x.monthMod(b57)
                    }), f72++;
                }
            }
        },
        {
            key: "generateMinuteScale",
            value: function(t826) {
                for(var e647 = t826.currentMillisecond, i512 = t826.currentSecond, a422 = t826.currentMinute, s346 = t826.currentHour, r296 = t826.currentDate, o266 = t826.currentMonth, n226 = t826.currentYear, l191 = t826.minutesWidthOnXAxis, h167 = t826.secondsWidthOnXAxis, c145 = t826.numberOfMinutes, d128 = a422 + 1, g107 = r296, u88 = o266, f73 = n226, p68 = s346, b58 = (60 - i512 - e647 / 1e3) * h167, v44 = 0; v44 < c145; v44++)d128 >= 60 && (d128 = 0, 24 === (p68 += 1) && (p68 = 0)), this.timeScaleArray.push({
                    position: b58,
                    value: d128,
                    unit: "minute",
                    hour: p68,
                    minute: d128,
                    day: g107,
                    year: this._getYear(f73, u88, 0),
                    month: x.monthMod(u88)
                }), b58 += l191, d128++;
            }
        },
        {
            key: "generateSecondScale",
            value: function(t827) {
                for(var e648 = t827.currentMillisecond, i513 = t827.currentSecond, a423 = t827.currentMinute, s347 = t827.currentHour, r297 = t827.currentDate, o267 = t827.currentMonth, n227 = t827.currentYear, l192 = t827.secondsWidthOnXAxis, h168 = t827.numberOfSeconds, c146 = i513 + 1, d129 = a423, g108 = r297, u89 = o267, f74 = n227, p69 = s347, b59 = (1e3 - e648) / 1e3 * l192, v45 = 0; v45 < h168; v45++)c146 >= 60 && (c146 = 0, ++d129 >= 60 && (d129 = 0, 24 === ++p69 && (p69 = 0))), this.timeScaleArray.push({
                    position: b59,
                    value: c146,
                    unit: "second",
                    hour: p69,
                    minute: d129,
                    second: c146,
                    day: g108,
                    year: this._getYear(f74, u89, 0),
                    month: x.monthMod(u89)
                }), b59 += l192, c146++;
            }
        },
        {
            key: "createRawDateString",
            value: function(t828, e649) {
                var i514 = t828.year;
                return 0 === t828.month && (t828.month = 1), i514 += "-" + ("0" + t828.month.toString()).slice(-2), "day" === t828.unit ? i514 += "day" === t828.unit ? "-" + ("0" + e649).slice(-2) : "-01" : i514 += "-" + ("0" + (t828.day ? t828.day : "1")).slice(-2), "hour" === t828.unit ? i514 += "hour" === t828.unit ? "T" + ("0" + e649).slice(-2) : "T00" : i514 += "T" + ("0" + (t828.hour ? t828.hour : "0")).slice(-2), "minute" === t828.unit ? i514 += ":" + ("0" + e649).slice(-2) : i514 += ":" + (t828.minute ? ("0" + t828.minute).slice(-2) : "00"), "second" === t828.unit ? i514 += ":" + ("0" + e649).slice(-2) : i514 += ":00", this.utc && (i514 += ".000Z"), i514;
            }
        },
        {
            key: "formatDates",
            value: function(t829) {
                var e650 = this, i515 = this.w;
                return t829.map(function(t830) {
                    var a424 = t830.value.toString(), s348 = new R(e650.ctx), r298 = e650.createRawDateString(t830, a424), o268 = s348.getDate(s348.parseDate(r298));
                    if (e650.utc || (o268 = s348.getDate(s348.parseDateWithTimezone(r298))), void 0 === i515.config.xaxis.labels.format) {
                        var n228 = "dd MMM", l193 = i515.config.xaxis.labels.datetimeFormatter;
                        "year" === t830.unit && (n228 = l193.year), "month" === t830.unit && (n228 = l193.month), "day" === t830.unit && (n228 = l193.day), "hour" === t830.unit && (n228 = l193.hour), "minute" === t830.unit && (n228 = l193.minute), "second" === t830.unit && (n228 = l193.second), a424 = s348.formatDate(o268, n228);
                    } else a424 = s348.formatDate(o268, i515.config.xaxis.labels.format);
                    return {
                        dateString: r298,
                        position: t830.position,
                        value: a424,
                        unit: t830.unit,
                        year: t830.year,
                        month: t830.month
                    };
                });
            }
        },
        {
            key: "removeOverlappingTS",
            value: function(t831) {
                var e651, i516 = this, a425 = new m(this.ctx), s349 = !1;
                t831.length > 0 && t831[0].value && t831.every(function(e652) {
                    return e652.value.length === t831[0].value.length;
                }) && (s349 = !0, e651 = a425.getTextRects(t831[0].value).width);
                var r299 = 0, o269 = t831.map(function(o270, n229) {
                    if (n229 > 0 && i516.w.config.xaxis.labels.hideOverlappingLabels) {
                        var l194 = s349 ? e651 : a425.getTextRects(t831[r299].value).width, h169 = t831[r299].position;
                        return o270.position > h169 + l194 + 10 ? (r299 = n229, o270) : null;
                    }
                    return o270;
                });
                return o269 = o269.filter(function(t832) {
                    return null !== t832;
                });
            }
        },
        {
            key: "_getYear",
            value: function(t833, e653, i517) {
                return t833 + Math.floor(e653 / 12) + i517;
            }
        }
    ]), t813;
}(), Yt = function() {
    function t834(e654, i518) {
        a(this, t834), this.ctx = i518, this.w = i518.w, this.el = e654;
    }
    return r(t834, [
        {
            key: "setupElements",
            value: function() {
                var t835 = this.w.globals, e655 = this.w.config, i519 = e655.chart.type;
                t835.axisCharts = [
                    "line",
                    "area",
                    "bar",
                    "rangeBar",
                    "candlestick",
                    "boxPlot",
                    "scatter",
                    "bubble",
                    "radar",
                    "heatmap",
                    "treemap"
                ].indexOf(i519) > -1, t835.xyCharts = [
                    "line",
                    "area",
                    "bar",
                    "rangeBar",
                    "candlestick",
                    "boxPlot",
                    "scatter",
                    "bubble"
                ].indexOf(i519) > -1, t835.isBarHorizontal = ("bar" === e655.chart.type || "rangeBar" === e655.chart.type || "boxPlot" === e655.chart.type) && e655.plotOptions.bar.horizontal, t835.chartClass = ".apexcharts" + t835.chartID, t835.dom.baseEl = this.el, t835.dom.elWrap = document.createElement("div"), m.setAttrs(t835.dom.elWrap, {
                    id: t835.chartClass.substring(1),
                    class: "apexcharts-canvas " + t835.chartClass.substring(1)
                }), this.el.appendChild(t835.dom.elWrap), t835.dom.Paper = new window.SVG.Doc(t835.dom.elWrap), t835.dom.Paper.attr({
                    class: "apexcharts-svg",
                    "xmlns:data": "ApexChartsNS",
                    transform: "translate(".concat(e655.chart.offsetX, ", ").concat(e655.chart.offsetY, ")")
                }), t835.dom.Paper.node.style.background = e655.chart.background, this.setSVGDimensions(), t835.dom.elGraphical = t835.dom.Paper.group().attr({
                    class: "apexcharts-inner apexcharts-graphical"
                }), t835.dom.elAnnotations = t835.dom.Paper.group().attr({
                    class: "apexcharts-annotations"
                }), t835.dom.elDefs = t835.dom.Paper.defs(), t835.dom.elLegendWrap = document.createElement("div"), t835.dom.elLegendWrap.classList.add("apexcharts-legend"), t835.dom.elWrap.appendChild(t835.dom.elLegendWrap), t835.dom.Paper.add(t835.dom.elGraphical), t835.dom.elGraphical.add(t835.dom.elDefs);
            }
        },
        {
            key: "plotChartType",
            value: function(t836, e656) {
                var i520 = this.w, a426 = i520.config, s350 = i520.globals, r300 = {
                    series: [],
                    i: []
                }, o271 = {
                    series: [],
                    i: []
                }, n230 = {
                    series: [],
                    i: []
                }, l195 = {
                    series: [],
                    i: []
                }, h170 = {
                    series: [],
                    i: []
                }, c147 = {
                    series: [],
                    i: []
                }, d130 = {
                    series: [],
                    i: []
                };
                s350.series.map(function(e657, g110) {
                    var u91 = 0;
                    void 0 !== t836[g110].type ? ("column" === t836[g110].type || "bar" === t836[g110].type ? (s350.series.length > 1 && a426.plotOptions.bar.horizontal && console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"), h170.series.push(e657), h170.i.push(g110), u91++, i520.globals.columnSeries = h170.series) : "area" === t836[g110].type ? (o271.series.push(e657), o271.i.push(g110), u91++) : "line" === t836[g110].type ? (r300.series.push(e657), r300.i.push(g110), u91++) : "scatter" === t836[g110].type ? (n230.series.push(e657), n230.i.push(g110)) : "bubble" === t836[g110].type ? (l195.series.push(e657), l195.i.push(g110), u91++) : "candlestick" === t836[g110].type ? (c147.series.push(e657), c147.i.push(g110), u91++) : "boxPlot" === t836[g110].type ? (d130.series.push(e657), d130.i.push(g110), u91++) : console.warn("You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble"), u91 > 1 && (s350.comboCharts = !0)) : (r300.series.push(e657), r300.i.push(g110));
                });
                var g109 = new Tt(this.ctx, e656), u90 = new wt(this.ctx, e656);
                this.ctx.pie = new Ct(this.ctx);
                var f75 = new Pt(this.ctx);
                this.ctx.rangeBar = new H(this.ctx, e656);
                var p70 = new Lt(this.ctx), x43 = [];
                if (s350.comboCharts) {
                    if (o271.series.length > 0 && x43.push(g109.draw(o271.series, "area", o271.i)), h170.series.length > 0) {
                        if (i520.config.chart.stacked) {
                            var b60 = new yt(this.ctx, e656);
                            x43.push(b60.draw(h170.series, h170.i));
                        } else this.ctx.bar = new F(this.ctx, e656), x43.push(this.ctx.bar.draw(h170.series, h170.i));
                    }
                    if (r300.series.length > 0 && x43.push(g109.draw(r300.series, "line", r300.i)), c147.series.length > 0 && x43.push(u90.draw(c147.series, c147.i)), d130.series.length > 0 && x43.push(u90.draw(d130.series, d130.i)), n230.series.length > 0) {
                        var v46 = new Tt(this.ctx, e656, !0);
                        x43.push(v46.draw(n230.series, "scatter", n230.i));
                    }
                    if (l195.series.length > 0) {
                        var m22 = new Tt(this.ctx, e656, !0);
                        x43.push(m22.draw(l195.series, "bubble", l195.i));
                    }
                } else switch(a426.chart.type){
                    case "line":
                        x43 = g109.draw(s350.series, "line");
                        break;
                    case "area":
                        x43 = g109.draw(s350.series, "area");
                        break;
                    case "bar":
                        if (a426.chart.stacked) x43 = new yt(this.ctx, e656).draw(s350.series);
                        else this.ctx.bar = new F(this.ctx, e656), x43 = this.ctx.bar.draw(s350.series);
                        break;
                    case "candlestick":
                        x43 = new wt(this.ctx, e656).draw(s350.series);
                        break;
                    case "boxPlot":
                        x43 = new wt(this.ctx, e656).draw(s350.series);
                        break;
                    case "rangeBar":
                        x43 = this.ctx.rangeBar.draw(s350.series);
                        break;
                    case "heatmap":
                        x43 = new At(this.ctx, e656).draw(s350.series);
                        break;
                    case "treemap":
                        x43 = new Xt(this.ctx, e656).draw(s350.series);
                        break;
                    case "pie":
                    case "donut":
                    case "polarArea":
                        x43 = this.ctx.pie.draw(s350.series);
                        break;
                    case "radialBar":
                        x43 = f75.draw(s350.series);
                        break;
                    case "radar":
                        x43 = p70.draw(s350.series);
                        break;
                    default:
                        x43 = g109.draw(s350.series);
                }
                return x43;
            }
        },
        {
            key: "setSVGDimensions",
            value: function() {
                var t837 = this.w.globals, e658 = this.w.config;
                t837.svgWidth = e658.chart.width, t837.svgHeight = e658.chart.height;
                var i521 = x.getDimensions(this.el), a427 = e658.chart.width.toString().split(/[0-9]+/g).pop();
                "%" === a427 ? x.isNumber(i521[0]) && (0 === i521[0].width && (i521 = x.getDimensions(this.el.parentNode)), t837.svgWidth = i521[0] * parseInt(e658.chart.width, 10) / 100) : "px" !== a427 && "" !== a427 || (t837.svgWidth = parseInt(e658.chart.width, 10));
                var s351 = e658.chart.height.toString().split(/[0-9]+/g).pop();
                if ("auto" !== t837.svgHeight && "" !== t837.svgHeight) {
                    if ("%" === s351) {
                        var r301 = x.getDimensions(this.el.parentNode);
                        t837.svgHeight = r301[1] * parseInt(e658.chart.height, 10) / 100;
                    } else t837.svgHeight = parseInt(e658.chart.height, 10);
                } else t837.axisCharts ? t837.svgHeight = t837.svgWidth / 1.61 : t837.svgHeight = t837.svgWidth / 1.2;
                if (t837.svgWidth < 0 && (t837.svgWidth = 0), t837.svgHeight < 0 && (t837.svgHeight = 0), m.setAttrs(t837.dom.Paper.node, {
                    width: t837.svgWidth,
                    height: t837.svgHeight
                }), "%" !== s351) {
                    var o272 = e658.chart.sparkline.enabled ? 0 : t837.axisCharts ? e658.chart.parentHeightOffset : 0;
                    t837.dom.Paper.node.parentNode.parentNode.style.minHeight = t837.svgHeight + o272 + "px";
                }
                t837.dom.elWrap.style.width = t837.svgWidth + "px", t837.dom.elWrap.style.height = t837.svgHeight + "px";
            }
        },
        {
            key: "shiftGraphPosition",
            value: function() {
                var t838 = this.w.globals, e659 = t838.translateY, i522 = {
                    transform: "translate(" + t838.translateX + ", " + e659 + ")"
                };
                m.setAttrs(t838.dom.elGraphical.node, i522);
            }
        },
        {
            key: "resizeNonAxisCharts",
            value: function() {
                var t839 = this.w, e660 = t839.globals, i523 = 0, a428 = t839.config.chart.sparkline.enabled ? 1 : 15;
                a428 += t839.config.grid.padding.bottom, "top" !== t839.config.legend.position && "bottom" !== t839.config.legend.position || !t839.config.legend.show || t839.config.legend.floating || (i523 = new ct(this.ctx).legendHelpers.getLegendBBox().clwh + 10);
                var s352 = t839.globals.dom.baseEl.querySelector(".apexcharts-radialbar, .apexcharts-pie"), r302 = 2.05 * t839.globals.radialSize;
                if (s352 && !t839.config.chart.sparkline.enabled && 0 !== t839.config.plotOptions.radialBar.startAngle) {
                    var o273 = x.getBoundingClientRect(s352);
                    r302 = o273.bottom;
                    var n231 = o273.bottom - o273.top;
                    r302 = Math.max(2.05 * t839.globals.radialSize, n231);
                }
                var l196 = r302 + e660.translateY + i523 + a428;
                e660.dom.elLegendForeign && e660.dom.elLegendForeign.setAttribute("height", l196), t839.config.chart.height && String(t839.config.chart.height).indexOf("%") > 0 || (e660.dom.elWrap.style.height = l196 + "px", m.setAttrs(e660.dom.Paper.node, {
                    height: l196
                }), e660.dom.Paper.node.parentNode.parentNode.style.minHeight = l196 + "px");
            }
        },
        {
            key: "coreCalculations",
            value: function() {
                new Z(this.ctx).init();
            }
        },
        {
            key: "resetGlobals",
            value: function() {
                var t840 = this, e661 = function() {
                    return t840.w.config.series.map(function(t) {
                        return [];
                    });
                }, i524 = new O, a429 = this.w.globals;
                i524.initGlobalVars(a429), a429.seriesXvalues = e661(), a429.seriesYvalues = e661();
            }
        },
        {
            key: "isMultipleY",
            value: function() {
                if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1) return this.w.globals.isMultipleYAxis = !0, !0;
            }
        },
        {
            key: "xySettings",
            value: function() {
                var t841 = null, e662 = this.w;
                if (e662.globals.axisCharts) {
                    if ("back" === e662.config.xaxis.crosshairs.position) new tt(this.ctx).drawXCrosshairs();
                    if ("back" === e662.config.yaxis[0].crosshairs.position) new tt(this.ctx).drawYCrosshairs();
                    if ("datetime" === e662.config.xaxis.type && void 0 === e662.config.xaxis.labels.formatter) {
                        this.ctx.timeScale = new Et(this.ctx);
                        var i525 = [];
                        isFinite(e662.globals.minX) && isFinite(e662.globals.maxX) && !e662.globals.isBarHorizontal ? i525 = this.ctx.timeScale.calculateTimeScaleTicks(e662.globals.minX, e662.globals.maxX) : e662.globals.isBarHorizontal && (i525 = this.ctx.timeScale.calculateTimeScaleTicks(e662.globals.minY, e662.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(i525);
                    }
                    t841 = new y(this.ctx).getCalculatedRatios();
                }
                return t841;
            }
        },
        {
            key: "updateSourceChart",
            value: function(t842) {
                this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({
                    chart: {
                        selection: {
                            xaxis: {
                                min: t842.w.globals.minX,
                                max: t842.w.globals.maxX
                            }
                        }
                    }
                }, !1, !1);
            }
        },
        {
            key: "setupBrushHandler",
            value: function() {
                var t843 = this, i526 = this.w;
                if (i526.config.chart.brush.enabled && "function" != typeof i526.config.chart.events.selection) {
                    var a430 = i526.config.chart.brush.targets || [
                        i526.config.chart.brush.target
                    ];
                    a430.forEach(function(e663) {
                        var i527 = ApexCharts.getChartByID(e663);
                        i527.w.globals.brushSource = t843.ctx, "function" != typeof i527.w.config.chart.events.zoomed && (i527.w.config.chart.events.zoomed = function() {
                            t843.updateSourceChart(i527);
                        }), "function" != typeof i527.w.config.chart.events.scrolled && (i527.w.config.chart.events.scrolled = function() {
                            t843.updateSourceChart(i527);
                        });
                    }), i526.config.chart.events.selection = function(t844, s353) {
                        a430.forEach(function(t845) {
                            var a431 = ApexCharts.getChartByID(t845), r303 = x.clone(i526.config.yaxis);
                            if (i526.config.chart.brush.autoScaleYaxis && 1 === a431.w.globals.series.length) {
                                var o274 = new q(a431);
                                r303 = o274.autoScaleY(a431, r303, s353);
                            }
                            var n232 = a431.w.config.yaxis.reduce(function(t846, i, s354) {
                                return [].concat(u(t846), [
                                    e(e({}, a431.w.config.yaxis[s354]), {}, {
                                        min: r303[0].min,
                                        max: r303[0].max
                                    })
                                ]);
                            }, []);
                            a431.ctx.updateHelpers._updateOptions({
                                xaxis: {
                                    min: s353.xaxis.min,
                                    max: s353.xaxis.max
                                },
                                yaxis: n232
                            }, !1, !1, !1, !1);
                        });
                    };
                }
            }
        }
    ]), t834;
}(), Ft = function() {
    function t847(e664) {
        a(this, t847), this.ctx = e664, this.w = e664.w;
    }
    return r(t847, [
        {
            key: "_updateOptions",
            value: function(t848) {
                var e665 = this, a432 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], s355 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], r304 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], o275 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
                return new Promise(function(n233) {
                    var l197 = [
                        e665.ctx
                    ];
                    r304 && (l197 = e665.ctx.getSyncedCharts()), e665.ctx.w.globals.isExecCalled && (l197 = [
                        e665.ctx
                    ], e665.ctx.w.globals.isExecCalled = !1), l197.forEach(function(r305, h171) {
                        var c148 = r305.w;
                        if (c148.globals.shouldAnimate = s355, a432 || (c148.globals.resized = !0, c148.globals.dataChanged = !0, s355 && r305.series.getPreviousPaths()), t848 && "object" === i(t848) && (r305.config = new N(t848), t848 = y.extendArrayProps(r305.config, t848, c148), r305.w.globals.chartID !== e665.ctx.w.globals.chartID && delete t848.series, c148.config = x.extend(c148.config, t848), o275 && (c148.globals.lastXAxis = t848.xaxis ? x.clone(t848.xaxis) : [], c148.globals.lastYAxis = t848.yaxis ? x.clone(t848.yaxis) : [], c148.globals.initialConfig = x.extend({}, c148.config), c148.globals.initialSeries = x.clone(c148.config.series), t848.series))) {
                            for(var d131 = 0; d131 < c148.globals.collapsedSeriesIndices.length; d131++){
                                var g111 = c148.config.series[c148.globals.collapsedSeriesIndices[d131]];
                                c148.globals.collapsedSeries[d131].data = c148.globals.axisCharts ? g111.data.slice() : g111;
                            }
                            for(var u92 = 0; u92 < c148.globals.ancillaryCollapsedSeriesIndices.length; u92++){
                                var f76 = c148.config.series[c148.globals.ancillaryCollapsedSeriesIndices[u92]];
                                c148.globals.ancillaryCollapsedSeries[u92].data = c148.globals.axisCharts ? f76.data.slice() : f76;
                            }
                            r305.series.emptyCollapsedSeries(c148.config.series);
                        }
                        return r305.update(t848).then(function() {
                            h171 === l197.length - 1 && n233(r305);
                        });
                    });
                });
            }
        },
        {
            key: "_updateSeries",
            value: function(t849, e666) {
                var i528 = this, a433 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                return new Promise(function(s356) {
                    var r306, o276 = i528.w;
                    return o276.globals.shouldAnimate = e666, o276.globals.dataChanged = !0, e666 && i528.ctx.series.getPreviousPaths(), o276.globals.axisCharts ? (0 === (r306 = t849.map(function(t850, e667) {
                        return i528._extendSeries(t850, e667);
                    })).length && (r306 = [
                        {
                            data: []
                        }
                    ]), o276.config.series = r306) : o276.config.series = t849.slice(), a433 && (o276.globals.initialSeries = x.clone(o276.config.series)), i528.ctx.update().then(function() {
                        s356(i528.ctx);
                    });
                });
            }
        },
        {
            key: "_extendSeries",
            value: function(t851, i529) {
                var a434 = this.w, s357 = a434.config.series[i529];
                return e(e({}, a434.config.series[i529]), {}, {
                    name: t851.name ? t851.name : s357 && s357.name,
                    color: t851.color ? t851.color : s357 && s357.color,
                    type: t851.type ? t851.type : s357 && s357.type,
                    data: t851.data ? t851.data : s357 && s357.data
                });
            }
        },
        {
            key: "toggleDataPointSelection",
            value: function(t852, e668) {
                var i530 = this.w, a435 = null, s358 = ".apexcharts-series[data\\:realIndex='".concat(t852, "']");
                return i530.globals.axisCharts ? a435 = i530.globals.dom.Paper.select("".concat(s358, " path[j='").concat(e668, "'], ").concat(s358, " circle[j='").concat(e668, "'], ").concat(s358, " rect[j='").concat(e668, "']")).members[0] : void 0 === e668 && (a435 = i530.globals.dom.Paper.select("".concat(s358, " path[j='").concat(t852, "']")).members[0], "pie" !== i530.config.chart.type && "polarArea" !== i530.config.chart.type && "donut" !== i530.config.chart.type || this.ctx.pie.pieClicked(t852)), a435 ? (new m(this.ctx).pathMouseDown(a435, null), a435.node ? a435.node : null) : (console.warn("toggleDataPointSelection: Element not found"), null);
            }
        },
        {
            key: "forceXAxisUpdate",
            value: function(t853) {
                var e669 = this.w;
                if ([
                    "min",
                    "max"
                ].forEach(function(i532) {
                    void 0 !== t853.xaxis[i532] && (e669.config.xaxis[i532] = t853.xaxis[i532], e669.globals.lastXAxis[i532] = t853.xaxis[i532]);
                }), t853.xaxis.categories && t853.xaxis.categories.length && (e669.config.xaxis.categories = t853.xaxis.categories), e669.config.xaxis.convertedCatToNumeric) {
                    var i531 = new D(t853);
                    t853 = i531.convertCatToNumericXaxis(t853, this.ctx);
                }
                return t853;
            }
        },
        {
            key: "forceYAxisUpdate",
            value: function(t854) {
                return t854.chart && t854.chart.stacked && "100%" === t854.chart.stackType && (Array.isArray(t854.yaxis) ? t854.yaxis.forEach(function(e, i533) {
                    t854.yaxis[i533].min = 0, t854.yaxis[i533].max = 100;
                }) : (t854.yaxis.min = 0, t854.yaxis.max = 100)), t854;
            }
        },
        {
            key: "revertDefaultAxisMinMax",
            value: function(t855) {
                var e670 = this, i534 = this.w, a436 = i534.globals.lastXAxis, s359 = i534.globals.lastYAxis;
                t855 && t855.xaxis && (a436 = t855.xaxis), t855 && t855.yaxis && (s359 = t855.yaxis), i534.config.xaxis.min = a436.min, i534.config.xaxis.max = a436.max;
                var r307 = function(t856) {
                    void 0 !== s359[t856] && (i534.config.yaxis[t856].min = s359[t856].min, i534.config.yaxis[t856].max = s359[t856].max);
                };
                i534.config.yaxis.map(function(t857, a437) {
                    i534.globals.zoomed || void 0 !== s359[a437] ? r307(a437) : void 0 !== e670.ctx.opts.yaxis[a437] && (t857.min = e670.ctx.opts.yaxis[a437].min, t857.max = e670.ctx.opts.yaxis[a437].max);
                });
            }
        }
    ]), t847;
}();
It = "undefined" != typeof window ? window : void 0, zt = function(t858, e671) {
    var a438 = (void 0 !== this ? this : t858).SVG = function(t859) {
        if (a438.supported) return t859 = new a438.Doc(t859), a438.parser.draw || a438.prepare(), t859;
    };
    if (a438.ns = "http://www.w3.org/2000/svg", a438.xmlns = "http://www.w3.org/2000/xmlns/", a438.xlink = "http://www.w3.org/1999/xlink", a438.svgjs = "http://svgjs.dev", a438.supported = !0, !a438.supported) return !1;
    a438.did = 1e3, a438.eid = function(t860) {
        return "Svgjs" + d132(t860) + a438.did++;
    }, a438.create = function(t861) {
        var i535 = e671.createElementNS(this.ns, t861);
        return i535.setAttribute("id", this.eid(t861)), i535;
    }, a438.extend = function() {
        var t862, e672;
        e672 = (t862 = [].slice.call(arguments)).pop();
        for(var i536 = t862.length - 1; i536 >= 0; i536--)if (t862[i536]) for(var s361 in e672)t862[i536].prototype[s361] = e672[s361];
        a438.Set && a438.Set.inherit && a438.Set.inherit();
    }, a438.invent = function(t863) {
        var e673 = "function" == typeof t863.create ? t863.create : function() {
            this.constructor.call(this, a438.create(t863.create));
        };
        return t863.inherit && (e673.prototype = new t863.inherit), t863.extend && a438.extend(e673, t863.extend), t863.construct && a438.extend(t863.parent || a438.Container, t863.construct), e673;
    }, a438.adopt = function(e674) {
        var i537;
        return e674 ? e674.instance ? e674.instance : ((i537 = "svg" == e674.nodeName ? e674.parentNode instanceof t858.SVGElement ? new a438.Nested : new a438.Doc : "linearGradient" == e674.nodeName ? new a438.Gradient("linear") : "radialGradient" == e674.nodeName ? new a438.Gradient("radial") : a438[d132(e674.nodeName)] ? new a438[d132(e674.nodeName)] : new a438.Element(e674)).type = e674.nodeName, i537.node = e674, e674.instance = i537, i537 instanceof a438.Doc && i537.namespace().defs(), i537.setData(JSON.parse(e674.getAttribute("svgjs:data")) || {}), i537) : null;
    }, a438.prepare = function() {
        var t864 = e671.getElementsByTagName("body")[0], i538 = (t864 ? new a438.Doc(t864) : a438.adopt(e671.documentElement).nested()).size(2, 0);
        a438.parser = {
            body: t864 || e671.documentElement,
            draw: i538.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node,
            poly: i538.polyline().node,
            path: i538.path().node,
            native: a438.create("svg")
        };
    }, a438.parser = {
        native: a438.create("svg")
    }, e671.addEventListener("DOMContentLoaded", function() {
        a438.parser.draw || a438.prepare();
    }, !1), a438.regex = {
        numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,
        hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
        rgb: /rgb\((\d+),(\d+),(\d+)\)/,
        reference: /#([a-z0-9\-_]+)/i,
        transforms: /\)\s*,?\s*/,
        whitespace: /\s/g,
        isHex: /^#[a-f0-9]{3,6}$/i,
        isRgb: /^rgb\(/,
        isCss: /[^:]+:[^;]+;?/,
        isBlank: /^(\s+)?$/,
        isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        isPercent: /^-?[\d\.]+%$/,
        isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,
        delimiter: /[\s,]+/,
        hyphen: /([^e])\-/gi,
        pathLetters: /[MLHVCSQTAZ]/gi,
        isPathLetter: /[MLHVCSQTAZ]/i,
        numbersWithDots: /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,
        dots: /\./g
    }, a438.utils = {
        map: function(t865, e675) {
            for(var i539 = t865.length, a439 = [], s362 = 0; s362 < i539; s362++)a439.push(e675(t865[s362]));
            return a439;
        },
        filter: function(t866, e676) {
            for(var i540 = t866.length, a440 = [], s363 = 0; s363 < i540; s363++)e676(t866[s363]) && a440.push(t866[s363]);
            return a440;
        },
        filterSVGElements: function(e677) {
            return this.filter(e677, function(e678) {
                return e678 instanceof t858.SVGElement;
            });
        }
    }, a438.defaults = {
        attrs: {
            "fill-opacity": 1,
            "stroke-opacity": 1,
            "stroke-width": 0,
            "stroke-linejoin": "miter",
            "stroke-linecap": "butt",
            fill: "#000000",
            stroke: "#000000",
            opacity: 1,
            x: 0,
            y: 0,
            cx: 0,
            cy: 0,
            width: 0,
            height: 0,
            r: 0,
            rx: 0,
            ry: 0,
            offset: 0,
            "stop-opacity": 1,
            "stop-color": "#000000",
            "font-size": 16,
            "font-family": "Helvetica, Arial, sans-serif",
            "text-anchor": "start"
        }
    }, a438.Color = function(t867) {
        var e679, s364;
        this.r = 0, this.g = 0, this.b = 0, t867 && ("string" == typeof t867 ? a438.regex.isRgb.test(t867) ? (e679 = a438.regex.rgb.exec(t867.replace(a438.regex.whitespace, "")), this.r = parseInt(e679[1]), this.g = parseInt(e679[2]), this.b = parseInt(e679[3])) : a438.regex.isHex.test(t867) && (e679 = a438.regex.hex.exec(4 == (s364 = t867).length ? [
            "#",
            s364.substring(1, 2),
            s364.substring(1, 2),
            s364.substring(2, 3),
            s364.substring(2, 3),
            s364.substring(3, 4),
            s364.substring(3, 4)
        ].join("") : s364), this.r = parseInt(e679[1], 16), this.g = parseInt(e679[2], 16), this.b = parseInt(e679[3], 16)) : "object" === i(t867) && (this.r = t867.r, this.g = t867.g, this.b = t867.b));
    }, a438.extend(a438.Color, {
        toString: function() {
            return this.toHex();
        },
        toHex: function() {
            return "#" + g112(this.r) + g112(this.g) + g112(this.b);
        },
        toRgb: function() {
            return "rgb(" + [
                this.r,
                this.g,
                this.b
            ].join() + ")";
        },
        brightness: function() {
            return this.r / 255 * .3 + this.g / 255 * .59 + this.b / 255 * .11;
        },
        morph: function(t868) {
            return this.destination = new a438.Color(t868), this;
        },
        at: function(t869) {
            return this.destination ? (t869 = t869 < 0 ? 0 : t869 > 1 ? 1 : t869, new a438.Color({
                r: ~~(this.r + (this.destination.r - this.r) * t869),
                g: ~~(this.g + (this.destination.g - this.g) * t869),
                b: ~~(this.b + (this.destination.b - this.b) * t869)
            })) : this;
        }
    }), a438.Color.test = function(t870) {
        return t870 += "", a438.regex.isHex.test(t870) || a438.regex.isRgb.test(t870);
    }, a438.Color.isRgb = function(t871) {
        return t871 && "number" == typeof t871.r && "number" == typeof t871.g && "number" == typeof t871.b;
    }, a438.Color.isColor = function(t872) {
        return a438.Color.isRgb(t872) || a438.Color.test(t872);
    }, a438.Array = function(t873, e680) {
        0 == (t873 = (t873 || []).valueOf()).length && e680 && (t873 = e680.valueOf()), this.value = this.parse(t873);
    }, a438.extend(a438.Array, {
        toString: function() {
            return this.value.join(" ");
        },
        valueOf: function() {
            return this.value;
        },
        parse: function(t874) {
            return t874 = t874.valueOf(), Array.isArray(t874) ? t874 : this.split(t874);
        }
    }), a438.PointArray = function(t875, e681) {
        a438.Array.call(this, t875, e681 || [
            [
                0,
                0
            ]
        ]);
    }, a438.PointArray.prototype = new a438.Array, a438.PointArray.prototype.constructor = a438.PointArray;
    for(var s360 = {
        M: function(t876, e682, i541) {
            return e682.x = i541.x = t876[0], e682.y = i541.y = t876[1], [
                "M",
                e682.x,
                e682.y
            ];
        },
        L: function(t877, e683) {
            return e683.x = t877[0], e683.y = t877[1], [
                "L",
                t877[0],
                t877[1]
            ];
        },
        H: function(t878, e684) {
            return e684.x = t878[0], [
                "H",
                t878[0]
            ];
        },
        V: function(t879, e685) {
            return e685.y = t879[0], [
                "V",
                t879[0]
            ];
        },
        C: function(t880, e686) {
            return e686.x = t880[4], e686.y = t880[5], [
                "C",
                t880[0],
                t880[1],
                t880[2],
                t880[3],
                t880[4],
                t880[5]
            ];
        },
        Q: function(t881, e687) {
            return e687.x = t881[2], e687.y = t881[3], [
                "Q",
                t881[0],
                t881[1],
                t881[2],
                t881[3]
            ];
        },
        Z: function(t, e688, i542) {
            return e688.x = i542.x, e688.y = i542.y, [
                "Z"
            ];
        }
    }, r308 = "mlhvqtcsaz".split(""), o277 = 0, n234 = r308.length; o277 < n234; ++o277)s360[r308[o277]] = function(t882) {
        return function(e689, i543, a441) {
            if ("H" == t882) e689[0] = e689[0] + i543.x;
            else if ("V" == t882) e689[0] = e689[0] + i543.y;
            else if ("A" == t882) e689[5] = e689[5] + i543.x, e689[6] = e689[6] + i543.y;
            else for(var r309 = 0, o278 = e689.length; r309 < o278; ++r309)e689[r309] = e689[r309] + (r309 % 2 ? i543.y : i543.x);
            if (s360 && "function" == typeof s360[t882]) return s360[t882](e689, i543, a441);
        };
    }(r308[o277].toUpperCase());
    a438.PathArray = function(t883, e690) {
        a438.Array.call(this, t883, e690 || [
            [
                "M",
                0,
                0
            ]
        ]);
    }, a438.PathArray.prototype = new a438.Array, a438.PathArray.prototype.constructor = a438.PathArray, a438.extend(a438.PathArray, {
        toString: function() {
            return function(t884) {
                for(var e691 = 0, i544 = t884.length, a442 = ""; e691 < i544; e691++)a442 += t884[e691][0], null != t884[e691][1] && (a442 += t884[e691][1], null != t884[e691][2] && (a442 += " ", a442 += t884[e691][2], null != t884[e691][3] && (a442 += " ", a442 += t884[e691][3], a442 += " ", a442 += t884[e691][4], null != t884[e691][5] && (a442 += " ", a442 += t884[e691][5], a442 += " ", a442 += t884[e691][6], null != t884[e691][7] && (a442 += " ", a442 += t884[e691][7])))));
                return a442 + " ";
            }(this.value);
        },
        move: function(t, e) {
            var i545 = this.bbox();
            return i545.x, i545.y, this;
        },
        at: function(t885) {
            if (!this.destination) return this;
            for(var e692 = this.value, i546 = this.destination.value, s365 = [], r310 = new a438.PathArray, o279 = 0, n235 = e692.length; o279 < n235; o279++){
                s365[o279] = [
                    e692[o279][0]
                ];
                for(var l199 = 1, h173 = e692[o279].length; l199 < h173; l199++)s365[o279][l199] = e692[o279][l199] + (i546[o279][l199] - e692[o279][l199]) * t885;
                "A" === s365[o279][0] && (s365[o279][4] = +(0 != s365[o279][4]), s365[o279][5] = +(0 != s365[o279][5]));
            }
            return r310.value = s365, r310;
        },
        parse: function(t886) {
            if (t886 instanceof a438.PathArray) return t886.valueOf();
            var e693, i547 = {
                M: 2,
                L: 2,
                H: 1,
                V: 1,
                C: 6,
                S: 4,
                Q: 4,
                T: 2,
                A: 7,
                Z: 0
            };
            t886 = "string" == typeof t886 ? t886.replace(a438.regex.numbersWithDots, h172).replace(a438.regex.pathLetters, " $& ").replace(a438.regex.hyphen, "$1 -").trim().split(a438.regex.delimiter) : t886.reduce(function(t887, e694) {
                return [].concat.call(t887, e694);
            }, []);
            var r311 = [], o280 = new a438.Point, n236 = new a438.Point, l200 = 0, c150 = t886.length;
            do a438.regex.isPathLetter.test(t886[l200]) ? (e693 = t886[l200], ++l200) : "M" == e693 ? e693 = "L" : "m" == e693 && (e693 = "l"), r311.push(s360[e693].call(null, t886.slice(l200, l200 += i547[e693.toUpperCase()]).map(parseFloat), o280, n236));
            while (c150 > l200);
            return r311;
        },
        bbox: function() {
            return a438.parser.draw || a438.prepare(), a438.parser.path.setAttribute("d", this.toString()), a438.parser.path.getBBox();
        }
    }), a438.Number = a438.invent({
        create: function(t888, e695) {
            this.value = 0, this.unit = e695 || "", "number" == typeof t888 ? this.value = isNaN(t888) ? 0 : isFinite(t888) ? t888 : t888 < 0 ? -340000000000000000000000000000000000000 : 34e37 : "string" == typeof t888 ? (e695 = t888.match(a438.regex.numberAndUnit)) && (this.value = parseFloat(e695[1]), "%" == e695[5] ? this.value /= 100 : "s" == e695[5] && (this.value *= 1e3), this.unit = e695[5]) : t888 instanceof a438.Number && (this.value = t888.valueOf(), this.unit = t888.unit);
        },
        extend: {
            toString: function() {
                return ("%" == this.unit ? ~~(1e8 * this.value) / 1e6 : "s" == this.unit ? this.value / 1e3 : this.value) + this.unit;
            },
            toJSON: function() {
                return this.toString();
            },
            valueOf: function() {
                return this.value;
            },
            plus: function(t889) {
                return t889 = new a438.Number(t889), new a438.Number(this + t889, this.unit || t889.unit);
            },
            minus: function(t890) {
                return t890 = new a438.Number(t890), new a438.Number(this - t890, this.unit || t890.unit);
            },
            times: function(t891) {
                return t891 = new a438.Number(t891), new a438.Number(this * t891, this.unit || t891.unit);
            },
            divide: function(t892) {
                return t892 = new a438.Number(t892), new a438.Number(this / t892, this.unit || t892.unit);
            },
            to: function(t893) {
                var e696 = new a438.Number(this);
                return "string" == typeof t893 && (e696.unit = t893), e696;
            },
            morph: function(t894) {
                return this.destination = new a438.Number(t894), t894.relative && (this.destination.value += this.value), this;
            },
            at: function(t895) {
                return this.destination ? new a438.Number(this.destination).minus(this).times(t895).plus(this) : this;
            }
        }
    }), a438.Element = a438.invent({
        create: function(t896) {
            this._stroke = a438.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t896) && (this.type = t896.nodeName, this.node.instance = this, this._stroke = t896.getAttribute("stroke") || this._stroke);
        },
        extend: {
            x: function(t897) {
                return this.attr("x", t897);
            },
            y: function(t898) {
                return this.attr("y", t898);
            },
            cx: function(t899) {
                return null == t899 ? this.x() + this.width() / 2 : this.x(t899 - this.width() / 2);
            },
            cy: function(t900) {
                return null == t900 ? this.y() + this.height() / 2 : this.y(t900 - this.height() / 2);
            },
            move: function(t901, e697) {
                return this.x(t901).y(e697);
            },
            center: function(t902, e698) {
                return this.cx(t902).cy(e698);
            },
            width: function(t903) {
                return this.attr("width", t903);
            },
            height: function(t904) {
                return this.attr("height", t904);
            },
            size: function(t905, e699) {
                var i548 = u93(this, t905, e699);
                return this.width(new a438.Number(i548.width)).height(new a438.Number(i548.height));
            },
            clone: function(t906) {
                this.writeDataToDom();
                var e700 = x44(this.node.cloneNode(!0));
                return t906 ? t906.add(e700) : this.after(e700), e700;
            },
            remove: function() {
                return this.parent() && this.parent().removeElement(this), this;
            },
            replace: function(t907) {
                return this.after(t907).remove(), t907;
            },
            addTo: function(t908) {
                return t908.put(this);
            },
            putIn: function(t909) {
                return t909.add(this);
            },
            id: function(t910) {
                return this.attr("id", t910);
            },
            show: function() {
                return this.style("display", "");
            },
            hide: function() {
                return this.style("display", "none");
            },
            visible: function() {
                return "none" != this.style("display");
            },
            toString: function() {
                return this.attr("id");
            },
            classes: function() {
                var t911 = this.attr("class");
                return null == t911 ? [] : t911.trim().split(a438.regex.delimiter);
            },
            hasClass: function(t912) {
                return -1 != this.classes().indexOf(t912);
            },
            addClass: function(t913) {
                if (!this.hasClass(t913)) {
                    var e701 = this.classes();
                    e701.push(t913), this.attr("class", e701.join(" "));
                }
                return this;
            },
            removeClass: function(t914) {
                return this.hasClass(t914) && this.attr("class", this.classes().filter(function(e702) {
                    return e702 != t914;
                }).join(" ")), this;
            },
            toggleClass: function(t915) {
                return this.hasClass(t915) ? this.removeClass(t915) : this.addClass(t915);
            },
            reference: function(t916) {
                return a438.get(this.attr(t916));
            },
            parent: function(e703) {
                var i549 = this;
                if (!i549.node.parentNode) return null;
                if (i549 = a438.adopt(i549.node.parentNode), !e703) return i549;
                for(; i549 && i549.node instanceof t858.SVGElement;){
                    if ("string" == typeof e703 ? i549.matches(e703) : i549 instanceof e703) return i549;
                    if (!i549.node.parentNode || "#document" == i549.node.parentNode.nodeName) return null;
                    i549 = a438.adopt(i549.node.parentNode);
                }
            },
            doc: function() {
                return this instanceof a438.Doc ? this : this.parent(a438.Doc);
            },
            parents: function(t917) {
                var e704 = [], i550 = this;
                do {
                    if (!(i550 = i550.parent(t917)) || !i550.node) break;
                    e704.push(i550);
                }while (i550.parent);
                return e704;
            },
            matches: function(t918) {
                return function(t919, e705) {
                    return (t919.matches || t919.matchesSelector || t919.msMatchesSelector || t919.mozMatchesSelector || t919.webkitMatchesSelector || t919.oMatchesSelector).call(t919, e705);
                }(this.node, t918);
            },
            native: function() {
                return this.node;
            },
            svg: function(t920) {
                var i551 = e671.createElement("svg");
                if (!(t920 && this instanceof a438.Parent)) return i551.appendChild(t920 = e671.createElement("svg")), this.writeDataToDom(), t920.appendChild(this.node.cloneNode(!0)), i551.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "");
                i551.innerHTML = "<svg>" + t920.replace(/\n/, "").replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") + "</svg>";
                for(var s366 = 0, r312 = i551.firstChild.childNodes.length; s366 < r312; s366++)this.node.appendChild(i551.firstChild.firstChild);
                return this;
            },
            writeDataToDom: function() {
                return (this.each || this.lines) && (this.each ? this : this.lines()).each(function() {
                    this.writeDataToDom();
                }), this.node.removeAttribute("svgjs:data"), Object.keys(this.dom).length && this.node.setAttribute("svgjs:data", JSON.stringify(this.dom)), this;
            },
            setData: function(t921) {
                return this.dom = t921, this;
            },
            is: function(t922) {
                return function(t923, e706) {
                    return t923 instanceof e706;
                }(this, t922);
            }
        }
    }), a438.easing = {
        "-": function(t924) {
            return t924;
        },
        "<>": function(t925) {
            return -Math.cos(t925 * Math.PI) / 2 + .5;
        },
        ">": function(t926) {
            return Math.sin(t926 * Math.PI / 2);
        },
        "<": function(t927) {
            return 1 - Math.cos(t927 * Math.PI / 2);
        }
    }, a438.morph = function(t928) {
        return function(e707, i552) {
            return new a438.MorphObj(e707, i552).at(t928);
        };
    }, a438.Situation = a438.invent({
        create: function(t929) {
            this.init = !1, this.reversed = !1, this.reversing = !1, this.duration = new a438.Number(t929.duration).valueOf(), this.delay = new a438.Number(t929.delay).valueOf(), this.start = +new Date + this.delay, this.finish = this.start + this.duration, this.ease = t929.ease, this.loop = 0, this.loops = !1, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {};
        }
    }), a438.FX = a438.invent({
        create: function(t930) {
            this._target = t930, this.situations = [], this.active = !1, this.situation = null, this.paused = !1, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;
        },
        extend: {
            animate: function(t931, e708, s367) {
                "object" === i(t931) && (e708 = t931.ease, s367 = t931.delay, t931 = t931.duration);
                var r313 = new a438.Situation({
                    duration: t931 || 1e3,
                    delay: s367 || 0,
                    ease: a438.easing[e708 || "-"] || e708
                });
                return this.queue(r313), this;
            },
            target: function(t932) {
                return t932 && t932 instanceof a438.Element ? (this._target = t932, this) : this._target;
            },
            timeToAbsPos: function(t933) {
                return (t933 - this.situation.start) / (this.situation.duration / this._speed);
            },
            absPosToTime: function(t934) {
                return this.situation.duration / this._speed * t934 + this.situation.start;
            },
            startAnimFrame: function() {
                this.stopAnimFrame(), this.animationFrame = t858.requestAnimationFrame((function() {
                    this.step();
                }).bind(this));
            },
            stopAnimFrame: function() {
                t858.cancelAnimationFrame(this.animationFrame);
            },
            start: function() {
                return !this.active && this.situation && (this.active = !0, this.startCurrent()), this;
            },
            startCurrent: function() {
                return this.situation.start = +new Date + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();
            },
            queue: function(t935) {
                return ("function" == typeof t935 || t935 instanceof a438.Situation) && this.situations.push(t935), this.situation || (this.situation = this.situations.shift()), this;
            },
            dequeue: function() {
                return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof a438.Situation ? this.start() : this.situation.call(this)), this;
            },
            initAnimations: function() {
                var t936, e709 = this.situation;
                if (e709.init) return this;
                for(var i553 in e709.animations){
                    t936 = this.target()[i553](), Array.isArray(t936) || (t936 = [
                        t936
                    ]), Array.isArray(e709.animations[i553]) || (e709.animations[i553] = [
                        e709.animations[i553]
                    ]);
                    for(var s368 = t936.length; s368--;)e709.animations[i553][s368] instanceof a438.Number && (t936[s368] = new a438.Number(t936[s368])), e709.animations[i553][s368] = t936[s368].morph(e709.animations[i553][s368]);
                }
                for(var i553 in e709.attrs)e709.attrs[i553] = new a438.MorphObj(this.target().attr(i553), e709.attrs[i553]);
                for(var i553 in e709.styles)e709.styles[i553] = new a438.MorphObj(this.target().style(i553), e709.styles[i553]);
                return e709.initialTransformation = this.target().matrixify(), e709.init = !0, this;
            },
            clearQueue: function() {
                return this.situations = [], this;
            },
            clearCurrent: function() {
                return this.situation = null, this;
            },
            stop: function(t937, e710) {
                var i554 = this.active;
                return this.active = !1, e710 && this.clearQueue(), t937 && this.situation && (!i554 && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();
            },
            after: function(t938) {
                var e711 = this.last();
                return this.target().on("finished.fx", function i555(a443) {
                    a443.detail.situation == e711 && (t938.call(this, e711), this.off("finished.fx", i555));
                }), this._callStart();
            },
            during: function(t939) {
                var e712 = this.last(), i556 = function(i557) {
                    i557.detail.situation == e712 && t939.call(this, i557.detail.pos, a438.morph(i557.detail.pos), i557.detail.eased, e712);
                };
                return this.target().off("during.fx", i556).on("during.fx", i556), this.after(function() {
                    this.off("during.fx", i556);
                }), this._callStart();
            },
            afterAll: function(t940) {
                var e713 = function e714(i) {
                    t940.call(this), this.off("allfinished.fx", e714);
                };
                return this.target().off("allfinished.fx", e713).on("allfinished.fx", e713), this._callStart();
            },
            last: function() {
                return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;
            },
            add: function(t941, e715, i558) {
                return this.last()[i558 || "animations"][t941] = e715, this._callStart();
            },
            step: function(t942) {
                var e716, i559, a444;
                t942 || (this.absPos = this.timeToAbsPos(+new Date)), !1 !== this.situation.loops ? (e716 = Math.max(this.absPos, 0), i559 = Math.floor(e716), !0 === this.situation.loops || i559 < this.situation.loops ? (this.pos = e716 - i559, a444 = this.situation.loop, this.situation.loop = i559) : (this.absPos = this.situation.loops, this.pos = 1, a444 = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - a444) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos), this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);
                var s369 = this.situation.ease(this.pos);
                for(var r314 in this.situation.once)r314 > this.lastPos && r314 <= s369 && (this.situation.once[r314].call(this.target(), this.pos, s369), delete this.situation.once[r314]);
                return this.active && this.target().fire("during", {
                    pos: this.pos,
                    eased: s369,
                    fx: this,
                    situation: this.situation
                }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire("finished", {
                    fx: this,
                    situation: this.situation
                }), this.situations.length || (this.target().fire("allfinished"), this.situations.length || (this.target().off(".fx"), this.active = !1)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = s369, this) : this;
            },
            eachAt: function() {
                var t943, e717 = this, i560 = this.target(), s370 = this.situation;
                for(var r315 in s370.animations)t943 = [].concat(s370.animations[r315]).map(function(t944) {
                    return "string" != typeof t944 && t944.at ? t944.at(s370.ease(e717.pos), e717.pos) : t944;
                }), i560[r315].apply(i560, t943);
                for(var r315 in s370.attrs)t943 = [
                    r315
                ].concat(s370.attrs[r315]).map(function(t945) {
                    return "string" != typeof t945 && t945.at ? t945.at(s370.ease(e717.pos), e717.pos) : t945;
                }), i560.attr.apply(i560, t943);
                for(var r315 in s370.styles)t943 = [
                    r315
                ].concat(s370.styles[r315]).map(function(t946) {
                    return "string" != typeof t946 && t946.at ? t946.at(s370.ease(e717.pos), e717.pos) : t946;
                }), i560.style.apply(i560, t943);
                if (s370.transforms.length) {
                    t943 = s370.initialTransformation, r315 = 0;
                    for(var o281 = s370.transforms.length; r315 < o281; r315++){
                        var n237 = s370.transforms[r315];
                        n237 instanceof a438.Matrix ? t943 = n237.relative ? t943.multiply((new a438.Matrix).morph(n237).at(s370.ease(this.pos))) : t943.morph(n237).at(s370.ease(this.pos)) : (n237.relative || n237.undo(t943.extract()), t943 = t943.multiply(n237.at(s370.ease(this.pos))));
                    }
                    i560.matrix(t943);
                }
                return this;
            },
            once: function(t947, e718, i561) {
                var a445 = this.last();
                return i561 || (t947 = a445.ease(t947)), a445.once[t947] = e718, this;
            },
            _callStart: function() {
                return setTimeout((function() {
                    this.start();
                }).bind(this), 0), this;
            }
        },
        parent: a438.Element,
        construct: {
            animate: function(t948, e719, i562) {
                return (this.fx || (this.fx = new a438.FX(this))).animate(t948, e719, i562);
            },
            delay: function(t949) {
                return (this.fx || (this.fx = new a438.FX(this))).delay(t949);
            },
            stop: function(t950, e720) {
                return this.fx && this.fx.stop(t950, e720), this;
            },
            finish: function() {
                return this.fx && this.fx.finish(), this;
            }
        }
    }), a438.MorphObj = a438.invent({
        create: function(t951, e721) {
            return a438.Color.isColor(e721) ? new a438.Color(t951).morph(e721) : a438.regex.delimiter.test(t951) ? a438.regex.pathLetters.test(t951) ? new a438.PathArray(t951).morph(e721) : new a438.Array(t951).morph(e721) : a438.regex.numberAndUnit.test(e721) ? new a438.Number(t951).morph(e721) : (this.value = t951, void (this.destination = e721));
        },
        extend: {
            at: function(t, e722) {
                return e722 < 1 ? this.value : this.destination;
            },
            valueOf: function() {
                return this.value;
            }
        }
    }), a438.extend(a438.FX, {
        attr: function(t952, e723, a) {
            if ("object" === i(t952)) for(var s371 in t952)this.attr(s371, t952[s371]);
            else this.add(t952, e723, "attrs");
            return this;
        },
        plot: function(t953, e724, i563, a446) {
            return 4 == arguments.length ? this.plot([
                t953,
                e724,
                i563,
                a446
            ]) : this.add("plot", new (this.target()).morphArray(t953));
        }
    }), a438.Box = a438.invent({
        create: function(t954, e725, s372, r316) {
            if (!("object" !== i(t954) || t954 instanceof a438.Element)) return a438.Box.call(this, null != t954.left ? t954.left : t954.x, null != t954.top ? t954.top : t954.y, t954.width, t954.height);
            4 == arguments.length && (this.x = t954, this.y = e725, this.width = s372, this.height = r316), b61(this);
        }
    }), a438.BBox = a438.invent({
        create: function(t955) {
            if (a438.Box.apply(this, [].slice.call(arguments)), t955 instanceof a438.Element) {
                var i564;
                try {
                    if (!e671.documentElement.contains) {
                        for(var s373 = t955.node; s373.parentNode;)s373 = s373.parentNode;
                        if (s373 != e671) throw new Error("Element not in the dom");
                    }
                    i564 = t955.node.getBBox();
                } catch (e) {
                    if (t955 instanceof a438.Shape) {
                        a438.parser.draw || a438.prepare();
                        var r317 = t955.clone(a438.parser.draw.instance).show();
                        r317 && r317.node && "function" == typeof r317.node.getBBox && (i564 = r317.node.getBBox()), r317 && "function" == typeof r317.remove && r317.remove();
                    } else i564 = {
                        x: t955.node.clientLeft,
                        y: t955.node.clientTop,
                        width: t955.node.clientWidth,
                        height: t955.node.clientHeight
                    };
                }
                a438.Box.call(this, i564);
            }
        },
        inherit: a438.Box,
        parent: a438.Element,
        construct: {
            bbox: function() {
                return new a438.BBox(this);
            }
        }
    }), a438.BBox.prototype.constructor = a438.BBox, a438.Matrix = a438.invent({
        create: function(t956) {
            var e726 = p71([
                1,
                0,
                0,
                1,
                0,
                0
            ]);
            t956 = null === t956 ? e726 : t956 instanceof a438.Element ? t956.matrixify() : "string" == typeof t956 ? p71(t956.split(a438.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? p71([].slice.call(arguments)) : Array.isArray(t956) ? p71(t956) : t956 && "object" === i(t956) ? t956 : e726;
            for(var s374 = m23.length - 1; s374 >= 0; --s374)this[m23[s374]] = null != t956[m23[s374]] ? t956[m23[s374]] : e726[m23[s374]];
        },
        extend: {
            extract: function() {
                var t957 = f77(this, 0, 1);
                f77(this, 1, 0);
                var e727 = 180 / Math.PI * Math.atan2(t957.y, t957.x) - 90;
                return {
                    x: this.e,
                    y: this.f,
                    transformedX: (this.e * Math.cos(e727 * Math.PI / 180) + this.f * Math.sin(e727 * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),
                    transformedY: (this.f * Math.cos(e727 * Math.PI / 180) + this.e * Math.sin(-e727 * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),
                    rotation: e727,
                    a: this.a,
                    b: this.b,
                    c: this.c,
                    d: this.d,
                    e: this.e,
                    f: this.f,
                    matrix: new a438.Matrix(this)
                };
            },
            clone: function() {
                return new a438.Matrix(this);
            },
            morph: function(t958) {
                return this.destination = new a438.Matrix(t958), this;
            },
            multiply: function(t959) {
                return new a438.Matrix(this.native().multiply((function(t960) {
                    return t960 instanceof a438.Matrix || (t960 = new a438.Matrix(t960)), t960;
                })(t959).native()));
            },
            inverse: function() {
                return new a438.Matrix(this.native().inverse());
            },
            translate: function(t961, e728) {
                return new a438.Matrix(this.native().translate(t961 || 0, e728 || 0));
            },
            native: function() {
                for(var t962 = a438.parser.native.createSVGMatrix(), e729 = m23.length - 1; e729 >= 0; e729--)t962[m23[e729]] = this[m23[e729]];
                return t962;
            },
            toString: function() {
                return "matrix(" + v47(this.a) + "," + v47(this.b) + "," + v47(this.c) + "," + v47(this.d) + "," + v47(this.e) + "," + v47(this.f) + ")";
            }
        },
        parent: a438.Element,
        construct: {
            ctm: function() {
                return new a438.Matrix(this.node.getCTM());
            },
            screenCTM: function() {
                if (this instanceof a438.Nested) {
                    var t963 = this.rect(1, 1), e730 = t963.node.getScreenCTM();
                    return t963.remove(), new a438.Matrix(e730);
                }
                return new a438.Matrix(this.node.getScreenCTM());
            }
        }
    }), a438.Point = a438.invent({
        create: function(t964, e731) {
            var a447;
            a447 = Array.isArray(t964) ? {
                x: t964[0],
                y: t964[1]
            } : "object" === i(t964) ? {
                x: t964.x,
                y: t964.y
            } : null != t964 ? {
                x: t964,
                y: null != e731 ? e731 : t964
            } : {
                x: 0,
                y: 0
            }, this.x = a447.x, this.y = a447.y;
        },
        extend: {
            clone: function() {
                return new a438.Point(this);
            },
            morph: function(t965, e732) {
                return this.destination = new a438.Point(t965, e732), this;
            }
        }
    }), a438.extend(a438.Element, {
        point: function(t966, e733) {
            return new a438.Point(t966, e733).transform(this.screenCTM().inverse());
        }
    }), a438.extend(a438.Element, {
        attr: function(t967, e734, s375) {
            if (null == t967) {
                for(t967 = {}, s375 = (e734 = this.node.attributes).length - 1; s375 >= 0; s375--)t967[e734[s375].nodeName] = a438.regex.isNumber.test(e734[s375].nodeValue) ? parseFloat(e734[s375].nodeValue) : e734[s375].nodeValue;
                return t967;
            }
            if ("object" === i(t967)) for(var r318 in t967)this.attr(r318, t967[r318]);
            else if (null === e734) this.node.removeAttribute(t967);
            else {
                if (null == e734) return null == (e734 = this.node.getAttribute(t967)) ? a438.defaults.attrs[t967] : a438.regex.isNumber.test(e734) ? parseFloat(e734) : e734;
                "stroke-width" == t967 ? this.attr("stroke", parseFloat(e734) > 0 ? this._stroke : null) : "stroke" == t967 && (this._stroke = e734), "fill" != t967 && "stroke" != t967 || (a438.regex.isImage.test(e734) && (e734 = this.doc().defs().image(e734, 0, 0)), e734 instanceof a438.Image && (e734 = this.doc().defs().pattern(0, 0, function() {
                    this.add(e734);
                }))), "number" == typeof e734 ? e734 = new a438.Number(e734) : a438.Color.isColor(e734) ? e734 = new a438.Color(e734) : Array.isArray(e734) && (e734 = new a438.Array(e734)), "leading" == t967 ? this.leading && this.leading(e734) : "string" == typeof s375 ? this.node.setAttributeNS(s375, t967, e734.toString()) : this.node.setAttribute(t967, e734.toString()), !this.rebuild || "font-size" != t967 && "x" != t967 || this.rebuild(t967, e734);
            }
            return this;
        }
    }), a438.extend(a438.Element, {
        transform: function(t968, e735) {
            var s376;
            return "object" !== i(t968) ? (s376 = new a438.Matrix(this).extract(), "string" == typeof t968 ? s376[t968] : s376) : (s376 = new a438.Matrix(this), e735 = !!e735 || !!t968.relative, null != t968.a && (s376 = e735 ? s376.multiply(new a438.Matrix(t968)) : new a438.Matrix(t968)), this.attr("transform", s376));
        }
    }), a438.extend(a438.Element, {
        untransform: function() {
            return this.attr("transform", null);
        },
        matrixify: function() {
            return (this.attr("transform") || "").split(a438.regex.transforms).slice(0, -1).map(function(t969) {
                var e736 = t969.trim().split("(");
                return [
                    e736[0],
                    e736[1].split(a438.regex.delimiter).map(function(t970) {
                        return parseFloat(t970);
                    })
                ];
            }).reduce(function(t971, e737) {
                return "matrix" == e737[0] ? t971.multiply(p71(e737[1])) : t971[e737[0]].apply(t971, e737[1]);
            }, new a438.Matrix);
        },
        toParent: function(t972) {
            if (this == t972) return this;
            var e738 = this.screenCTM(), i565 = t972.screenCTM().inverse();
            return this.addTo(t972).untransform().transform(i565.multiply(e738)), this;
        },
        toDoc: function() {
            return this.toParent(this.doc());
        }
    }), a438.Transformation = a438.invent({
        create: function(t973, e739) {
            if (arguments.length > 1 && "boolean" != typeof e739) return this.constructor.call(this, [].slice.call(arguments));
            if (Array.isArray(t973)) for(var a448 = 0, s377 = this.arguments.length; a448 < s377; ++a448)this[this.arguments[a448]] = t973[a448];
            else if (t973 && "object" === i(t973)) for(a448 = 0, s377 = this.arguments.length; a448 < s377; ++a448)this[this.arguments[a448]] = t973[this.arguments[a448]];
            this.inversed = !1, !0 === e739 && (this.inversed = !0);
        }
    }), a438.Translate = a438.invent({
        parent: a438.Matrix,
        inherit: a438.Transformation,
        create: function(t, e) {
            this.constructor.apply(this, [].slice.call(arguments));
        },
        extend: {
            arguments: [
                "transformedX",
                "transformedY"
            ],
            method: "translate"
        }
    }), a438.extend(a438.Element, {
        style: function(t974, e740) {
            if (0 == arguments.length) return this.node.style.cssText || "";
            if (arguments.length < 2) {
                if ("object" === i(t974)) for(var s378 in t974)this.style(s378, t974[s378]);
                else {
                    if (!a438.regex.isCss.test(t974)) return this.node.style[c149(t974)];
                    for(t974 = t974.split(/\s*;\s*/).filter(function(t975) {
                        return !!t975;
                    }).map(function(t976) {
                        return t976.split(/\s*:\s*/);
                    }); e740 = t974.pop();)this.style(e740[0], e740[1]);
                }
            } else this.node.style[c149(t974)] = null === e740 || a438.regex.isBlank.test(e740) ? "" : e740;
            return this;
        }
    }), a438.Parent = a438.invent({
        create: function(t977) {
            this.constructor.call(this, t977);
        },
        inherit: a438.Element,
        extend: {
            children: function() {
                return a438.utils.map(a438.utils.filterSVGElements(this.node.childNodes), function(t978) {
                    return a438.adopt(t978);
                });
            },
            add: function(t979, e741) {
                return null == e741 ? this.node.appendChild(t979.node) : t979.node != this.node.childNodes[e741] && this.node.insertBefore(t979.node, this.node.childNodes[e741]), this;
            },
            put: function(t980, e742) {
                return this.add(t980, e742), t980;
            },
            has: function(t981) {
                return this.index(t981) >= 0;
            },
            index: function(t982) {
                return [].slice.call(this.node.childNodes).indexOf(t982.node);
            },
            get: function(t983) {
                return a438.adopt(this.node.childNodes[t983]);
            },
            first: function() {
                return this.get(0);
            },
            last: function() {
                return this.get(this.node.childNodes.length - 1);
            },
            each: function(t984, e743) {
                for(var i566 = this.children(), s379 = 0, r319 = i566.length; s379 < r319; s379++)i566[s379] instanceof a438.Element && t984.apply(i566[s379], [
                    s379,
                    i566
                ]), e743 && i566[s379] instanceof a438.Container && i566[s379].each(t984, e743);
                return this;
            },
            removeElement: function(t985) {
                return this.node.removeChild(t985.node), this;
            },
            clear: function() {
                for(; this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);
                return delete this._defs, this;
            },
            defs: function() {
                return this.doc().defs();
            }
        }
    }), a438.extend(a438.Parent, {
        ungroup: function(t986, e744) {
            return 0 === e744 || this instanceof a438.Defs || this.node == a438.parser.draw || (t986 = t986 || (this instanceof a438.Doc ? this : this.parent(a438.Parent)), e744 = e744 || 1 / 0, this.each(function() {
                return this instanceof a438.Defs ? this : this instanceof a438.Parent ? this.ungroup(t986, e744 - 1) : this.toParent(t986);
            }), this.node.firstChild || this.remove()), this;
        },
        flatten: function(t987, e745) {
            return this.ungroup(t987, e745);
        }
    }), a438.Container = a438.invent({
        create: function(t988) {
            this.constructor.call(this, t988);
        },
        inherit: a438.Parent
    }), a438.ViewBox = a438.invent({
        parent: a438.Container,
        construct: {}
    }), [
        "click",
        "dblclick",
        "mousedown",
        "mouseup",
        "mouseover",
        "mouseout",
        "mousemove",
        "touchstart",
        "touchmove",
        "touchleave",
        "touchend",
        "touchcancel"
    ].forEach(function(t989) {
        a438.Element.prototype[t989] = function(e746) {
            return a438.on(this.node, t989, e746), this;
        };
    }), a438.listeners = [], a438.handlerMap = [], a438.listenerId = 0, a438.on = function(t990, e747, i567, s380, r320) {
        var o282 = i567.bind(s380 || t990.instance || t990), n238 = (a438.handlerMap.indexOf(t990) + 1 || a438.handlerMap.push(t990)) - 1, l201 = e747.split(".")[0], h174 = e747.split(".")[1] || "*";
        a438.listeners[n238] = a438.listeners[n238] || {}, a438.listeners[n238][l201] = a438.listeners[n238][l201] || {}, a438.listeners[n238][l201][h174] = a438.listeners[n238][l201][h174] || {}, i567._svgjsListenerId || (i567._svgjsListenerId = ++a438.listenerId), a438.listeners[n238][l201][h174][i567._svgjsListenerId] = o282, t990.addEventListener(l201, o282, r320 || {
            passive: !0
        });
    }, a438.off = function(t991, e748, i568) {
        var s381 = a438.handlerMap.indexOf(t991), r321 = e748 && e748.split(".")[0], o283 = e748 && e748.split(".")[1], n239 = "";
        if (-1 != s381) {
            if (i568) {
                if ("function" == typeof i568 && (i568 = i568._svgjsListenerId), !i568) return;
                a438.listeners[s381][r321] && a438.listeners[s381][r321][o283 || "*"] && (t991.removeEventListener(r321, a438.listeners[s381][r321][o283 || "*"][i568], !1), delete a438.listeners[s381][r321][o283 || "*"][i568]);
            } else if (o283 && r321) {
                if (a438.listeners[s381][r321] && a438.listeners[s381][r321][o283]) {
                    for(var l202 in a438.listeners[s381][r321][o283])a438.off(t991, [
                        r321,
                        o283
                    ].join("."), l202);
                    delete a438.listeners[s381][r321][o283];
                }
            } else if (o283) for(var h175 in a438.listeners[s381])for(var n239 in a438.listeners[s381][h175])o283 === n239 && a438.off(t991, [
                h175,
                o283
            ].join("."));
            else if (r321) {
                if (a438.listeners[s381][r321]) {
                    for(var n239 in a438.listeners[s381][r321])a438.off(t991, [
                        r321,
                        n239
                    ].join("."));
                    delete a438.listeners[s381][r321];
                }
            } else {
                for(var h175 in a438.listeners[s381])a438.off(t991, h175);
                delete a438.listeners[s381], delete a438.handlerMap[s381];
            }
        }
    }, a438.extend(a438.Element, {
        on: function(t992, e749, i569, s382) {
            return a438.on(this.node, t992, e749, i569, s382), this;
        },
        off: function(t993, e750) {
            return a438.off(this.node, t993, e750), this;
        },
        fire: function(e751, i570) {
            return e751 instanceof t858.Event ? this.node.dispatchEvent(e751) : this.node.dispatchEvent(e751 = new a438.CustomEvent(e751, {
                detail: i570,
                cancelable: !0
            })), this._event = e751, this;
        },
        event: function() {
            return this._event;
        }
    }), a438.Defs = a438.invent({
        create: "defs",
        inherit: a438.Container
    }), a438.G = a438.invent({
        create: "g",
        inherit: a438.Container,
        extend: {
            x: function(t994) {
                return null == t994 ? this.transform("x") : this.transform({
                    x: t994 - this.x()
                }, !0);
            }
        },
        construct: {
            group: function() {
                return this.put(new a438.G);
            }
        }
    }), a438.Doc = a438.invent({
        create: function(t995) {
            t995 && ("svg" == (t995 = "string" == typeof t995 ? e671.getElementById(t995) : t995).nodeName ? this.constructor.call(this, t995) : (this.constructor.call(this, a438.create("svg")), t995.appendChild(this.node), this.size("100%", "100%")), this.namespace().defs());
        },
        inherit: a438.Container,
        extend: {
            namespace: function() {
                return this.attr({
                    xmlns: a438.ns,
                    version: "1.1"
                }).attr("xmlns:xlink", a438.xlink, a438.xmlns).attr("xmlns:svgjs", a438.svgjs, a438.xmlns);
            },
            defs: function() {
                var t996;
                return this._defs || ((t996 = this.node.getElementsByTagName("defs")[0]) ? this._defs = a438.adopt(t996) : this._defs = new a438.Defs, this.node.appendChild(this._defs.node)), this._defs;
            },
            parent: function() {
                return this.node.parentNode && "#document" != this.node.parentNode.nodeName ? this.node.parentNode : null;
            },
            remove: function() {
                return this.parent() && this.parent().removeChild(this.node), this;
            },
            clear: function() {
                for(; this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);
                return delete this._defs, a438.parser.draw && !a438.parser.draw.parentNode && this.node.appendChild(a438.parser.draw), this;
            },
            clone: function(t997) {
                this.writeDataToDom();
                var e752 = this.node, i571 = x44(e752.cloneNode(!0));
                return t997 ? (t997.node || t997).appendChild(i571.node) : e752.parentNode.insertBefore(i571.node, e752.nextSibling), i571;
            }
        }
    }), a438.extend(a438.Element, {}), a438.Gradient = a438.invent({
        create: function(t998) {
            this.constructor.call(this, a438.create(t998 + "Gradient")), this.type = t998;
        },
        inherit: a438.Container,
        extend: {
            at: function(t999, e753, i572) {
                return this.put(new a438.Stop).update(t999, e753, i572);
            },
            update: function(t1000) {
                return this.clear(), "function" == typeof t1000 && t1000.call(this, this), this;
            },
            fill: function() {
                return "url(#" + this.id() + ")";
            },
            toString: function() {
                return this.fill();
            },
            attr: function(t1001, e754, i573) {
                return "transform" == t1001 && (t1001 = "gradientTransform"), a438.Container.prototype.attr.call(this, t1001, e754, i573);
            }
        },
        construct: {
            gradient: function(t1002, e755) {
                return this.defs().gradient(t1002, e755);
            }
        }
    }), a438.extend(a438.Gradient, a438.FX, {
        from: function(t1003, e756) {
            return "radial" == (this._target || this).type ? this.attr({
                fx: new a438.Number(t1003),
                fy: new a438.Number(e756)
            }) : this.attr({
                x1: new a438.Number(t1003),
                y1: new a438.Number(e756)
            });
        },
        to: function(t1004, e757) {
            return "radial" == (this._target || this).type ? this.attr({
                cx: new a438.Number(t1004),
                cy: new a438.Number(e757)
            }) : this.attr({
                x2: new a438.Number(t1004),
                y2: new a438.Number(e757)
            });
        }
    }), a438.extend(a438.Defs, {
        gradient: function(t1005, e758) {
            return this.put(new a438.Gradient(t1005)).update(e758);
        }
    }), a438.Stop = a438.invent({
        create: "stop",
        inherit: a438.Element,
        extend: {
            update: function(t1006) {
                return ("number" == typeof t1006 || t1006 instanceof a438.Number) && (t1006 = {
                    offset: arguments[0],
                    color: arguments[1],
                    opacity: arguments[2]
                }), null != t1006.opacity && this.attr("stop-opacity", t1006.opacity), null != t1006.color && this.attr("stop-color", t1006.color), null != t1006.offset && this.attr("offset", new a438.Number(t1006.offset)), this;
            }
        }
    }), a438.Pattern = a438.invent({
        create: "pattern",
        inherit: a438.Container,
        extend: {
            fill: function() {
                return "url(#" + this.id() + ")";
            },
            update: function(t1007) {
                return this.clear(), "function" == typeof t1007 && t1007.call(this, this), this;
            },
            toString: function() {
                return this.fill();
            },
            attr: function(t1008, e759, i574) {
                return "transform" == t1008 && (t1008 = "patternTransform"), a438.Container.prototype.attr.call(this, t1008, e759, i574);
            }
        },
        construct: {
            pattern: function(t1009, e760, i575) {
                return this.defs().pattern(t1009, e760, i575);
            }
        }
    }), a438.extend(a438.Defs, {
        pattern: function(t1010, e761, i576) {
            return this.put(new a438.Pattern).update(i576).attr({
                x: 0,
                y: 0,
                width: t1010,
                height: e761,
                patternUnits: "userSpaceOnUse"
            });
        }
    }), a438.Shape = a438.invent({
        create: function(t1011) {
            this.constructor.call(this, t1011);
        },
        inherit: a438.Element
    }), a438.Symbol = a438.invent({
        create: "symbol",
        inherit: a438.Container,
        construct: {
            symbol: function() {
                return this.put(new a438.Symbol);
            }
        }
    }), a438.Use = a438.invent({
        create: "use",
        inherit: a438.Shape,
        extend: {
            element: function(t1012, e762) {
                return this.attr("href", (e762 || "") + "#" + t1012, a438.xlink);
            }
        },
        construct: {
            use: function(t1013, e763) {
                return this.put(new a438.Use).element(t1013, e763);
            }
        }
    }), a438.Rect = a438.invent({
        create: "rect",
        inherit: a438.Shape,
        construct: {
            rect: function(t1014, e764) {
                return this.put(new a438.Rect).size(t1014, e764);
            }
        }
    }), a438.Circle = a438.invent({
        create: "circle",
        inherit: a438.Shape,
        construct: {
            circle: function(t1015) {
                return this.put(new a438.Circle).rx(new a438.Number(t1015).divide(2)).move(0, 0);
            }
        }
    }), a438.extend(a438.Circle, a438.FX, {
        rx: function(t1016) {
            return this.attr("r", t1016);
        },
        ry: function(t1017) {
            return this.rx(t1017);
        }
    }), a438.Ellipse = a438.invent({
        create: "ellipse",
        inherit: a438.Shape,
        construct: {
            ellipse: function(t1018, e765) {
                return this.put(new a438.Ellipse).size(t1018, e765).move(0, 0);
            }
        }
    }), a438.extend(a438.Ellipse, a438.Rect, a438.FX, {
        rx: function(t1019) {
            return this.attr("rx", t1019);
        },
        ry: function(t1020) {
            return this.attr("ry", t1020);
        }
    }), a438.extend(a438.Circle, a438.Ellipse, {
        x: function(t1021) {
            return null == t1021 ? this.cx() - this.rx() : this.cx(t1021 + this.rx());
        },
        y: function(t1022) {
            return null == t1022 ? this.cy() - this.ry() : this.cy(t1022 + this.ry());
        },
        cx: function(t1023) {
            return null == t1023 ? this.attr("cx") : this.attr("cx", t1023);
        },
        cy: function(t1024) {
            return null == t1024 ? this.attr("cy") : this.attr("cy", t1024);
        },
        width: function(t1025) {
            return null == t1025 ? 2 * this.rx() : this.rx(new a438.Number(t1025).divide(2));
        },
        height: function(t1026) {
            return null == t1026 ? 2 * this.ry() : this.ry(new a438.Number(t1026).divide(2));
        },
        size: function(t1027, e766) {
            var i577 = u93(this, t1027, e766);
            return this.rx(new a438.Number(i577.width).divide(2)).ry(new a438.Number(i577.height).divide(2));
        }
    }), a438.Line = a438.invent({
        create: "line",
        inherit: a438.Shape,
        extend: {
            array: function() {
                return new a438.PointArray([
                    [
                        this.attr("x1"),
                        this.attr("y1")
                    ],
                    [
                        this.attr("x2"),
                        this.attr("y2")
                    ]
                ]);
            },
            plot: function(t1028, e767, i578, s383) {
                return null == t1028 ? this.array() : (t1028 = void 0 !== e767 ? {
                    x1: t1028,
                    y1: e767,
                    x2: i578,
                    y2: s383
                } : new a438.PointArray(t1028).toLine(), this.attr(t1028));
            },
            move: function(t1029, e768) {
                return this.attr(this.array().move(t1029, e768).toLine());
            },
            size: function(t1030, e769) {
                var i579 = u93(this, t1030, e769);
                return this.attr(this.array().size(i579.width, i579.height).toLine());
            }
        },
        construct: {
            line: function(t1031, e770, i580, s384) {
                return a438.Line.prototype.plot.apply(this.put(new a438.Line), null != t1031 ? [
                    t1031,
                    e770,
                    i580,
                    s384
                ] : [
                    0,
                    0,
                    0,
                    0
                ]);
            }
        }
    }), a438.Polyline = a438.invent({
        create: "polyline",
        inherit: a438.Shape,
        construct: {
            polyline: function(t1032) {
                return this.put(new a438.Polyline).plot(t1032 || new a438.PointArray);
            }
        }
    }), a438.Polygon = a438.invent({
        create: "polygon",
        inherit: a438.Shape,
        construct: {
            polygon: function(t1033) {
                return this.put(new a438.Polygon).plot(t1033 || new a438.PointArray);
            }
        }
    }), a438.extend(a438.Polyline, a438.Polygon, {
        array: function() {
            return this._array || (this._array = new a438.PointArray(this.attr("points")));
        },
        plot: function(t1034) {
            return null == t1034 ? this.array() : this.clear().attr("points", "string" == typeof t1034 ? t1034 : this._array = new a438.PointArray(t1034));
        },
        clear: function() {
            return delete this._array, this;
        },
        move: function(t1035, e771) {
            return this.attr("points", this.array().move(t1035, e771));
        },
        size: function(t1036, e772) {
            var i581 = u93(this, t1036, e772);
            return this.attr("points", this.array().size(i581.width, i581.height));
        }
    }), a438.extend(a438.Line, a438.Polyline, a438.Polygon, {
        morphArray: a438.PointArray,
        x: function(t1037) {
            return null == t1037 ? this.bbox().x : this.move(t1037, this.bbox().y);
        },
        y: function(t1038) {
            return null == t1038 ? this.bbox().y : this.move(this.bbox().x, t1038);
        },
        width: function(t1039) {
            var e773 = this.bbox();
            return null == t1039 ? e773.width : this.size(t1039, e773.height);
        },
        height: function(t1040) {
            var e774 = this.bbox();
            return null == t1040 ? e774.height : this.size(e774.width, t1040);
        }
    }), a438.Path = a438.invent({
        create: "path",
        inherit: a438.Shape,
        extend: {
            morphArray: a438.PathArray,
            array: function() {
                return this._array || (this._array = new a438.PathArray(this.attr("d")));
            },
            plot: function(t1041) {
                return null == t1041 ? this.array() : this.clear().attr("d", "string" == typeof t1041 ? t1041 : this._array = new a438.PathArray(t1041));
            },
            clear: function() {
                return delete this._array, this;
            }
        },
        construct: {
            path: function(t1042) {
                return this.put(new a438.Path).plot(t1042 || new a438.PathArray);
            }
        }
    }), a438.Image = a438.invent({
        create: "image",
        inherit: a438.Shape,
        extend: {
            load: function(e775) {
                if (!e775) return this;
                var i582 = this, s385 = new t858.Image;
                return a438.on(s385, "load", function() {
                    a438.off(s385);
                    var t1043 = i582.parent(a438.Pattern);
                    null !== t1043 && (0 == i582.width() && 0 == i582.height() && i582.size(s385.width, s385.height), t1043 && 0 == t1043.width() && 0 == t1043.height() && t1043.size(i582.width(), i582.height()), "function" == typeof i582._loaded && i582._loaded.call(i582, {
                        width: s385.width,
                        height: s385.height,
                        ratio: s385.width / s385.height,
                        url: e775
                    }));
                }), a438.on(s385, "error", function(t1044) {
                    a438.off(s385), "function" == typeof i582._error && i582._error.call(i582, t1044);
                }), this.attr("href", s385.src = this.src = e775, a438.xlink);
            },
            loaded: function(t1045) {
                return this._loaded = t1045, this;
            },
            error: function(t1046) {
                return this._error = t1046, this;
            }
        },
        construct: {
            image: function(t1047, e776, i583) {
                return this.put(new a438.Image).load(t1047).size(e776 || 0, i583 || e776 || 0);
            }
        }
    }), a438.Text = a438.invent({
        create: function() {
            this.constructor.call(this, a438.create("text")), this.dom.leading = new a438.Number(1.3), this._rebuild = !0, this._build = !1, this.attr("font-family", a438.defaults.attrs["font-family"]);
        },
        inherit: a438.Shape,
        extend: {
            x: function(t1048) {
                return null == t1048 ? this.attr("x") : this.attr("x", t1048);
            },
            text: function(t1049) {
                if (void 0 === t1049) {
                    t1049 = "";
                    for(var e777 = this.node.childNodes, i584 = 0, s386 = e777.length; i584 < s386; ++i584)0 != i584 && 3 != e777[i584].nodeType && 1 == a438.adopt(e777[i584]).dom.newLined && (t1049 += "\n"), t1049 += e777[i584].textContent;
                    return t1049;
                }
                if (this.clear().build(!0), "function" == typeof t1049) t1049.call(this, this);
                else {
                    i584 = 0;
                    for(var r322 = (t1049 = t1049.split("\n")).length; i584 < r322; i584++)this.tspan(t1049[i584]).newLine();
                }
                return this.build(!1).rebuild();
            },
            size: function(t1050) {
                return this.attr("font-size", t1050).rebuild();
            },
            leading: function(t1051) {
                return null == t1051 ? this.dom.leading : (this.dom.leading = new a438.Number(t1051), this.rebuild());
            },
            lines: function() {
                var t1052 = (this.textPath && this.textPath() || this).node, e778 = a438.utils.map(a438.utils.filterSVGElements(t1052.childNodes), function(t1053) {
                    return a438.adopt(t1053);
                });
                return new a438.Set(e778);
            },
            rebuild: function(t1054) {
                if ("boolean" == typeof t1054 && (this._rebuild = t1054), this._rebuild) {
                    var e779 = this, i585 = 0, s387 = this.dom.leading * new a438.Number(this.attr("font-size"));
                    this.lines().each(function() {
                        this.dom.newLined && (e779.textPath() || this.attr("x", e779.attr("x")), "\n" == this.text() ? i585 += s387 : (this.attr("dy", s387 + i585), i585 = 0));
                    }), this.fire("rebuild");
                }
                return this;
            },
            build: function(t1055) {
                return this._build = !!t1055, this;
            },
            setData: function(t1056) {
                return this.dom = t1056, this.dom.leading = new a438.Number(t1056.leading || 1.3), this;
            }
        },
        construct: {
            text: function(t1057) {
                return this.put(new a438.Text).text(t1057);
            },
            plain: function(t1058) {
                return this.put(new a438.Text).plain(t1058);
            }
        }
    }), a438.Tspan = a438.invent({
        create: "tspan",
        inherit: a438.Shape,
        extend: {
            text: function(t1059) {
                return null == t1059 ? this.node.textContent + (this.dom.newLined ? "\n" : "") : ("function" == typeof t1059 ? t1059.call(this, this) : this.plain(t1059), this);
            },
            dx: function(t1060) {
                return this.attr("dx", t1060);
            },
            dy: function(t1061) {
                return this.attr("dy", t1061);
            },
            newLine: function() {
                var t1062 = this.parent(a438.Text);
                return this.dom.newLined = !0, this.dy(t1062.dom.leading * t1062.attr("font-size")).attr("x", t1062.x());
            }
        }
    }), a438.extend(a438.Text, a438.Tspan, {
        plain: function(t1063) {
            return !1 === this._build && this.clear(), this.node.appendChild(e671.createTextNode(t1063)), this;
        },
        tspan: function(t1064) {
            var e780 = (this.textPath && this.textPath() || this).node, i586 = new a438.Tspan;
            return !1 === this._build && this.clear(), e780.appendChild(i586.node), i586.text(t1064);
        },
        clear: function() {
            for(var t1065 = (this.textPath && this.textPath() || this).node; t1065.hasChildNodes();)t1065.removeChild(t1065.lastChild);
            return this;
        },
        length: function() {
            return this.node.getComputedTextLength();
        }
    }), a438.TextPath = a438.invent({
        create: "textPath",
        inherit: a438.Parent,
        parent: a438.Text,
        construct: {
            morphArray: a438.PathArray,
            array: function() {
                var t1066 = this.track();
                return t1066 ? t1066.array() : null;
            },
            plot: function(t1067) {
                var e781 = this.track(), i587 = null;
                return e781 && (i587 = e781.plot(t1067)), null == t1067 ? i587 : this;
            },
            track: function() {
                var t1068 = this.textPath();
                if (t1068) return t1068.reference("href");
            },
            textPath: function() {
                if (this.node.firstChild && "textPath" == this.node.firstChild.nodeName) return a438.adopt(this.node.firstChild);
            }
        }
    }), a438.Nested = a438.invent({
        create: function() {
            this.constructor.call(this, a438.create("svg")), this.style("overflow", "visible");
        },
        inherit: a438.Container,
        construct: {
            nested: function() {
                return this.put(new a438.Nested);
            }
        }
    });
    var l198 = {
        stroke: [
            "color",
            "width",
            "opacity",
            "linecap",
            "linejoin",
            "miterlimit",
            "dasharray",
            "dashoffset"
        ],
        fill: [
            "color",
            "opacity",
            "rule"
        ],
        prefix: function(t1069, e782) {
            return "color" == e782 ? t1069 : t1069 + "-" + e782;
        }
    };
    function h172(t, e, i588, s388) {
        return i588 + s388.replace(a438.regex.dots, " .");
    }
    function c149(t1070) {
        return t1070.toLowerCase().replace(/-(.)/g, function(t, e783) {
            return e783.toUpperCase();
        });
    }
    function d132(t1071) {
        return t1071.charAt(0).toUpperCase() + t1071.slice(1);
    }
    function g112(t1072) {
        var e784 = t1072.toString(16);
        return 1 == e784.length ? "0" + e784 : e784;
    }
    function u93(t1073, e785, i589) {
        if (null == e785 || null == i589) {
            var a449 = t1073.bbox();
            null == e785 ? e785 = a449.width / a449.height * i589 : null == i589 && (i589 = a449.height / a449.width * e785);
        }
        return {
            width: e785,
            height: i589
        };
    }
    function f77(t1074, e786, i590) {
        return {
            x: e786 * t1074.a + i590 * t1074.c + 0,
            y: e786 * t1074.b + i590 * t1074.d + 0
        };
    }
    function p71(t1075) {
        return {
            a: t1075[0],
            b: t1075[1],
            c: t1075[2],
            d: t1075[3],
            e: t1075[4],
            f: t1075[5]
        };
    }
    function x44(e787) {
        for(var i591 = e787.childNodes.length - 1; i591 >= 0; i591--)e787.childNodes[i591] instanceof t858.SVGElement && x44(e787.childNodes[i591]);
        return a438.adopt(e787).id(a438.eid(e787.nodeName));
    }
    function b61(t1076) {
        return null == t1076.x && (t1076.x = 0, t1076.y = 0, t1076.width = 0, t1076.height = 0), t1076.w = t1076.width, t1076.h = t1076.height, t1076.x2 = t1076.x + t1076.width, t1076.y2 = t1076.y + t1076.height, t1076.cx = t1076.x + t1076.width / 2, t1076.cy = t1076.y + t1076.height / 2, t1076;
    }
    function v47(t1077) {
        return Math.abs(t1077) > 1e-37 ? t1077 : 0;
    }
    [
        "fill",
        "stroke"
    ].forEach(function(t1078) {
        var e788 = {};
        e788[t1078] = function(e789) {
            if (void 0 === e789) return this;
            if ("string" == typeof e789 || a438.Color.isRgb(e789) || e789 && "function" == typeof e789.fill) this.attr(t1078, e789);
            else for(var i592 = l198[t1078].length - 1; i592 >= 0; i592--)null != e789[l198[t1078][i592]] && this.attr(l198.prefix(t1078, l198[t1078][i592]), e789[l198[t1078][i592]]);
            return this;
        }, a438.extend(a438.Element, a438.FX, e788);
    }), a438.extend(a438.Element, a438.FX, {
        translate: function(t1079, e790) {
            return this.transform({
                x: t1079,
                y: e790
            });
        },
        matrix: function(t1080) {
            return this.attr("transform", new a438.Matrix(6 == arguments.length ? [].slice.call(arguments) : t1080));
        },
        opacity: function(t1081) {
            return this.attr("opacity", t1081);
        },
        dx: function(t1082) {
            return this.x(new a438.Number(t1082).plus(this instanceof a438.FX ? 0 : this.x()), !0);
        },
        dy: function(t1083) {
            return this.y(new a438.Number(t1083).plus(this instanceof a438.FX ? 0 : this.y()), !0);
        }
    }), a438.extend(a438.Path, {
        length: function() {
            return this.node.getTotalLength();
        },
        pointAt: function(t1084) {
            return this.node.getPointAtLength(t1084);
        }
    }), a438.Set = a438.invent({
        create: function(t1085) {
            Array.isArray(t1085) ? this.members = t1085 : this.clear();
        },
        extend: {
            add: function() {
                for(var t1086 = [].slice.call(arguments), e791 = 0, i593 = t1086.length; e791 < i593; e791++)this.members.push(t1086[e791]);
                return this;
            },
            remove: function(t1087) {
                var e792 = this.index(t1087);
                return e792 > -1 && this.members.splice(e792, 1), this;
            },
            each: function(t1088) {
                for(var e793 = 0, i594 = this.members.length; e793 < i594; e793++)t1088.apply(this.members[e793], [
                    e793,
                    this.members
                ]);
                return this;
            },
            clear: function() {
                return this.members = [], this;
            },
            length: function() {
                return this.members.length;
            },
            has: function(t1089) {
                return this.index(t1089) >= 0;
            },
            index: function(t1090) {
                return this.members.indexOf(t1090);
            },
            get: function(t1091) {
                return this.members[t1091];
            },
            first: function() {
                return this.get(0);
            },
            last: function() {
                return this.get(this.members.length - 1);
            },
            valueOf: function() {
                return this.members;
            }
        },
        construct: {
            set: function(t1092) {
                return new a438.Set(t1092);
            }
        }
    }), a438.FX.Set = a438.invent({
        create: function(t1093) {
            this.set = t1093;
        }
    }), a438.Set.inherit = function() {
        var t1094 = [];
        for(var e794 in a438.Shape.prototype)"function" == typeof a438.Shape.prototype[e794] && "function" != typeof a438.Set.prototype[e794] && t1094.push(e794);
        for(var e794 in t1094.forEach(function(t1095) {
            a438.Set.prototype[t1095] = function() {
                for(var e795 = 0, i595 = this.members.length; e795 < i595; e795++)this.members[e795] && "function" == typeof this.members[e795][t1095] && this.members[e795][t1095].apply(this.members[e795], arguments);
                return "animate" == t1095 ? this.fx || (this.fx = new a438.FX.Set(this)) : this;
            };
        }), t1094 = [], a438.FX.prototype)"function" == typeof a438.FX.prototype[e794] && "function" != typeof a438.FX.Set.prototype[e794] && t1094.push(e794);
        t1094.forEach(function(t1096) {
            a438.FX.Set.prototype[t1096] = function() {
                for(var e796 = 0, i596 = this.set.members.length; e796 < i596; e796++)this.set.members[e796].fx[t1096].apply(this.set.members[e796].fx, arguments);
                return this;
            };
        });
    }, a438.extend(a438.Element, {}), a438.extend(a438.Element, {
        remember: function(t1097, e797) {
            if ("object" === i(arguments[0])) for(var a450 in t1097)this.remember(a450, t1097[a450]);
            else {
                if (1 == arguments.length) return this.memory()[t1097];
                this.memory()[t1097] = e797;
            }
            return this;
        },
        forget: function() {
            if (0 == arguments.length) this._memory = {};
            else for(var t1098 = arguments.length - 1; t1098 >= 0; t1098--)delete this.memory()[arguments[t1098]];
            return this;
        },
        memory: function() {
            return this._memory || (this._memory = {});
        }
    }), a438.get = function(t1099) {
        var i597 = e671.getElementById(function(t1100) {
            var e798 = (t1100 || "").toString().match(a438.regex.reference);
            if (e798) return e798[1];
        }(t1099) || t1099);
        return a438.adopt(i597);
    }, a438.select = function(t1101, i598) {
        return new a438.Set(a438.utils.map((i598 || e671).querySelectorAll(t1101), function(t1102) {
            return a438.adopt(t1102);
        }));
    }, a438.extend(a438.Parent, {
        select: function(t1103) {
            return a438.select(t1103, this.node);
        }
    });
    var m23 = "abcdef".split("");
    if ("function" != typeof t858.CustomEvent) {
        var y45 = function(t1104, i599) {
            i599 = i599 || {
                bubbles: !1,
                cancelable: !1,
                detail: void 0
            };
            var a451 = e671.createEvent("CustomEvent");
            return a451.initCustomEvent(t1104, i599.bubbles, i599.cancelable, i599.detail), a451;
        };
        y45.prototype = t858.Event.prototype, a438.CustomEvent = y45;
    } else a438.CustomEvent = t858.CustomEvent;
    return a438;
}, "function" == typeof define && define.amd ? define(function() {
    return zt(It, It.document);
}) : "object" === i(exports) && true ? module.exports = It.document ? zt(It, It.document) : function(t1105) {
    return zt(t1105, t1105.document);
} : It.SVG = zt(It, It.document), /*! svg.filter.js - v2.0.2 - 2016-02-24
* https://github.com/wout/svg.filter.js
* Copyright (c) 2016 Wout Fierens; Licensed MIT */ (function() {
    SVG.Filter = SVG.invent({
        create: "filter",
        inherit: SVG.Parent,
        extend: {
            source: "SourceGraphic",
            sourceAlpha: "SourceAlpha",
            background: "BackgroundImage",
            backgroundAlpha: "BackgroundAlpha",
            fill: "FillPaint",
            stroke: "StrokePaint",
            autoSetIn: !0,
            put: function(t1107, e800) {
                return this.add(t1107, e800), !t1107.attr("in") && this.autoSetIn && t1107.attr("in", this.source), t1107.attr("result") || t1107.attr("result", t1107), t1107;
            },
            blend: function(t1108, e801, i601) {
                return this.put(new SVG.BlendEffect(t1108, e801, i601));
            },
            colorMatrix: function(t1109, e802) {
                return this.put(new SVG.ColorMatrixEffect(t1109, e802));
            },
            convolveMatrix: function(t1110) {
                return this.put(new SVG.ConvolveMatrixEffect(t1110));
            },
            componentTransfer: function(t1111) {
                return this.put(new SVG.ComponentTransferEffect(t1111));
            },
            composite: function(t1112, e803, i602) {
                return this.put(new SVG.CompositeEffect(t1112, e803, i602));
            },
            flood: function(t1113, e804) {
                return this.put(new SVG.FloodEffect(t1113, e804));
            },
            offset: function(t1114, e805) {
                return this.put(new SVG.OffsetEffect(t1114, e805));
            },
            image: function(t1115) {
                return this.put(new SVG.ImageEffect(t1115));
            },
            merge: function() {
                var t1116 = [
                    void 0
                ];
                for(var e806 in arguments)t1116.push(arguments[e806]);
                return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t1116)));
            },
            gaussianBlur: function(t1117, e807) {
                return this.put(new SVG.GaussianBlurEffect(t1117, e807));
            },
            morphology: function(t1118, e808) {
                return this.put(new SVG.MorphologyEffect(t1118, e808));
            },
            diffuseLighting: function(t1119, e809, i603) {
                return this.put(new SVG.DiffuseLightingEffect(t1119, e809, i603));
            },
            displacementMap: function(t1120, e810, i604, a453, s390) {
                return this.put(new SVG.DisplacementMapEffect(t1120, e810, i604, a453, s390));
            },
            specularLighting: function(t1121, e811, i605, a454) {
                return this.put(new SVG.SpecularLightingEffect(t1121, e811, i605, a454));
            },
            tile: function() {
                return this.put(new SVG.TileEffect);
            },
            turbulence: function(t1122, e812, i606, a455, s391) {
                return this.put(new SVG.TurbulenceEffect(t1122, e812, i606, a455, s391));
            },
            toString: function() {
                return "url(#" + this.attr("id") + ")";
            }
        }
    }), SVG.extend(SVG.Defs, {
        filter: function(t1123) {
            var e813 = this.put(new SVG.Filter);
            return "function" == typeof t1123 && t1123.call(e813, e813), e813;
        }
    }), SVG.extend(SVG.Container, {
        filter: function(t1124) {
            return this.defs().filter(t1124);
        }
    }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, {
        filter: function(t1125) {
            return this.filterer = t1125 instanceof SVG.Element ? t1125 : this.doc().filter(t1125), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr("filter", this.filterer), this.filterer;
        },
        unfilter: function(t1126) {
            return this.filterer && !0 === t1126 && this.filterer.remove(), delete this.filterer, this.attr("filter", null);
        }
    }), SVG.Effect = SVG.invent({
        create: function() {
            this.constructor.call(this);
        },
        inherit: SVG.Element,
        extend: {
            in: function(t1127) {
                return null == t1127 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t1127);
            },
            result: function(t1128) {
                return null == t1128 ? this.attr("result") : this.attr("result", t1128);
            },
            toString: function() {
                return this.result();
            }
        }
    }), SVG.ParentEffect = SVG.invent({
        create: function() {
            this.constructor.call(this);
        },
        inherit: SVG.Parent,
        extend: {
            in: function(t1129) {
                return null == t1129 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t1129);
            },
            result: function(t1130) {
                return null == t1130 ? this.attr("result") : this.attr("result", t1130);
            },
            toString: function() {
                return this.result();
            }
        }
    });
    var t1106 = {
        blend: function(t1131, e814) {
            return this.parent() && this.parent().blend(this, t1131, e814);
        },
        colorMatrix: function(t1132, e815) {
            return this.parent() && this.parent().colorMatrix(t1132, e815).in(this);
        },
        convolveMatrix: function(t1133) {
            return this.parent() && this.parent().convolveMatrix(t1133).in(this);
        },
        componentTransfer: function(t1134) {
            return this.parent() && this.parent().componentTransfer(t1134).in(this);
        },
        composite: function(t1135, e816) {
            return this.parent() && this.parent().composite(this, t1135, e816);
        },
        flood: function(t1136, e817) {
            return this.parent() && this.parent().flood(t1136, e817);
        },
        offset: function(t1137, e818) {
            return this.parent() && this.parent().offset(t1137, e818).in(this);
        },
        image: function(t1138) {
            return this.parent() && this.parent().image(t1138);
        },
        merge: function() {
            return this.parent() && this.parent().merge.apply(this.parent(), [
                this
            ].concat(arguments));
        },
        gaussianBlur: function(t1139, e819) {
            return this.parent() && this.parent().gaussianBlur(t1139, e819).in(this);
        },
        morphology: function(t1140, e820) {
            return this.parent() && this.parent().morphology(t1140, e820).in(this);
        },
        diffuseLighting: function(t1141, e821, i607) {
            return this.parent() && this.parent().diffuseLighting(t1141, e821, i607).in(this);
        },
        displacementMap: function(t1142, e822, i608, a456) {
            return this.parent() && this.parent().displacementMap(this, t1142, e822, i608, a456);
        },
        specularLighting: function(t1143, e823, i609, a457) {
            return this.parent() && this.parent().specularLighting(t1143, e823, i609, a457).in(this);
        },
        tile: function() {
            return this.parent() && this.parent().tile().in(this);
        },
        turbulence: function(t1144, e824, i610, a458, s392) {
            return this.parent() && this.parent().turbulence(t1144, e824, i610, a458, s392).in(this);
        }
    };
    SVG.extend(SVG.Effect, t1106), SVG.extend(SVG.ParentEffect, t1106), SVG.ChildEffect = SVG.invent({
        create: function() {
            this.constructor.call(this);
        },
        inherit: SVG.Element,
        extend: {
            in: function(t1145) {
                this.attr("in", t1145);
            }
        }
    });
    var e799 = {
        blend: function(t1146, e825, i611) {
            this.attr({
                in: t1146,
                in2: e825,
                mode: i611 || "normal"
            });
        },
        colorMatrix: function(t1147, e826) {
            "matrix" == t1147 && (e826 = s389(e826)), this.attr({
                type: t1147,
                values: void 0 === e826 ? null : e826
            });
        },
        convolveMatrix: function(t1148) {
            t1148 = s389(t1148), this.attr({
                order: Math.sqrt(t1148.split(" ").length),
                kernelMatrix: t1148
            });
        },
        composite: function(t1149, e827, i612) {
            this.attr({
                in: t1149,
                in2: e827,
                operator: i612
            });
        },
        flood: function(t1150, e828) {
            this.attr("flood-color", t1150), null != e828 && this.attr("flood-opacity", e828);
        },
        offset: function(t1151, e829) {
            this.attr({
                dx: t1151,
                dy: e829
            });
        },
        image: function(t1152) {
            this.attr("href", t1152, SVG.xlink);
        },
        displacementMap: function(t1153, e830, i613, a459, s393) {
            this.attr({
                in: t1153,
                in2: e830,
                scale: i613,
                xChannelSelector: a459,
                yChannelSelector: s393
            });
        },
        gaussianBlur: function(t1154, e831) {
            null != t1154 || null != e831 ? this.attr("stdDeviation", r323(Array.prototype.slice.call(arguments))) : this.attr("stdDeviation", "0 0");
        },
        morphology: function(t1155, e832) {
            this.attr({
                operator: t1155,
                radius: e832
            });
        },
        tile: function() {},
        turbulence: function(t1156, e833, i614, a460, s394) {
            this.attr({
                numOctaves: e833,
                seed: i614,
                stitchTiles: a460,
                baseFrequency: t1156,
                type: s394
            });
        }
    }, i600 = {
        merge: function() {
            var t1157;
            if (arguments[0] instanceof SVG.Set) {
                var e834 = this;
                arguments[0].each(function(t) {
                    this instanceof SVG.MergeNode ? e834.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e834.put(new SVG.MergeNode(this));
                });
            } else {
                t1157 = Array.isArray(arguments[0]) ? arguments[0] : arguments;
                for(var i615 = 0; i615 < t1157.length; i615++)t1157[i615] instanceof SVG.MergeNode ? this.put(t1157[i615]) : this.put(new SVG.MergeNode(t1157[i615]));
            }
        },
        componentTransfer: function(t1158) {
            if (this.rgb = new SVG.Set, [
                "r",
                "g",
                "b",
                "a"
            ].forEach((function(t1159) {
                this[t1159] = new SVG["Func" + t1159.toUpperCase()]("identity"), this.rgb.add(this[t1159]), this.node.appendChild(this[t1159].node);
            }).bind(this)), t1158) for(var e835 in t1158.rgb && ([
                "r",
                "g",
                "b"
            ].forEach((function(e836) {
                this[e836].attr(t1158.rgb);
            }).bind(this)), delete t1158.rgb), t1158)this[e835].attr(t1158[e835]);
        },
        diffuseLighting: function(t1160, e837, i616) {
            this.attr({
                surfaceScale: t1160,
                diffuseConstant: e837,
                kernelUnitLength: i616
            });
        },
        specularLighting: function(t1161, e838, i617, a461) {
            this.attr({
                surfaceScale: t1161,
                diffuseConstant: e838,
                specularExponent: i617,
                kernelUnitLength: a461
            });
        }
    }, a452 = {
        distantLight: function(t1162, e839) {
            this.attr({
                azimuth: t1162,
                elevation: e839
            });
        },
        pointLight: function(t1163, e840, i618) {
            this.attr({
                x: t1163,
                y: e840,
                z: i618
            });
        },
        spotLight: function(t1164, e841, i619, a462, s395, r324) {
            this.attr({
                x: t1164,
                y: e841,
                z: i619,
                pointsAtX: a462,
                pointsAtY: s395,
                pointsAtZ: r324
            });
        },
        mergeNode: function(t1165) {
            this.attr("in", t1165);
        }
    };
    function s389(t1166) {
        return Array.isArray(t1166) && (t1166 = new SVG.Array(t1166)), t1166.toString().replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " ");
    }
    function r323(t1167) {
        if (!Array.isArray(t1167)) return t1167;
        for(var e842 = 0, i620 = t1167.length, a463 = []; e842 < i620; e842++)a463.push(t1167[e842]);
        return a463.join(" ");
    }
    function o284() {
        var t1168 = function() {};
        for(var e843 in "function" == typeof arguments[arguments.length - 1] && (t1168 = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments)for(var i621 in arguments[e843])t1168(arguments[e843][i621], i621, arguments[e843]);
    }
    [
        "r",
        "g",
        "b",
        "a"
    ].forEach(function(t1169) {
        a452["Func" + t1169.toUpperCase()] = function(t1170) {
            switch(this.attr("type", t1170), t1170){
                case "table":
                    this.attr("tableValues", arguments[1]);
                    break;
                case "linear":
                    this.attr("slope", arguments[1]), this.attr("intercept", arguments[2]);
                    break;
                case "gamma":
                    this.attr("amplitude", arguments[1]), this.attr("exponent", arguments[2]), this.attr("offset", arguments[2]);
            }
        };
    }), o284(e799, function(t1171, e844) {
        var i622 = e844.charAt(0).toUpperCase() + e844.slice(1);
        SVG[i622 + "Effect"] = SVG.invent({
            create: function() {
                this.constructor.call(this, SVG.create("fe" + i622)), t1171.apply(this, arguments), this.result(this.attr("id") + "Out");
            },
            inherit: SVG.Effect,
            extend: {}
        });
    }), o284(i600, function(t1172, e845) {
        var i623 = e845.charAt(0).toUpperCase() + e845.slice(1);
        SVG[i623 + "Effect"] = SVG.invent({
            create: function() {
                this.constructor.call(this, SVG.create("fe" + i623)), t1172.apply(this, arguments), this.result(this.attr("id") + "Out");
            },
            inherit: SVG.ParentEffect,
            extend: {}
        });
    }), o284(a452, function(t1173, e846) {
        var i624 = e846.charAt(0).toUpperCase() + e846.slice(1);
        SVG[i624] = SVG.invent({
            create: function() {
                this.constructor.call(this, SVG.create("fe" + i624)), t1173.apply(this, arguments);
            },
            inherit: SVG.ChildEffect,
            extend: {}
        });
    }), SVG.extend(SVG.MergeEffect, {
        in: function(t1174) {
            return t1174 instanceof SVG.MergeNode ? this.add(t1174, 0) : this.add(new SVG.MergeNode(t1174), 0), this;
        }
    }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, {
        in2: function(t1175) {
            return null == t1175 ? this.parent() && this.parent().select('[result="' + this.attr("in2") + '"]').get(0) || this.attr("in2") : this.attr("in2", t1175);
        }
    }), SVG.filter = {
        sepiatone: [
            .343,
            .669,
            .119,
            0,
            0,
            .249,
            .626,
            .13,
            0,
            0,
            .172,
            .334,
            .111,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ]
    };
}).call(void 0), function() {
    function t1176(t1177, s397, r325, o285, n240, l203, h176) {
        for(var c151 = t1177.slice(s397, r325 || h176), d133 = o285.slice(n240, l203 || h176), g113 = 0, u94 = {
            pos: [
                0,
                0
            ],
            start: [
                0,
                0
            ]
        }, f78 = {
            pos: [
                0,
                0
            ],
            start: [
                0,
                0
            ]
        };;){
            if (c151[g113] = e847.call(u94, c151[g113]), d133[g113] = e847.call(f78, d133[g113]), c151[g113][0] != d133[g113][0] || "M" == c151[g113][0] || "A" == c151[g113][0] && (c151[g113][4] != d133[g113][4] || c151[g113][5] != d133[g113][5]) ? (Array.prototype.splice.apply(c151, [
                g113,
                1
            ].concat(a464.call(u94, c151[g113]))), Array.prototype.splice.apply(d133, [
                g113,
                1
            ].concat(a464.call(f78, d133[g113])))) : (c151[g113] = i625.call(u94, c151[g113]), d133[g113] = i625.call(f78, d133[g113])), ++g113 == c151.length && g113 == d133.length) break;
            g113 == c151.length && c151.push([
                "C",
                u94.pos[0],
                u94.pos[1],
                u94.pos[0],
                u94.pos[1],
                u94.pos[0],
                u94.pos[1]
            ]), g113 == d133.length && d133.push([
                "C",
                f78.pos[0],
                f78.pos[1],
                f78.pos[0],
                f78.pos[1],
                f78.pos[0],
                f78.pos[1]
            ]);
        }
        return {
            start: c151,
            dest: d133
        };
    }
    function e847(t1178) {
        switch(t1178[0]){
            case "z":
            case "Z":
                t1178[0] = "L", t1178[1] = this.start[0], t1178[2] = this.start[1];
                break;
            case "H":
                t1178[0] = "L", t1178[2] = this.pos[1];
                break;
            case "V":
                t1178[0] = "L", t1178[2] = t1178[1], t1178[1] = this.pos[0];
                break;
            case "T":
                t1178[0] = "Q", t1178[3] = t1178[1], t1178[4] = t1178[2], t1178[1] = this.reflection[1], t1178[2] = this.reflection[0];
                break;
            case "S":
                t1178[0] = "C", t1178[6] = t1178[4], t1178[5] = t1178[3], t1178[4] = t1178[2], t1178[3] = t1178[1], t1178[2] = this.reflection[1], t1178[1] = this.reflection[0];
        }
        return t1178;
    }
    function i625(t1179) {
        var e848 = t1179.length;
        return this.pos = [
            t1179[e848 - 2],
            t1179[e848 - 1]
        ], -1 != "SCQT".indexOf(t1179[0]) && (this.reflection = [
            2 * this.pos[0] - t1179[e848 - 4],
            2 * this.pos[1] - t1179[e848 - 3]
        ]), t1179;
    }
    function a464(t1180) {
        var e849 = [
            t1180
        ];
        switch(t1180[0]){
            case "M":
                return this.pos = this.start = [
                    t1180[1],
                    t1180[2]
                ], e849;
            case "L":
                t1180[5] = t1180[3] = t1180[1], t1180[6] = t1180[4] = t1180[2], t1180[1] = this.pos[0], t1180[2] = this.pos[1];
                break;
            case "Q":
                t1180[6] = t1180[4], t1180[5] = t1180[3], t1180[4] = 1 * t1180[4] / 3 + 2 * t1180[2] / 3, t1180[3] = 1 * t1180[3] / 3 + 2 * t1180[1] / 3, t1180[2] = 1 * this.pos[1] / 3 + 2 * t1180[2] / 3, t1180[1] = 1 * this.pos[0] / 3 + 2 * t1180[1] / 3;
                break;
            case "A":
                t1180 = (e849 = function(t1181, e850) {
                    var i626, a465, s398, r326, o286, n241, l204, h177, c152, d134, g114, u95, f79, p72, x45, b62, v48, m24, y46, w37, k33, A27, S17, C16, L15, P14, M9 = Math.abs(e850[1]), T12 = Math.abs(e850[2]), I9 = e850[3] % 360, z7 = e850[4], X4 = e850[5], E3 = e850[6], Y2 = e850[7], F1 = new SVG.Point(t1181), R1 = new SVG.Point(E3, Y2), H1 = [];
                    if (0 === M9 || 0 === T12 || F1.x === R1.x && F1.y === R1.y) return [
                        [
                            "C",
                            F1.x,
                            F1.y,
                            R1.x,
                            R1.y,
                            R1.x,
                            R1.y
                        ]
                    ];
                    i626 = new SVG.Point((F1.x - R1.x) / 2, (F1.y - R1.y) / 2).transform((new SVG.Matrix).rotate(I9)), (a465 = i626.x * i626.x / (M9 * M9) + i626.y * i626.y / (T12 * T12)) > 1 && (M9 *= a465 = Math.sqrt(a465), T12 *= a465);
                    s398 = (new SVG.Matrix).rotate(I9).scale(1 / M9, 1 / T12).rotate(-I9), F1 = F1.transform(s398), R1 = R1.transform(s398), r326 = [
                        R1.x - F1.x,
                        R1.y - F1.y
                    ], n241 = r326[0] * r326[0] + r326[1] * r326[1], o286 = Math.sqrt(n241), r326[0] /= o286, r326[1] /= o286, l204 = n241 < 4 ? Math.sqrt(1 - n241 / 4) : 0, z7 === X4 && (l204 *= -1);
                    h177 = new SVG.Point((R1.x + F1.x) / 2 + l204 * -r326[1], (R1.y + F1.y) / 2 + l204 * r326[0]), c152 = new SVG.Point(F1.x - h177.x, F1.y - h177.y), d134 = new SVG.Point(R1.x - h177.x, R1.y - h177.y), g114 = Math.acos(c152.x / Math.sqrt(c152.x * c152.x + c152.y * c152.y)), c152.y < 0 && (g114 *= -1);
                    u95 = Math.acos(d134.x / Math.sqrt(d134.x * d134.x + d134.y * d134.y)), d134.y < 0 && (u95 *= -1);
                    X4 && g114 > u95 && (u95 += 2 * Math.PI);
                    !X4 && g114 < u95 && (u95 -= 2 * Math.PI);
                    for(p72 = Math.ceil(2 * Math.abs(g114 - u95) / Math.PI), b62 = [], v48 = g114, f79 = (u95 - g114) / p72, x45 = 4 * Math.tan(f79 / 4) / 3, k33 = 0; k33 <= p72; k33++)y46 = Math.cos(v48), m24 = Math.sin(v48), w37 = new SVG.Point(h177.x + y46, h177.y + m24), b62[k33] = [
                        new SVG.Point(w37.x + x45 * m24, w37.y - x45 * y46),
                        w37,
                        new SVG.Point(w37.x - x45 * m24, w37.y + x45 * y46)
                    ], v48 += f79;
                    for(b62[0][0] = b62[0][1].clone(), b62[b62.length - 1][2] = b62[b62.length - 1][1].clone(), s398 = (new SVG.Matrix).rotate(I9).scale(M9, T12).rotate(-I9), k33 = 0, A27 = b62.length; k33 < A27; k33++)b62[k33][0] = b62[k33][0].transform(s398), b62[k33][1] = b62[k33][1].transform(s398), b62[k33][2] = b62[k33][2].transform(s398);
                    for(k33 = 1, A27 = b62.length; k33 < A27; k33++)S17 = (w37 = b62[k33 - 1][2]).x, C16 = w37.y, L15 = (w37 = b62[k33][0]).x, P14 = w37.y, E3 = (w37 = b62[k33][1]).x, Y2 = w37.y, H1.push([
                        "C",
                        S17,
                        C16,
                        L15,
                        P14,
                        E3,
                        Y2
                    ]);
                    return H1;
                }(this.pos, t1180))[0];
        }
        return t1180[0] = "C", this.pos = [
            t1180[5],
            t1180[6]
        ], this.reflection = [
            2 * t1180[5] - t1180[3],
            2 * t1180[6] - t1180[4]
        ], e849;
    }
    function s396(t1182, e851) {
        if (!1 === e851) return !1;
        for(var i627 = e851, a466 = t1182.length; i627 < a466; ++i627)if ("M" == t1182[i627][0]) return i627;
        return !1;
    }
    SVG.extend(SVG.PathArray, {
        morph: function(e852) {
            for(var i628 = this.value, a467 = this.parse(e852), r327 = 0, o287 = 0, n242 = !1, l205 = !1; !1 !== r327 || !1 !== o287;){
                var h178;
                n242 = s396(i628, !1 !== r327 && r327 + 1), l205 = s396(a467, !1 !== o287 && o287 + 1), !1 === r327 && (r327 = 0 == (h178 = new SVG.PathArray(c153.start).bbox()).height || 0 == h178.width ? i628.push(i628[0]) - 1 : i628.push([
                    "M",
                    h178.x + h178.width / 2,
                    h178.y + h178.height / 2
                ]) - 1), !1 === o287 && (o287 = 0 == (h178 = new SVG.PathArray(c153.dest).bbox()).height || 0 == h178.width ? a467.push(a467[0]) - 1 : a467.push([
                    "M",
                    h178.x + h178.width / 2,
                    h178.y + h178.height / 2
                ]) - 1);
                var c153 = t1176(i628, r327, n242, a467, o287, l205);
                i628 = i628.slice(0, r327).concat(c153.start, !1 === n242 ? [] : i628.slice(n242)), a467 = a467.slice(0, o287).concat(c153.dest, !1 === l205 ? [] : a467.slice(l205)), r327 = !1 !== n242 && r327 + c153.start.length, o287 = !1 !== l205 && o287 + c153.dest.length;
            }
            return this.value = i628, this.destination = new SVG.PathArray, this.destination.value = a467, this;
        }
    });
}(), /*! svg.draggable.js - v2.2.2 - 2019-01-08
* https://github.com/svgdotjs/svg.draggable.js
* Copyright (c) 2019 Wout Fierens; Licensed MIT */ (function() {
    function t1183(t1184) {
        t1184.remember("_draggable", this), this.el = t1184;
    }
    t1183.prototype.init = function(t1185, e853) {
        var i629 = this;
        this.constraint = t1185, this.value = e853, this.el.on("mousedown.drag", function(t1186) {
            i629.start(t1186);
        }), this.el.on("touchstart.drag", function(t1187) {
            i629.start(t1187);
        });
    }, t1183.prototype.transformPoint = function(t1188, e854) {
        var i630 = (t1188 = t1188 || window.event).changedTouches && t1188.changedTouches[0] || t1188;
        return this.p.x = i630.clientX - (e854 || 0), this.p.y = i630.clientY, this.p.matrixTransform(this.m);
    }, t1183.prototype.getBBox = function() {
        var t1189 = this.el.bbox();
        return this.el instanceof SVG.Nested && (t1189 = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t1189.x = this.el.x(), t1189.y = this.el.y()), t1189;
    }, t1183.prototype.start = function(t1190) {
        if ("click" != t1190.type && "mousedown" != t1190.type && "mousemove" != t1190.type || 1 == (t1190.which || t1190.buttons)) {
            var e855 = this;
            if (this.el.fire("beforedrag", {
                event: t1190,
                handler: this
            }), !this.el.event().defaultPrevented) {
                t1190.preventDefault(), t1190.stopPropagation(), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();
                var i631, a468 = this.getBBox();
                if (this.el instanceof SVG.Text) switch(i631 = this.el.node.getComputedTextLength(), this.el.attr("text-anchor")){
                    case "middle":
                        i631 /= 2;
                        break;
                    case "start":
                        i631 = 0;
                }
                this.startPoints = {
                    point: this.transformPoint(t1190, i631),
                    box: a468,
                    transform: this.el.transform()
                }, SVG.on(window, "mousemove.drag", function(t1191) {
                    e855.drag(t1191);
                }), SVG.on(window, "touchmove.drag", function(t1192) {
                    e855.drag(t1192);
                }), SVG.on(window, "mouseup.drag", function(t1193) {
                    e855.end(t1193);
                }), SVG.on(window, "touchend.drag", function(t1194) {
                    e855.end(t1194);
                }), this.el.fire("dragstart", {
                    event: t1190,
                    p: this.startPoints.point,
                    m: this.m,
                    handler: this
                });
            }
        }
    }, t1183.prototype.drag = function(t1195) {
        var e856 = this.getBBox(), i632 = this.transformPoint(t1195), a469 = this.startPoints.box.x + i632.x - this.startPoints.point.x, s399 = this.startPoints.box.y + i632.y - this.startPoints.point.y, r328 = this.constraint, o288 = i632.x - this.startPoints.point.x, n243 = i632.y - this.startPoints.point.y;
        if (this.el.fire("dragmove", {
            event: t1195,
            p: i632,
            m: this.m,
            handler: this
        }), this.el.event().defaultPrevented) return i632;
        if ("function" == typeof r328) {
            var l206 = r328.call(this.el, a469, s399, this.m);
            "boolean" == typeof l206 && (l206 = {
                x: l206,
                y: l206
            }), !0 === l206.x ? this.el.x(a469) : !1 !== l206.x && this.el.x(l206.x), !0 === l206.y ? this.el.y(s399) : !1 !== l206.y && this.el.y(l206.y);
        } else "object" == typeof r328 && (null != r328.minX && a469 < r328.minX ? o288 = (a469 = r328.minX) - this.startPoints.box.x : null != r328.maxX && a469 > r328.maxX - e856.width && (o288 = (a469 = r328.maxX - e856.width) - this.startPoints.box.x), null != r328.minY && s399 < r328.minY ? n243 = (s399 = r328.minY) - this.startPoints.box.y : null != r328.maxY && s399 > r328.maxY - e856.height && (n243 = (s399 = r328.maxY - e856.height) - this.startPoints.box.y), null != r328.snapToGrid && (a469 -= a469 % r328.snapToGrid, s399 -= s399 % r328.snapToGrid, o288 -= o288 % r328.snapToGrid, n243 -= n243 % r328.snapToGrid), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({
            x: o288,
            y: n243
        }, !0) : this.el.move(a469, s399));
        return i632;
    }, t1183.prototype.end = function(t1196) {
        var e857 = this.drag(t1196);
        this.el.fire("dragend", {
            event: t1196,
            p: e857,
            m: this.m,
            handler: this
        }), SVG.off(window, "mousemove.drag"), SVG.off(window, "touchmove.drag"), SVG.off(window, "mouseup.drag"), SVG.off(window, "touchend.drag");
    }, SVG.extend(SVG.Element, {
        draggable: function(e858, i633) {
            "function" != typeof e858 && "object" != typeof e858 || (i633 = e858, e858 = !0);
            var a470 = this.remember("_draggable") || new t1183(this);
            return (e858 = void 0 === e858 || e858) ? a470.init(i633 || {}, e858) : (this.off("mousedown.drag"), this.off("touchstart.drag")), this;
        }
    });
}).call(void 0), function() {
    function t1197(t1198) {
        this.el = t1198, t1198.remember("_selectHandler", this), this.pointSelection = {
            isSelected: !1
        }, this.rectSelection = {
            isSelected: !1
        }, this.pointsList = {
            lt: [
                0,
                0
            ],
            rt: [
                "width",
                0
            ],
            rb: [
                "width",
                "height"
            ],
            lb: [
                0,
                "height"
            ],
            t: [
                "width",
                0
            ],
            r: [
                "width",
                "height"
            ],
            b: [
                "width",
                "height"
            ],
            l: [
                0,
                "height"
            ]
        }, this.pointCoord = function(t1199, e859, i634) {
            var a471 = "string" != typeof t1199 ? t1199 : e859[t1199];
            return i634 ? a471 / 2 : a471;
        }, this.pointCoords = function(t1200, e860) {
            var i635 = this.pointsList[t1200];
            return {
                x: this.pointCoord(i635[0], e860, "t" === t1200 || "b" === t1200),
                y: this.pointCoord(i635[1], e860, "r" === t1200 || "l" === t1200)
            };
        };
    }
    t1197.prototype.init = function(t1201, e861) {
        var i636 = this.el.bbox();
        this.options = {};
        var a472 = this.el.selectize.defaults.points;
        for(var s400 in this.el.selectize.defaults)this.options[s400] = this.el.selectize.defaults[s400], void 0 !== e861[s400] && (this.options[s400] = e861[s400]);
        var r329 = [
            "points",
            "pointsExclude"
        ];
        for(var s400 in r329){
            var o289 = this.options[r329[s400]];
            "string" == typeof o289 ? o289 = o289.length > 0 ? o289.split(/\s*,\s*/i) : [] : "boolean" == typeof o289 && "points" === r329[s400] && (o289 = o289 ? a472 : []), this.options[r329[s400]] = o289;
        }
        this.options.points = [
            a472,
            this.options.points
        ].reduce(function(t1202, e862) {
            return t1202.filter(function(t1203) {
                return e862.indexOf(t1203) > -1;
            });
        }), this.options.points = [
            this.options.points,
            this.options.pointsExclude
        ].reduce(function(t1204, e863) {
            return t1204.filter(function(t1205) {
                return e863.indexOf(t1205) < 0;
            });
        }), this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i636.x, i636.y)), this.options.deepSelect && -1 !== [
            "line",
            "polyline",
            "polygon"
        ].indexOf(this.el.type) ? this.selectPoints(t1201) : this.selectRect(t1201), this.observe(), this.cleanup();
    }, t1197.prototype.selectPoints = function(t1206) {
        return this.pointSelection.isSelected = t1206, this.pointSelection.set || (this.pointSelection.set = this.parent.set(), this.drawPoints()), this;
    }, t1197.prototype.getPointArray = function() {
        var t1207 = this.el.bbox();
        return this.el.array().valueOf().map(function(e864) {
            return [
                e864[0] - t1207.x,
                e864[1] - t1207.y
            ];
        });
    }, t1197.prototype.drawPoints = function() {
        for(var t1208 = this, e865 = this.getPointArray(), i637 = 0, a473 = e865.length; i637 < a473; ++i637){
            var s401 = function(e866) {
                return function(i638) {
                    (i638 = i638 || window.event).preventDefault ? i638.preventDefault() : i638.returnValue = !1, i638.stopPropagation();
                    var a474 = i638.pageX || i638.touches[0].pageX, s403 = i638.pageY || i638.touches[0].pageY;
                    t1208.el.fire("point", {
                        x: a474,
                        y: s403,
                        i: e866,
                        event: i638
                    });
                };
            }(i637), r330 = this.drawPoint(e865[i637][0], e865[i637][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + "_point").on("touchstart", s401).on("mousedown", s401);
            this.pointSelection.set.add(r330);
        }
    }, t1197.prototype.drawPoint = function(t1209, e867) {
        var i639 = this.options.pointType;
        switch(i639){
            case "circle":
                return this.drawCircle(t1209, e867);
            case "rect":
                return this.drawRect(t1209, e867);
            default:
                if ("function" == typeof i639) return i639.call(this, t1209, e867);
                throw new Error("Unknown " + i639 + " point type!");
        }
    }, t1197.prototype.drawCircle = function(t1210, e868) {
        return this.nested.circle(this.options.pointSize).center(t1210, e868);
    }, t1197.prototype.drawRect = function(t1211, e869) {
        return this.nested.rect(this.options.pointSize, this.options.pointSize).center(t1211, e869);
    }, t1197.prototype.updatePointSelection = function() {
        var t1212 = this.getPointArray();
        this.pointSelection.set.each(function(e870) {
            this.cx() === t1212[e870][0] && this.cy() === t1212[e870][1] || this.center(t1212[e870][0], t1212[e870][1]);
        });
    }, t1197.prototype.updateRectSelection = function() {
        var t1213 = this, e871 = this.el.bbox();
        if (this.rectSelection.set.get(0).attr({
            width: e871.width,
            height: e871.height
        }), this.options.points.length && this.options.points.map(function(i641, a475) {
            var s404 = t1213.pointCoords(i641, e871);
            t1213.rectSelection.set.get(a475 + 1).center(s404.x, s404.y);
        }), this.options.rotationPoint) {
            var i640 = this.rectSelection.set.length();
            this.rectSelection.set.get(i640 - 1).center(e871.width / 2, 20);
        }
    }, t1197.prototype.selectRect = function(t1214) {
        var e872 = this, i642 = this.el.bbox();
        function a476(t1215) {
            return function(i643) {
                (i643 = i643 || window.event).preventDefault ? i643.preventDefault() : i643.returnValue = !1, i643.stopPropagation();
                var a477 = i643.pageX || i643.touches[0].pageX, s406 = i643.pageY || i643.touches[0].pageY;
                e872.el.fire(t1215, {
                    x: a477,
                    y: s406,
                    event: i643
                });
            };
        }
        if (this.rectSelection.isSelected = t1214, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i642.width, i642.height).addClass(this.options.classRect)), this.options.points.length && this.rectSelection.set.length() < 2) this.options.points.map(function(t1216, s) {
            var r332 = e872.pointCoords(t1216, i642), o290 = e872.drawPoint(r332.x, r332.y).attr("class", e872.options.classPoints + "_" + t1216).on("mousedown", a476(t1216)).on("touchstart", a476(t1216));
            e872.rectSelection.set.add(o290);
        }), this.rectSelection.set.each(function() {
            this.addClass(e872.options.classPoints);
        });
        if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {
            var s405 = function(t1217) {
                (t1217 = t1217 || window.event).preventDefault ? t1217.preventDefault() : t1217.returnValue = !1, t1217.stopPropagation();
                var i644 = t1217.pageX || t1217.touches[0].pageX, a478 = t1217.pageY || t1217.touches[0].pageY;
                e872.el.fire("rot", {
                    x: i644,
                    y: a478,
                    event: t1217
                });
            }, r331 = this.drawPoint(i642.width / 2, 20).attr("class", this.options.classPoints + "_rot").on("touchstart", s405).on("mousedown", s405);
            this.rectSelection.set.add(r331);
        }
    }, t1197.prototype.handler = function() {
        var t1218 = this.el.bbox();
        this.nested.matrix(new SVG.Matrix(this.el).translate(t1218.x, t1218.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();
    }, t1197.prototype.observe = function() {
        var t1219 = this;
        if (MutationObserver) {
            if (this.rectSelection.isSelected || this.pointSelection.isSelected) this.observerInst = this.observerInst || new MutationObserver(function() {
                t1219.handler();
            }), this.observerInst.observe(this.el.node, {
                attributes: !0
            });
            else try {
                this.observerInst.disconnect(), delete this.observerInst;
            } catch (t) {}
        } else this.el.off("DOMAttrModified.select"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on("DOMAttrModified.select", function() {
            t1219.handler();
        });
    }, t1197.prototype.cleanup = function() {
        !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function() {
            this.remove();
        }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function() {
            this.remove();
        }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);
    }, SVG.extend(SVG.Element, {
        selectize: function(e873, i645) {
            return "object" == typeof e873 && (i645 = e873, e873 = !0), (this.remember("_selectHandler") || new t1197(this)).init(void 0 === e873 || e873, i645 || {}), this;
        }
    }), SVG.Element.prototype.selectize.defaults = {
        points: [
            "lt",
            "rt",
            "rb",
            "lb",
            "t",
            "r",
            "b",
            "l"
        ],
        pointsExclude: [],
        classRect: "svg_select_boundingRect",
        classPoints: "svg_select_points",
        pointSize: 7,
        rotationPoint: !0,
        deepSelect: !1,
        pointType: "circle"
    };
}(), function() {
    (function() {
        function t1220(t1221) {
            t1221.remember("_resizeHandler", this), this.el = t1221, this.parameters = {}, this.lastUpdateCall = null, this.p = t1221.doc().node.createSVGPoint();
        }
        t1220.prototype.transformPoint = function(t1222, e874, i646) {
            return this.p.x = t1222 - (this.offset.x - window.pageXOffset), this.p.y = e874 - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i646 || this.m);
        }, t1220.prototype._extractPosition = function(t1223) {
            return {
                x: null != t1223.clientX ? t1223.clientX : t1223.touches[0].clientX,
                y: null != t1223.clientY ? t1223.clientY : t1223.touches[0].clientY
            };
        }, t1220.prototype.init = function(t1224) {
            var e875 = this;
            if (this.stop(), "stop" !== t1224) {
                for(var i647 in this.options = {}, this.el.resize.defaults)this.options[i647] = this.el.resize.defaults[i647], void 0 !== t1224[i647] && (this.options[i647] = t1224[i647]);
                this.el.on("lt.resize", function(t1225) {
                    e875.resize(t1225 || window.event);
                }), this.el.on("rt.resize", function(t1226) {
                    e875.resize(t1226 || window.event);
                }), this.el.on("rb.resize", function(t1227) {
                    e875.resize(t1227 || window.event);
                }), this.el.on("lb.resize", function(t1228) {
                    e875.resize(t1228 || window.event);
                }), this.el.on("t.resize", function(t1229) {
                    e875.resize(t1229 || window.event);
                }), this.el.on("r.resize", function(t1230) {
                    e875.resize(t1230 || window.event);
                }), this.el.on("b.resize", function(t1231) {
                    e875.resize(t1231 || window.event);
                }), this.el.on("l.resize", function(t1232) {
                    e875.resize(t1232 || window.event);
                }), this.el.on("rot.resize", function(t1233) {
                    e875.resize(t1233 || window.event);
                }), this.el.on("point.resize", function(t1234) {
                    e875.resize(t1234 || window.event);
                }), this.update();
            }
        }, t1220.prototype.stop = function() {
            return this.el.off("lt.resize"), this.el.off("rt.resize"), this.el.off("rb.resize"), this.el.off("lb.resize"), this.el.off("t.resize"), this.el.off("r.resize"), this.el.off("b.resize"), this.el.off("l.resize"), this.el.off("rot.resize"), this.el.off("point.resize"), this;
        }, t1220.prototype.resize = function(t1235) {
            var e876 = this;
            this.m = this.el.node.getScreenCTM().inverse(), this.offset = {
                x: window.pageXOffset,
                y: window.pageYOffset
            };
            var i648 = this._extractPosition(t1235.detail.event);
            if (this.parameters = {
                type: this.el.type,
                p: this.transformPoint(i648.x, i648.y),
                x: t1235.detail.x,
                y: t1235.detail.y,
                box: this.el.bbox(),
                rotation: this.el.transform().rotation
            }, "text" === this.el.type && (this.parameters.fontSize = this.el.attr()["font-size"]), void 0 !== t1235.detail.i) {
                var a479 = this.el.array().valueOf();
                this.parameters.i = t1235.detail.i, this.parameters.pointCoords = [
                    a479[t1235.detail.i][0],
                    a479[t1235.detail.i][1]
                ];
            }
            switch(t1235.type){
                case "lt":
                    this.calc = function(t1236, e877) {
                        var i649 = this.snapToGrid(t1236, e877);
                        if (this.parameters.box.width - i649[0] > 0 && this.parameters.box.height - i649[1] > 0) {
                            if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + i649[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i649[0]);
                            i649 = this.checkAspectRatio(i649), this.el.move(this.parameters.box.x + i649[0], this.parameters.box.y + i649[1]).size(this.parameters.box.width - i649[0], this.parameters.box.height - i649[1]);
                        }
                    };
                    break;
                case "rt":
                    this.calc = function(t1237, e878) {
                        var i650 = this.snapToGrid(t1237, e878, 2);
                        if (this.parameters.box.width + i650[0] > 0 && this.parameters.box.height - i650[1] > 0) {
                            if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - i650[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i650[0]);
                            i650 = this.checkAspectRatio(i650, !0), this.el.move(this.parameters.box.x, this.parameters.box.y + i650[1]).size(this.parameters.box.width + i650[0], this.parameters.box.height - i650[1]);
                        }
                    };
                    break;
                case "rb":
                    this.calc = function(t1238, e879) {
                        var i651 = this.snapToGrid(t1238, e879, 0);
                        if (this.parameters.box.width + i651[0] > 0 && this.parameters.box.height + i651[1] > 0) {
                            if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - i651[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i651[0]);
                            i651 = this.checkAspectRatio(i651), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i651[0], this.parameters.box.height + i651[1]);
                        }
                    };
                    break;
                case "lb":
                    this.calc = function(t1239, e880) {
                        var i652 = this.snapToGrid(t1239, e880, 1);
                        if (this.parameters.box.width - i652[0] > 0 && this.parameters.box.height + i652[1] > 0) {
                            if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + i652[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i652[0]);
                            i652 = this.checkAspectRatio(i652, !0), this.el.move(this.parameters.box.x + i652[0], this.parameters.box.y).size(this.parameters.box.width - i652[0], this.parameters.box.height + i652[1]);
                        }
                    };
                    break;
                case "t":
                    this.calc = function(t1240, e881) {
                        var i653 = this.snapToGrid(t1240, e881, 2);
                        if (this.parameters.box.height - i653[1] > 0) {
                            if ("text" === this.parameters.type) return;
                            this.el.move(this.parameters.box.x, this.parameters.box.y + i653[1]).height(this.parameters.box.height - i653[1]);
                        }
                    };
                    break;
                case "r":
                    this.calc = function(t1241, e882) {
                        var i654 = this.snapToGrid(t1241, e882, 0);
                        if (this.parameters.box.width + i654[0] > 0) {
                            if ("text" === this.parameters.type) return;
                            this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i654[0]);
                        }
                    };
                    break;
                case "b":
                    this.calc = function(t1242, e883) {
                        var i655 = this.snapToGrid(t1242, e883, 0);
                        if (this.parameters.box.height + i655[1] > 0) {
                            if ("text" === this.parameters.type) return;
                            this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i655[1]);
                        }
                    };
                    break;
                case "l":
                    this.calc = function(t1243, e884) {
                        var i656 = this.snapToGrid(t1243, e884, 1);
                        if (this.parameters.box.width - i656[0] > 0) {
                            if ("text" === this.parameters.type) return;
                            this.el.move(this.parameters.box.x + i656[0], this.parameters.box.y).width(this.parameters.box.width - i656[0]);
                        }
                    };
                    break;
                case "rot":
                    this.calc = function(t1244, e885) {
                        var i657 = t1244 + this.parameters.p.x, a480 = e885 + this.parameters.p.y, s407 = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2), r333 = Math.atan2(a480 - this.parameters.box.y - this.parameters.box.height / 2, i657 - this.parameters.box.x - this.parameters.box.width / 2), o291 = this.parameters.rotation + 180 * (r333 - s407) / Math.PI + this.options.snapToAngle / 2;
                        this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(o291 - o291 % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);
                    };
                    break;
                case "point":
                    this.calc = function(t1245, e886) {
                        var i658 = this.snapToGrid(t1245, e886, this.parameters.pointCoords[0], this.parameters.pointCoords[1]), a481 = this.el.array().valueOf();
                        a481[this.parameters.i][0] = this.parameters.pointCoords[0] + i658[0], a481[this.parameters.i][1] = this.parameters.pointCoords[1] + i658[1], this.el.plot(a481);
                    };
            }
            this.el.fire("resizestart", {
                dx: this.parameters.x,
                dy: this.parameters.y,
                event: t1235
            }), SVG.on(window, "touchmove.resize", function(t1246) {
                e876.update(t1246 || window.event);
            }), SVG.on(window, "touchend.resize", function() {
                e876.done();
            }), SVG.on(window, "mousemove.resize", function(t1247) {
                e876.update(t1247 || window.event);
            }), SVG.on(window, "mouseup.resize", function() {
                e876.done();
            });
        }, t1220.prototype.update = function(t1248) {
            if (t1248) {
                var e887 = this._extractPosition(t1248), i659 = this.transformPoint(e887.x, e887.y), a482 = i659.x - this.parameters.p.x, s408 = i659.y - this.parameters.p.y;
                this.lastUpdateCall = [
                    a482,
                    s408
                ], this.calc(a482, s408), this.el.fire("resizing", {
                    dx: a482,
                    dy: s408,
                    event: t1248
                });
            } else this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
        }, t1220.prototype.done = function() {
            this.lastUpdateCall = null, SVG.off(window, "mousemove.resize"), SVG.off(window, "mouseup.resize"), SVG.off(window, "touchmove.resize"), SVG.off(window, "touchend.resize"), this.el.fire("resizedone");
        }, t1220.prototype.snapToGrid = function(t1249, e888, i660, a483) {
            var s409;
            return void 0 !== a483 ? s409 = [
                (i660 + t1249) % this.options.snapToGrid,
                (a483 + e888) % this.options.snapToGrid
            ] : (i660 = null == i660 ? 3 : i660, s409 = [
                (this.parameters.box.x + t1249 + (1 & i660 ? 0 : this.parameters.box.width)) % this.options.snapToGrid,
                (this.parameters.box.y + e888 + (2 & i660 ? 0 : this.parameters.box.height)) % this.options.snapToGrid
            ]), t1249 < 0 && (s409[0] -= this.options.snapToGrid), e888 < 0 && (s409[1] -= this.options.snapToGrid), t1249 -= Math.abs(s409[0]) < this.options.snapToGrid / 2 ? s409[0] : s409[0] - (t1249 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e888 -= Math.abs(s409[1]) < this.options.snapToGrid / 2 ? s409[1] : s409[1] - (e888 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t1249, e888, i660, a483);
        }, t1220.prototype.constraintToBox = function(t1250, e889, i661, a484) {
            var s410, r334, o292 = this.options.constraint || {};
            return void 0 !== a484 ? (s410 = i661, r334 = a484) : (s410 = this.parameters.box.x + (1 & i661 ? 0 : this.parameters.box.width), r334 = this.parameters.box.y + (2 & i661 ? 0 : this.parameters.box.height)), void 0 !== o292.minX && s410 + t1250 < o292.minX && (t1250 = o292.minX - s410), void 0 !== o292.maxX && s410 + t1250 > o292.maxX && (t1250 = o292.maxX - s410), void 0 !== o292.minY && r334 + e889 < o292.minY && (e889 = o292.minY - r334), void 0 !== o292.maxY && r334 + e889 > o292.maxY && (e889 = o292.maxY - r334), [
                t1250,
                e889
            ];
        }, t1220.prototype.checkAspectRatio = function(t1251, e890) {
            if (!this.options.saveAspectRatio) return t1251;
            var i662 = t1251.slice(), a485 = this.parameters.box.width / this.parameters.box.height, s411 = this.parameters.box.width + t1251[0], r335 = this.parameters.box.height - t1251[1], o293 = s411 / r335;
            return o293 < a485 ? (i662[1] = s411 / a485 - this.parameters.box.height, e890 && (i662[1] = -i662[1])) : o293 > a485 && (i662[0] = this.parameters.box.width - r335 * a485, e890 && (i662[0] = -i662[0])), i662;
        }, SVG.extend(SVG.Element, {
            resize: function(e891) {
                return (this.remember("_resizeHandler") || new t1220(this)).init(e891 || {}), this;
            }
        }), SVG.Element.prototype.resize.defaults = {
            snapToAngle: .1,
            snapToGrid: 1,
            constraint: {},
            saveAspectRatio: !1
        };
    }).call(this);
}(), void 0 === window.Apex && (window.Apex = {});
var Rt = function() {
    function t1252(e892) {
        a(this, t1252), this.ctx = e892, this.w = e892.w;
    }
    return r(t1252, [
        {
            key: "initModules",
            value: function() {
                this.ctx.publicMethods = [
                    "updateOptions",
                    "updateSeries",
                    "appendData",
                    "appendSeries",
                    "toggleSeries",
                    "showSeries",
                    "hideSeries",
                    "setLocale",
                    "resetSeries",
                    "zoomX",
                    "toggleDataPointSelection",
                    "dataURI",
                    "exportToCSV",
                    "addXaxisAnnotation",
                    "addYaxisAnnotation",
                    "addPointAnnotation",
                    "clearAnnotations",
                    "removeAnnotation",
                    "paper",
                    "destroy"
                ], this.ctx.eventList = [
                    "click",
                    "mousedown",
                    "mousemove",
                    "mouseleave",
                    "touchstart",
                    "touchmove",
                    "touchleave",
                    "mouseup",
                    "touchend"
                ], this.ctx.animations = new b(this.ctx), this.ctx.axes = new K(this.ctx), this.ctx.core = new Yt(this.ctx.el, this.ctx), this.ctx.config = new N({}), this.ctx.data = new B(this.ctx), this.ctx.grid = new U(this.ctx), this.ctx.graphics = new m(this.ctx), this.ctx.coreUtils = new y(this.ctx), this.ctx.crosshairs = new tt(this.ctx), this.ctx.events = new J(this.ctx), this.ctx.exports = new j(this.ctx), this.ctx.localization = new Q(this.ctx), this.ctx.options = new L, this.ctx.responsive = new et(this.ctx), this.ctx.series = new E(this.ctx), this.ctx.theme = new it(this.ctx), this.ctx.formatters = new V(this.ctx), this.ctx.titleSubtitle = new at(this.ctx), this.ctx.legend = new ct(this.ctx), this.ctx.toolbar = new dt(this.ctx), this.ctx.dimensions = new lt(this.ctx), this.ctx.updateHelpers = new Ft(this.ctx), this.ctx.zoomPanSelection = new gt(this.ctx), this.ctx.w.globals.tooltip = new mt(this.ctx);
            }
        }
    ]), t1252;
}(), Ht = function() {
    function t1253(e893) {
        a(this, t1253), this.ctx = e893, this.w = e893.w;
    }
    return r(t1253, [
        {
            key: "clear",
            value: function(t1254) {
                var e894 = t1254.isUpdating;
                this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({
                    isUpdating: e894
                });
            }
        },
        {
            key: "killSVG",
            value: function(t1255) {
                t1255.each(function(t, e) {
                    this.removeClass("*"), this.off(), this.stop();
                }, !0), t1255.ungroup(), t1255.clear();
            }
        },
        {
            key: "clearDomElements",
            value: function(t1256) {
                var e895 = this, i663 = t1256.isUpdating, a486 = this.w.globals.dom.Paper.node;
                a486.parentNode && a486.parentNode.parentNode && !i663 && (a486.parentNode.parentNode.style.minHeight = "unset");
                var s412 = this.w.globals.dom.baseEl;
                s412 && this.ctx.eventList.forEach(function(t1257) {
                    s412.removeEventListener(t1257, e895.ctx.events.documentEvent);
                });
                var r336 = this.w.globals.dom;
                if (null !== this.ctx.el) for(; this.ctx.el.firstChild;)this.ctx.el.removeChild(this.ctx.el.firstChild);
                this.killSVG(r336.Paper), r336.Paper.remove(), r336.elWrap = null, r336.elGraphical = null, r336.elAnnotations = null, r336.elLegendWrap = null, r336.baseEl = null, r336.elGridRect = null, r336.elGridRectMask = null, r336.elGridRectMarkerMask = null, r336.elForecastMask = null, r336.elNonForecastMask = null, r336.elDefs = null;
            }
        }
    ]), t1253;
}(), Dt = new WeakMap;
var Nt = function() {
    function t1258(e896, i664) {
        a(this, t1258), this.opts = i664, this.ctx = this, this.w = new W(i664).init(), this.el = e896, this.w.globals.cuid = x.randomId(), this.w.globals.chartID = this.w.config.chart.id ? x.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new Rt(this).initModules(), this.create = x.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this);
    }
    return r(t1258, [
        {
            key: "render",
            value: function() {
                var t1259 = this;
                return new Promise(function(e897, i665) {
                    if (null !== t1259.el) {
                        void 0 === Apex._chartInstances && (Apex._chartInstances = []), t1259.w.config.chart.id && Apex._chartInstances.push({
                            id: t1259.w.globals.chartID,
                            group: t1259.w.config.chart.group,
                            chart: t1259
                        }), t1259.setLocale(t1259.w.config.chart.defaultLocale);
                        var a487 = t1259.w.config.chart.events.beforeMount;
                        if ("function" == typeof a487 && a487(t1259, t1259.w), t1259.events.fireEvent("beforeMount", [
                            t1259,
                            t1259.w
                        ]), window.addEventListener("resize", t1259.windowResizeHandler), function(t1260, e898) {
                            var i666 = !1;
                            if (t1260.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
                                var a488 = t1260.getBoundingClientRect();
                                "none" !== t1260.style.display && 0 !== a488.width || (i666 = !0);
                            }
                            var s415 = new ResizeObserver(function(a489) {
                                i666 && e898.call(t1260, a489), i666 = !0;
                            });
                            t1260.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(t1260.children).forEach(function(t1261) {
                                return s415.observe(t1261);
                            }) : s415.observe(t1260), Dt.set(e898, s415);
                        }(t1259.el.parentNode, t1259.parentResizeHandler), !t1259.css) {
                            var s413 = t1259.el.getRootNode && t1259.el.getRootNode(), r337 = x.is("ShadowRoot", s413), o294 = t1259.el.ownerDocument, n244 = o294.getElementById("apexcharts-css");
                            !r337 && n244 || (t1259.css = document.createElement("style"), t1259.css.id = "apexcharts-css", t1259.css.textContent = '.apexcharts-canvas {\n  position: relative;\n  user-select: none;\n  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */\n}\n\n\n/* scrollbar is not visible by default for legend, hence forcing the visibility */\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px;\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, .5);\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n}\n\n\n.apexcharts-inner {\n  position: relative;\n}\n\n.apexcharts-text tspan {\n  font-family: inherit;\n}\n\n.legend-mouseover-inactive {\n  transition: 0.15s ease all;\n  opacity: 0.20;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0;\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255, 255, 255, 0.96);\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30, 30, 30, 0.8);\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit;\n}\n\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #ECEFF1;\n  border-bottom: 1px solid #ddd;\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0, 0, 0, 0.7);\n  border-bottom: 1px solid #333;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  font-weight: 600;\n  margin-left: 5px;\n}\n\n.apexcharts-tooltip-title:empty,\n.apexcharts-tooltip-text-y-label:empty,\n.apexcharts-tooltip-text-y-value:empty,\n.apexcharts-tooltip-text-goals-label:empty,\n.apexcharts-tooltip-text-goals-value:empty,\n.apexcharts-tooltip-text-z-value:empty {\n  display: none;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  font-weight: 600;\n}\n\n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-goals-group, \n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  display: flex;\n}\n.apexcharts-tooltip-text-goals-label:not(:empty),\n.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px;\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0px;\n  margin-right: 10px;\n  border-radius: 50%;\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,\n.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px;\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0 !important;\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-box, .apexcharts-custom-tooltip {\n  padding: 4px 8px;\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse;\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0;\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: bold;\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px;\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777;\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 5px;\n}\n\n.apexcharts-xaxistooltip {\n  opacity: 0;\n  padding: 9px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-xaxistooltip:after,\n.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-left: -6px;\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-left: -7px;\n}\n\n.apexcharts-xaxistooltip-bottom:after,\n.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%;\n}\n\n.apexcharts-xaxistooltip-top:after,\n.apexcharts-xaxistooltip-top:before {\n  top: 100%;\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #ECEFF1;\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #ECEFF1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-yaxistooltip {\n  opacity: 0;\n  padding: 4px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-yaxistooltip:after,\n.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-top: -6px;\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-top: -7px;\n}\n\n.apexcharts-yaxistooltip-left:after,\n.apexcharts-yaxistooltip-left:before {\n  left: 100%;\n}\n\n.apexcharts-yaxistooltip-right:after,\n.apexcharts-yaxistooltip-right:before {\n  right: 100%;\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1;\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none;\n}\n\n.apexcharts-xcrosshairs,\n.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,\n.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0;\n}\n\n.apexcharts-selection-rect {\n  cursor: move;\n}\n\n.svg_select_boundingRect, .svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden;\n}\n.apexcharts-selection-rect + g .svg_select_boundingRect,\n.apexcharts-selection-rect + g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden;\n}\n\n.apexcharts-selection-rect + g .svg_select_points_l,\n.apexcharts-selection-rect + g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible;\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2;\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon,\n.apexcharts-reset-icon,\n.apexcharts-pan-icon,\n.apexcharts-selection-icon,\n.apexcharts-menu-icon,\n.apexcharts-toolbar-custom-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6E8192;\n  text-align: center;\n}\n\n.apexcharts-zoom-icon svg,\n.apexcharts-zoomin-icon svg,\n.apexcharts-zoomout-icon svg,\n.apexcharts-reset-icon svg,\n.apexcharts-menu-icon svg {\n  fill: #6E8192;\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(0.76)\n}\n\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg,\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg {\n  fill: #f3f4f5;\n}\n\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg {\n  fill: #008FFB;\n}\n\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg,\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg {\n  fill: #333;\n}\n\n.apexcharts-selection-icon,\n.apexcharts-menu-icon {\n  position: relative;\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px;\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-reset-icon,\n.apexcharts-menu-icon {\n  transform: scale(0.85);\n}\n\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon {\n  transform: scale(0.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px;\n}\n\n.apexcharts-pan-icon {\n  transform: scale(0.62);\n  position: relative;\n  left: 1px;\n  top: 0px;\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6E8192;\n  stroke-width: 2;\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008FFB;\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333;\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0px 6px 2px 6px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: 0.15s ease all;\n  pointer-events: none;\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer;\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee;\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0, 0, 0, 0.7);\n  color: #fff;\n}\n\n@media screen and (min-width: 768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n    opacity: 1;\n  }\n}\n\n.apexcharts-datalabel.apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-pie-label,\n.apexcharts-datalabels,\n.apexcharts-datalabel,\n.apexcharts-datalabel-label,\n.apexcharts-datalabel-value {\n  cursor: default;\n  pointer-events: none;\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: 0.3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease;\n}\n\n.apexcharts-canvas .apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-hide .apexcharts-series-points {\n  opacity: 0;\n}\n\n.apexcharts-gridline,\n.apexcharts-annotation-rect,\n.apexcharts-xaxis-annotation-label,\n.apexcharts-yaxis-annotation-label,\n.apexcharts-point-annotation-label,\n.apexcharts-tooltip .apexcharts-marker,\n.apexcharts-area-series .apexcharts-area,\n.apexcharts-line,\n.apexcharts-zoom-rect,\n.apexcharts-toolbar svg,\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-radar-series path,\n.apexcharts-radar-series polygon {\n  pointer-events: none;\n}\n\n\n/* markers */\n\n.apexcharts-marker {\n  transition: 0.15s ease all;\n}\n\n@keyframes opaque {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n\n/* Resize generated styles */\n\n@keyframes resizeanim {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n}\n\n.resize-triggers,\n.resize-triggers>div,\n.contract-trigger:before {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n}\n\n.resize-triggers>div {\n  background: #eee;\n  overflow: auto;\n}\n\n.contract-trigger:before {\n  width: 200%;\n  height: 200%;\n}', r337 ? s413.prepend(t1259.css) : o294.head.appendChild(t1259.css));
                        }
                        var l207 = t1259.create(t1259.w.config.series, {});
                        if (!l207) return e897(t1259);
                        t1259.mount(l207).then(function() {
                            "function" == typeof t1259.w.config.chart.events.mounted && t1259.w.config.chart.events.mounted(t1259, t1259.w), t1259.events.fireEvent("mounted", [
                                t1259,
                                t1259.w
                            ]), e897(l207);
                        }).catch(function(t1262) {
                            i665(t1262);
                        });
                    } else i665(new Error("Element not found"));
                });
            }
        },
        {
            key: "create",
            value: function(t1263, e899) {
                var i667 = this.w;
                new Rt(this).initModules();
                var a490 = this.w.globals;
                (a490.noData = !1, a490.animationEnded = !1, this.responsive.checkResponsiveConfig(e899), i667.config.xaxis.convertedCatToNumeric) && new D(i667.config).convertCatToNumericXaxis(i667.config, this.ctx);
                if (null === this.el) return a490.animationEnded = !0, null;
                if (this.core.setupElements(), "treemap" === i667.config.chart.type && (i667.config.grid.show = !1, i667.config.yaxis[0].show = !1), 0 === a490.svgWidth) return a490.animationEnded = !0, null;
                var s416 = y.checkComboSeries(t1263);
                a490.comboCharts = s416.comboCharts, a490.comboBarCount = s416.comboBarCount;
                var r338 = t1263.every(function(t1264) {
                    return t1264.data && 0 === t1264.data.length;
                });
                (0 === t1263.length || r338) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(t1263), this.theme.init(), new T(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), a490.noData && a490.collapsedSeries.length !== a490.series.length && !i667.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), a490.axisCharts && (this.core.coreCalculations(), "category" !== i667.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = i667.globals.minX, this.ctx.toolbar.maxX = i667.globals.maxX), this.formatters.heatmapLabelFormatters(), new y(this).getLargestMarkerSize(), this.dimensions.plotCoords();
                var o295 = this.core.xySettings();
                this.grid.createGridMask();
                var n245 = this.core.plotChartType(t1263, o295), l208 = new z(this);
                l208.bringForward(), i667.config.dataLabels.background.enabled && l208.dataLabelsBackground(), this.core.shiftGraphPosition();
                var h179 = {
                    plot: {
                        left: i667.globals.translateX,
                        top: i667.globals.translateY,
                        width: i667.globals.gridWidth,
                        height: i667.globals.gridHeight
                    }
                };
                return {
                    elGraph: n245,
                    xyRatios: o295,
                    elInner: i667.globals.dom.elGraphical,
                    dimensions: h179
                };
            }
        },
        {
            key: "mount",
            value: function() {
                var t1265 = this, e900 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i668 = this, a491 = i668.w;
                return new Promise(function(s417, r339) {
                    if (null === i668.el) return r339(new Error("Not enough data to display or target element not found"));
                    (null === e900 || a491.globals.allSeriesCollapsed) && i668.series.handleNoData(), "treemap" !== a491.config.chart.type && i668.axes.drawAxis(a491.config.chart.type, e900.xyRatios), i668.grid = new U(i668);
                    var o296 = i668.grid.drawGrid();
                    i668.annotations = new P(i668), i668.annotations.drawImageAnnos(), i668.annotations.drawTextAnnos(), "back" === a491.config.grid.position && o296 && a491.globals.dom.elGraphical.add(o296.el);
                    var n246 = new _(t1265.ctx), l209 = new $(t1265.ctx);
                    if (null !== o296 && (n246.xAxisLabelCorrections(o296.xAxisTickWidth), l209.setYAxisTextAlignments(), a491.config.yaxis.map(function(t1266, e901) {
                        -1 === a491.globals.ignoreYAxisIndexes.indexOf(e901) && l209.yAxisTitleRotate(e901, t1266.opposite);
                    })), "back" === a491.config.annotations.position && (a491.globals.dom.Paper.add(a491.globals.dom.elAnnotations), i668.annotations.drawAxesAnnotations()), Array.isArray(e900.elGraph)) for(var h180 = 0; h180 < e900.elGraph.length; h180++)a491.globals.dom.elGraphical.add(e900.elGraph[h180]);
                    else a491.globals.dom.elGraphical.add(e900.elGraph);
                    if ("front" === a491.config.grid.position && o296 && a491.globals.dom.elGraphical.add(o296.el), "front" === a491.config.xaxis.crosshairs.position && i668.crosshairs.drawXCrosshairs(), "front" === a491.config.yaxis[0].crosshairs.position && i668.crosshairs.drawYCrosshairs(), "front" === a491.config.annotations.position && (a491.globals.dom.Paper.add(a491.globals.dom.elAnnotations), i668.annotations.drawAxesAnnotations()), !a491.globals.noData) {
                        if (a491.config.tooltip.enabled && !a491.globals.noData && i668.w.globals.tooltip.drawTooltip(e900.xyRatios), a491.globals.axisCharts && (a491.globals.isXNumeric || a491.config.xaxis.convertedCatToNumeric || a491.globals.isRangeBar)) (a491.config.chart.zoom.enabled || a491.config.chart.selection && a491.config.chart.selection.enabled || a491.config.chart.pan && a491.config.chart.pan.enabled) && i668.zoomPanSelection.init({
                            xyRatios: e900.xyRatios
                        });
                        else {
                            var c154 = a491.config.chart.toolbar.tools;
                            [
                                "zoom",
                                "zoomin",
                                "zoomout",
                                "selection",
                                "pan",
                                "reset"
                            ].forEach(function(t1267) {
                                c154[t1267] = !1;
                            });
                        }
                        a491.config.chart.toolbar.show && !a491.globals.allSeriesCollapsed && i668.toolbar.createToolbar();
                    }
                    a491.globals.memory.methodsToExec.length > 0 && a491.globals.memory.methodsToExec.forEach(function(t1268) {
                        t1268.method(t1268.params, !1, t1268.context);
                    }), a491.globals.axisCharts || a491.globals.noData || i668.core.resizeNonAxisCharts(), s417(i668);
                });
            }
        },
        {
            key: "destroy",
            value: function() {
                var t1269, e902;
                window.removeEventListener("resize", this.windowResizeHandler), this.el.parentNode, t1269 = this.parentResizeHandler, (e902 = Dt.get(t1269)) && (e902.disconnect(), Dt.delete(t1269));
                var i669 = this.w.config.chart.id;
                i669 && Apex._chartInstances.forEach(function(t1270, e903) {
                    t1270.id === x.escapeString(i669) && Apex._chartInstances.splice(e903, 1);
                }), new Ht(this.ctx).clear({
                    isUpdating: !1
                });
            }
        },
        {
            key: "updateOptions",
            value: function(t1271) {
                var e904 = this, i670 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], a492 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s418 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], r340 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], o297 = this.w;
                return o297.globals.selection = void 0, t1271.series && (this.series.resetSeries(!1, !0, !1), t1271.series.length && t1271.series[0].data && (t1271.series = t1271.series.map(function(t1272, i671) {
                    return e904.updateHelpers._extendSeries(t1272, i671);
                })), this.updateHelpers.revertDefaultAxisMinMax()), t1271.xaxis && (t1271 = this.updateHelpers.forceXAxisUpdate(t1271)), t1271.yaxis && (t1271 = this.updateHelpers.forceYAxisUpdate(t1271)), o297.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t1271.theme && (t1271 = this.theme.updateThemeOptions(t1271)), this.updateHelpers._updateOptions(t1271, i670, a492, s418, r340);
            }
        },
        {
            key: "updateSeries",
            value: function() {
                var t1273 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e905 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i672 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                return this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t1273, e905, i672);
            }
        },
        {
            key: "appendSeries",
            value: function(t1274) {
                var e906 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i673 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a493 = this.w.config.series.slice();
                return a493.push(t1274), this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a493, e906, i673);
            }
        },
        {
            key: "appendData",
            value: function(t1275) {
                var e907 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i674 = this;
                i674.w.globals.dataChanged = !0, i674.series.getPreviousPaths();
                for(var a494 = i674.w.config.series.slice(), s419 = 0; s419 < a494.length; s419++)if (null !== t1275[s419] && void 0 !== t1275[s419]) for(var r341 = 0; r341 < t1275[s419].data.length; r341++)a494[s419].data.push(t1275[s419].data[r341]);
                return i674.w.config.series = a494, e907 && (i674.w.globals.initialSeries = x.clone(i674.w.config.series)), this.update();
            }
        },
        {
            key: "update",
            value: function(t1276) {
                var e908 = this;
                return new Promise(function(i675, a495) {
                    new Ht(e908.ctx).clear({
                        isUpdating: !0
                    });
                    var s420 = e908.create(e908.w.config.series, t1276);
                    if (!s420) return i675(e908);
                    e908.mount(s420).then(function() {
                        "function" == typeof e908.w.config.chart.events.updated && e908.w.config.chart.events.updated(e908, e908.w), e908.events.fireEvent("updated", [
                            e908,
                            e908.w
                        ]), e908.w.globals.isDirty = !0, i675(e908);
                    }).catch(function(t1277) {
                        a495(t1277);
                    });
                });
            }
        },
        {
            key: "getSyncedCharts",
            value: function() {
                var t1278 = this.getGroupedCharts(), e909 = [
                    this
                ];
                return t1278.length && (e909 = [], t1278.forEach(function(t1279) {
                    e909.push(t1279);
                })), e909;
            }
        },
        {
            key: "getGroupedCharts",
            value: function() {
                var t1280 = this;
                return Apex._chartInstances.filter(function(t1281) {
                    if (t1281.group) return !0;
                }).map(function(e910) {
                    return t1280.w.config.chart.group === e910.group ? e910.chart : t1280;
                });
            }
        },
        {
            key: "toggleSeries",
            value: function(t1282) {
                return this.series.toggleSeries(t1282);
            }
        },
        {
            key: "highlightSeriesOnLegendHover",
            value: function(t1283, e911) {
                return this.series.toggleSeriesOnHover(t1283, e911);
            }
        },
        {
            key: "showSeries",
            value: function(t1284) {
                this.series.showSeries(t1284);
            }
        },
        {
            key: "hideSeries",
            value: function(t1285) {
                this.series.hideSeries(t1285);
            }
        },
        {
            key: "resetSeries",
            value: function() {
                var t1286 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e912 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                this.series.resetSeries(t1286, e912);
            }
        },
        {
            key: "addEventListener",
            value: function(t1287, e913) {
                this.events.addEventListener(t1287, e913);
            }
        },
        {
            key: "removeEventListener",
            value: function(t1288, e914) {
                this.events.removeEventListener(t1288, e914);
            }
        },
        {
            key: "addXaxisAnnotation",
            value: function(t1289) {
                var e915 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i676 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a496 = this;
                i676 && (a496 = i676), a496.annotations.addXaxisAnnotationExternal(t1289, e915, a496);
            }
        },
        {
            key: "addYaxisAnnotation",
            value: function(t1290) {
                var e916 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i677 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a497 = this;
                i677 && (a497 = i677), a497.annotations.addYaxisAnnotationExternal(t1290, e916, a497);
            }
        },
        {
            key: "addPointAnnotation",
            value: function(t1291) {
                var e917 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i678 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a498 = this;
                i678 && (a498 = i678), a498.annotations.addPointAnnotationExternal(t1291, e917, a498);
            }
        },
        {
            key: "clearAnnotations",
            value: function() {
                var t1292 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0, e918 = this;
                t1292 && (e918 = t1292), e918.annotations.clearAnnotations(e918);
            }
        },
        {
            key: "removeAnnotation",
            value: function(t1293) {
                var e919 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, i679 = this;
                e919 && (i679 = e919), i679.annotations.removeAnnotation(i679, t1293);
            }
        },
        {
            key: "getChartArea",
            value: function() {
                return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner");
            }
        },
        {
            key: "getSeriesTotalXRange",
            value: function(t1294, e920) {
                return this.coreUtils.getSeriesTotalsXRange(t1294, e920);
            }
        },
        {
            key: "getHighestValueInSeries",
            value: function() {
                var t1295 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e921 = new Z(this.ctx);
                return e921.getMinYMaxY(t1295).highestY;
            }
        },
        {
            key: "getLowestValueInSeries",
            value: function() {
                var t1296 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e922 = new Z(this.ctx);
                return e922.getMinYMaxY(t1296).lowestY;
            }
        },
        {
            key: "getSeriesTotal",
            value: function() {
                return this.w.globals.seriesTotals;
            }
        },
        {
            key: "toggleDataPointSelection",
            value: function(t1297, e923) {
                return this.updateHelpers.toggleDataPointSelection(t1297, e923);
            }
        },
        {
            key: "zoomX",
            value: function(t1298, e924) {
                this.ctx.toolbar.zoomUpdateOptions(t1298, e924);
            }
        },
        {
            key: "setLocale",
            value: function(t1299) {
                this.localization.setCurrentLocaleValues(t1299);
            }
        },
        {
            key: "dataURI",
            value: function(t1300) {
                return new j(this.ctx).dataURI(t1300);
            }
        },
        {
            key: "exportToCSV",
            value: function() {
                var t1301 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, e925 = new j(this.ctx);
                return e925.exportToCSV(t1301);
            }
        },
        {
            key: "paper",
            value: function() {
                return this.w.globals.dom.Paper;
            }
        },
        {
            key: "_parentResizeCallback",
            value: function() {
                this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();
            }
        },
        {
            key: "_windowResize",
            value: function() {
                var t1302 = this;
                clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function() {
                    t1302.w.globals.resized = !0, t1302.w.globals.dataChanged = !1, t1302.ctx.update();
                }, 150);
            }
        },
        {
            key: "_windowResizeHandler",
            value: function() {
                var t1303 = this.w.config.chart.redrawOnWindowResize;
                "function" == typeof t1303 && (t1303 = t1303()), t1303 && this._windowResize();
            }
        }
    ], [
        {
            key: "getChartByID",
            value: function(t1304) {
                var e926 = x.escapeString(t1304), i680 = Apex._chartInstances.filter(function(t1305) {
                    return t1305.id === e926;
                })[0];
                return i680 && i680.chart;
            }
        },
        {
            key: "initOnLoad",
            value: function() {
                for(var e927 = document.querySelectorAll("[data-apexcharts]"), i681 = 0; i681 < e927.length; i681++)new t1258(e927[i681], JSON.parse(e927[i681].getAttribute("data-options"))).render();
            }
        },
        {
            key: "exec",
            value: function(t1306, e928) {
                var i682 = this.getChartByID(t1306);
                if (i682) {
                    i682.w.globals.isExecCalled = !0;
                    var a499 = null;
                    if (-1 !== i682.publicMethods.indexOf(e928)) {
                        for(var s421 = arguments.length, r342 = new Array(s421 > 2 ? s421 - 2 : 0), o298 = 2; o298 < s421; o298++)r342[o298 - 2] = arguments[o298];
                        a499 = i682[e928].apply(i682, r342);
                    }
                    return a499;
                }
            }
        },
        {
            key: "merge",
            value: function(t1307, e929) {
                return x.extend(t1307, e929);
            }
        }
    ]), t1258;
}();
module.exports = Nt;

},{}],"2LSE6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// jshint esversion: 9
var _dollarsFormat = require("../util/dollarsFormat");
function labelFormatter(value) {
    // Formats chart price labels as currency, per million or thousand
    if (value >= 1000000) return (0, _dollarsFormat.dollarsDec).format(value / 1000000) + "M";
    else return (0, _dollarsFormat.dollarsWhole).format(value / 1000) + "k";
}
const defaultChartOptions = {
    series: [
        {
            name: "",
            data: [
                null
            ]
        }, 
    ],
    chart: {
        width: "100%",
        height: "100%",
        type: "line",
        toolbar: {
            show: false
        },
        fontFamily: "DM Sans, sans-serif",
        fontSize: "17px",
        zoom: {
            enabled: false
        }
    },
    grid: {
        padding: {
            left: 20
        }
    },
    stroke: {
        curve: "straight",
        width: 2,
        colors: "#6590b9"
    },
    markers: {
        size: 5,
        colors: "#6590b9",
        strokeColors: "#fff",
        strokeWidth: 2,
        strokeOpacity: 0.9,
        strokeDashArray: 0,
        fillOpacity: 1,
        discrete: [],
        shape: "circle",
        radius: 2,
        offsetX: 0,
        offsetY: 0,
        onClick: undefined,
        onDblClick: undefined,
        showNullDataPoints: true,
        hover: {
            size: undefined,
            sizeOffset: 3
        }
    },
    dataLabels: {
        enabled: false,
        formatter: labelFormatter
    },
    title: {
        text: "Click a data point on the map...",
        align: "left"
    },
    xaxis: {
        // showForNullSeries: false, // Hide axis until data selected
        categories: [
            "Click a data point on the map..."
        ],
        labels: {
            hideOverlappingLabels: true,
            style: {
                fontSize: "15px"
            }
        },
        tooltip: {
            style: {
                fontSize: "17px"
            }
        }
    },
    yaxis: {
        showForNullSeries: false,
        title: {
            text: "Typical Home Price",
            style: {
                fontSize: "15px"
            }
        },
        labels: {
            offsetX: 8,
            maxWidth: "auto",
            formatter: labelFormatter,
            hideOverlappingLabels: true
        }
    },
    tooltip: {
        x: {
            show: true
        },
        marker: {
            show: false
        },
        style: {
            fontSize: "15px"
        }
    }
};
exports.default = defaultChartOptions;

},{"../util/dollarsFormat":"k9D44","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cjhRo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function e(e1, t1) {
    for(var o1 = 0; o1 < t1.length; o1++){
        var n1 = t1[o1];
        n1.enumerable = n1.enumerable || !1, n1.configurable = !0, "value" in n1 && (n1.writable = !0), Object.defineProperty(e1, n1.key, n1);
    }
}
function t(e2) {
    return function(e3) {
        if (Array.isArray(e3)) return o(e3);
    }(e2) || function(e4) {
        if ("undefined" != typeof Symbol && Symbol.iterator in Object(e4)) return Array.from(e4);
    }(e2) || function(e5, t2) {
        if (!e5) return;
        if ("string" == typeof e5) return o(e5, t2);
        var n2 = Object.prototype.toString.call(e5).slice(8, -1);
        "Object" === n2 && e5.constructor && (n2 = e5.constructor.name);
        if ("Map" === n2 || "Set" === n2) return Array.from(e5);
        if ("Arguments" === n2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return o(e5, t2);
    }(e2) || function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
}
function o(e6, t3) {
    (null == t3 || t3 > e6.length) && (t3 = e6.length);
    for(var o2 = 0, n3 = new Array(t3); o2 < t3; o2++)n3[o2] = e6[o2];
    return n3;
}
var n, i, a, r, s, l = (n = [
    "a[href]",
    "area[href]",
    'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',
    "select:not([disabled]):not([aria-hidden])",
    "textarea:not([disabled]):not([aria-hidden])",
    "button:not([disabled]):not([aria-hidden])",
    "iframe",
    "object",
    "embed",
    "[contenteditable]",
    '[tabindex]:not([tabindex^="-"])'
], i = function() {
    function o3(e7) {
        var n4 = e7.targetModal, i2 = e7.triggers, a2 = void 0 === i2 ? [] : i2, r2 = e7.onShow, s1 = void 0 === r2 ? function() {} : r2, l1 = e7.onClose, c = void 0 === l1 ? function() {} : l1, d = e7.openTrigger, u = void 0 === d ? "data-micromodal-trigger" : d, f = e7.closeTrigger, h = void 0 === f ? "data-micromodal-close" : f, v = e7.openClass, g = void 0 === v ? "is-open" : v, m = e7.disableScroll, b = void 0 !== m && m, y = e7.disableFocus, p = void 0 !== y && y, w = e7.awaitCloseAnimation, E = void 0 !== w && w, k = e7.awaitOpenAnimation, M = void 0 !== k && k, A = e7.debugMode, C = void 0 !== A && A;
        !function(e8, t4) {
            if (!(e8 instanceof t4)) throw new TypeError("Cannot call a class as a function");
        }(this, o3), this.modal = document.getElementById(n4), this.config = {
            debugMode: C,
            disableScroll: b,
            openTrigger: u,
            closeTrigger: h,
            openClass: g,
            onShow: s1,
            onClose: c,
            awaitCloseAnimation: E,
            awaitOpenAnimation: M,
            disableFocus: p
        }, a2.length > 0 && this.registerTriggers.apply(this, t(a2)), this.onClick = this.onClick.bind(this), this.onKeydown = this.onKeydown.bind(this);
    }
    var i1, a1, r1;
    return i1 = o3, a1 = [
        {
            key: "registerTriggers",
            value: function() {
                for(var e9 = this, t5 = arguments.length, o4 = new Array(t5), n5 = 0; n5 < t5; n5++)o4[n5] = arguments[n5];
                o4.filter(Boolean).forEach(function(t6) {
                    t6.addEventListener("click", function(t7) {
                        return e9.showModal(t7);
                    });
                });
            }
        },
        {
            key: "showModal",
            value: function() {
                var e10 = this, t8 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                if (this.activeElement = document.activeElement, this.modal.setAttribute("aria-hidden", "false"), this.modal.classList.add(this.config.openClass), this.scrollBehaviour("disable"), this.addEventListeners(), this.config.awaitOpenAnimation) {
                    var o5 = function t9() {
                        e10.modal.removeEventListener("animationend", t9, !1), e10.setFocusToFirstNode();
                    };
                    this.modal.addEventListener("animationend", o5, !1);
                } else this.setFocusToFirstNode();
                this.config.onShow(this.modal, this.activeElement, t8);
            }
        },
        {
            key: "closeModal",
            value: function() {
                var e11 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, t10 = this.modal;
                if (this.modal.setAttribute("aria-hidden", "true"), this.removeEventListeners(), this.scrollBehaviour("enable"), this.activeElement && this.activeElement.focus && this.activeElement.focus(), this.config.onClose(this.modal, this.activeElement, e11), this.config.awaitCloseAnimation) {
                    var o6 = this.config.openClass;
                    this.modal.addEventListener("animationend", function e12() {
                        t10.classList.remove(o6), t10.removeEventListener("animationend", e12, !1);
                    }, !1);
                } else t10.classList.remove(this.config.openClass);
            }
        },
        {
            key: "closeModalById",
            value: function(e13) {
                this.modal = document.getElementById(e13), this.modal && this.closeModal();
            }
        },
        {
            key: "scrollBehaviour",
            value: function(e14) {
                if (this.config.disableScroll) {
                    var t11 = document.querySelector("body");
                    switch(e14){
                        case "enable":
                            Object.assign(t11.style, {
                                overflow: ""
                            });
                            break;
                        case "disable":
                            Object.assign(t11.style, {
                                overflow: "hidden"
                            });
                    }
                }
            }
        },
        {
            key: "addEventListeners",
            value: function() {
                this.modal.addEventListener("touchstart", this.onClick), this.modal.addEventListener("click", this.onClick), document.addEventListener("keydown", this.onKeydown);
            }
        },
        {
            key: "removeEventListeners",
            value: function() {
                this.modal.removeEventListener("touchstart", this.onClick), this.modal.removeEventListener("click", this.onClick), document.removeEventListener("keydown", this.onKeydown);
            }
        },
        {
            key: "onClick",
            value: function(e15) {
                (e15.target.hasAttribute(this.config.closeTrigger) || e15.target.parentNode.hasAttribute(this.config.closeTrigger)) && (e15.preventDefault(), e15.stopPropagation(), this.closeModal(e15));
            }
        },
        {
            key: "onKeydown",
            value: function(e16) {
                27 === e16.keyCode && this.closeModal(e16), 9 === e16.keyCode && this.retainFocus(e16);
            }
        },
        {
            key: "getFocusableNodes",
            value: function() {
                var e17 = this.modal.querySelectorAll(n);
                return Array.apply(void 0, t(e17));
            }
        },
        {
            key: "setFocusToFirstNode",
            value: function() {
                var e18 = this;
                if (!this.config.disableFocus) {
                    var t12 = this.getFocusableNodes();
                    if (0 !== t12.length) {
                        var o7 = t12.filter(function(t13) {
                            return !t13.hasAttribute(e18.config.closeTrigger);
                        });
                        o7.length > 0 && o7[0].focus(), 0 === o7.length && t12[0].focus();
                    }
                }
            }
        },
        {
            key: "retainFocus",
            value: function(e19) {
                var t14 = this.getFocusableNodes();
                if (0 !== t14.length) {
                    if (t14 = t14.filter(function(e20) {
                        return null !== e20.offsetParent;
                    }), this.modal.contains(document.activeElement)) {
                        var o8 = t14.indexOf(document.activeElement);
                        e19.shiftKey && 0 === o8 && (t14[t14.length - 1].focus(), e19.preventDefault()), !e19.shiftKey && t14.length > 0 && o8 === t14.length - 1 && (t14[0].focus(), e19.preventDefault());
                    } else t14[0].focus();
                }
            }
        }
    ], e(i1.prototype, a1), r1 && e(i1, r1), o3;
}(), a = null, r = function(e21) {
    if (!document.getElementById(e21)) return console.warn("MicroModal: \u2757Seems like you have missed %c'".concat(e21, "'"), "background-color: #f8f9fa;color: #50596c;font-weight: bold;", "ID somewhere in your code. Refer example below to resolve it."), console.warn("%cExample:", "background-color: #f8f9fa;color: #50596c;font-weight: bold;", '<div class="modal" id="'.concat(e21, '"></div>')), !1;
}, s = function(e22, t15) {
    if (function(e23) {
        e23.length <= 0 && (console.warn("MicroModal: \u2757Please specify at least one %c'micromodal-trigger'", "background-color: #f8f9fa;color: #50596c;font-weight: bold;", "data attribute."), console.warn("%cExample:", "background-color: #f8f9fa;color: #50596c;font-weight: bold;", '<a href="#" data-micromodal-trigger="my-modal"></a>'));
    }(e22), !t15) return !0;
    for(var o9 in t15)r(o9);
    return !0;
}, {
    init: function(e24) {
        var o10 = Object.assign({}, {
            openTrigger: "data-micromodal-trigger"
        }, e24), n6 = t(document.querySelectorAll("[".concat(o10.openTrigger, "]"))), r3 = function(e25, t16) {
            var o11 = [];
            return e25.forEach(function(e26) {
                var n7 = e26.attributes[t16].value;
                void 0 === o11[n7] && (o11[n7] = []), o11[n7].push(e26);
            }), o11;
        }(n6, o10.openTrigger);
        if (!0 !== o10.debugMode || !1 !== s(n6, r3)) for(var l2 in r3){
            var c = r3[l2];
            o10.targetModal = l2, o10.triggers = t(c), a = new i(o10);
        }
    },
    show: function(e27, t17) {
        var o12 = t17 || {};
        o12.targetModal = e27, !0 === o12.debugMode && !1 === r(e27) || (a && a.removeEventListeners(), (a = new i(o12)).showModal());
    },
    close: function(e28) {
        e28 ? a.closeModalById(e28) : a.closeModal();
    }
});
"undefined" != typeof window && (window.MicroModal = l);
exports.default = l;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eE3bL":[function(require,module,exports) {
module.exports = JSON.parse('["1996","1997","1998","1999","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019","2020","2021","2022"]');

},{}]},["euTuy","igcvL"], "igcvL", "parcelRequire0793")

//# sourceMappingURL=index.5baa4167.js.map
